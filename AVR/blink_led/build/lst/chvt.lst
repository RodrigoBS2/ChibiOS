   1               		.file	"chvt.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.vt_insert_first.constprop.3,"ax",@progbits
  12               	vt_insert_first.constprop.3:
  13               	.LFB213:
  14               		.file 1 "../../../os/rt/src/chvt.c"
   1:../../../os/rt/src/chvt.c **** /*
   2:../../../os/rt/src/chvt.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chvt.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chvt.c **** 
   5:../../../os/rt/src/chvt.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chvt.c **** 
   7:../../../os/rt/src/chvt.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chvt.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chvt.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chvt.c **** 
  11:../../../os/rt/src/chvt.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chvt.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chvt.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chvt.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chvt.c **** 
  16:../../../os/rt/src/chvt.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chvt.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chvt.c **** */
  19:../../../os/rt/src/chvt.c **** 
  20:../../../os/rt/src/chvt.c **** /**
  21:../../../os/rt/src/chvt.c ****  * @file    rt/src/chvt.c
  22:../../../os/rt/src/chvt.c ****  * @brief   Time and Virtual Timers module code.
  23:../../../os/rt/src/chvt.c ****  *
  24:../../../os/rt/src/chvt.c ****  * @addtogroup time
  25:../../../os/rt/src/chvt.c ****  * @details Time and Virtual Timers related APIs and services.
  26:../../../os/rt/src/chvt.c ****  * @{
  27:../../../os/rt/src/chvt.c ****  */
  28:../../../os/rt/src/chvt.c **** 
  29:../../../os/rt/src/chvt.c **** #include <string.h>
  30:../../../os/rt/src/chvt.c **** 
  31:../../../os/rt/src/chvt.c **** #include "ch.h"
  32:../../../os/rt/src/chvt.c **** 
  33:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  34:../../../os/rt/src/chvt.c **** /* Module local definitions.                                                 */
  35:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  36:../../../os/rt/src/chvt.c **** 
  37:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  38:../../../os/rt/src/chvt.c **** #define VT_MAX_DELAY                                                        \
  39:../../../os/rt/src/chvt.c ****   (((sysinterval_t)TIME_MAX_SYSTIME) &                                      \
  40:../../../os/rt/src/chvt.c ****    ~(sysinterval_t)(((sysinterval_t)1 << (CH_CFG_ST_RESOLUTION / 2)) - (sysinterval_t)1))
  41:../../../os/rt/src/chvt.c **** #endif
  42:../../../os/rt/src/chvt.c **** 
  43:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  44:../../../os/rt/src/chvt.c **** /* Module exported variables.                                                */
  45:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  46:../../../os/rt/src/chvt.c **** 
  47:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  48:../../../os/rt/src/chvt.c **** /* Module local types.                                                       */
  49:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  50:../../../os/rt/src/chvt.c **** 
  51:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  52:../../../os/rt/src/chvt.c **** /* Module local variables.                                                   */
  53:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  54:../../../os/rt/src/chvt.c **** 
  55:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  56:../../../os/rt/src/chvt.c **** /* Module local functions.                                                   */
  57:../../../os/rt/src/chvt.c **** /*===========================================================================*/
  58:../../../os/rt/src/chvt.c **** 
  59:../../../os/rt/src/chvt.c **** #if (CH_CFG_ST_TIMEDELTA > 0) || defined(__DOXYGEN__)
  60:../../../os/rt/src/chvt.c **** /**
  61:../../../os/rt/src/chvt.c ****  * @brief   Alarm time setup.
  62:../../../os/rt/src/chvt.c ****  * @note    An RFCU fault is registered if the system time skips past
  63:../../../os/rt/src/chvt.c ****  *          <tt>(now + delay)</tt>, the deadline is skipped forward
  64:../../../os/rt/src/chvt.c ****  *          in order to compensate for the event.
  65:../../../os/rt/src/chvt.c ****  *
  66:../../../os/rt/src/chvt.c ****  * @param[in] vtlp      pointer to a @p virtual_timers_list_t structure
  67:../../../os/rt/src/chvt.c ****  * @param[in] now       last known system time
  68:../../../os/rt/src/chvt.c ****  * @param[in] delay     delay over @p now
  69:../../../os/rt/src/chvt.c ****  */
  70:../../../os/rt/src/chvt.c **** static void vt_set_alarm(virtual_timers_list_t *vtlp,
  71:../../../os/rt/src/chvt.c ****                          systime_t now,
  72:../../../os/rt/src/chvt.c ****                          sysinterval_t delay) {
  73:../../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
  74:../../../os/rt/src/chvt.c **** 
  75:../../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
  76:../../../os/rt/src/chvt.c ****   currdelta = vtlp->lastdelta;
  77:../../../os/rt/src/chvt.c **** 
  78:../../../os/rt/src/chvt.c ****   if (delay < currdelta) {
  79:../../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
  80:../../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
  81:../../../os/rt/src/chvt.c ****     delay = currdelta;
  82:../../../os/rt/src/chvt.c ****   }
  83:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
  84:../../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
  85:../../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
  86:../../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
  87:../../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
  88:../../../os/rt/src/chvt.c ****   }
  89:../../../os/rt/src/chvt.c **** #endif
  90:../../../os/rt/src/chvt.c **** 
  91:../../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
  92:../../../os/rt/src/chvt.c ****   while (true) {
  93:../../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
  94:../../../os/rt/src/chvt.c ****     systime_t newnow;
  95:../../../os/rt/src/chvt.c **** 
  96:../../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
  97:../../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, delay));
  98:../../../os/rt/src/chvt.c **** 
  99:../../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
 100:../../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
 101:../../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
 102:../../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 103:../../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 104:../../../os/rt/src/chvt.c ****        architecture.*/
 105:../../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 106:../../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(now, newnow);
 107:../../../os/rt/src/chvt.c ****     if (likely(nowdelta < delay)) {
 108:../../../os/rt/src/chvt.c ****       break;
 109:../../../os/rt/src/chvt.c ****     }
 110:../../../os/rt/src/chvt.c **** 
 111:../../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 112:../../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 113:../../../os/rt/src/chvt.c **** 
 114:../../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 115:../../../os/rt/src/chvt.c ****     now = newnow;
 116:../../../os/rt/src/chvt.c ****     delay = currdelta;
 117:../../../os/rt/src/chvt.c ****   }
 118:../../../os/rt/src/chvt.c **** 
 119:../../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 120:../../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 121:../../../os/rt/src/chvt.c ****   if (currdelta > vtlp->lastdelta) {
 122:../../../os/rt/src/chvt.c ****     vtlp->lastdelta = currdelta;
 123:../../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 124:../../../os/rt/src/chvt.c ****   }
 125:../../../os/rt/src/chvt.c **** #else
 126:../../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 127:../../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 128:../../../os/rt/src/chvt.c **** #endif
 129:../../../os/rt/src/chvt.c **** }
 130:../../../os/rt/src/chvt.c **** 
 131:../../../os/rt/src/chvt.c **** /**
 132:../../../os/rt/src/chvt.c ****  * @brief   Inserts a timer as first element in a delta list.
 133:../../../os/rt/src/chvt.c ****  * @note    This is the special case when the delta list is initially empty.
 134:../../../os/rt/src/chvt.c ****  *
 135:../../../os/rt/src/chvt.c ****  * @param[in] vtlp      pointer to a @p virtual_timers_list_t structure
 136:../../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t object
 137:../../../os/rt/src/chvt.c ****  * @param[in] now       last known system time
 138:../../../os/rt/src/chvt.c ****  * @param[in] delay     delay over @p now
 139:../../../os/rt/src/chvt.c ****  */
 140:../../../os/rt/src/chvt.c **** static void vt_insert_first(virtual_timers_list_t *vtlp,
  15               		.loc 1 140 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF92      		push r12
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 12, -2
  22 0002 DF92      		push r13
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 13, -3
  26 0004 EF92      		push r14
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 14, -4
  30 0006 FF92      		push r15
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 15, -5
  34 0008 0F93      		push r16
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 16, -6
  38 000a 1F93      		push r17
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 17, -7
  42 000c CF93      		push r28
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 28, -8
  46 000e DF93      		push r29
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 29, -9
  50               	/* prologue: function */
  51               	/* frame size = 0 */
  52               	/* stack size = 8 */
  53               	.L__stack_usage = 8
  54 0010 FC01      		movw r30,r24
  55 0012 8B01      		movw r16,r22
  56               	.LVL1:
 141:../../../os/rt/src/chvt.c ****                             virtual_timer_t *vtp,
 142:../../../os/rt/src/chvt.c ****                             systime_t now,
 143:../../../os/rt/src/chvt.c ****                             sysinterval_t delay) {
 144:../../../os/rt/src/chvt.c ****   sysinterval_t currdelta;
 145:../../../os/rt/src/chvt.c **** 
 146:../../../os/rt/src/chvt.c ****   /* The delta list is empty, the current time becomes the new
 147:../../../os/rt/src/chvt.c ****      delta list base time, the timer is inserted.*/
 148:../../../os/rt/src/chvt.c ****   vtlp->lasttime = now;
  57               		.loc 1 148 0
  58 0014 7093 0000 		sts ch0+13+1,r23
  59 0018 6093 0000 		sts ch0+13,r22
  60               	.LVL2:
  61               	.LBB158:
  62               	.LBB159:
  63               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 345:../../../os/rt/include/chlists.h **** 
 346:../../../os/rt/include/chlists.h ****   return p;
 347:../../../os/rt/include/chlists.h **** }
 348:../../../os/rt/include/chlists.h **** 
 349:../../../os/rt/include/chlists.h **** /**
 350:../../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 351:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 352:../../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 353:../../../os/rt/include/chlists.h ****  *
 354:../../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 355:../../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 356:../../../os/rt/include/chlists.h ****  *
 357:../../../os/rt/include/chlists.h ****  * @notapi
 358:../../../os/rt/include/chlists.h ****  */
 359:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 360:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 361:../../../os/rt/include/chlists.h **** 
 362:../../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 363:../../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 364:../../../os/rt/include/chlists.h **** 
 365:../../../os/rt/include/chlists.h ****   return p;
 366:../../../os/rt/include/chlists.h **** }
 367:../../../os/rt/include/chlists.h **** 
 368:../../../os/rt/include/chlists.h **** /**
 369:../../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 370:../../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 371:../../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 372:../../../os/rt/include/chlists.h ****  *
 373:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 374:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 375:../../../os/rt/include/chlists.h ****  *
 376:../../../os/rt/include/chlists.h ****  * @notapi
 377:../../../os/rt/include/chlists.h ****  */
 378:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 379:../../../os/rt/include/chlists.h **** 
 380:../../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 381:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 382:../../../os/rt/include/chlists.h **** 
 383:../../../os/rt/include/chlists.h ****   return p;
 384:../../../os/rt/include/chlists.h **** }
 385:../../../os/rt/include/chlists.h **** 
 386:../../../os/rt/include/chlists.h **** /**
 387:../../../os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 388:../../../os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 389:../../../os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 390:../../../os/rt/include/chlists.h ****  *          than zero.
 391:../../../os/rt/include/chlists.h ****  *
 392:../../../os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 393:../../../os/rt/include/chlists.h ****  *
 394:../../../os/rt/include/chlists.h ****  * @notapi
 395:../../../os/rt/include/chlists.h ****  */
 396:../../../os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 397:../../../os/rt/include/chlists.h **** 
 398:../../../os/rt/include/chlists.h ****   pqp->next = pqp;
 399:../../../os/rt/include/chlists.h ****   pqp->prev = pqp;
 400:../../../os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
 401:../../../os/rt/include/chlists.h **** }
 402:../../../os/rt/include/chlists.h **** 
 403:../../../os/rt/include/chlists.h **** /**
 404:../../../os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 405:../../../os/rt/include/chlists.h ****  *          returns it.
 406:../../../os/rt/include/chlists.h ****  *
 407:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 408:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 409:../../../os/rt/include/chlists.h ****  *
 410:../../../os/rt/include/chlists.h ****  * @notapi
 411:../../../os/rt/include/chlists.h ****  */
 412:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 413:../../../os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 414:../../../os/rt/include/chlists.h **** 
 415:../../../os/rt/include/chlists.h ****   pqp->next       = p->next;
 416:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 417:../../../os/rt/include/chlists.h **** 
 418:../../../os/rt/include/chlists.h ****   return p;
 419:../../../os/rt/include/chlists.h **** }
 420:../../../os/rt/include/chlists.h **** 
 421:../../../os/rt/include/chlists.h **** /**
 422:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 423:../../../os/rt/include/chlists.h ****  *          its peers.
 424:../../../os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 425:../../../os/rt/include/chlists.h ****  *          equal priority.
 426:../../../os/rt/include/chlists.h ****  *
 427:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 428:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 429:../../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 430:../../../os/rt/include/chlists.h ****  *
 431:../../../os/rt/include/chlists.h ****  * @notapi
 432:../../../os/rt/include/chlists.h ****  */
 433:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
 434:../../../os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 435:../../../os/rt/include/chlists.h **** 
 436:../../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 437:../../../os/rt/include/chlists.h ****   do {
 438:../../../os/rt/include/chlists.h ****     pqp = pqp->next;
 439:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 440:../../../os/rt/include/chlists.h **** 
 441:../../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 442:../../../os/rt/include/chlists.h ****   p->next       = pqp;
 443:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 444:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 445:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 446:../../../os/rt/include/chlists.h **** 
 447:../../../os/rt/include/chlists.h ****   return p;
 448:../../../os/rt/include/chlists.h **** }
 449:../../../os/rt/include/chlists.h **** 
 450:../../../os/rt/include/chlists.h **** /**
 451:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 452:../../../os/rt/include/chlists.h ****  *          its peers.
 453:../../../os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 454:../../../os/rt/include/chlists.h ****  *          equal priority.
 455:../../../os/rt/include/chlists.h ****  *
 456:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 457:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 458:../../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 459:../../../os/rt/include/chlists.h ****  *
 460:../../../os/rt/include/chlists.h ****  * @notapi
 461:../../../os/rt/include/chlists.h ****  */
 462:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 463:../../../os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 464:../../../os/rt/include/chlists.h **** 
 465:../../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 466:../../../os/rt/include/chlists.h ****   do {
 467:../../../os/rt/include/chlists.h ****     pqp = pqp->next;
 468:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 469:../../../os/rt/include/chlists.h **** 
 470:../../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 471:../../../os/rt/include/chlists.h ****   p->next       = pqp;
 472:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 473:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 474:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 475:../../../os/rt/include/chlists.h **** 
 476:../../../os/rt/include/chlists.h ****   return p;
 477:../../../os/rt/include/chlists.h **** }
 478:../../../os/rt/include/chlists.h **** 
 479:../../../os/rt/include/chlists.h **** /**
 480:../../../os/rt/include/chlists.h ****  * @brief   Delta list initialization.
 481:../../../os/rt/include/chlists.h ****  *
 482:../../../os/rt/include/chlists.h ****  * @param[out] dlhp    pointer to the delta list header
 483:../../../os/rt/include/chlists.h ****  *
 484:../../../os/rt/include/chlists.h ****  * @notapi
 485:../../../os/rt/include/chlists.h ****  */
 486:../../../os/rt/include/chlists.h **** static inline void ch_dlist_init(ch_delta_list_t *dlhp) {
 487:../../../os/rt/include/chlists.h **** 
 488:../../../os/rt/include/chlists.h ****   dlhp->next  = dlhp;
 489:../../../os/rt/include/chlists.h ****   dlhp->prev  = dlhp;
 490:../../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 491:../../../os/rt/include/chlists.h **** }
 492:../../../os/rt/include/chlists.h **** 
 493:../../../os/rt/include/chlists.h **** /**
 494:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified delta list is empty.
 495:../../../os/rt/include/chlists.h ****  *
 496:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 497:../../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 498:../../../os/rt/include/chlists.h ****  *
 499:../../../os/rt/include/chlists.h ****  * @notapi
 500:../../../os/rt/include/chlists.h ****  */
 501:../../../os/rt/include/chlists.h **** static inline bool ch_dlist_isempty(ch_delta_list_t *dlhp) {
 502:../../../os/rt/include/chlists.h **** 
 503:../../../os/rt/include/chlists.h ****   return (bool)(dlhp == dlhp->next);
 504:../../../os/rt/include/chlists.h **** }
 505:../../../os/rt/include/chlists.h **** 
 506:../../../os/rt/include/chlists.h **** /**
 507:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 508:../../../os/rt/include/chlists.h ****  *
 509:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 510:../../../os/rt/include/chlists.h ****  * @return              The status of the delta list.
 511:../../../os/rt/include/chlists.h ****  *
 512:../../../os/rt/include/chlists.h ****  * @notapi
 513:../../../os/rt/include/chlists.h ****  */
 514:../../../os/rt/include/chlists.h **** static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {
 515:../../../os/rt/include/chlists.h **** 
 516:../../../os/rt/include/chlists.h ****   return (bool)(dlhp != dlhp->next);
 517:../../../os/rt/include/chlists.h **** }
 518:../../../os/rt/include/chlists.h **** 
 519:../../../os/rt/include/chlists.h **** /**
 520:../../../os/rt/include/chlists.h ****  * @brief   Last element in the delta list check.
 521:../../../os/rt/include/chlists.h ****  *
 522:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 523:../../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 524:../../../os/rt/include/chlists.h ****  *
 525:../../../os/rt/include/chlists.h ****  * @notapi
 526:../../../os/rt/include/chlists.h ****  */
 527:../../../os/rt/include/chlists.h **** static inline bool ch_dlist_islast(ch_delta_list_t *dlhp,
 528:../../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlp) {
 529:../../../os/rt/include/chlists.h **** 
 530:../../../os/rt/include/chlists.h ****   return (bool)(dlp->next == dlhp);
 531:../../../os/rt/include/chlists.h **** }
 532:../../../os/rt/include/chlists.h **** 
 533:../../../os/rt/include/chlists.h **** /**
 534:../../../os/rt/include/chlists.h ****  * @brief   Fist element in the delta list check.
 535:../../../os/rt/include/chlists.h ****  *
 536:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 537:../../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 538:../../../os/rt/include/chlists.h ****  *
 539:../../../os/rt/include/chlists.h ****  * @notapi
 540:../../../os/rt/include/chlists.h ****  */
 541:../../../os/rt/include/chlists.h **** static inline bool ch_dlist_isfirst(ch_delta_list_t *dlhp,
 542:../../../os/rt/include/chlists.h ****                                     ch_delta_list_t *dlp) {
 543:../../../os/rt/include/chlists.h **** 
 544:../../../os/rt/include/chlists.h ****   return (bool)(dlhp->next == dlp);
 545:../../../os/rt/include/chlists.h **** }
 546:../../../os/rt/include/chlists.h **** 
 547:../../../os/rt/include/chlists.h **** /**
 548:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element after another header element.
 549:../../../os/rt/include/chlists.h ****  *
 550:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 551:../../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted after the header element
 552:../../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 553:../../../os/rt/include/chlists.h ****  *
 554:../../../os/rt/include/chlists.h ****  * @notapi
 555:../../../os/rt/include/chlists.h ****  */
 556:../../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_after(ch_delta_list_t *dlhp,
 557:../../../os/rt/include/chlists.h ****                                          ch_delta_list_t *dlp,
 558:../../../os/rt/include/chlists.h ****                                          sysinterval_t delta) {
 559:../../../os/rt/include/chlists.h **** 
 560:../../../os/rt/include/chlists.h ****   dlp->delta      = delta;
  64               		.loc 2 560 0
  65 001c 4483      		std Z+4,r20
  66 001e 5583      		std Z+5,r21
 561:../../../os/rt/include/chlists.h ****   dlp->prev       = dlhp;
  67               		.loc 2 561 0
  68 0020 80E0      		ldi r24,lo8(ch0+7)
  69 0022 90E0      		ldi r25,hi8(ch0+7)
  70               	.LVL3:
  71 0024 9383      		std Z+3,r25
  72 0026 8283      		std Z+2,r24
 562:../../../os/rt/include/chlists.h ****   dlp->next       = dlp->prev->next;
  73               		.loc 2 562 0
  74 0028 A091 0000 		lds r26,ch0+7
  75 002c B091 0000 		lds r27,ch0+7+1
  76 0030 B183      		std Z+1,r27
  77 0032 A083      		st Z,r26
 563:../../../os/rt/include/chlists.h ****   dlp->next->prev = dlp;
  78               		.loc 2 563 0
  79 0034 1396      		adiw r26,2+1
  80 0036 FC93      		st X,r31
  81 0038 EE93      		st -X,r30
  82 003a 1297      		sbiw r26,2
 564:../../../os/rt/include/chlists.h ****   dlhp->next      = dlp;
  83               		.loc 2 564 0
  84 003c F093 0000 		sts ch0+7+1,r31
  85 0040 E093 0000 		sts ch0+7,r30
  86               	.LVL4:
  87               	.LBE159:
  88               	.LBE158:
 149:../../../os/rt/src/chvt.c ****   ch_dlist_insert_after(&vtlp->dlist, &vtp->dlist, delay);
 150:../../../os/rt/src/chvt.c **** 
 151:../../../os/rt/src/chvt.c ****   /* Initial delta is what is configured statically.*/
 152:../../../os/rt/src/chvt.c ****   currdelta = vtlp->lastdelta;
  89               		.loc 1 152 0
  90 0044 C090 0000 		lds r12,ch0+15
  91 0048 D090 0000 		lds r13,ch0+15+1
  92               	.LVL5:
  93 004c EA01      		movw r28,r20
  94 004e 4C15      		cp r20,r12
  95 0050 5D05      		cpc r21,r13
  96 0052 00F4      		brsh .L2
  97 0054 E601      		movw r28,r12
  98               	.L2:
  99               	.LVL6:
 100               	.LBB160:
 101               	.LBB161:
 102               		.file 3 "../../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
 103               		.loc 3 79 0
 104 0056 C801      		movw r24,r16
 105               	.LVL7:
 106 0058 8C0F      		add r24,r28
 107 005a 9D1F      		adc r25,r29
 108 005c 0E94 0000 		call stStartAlarm
 109               	.LVL8:
 110 0060 00C0      		rjmp .L4
 111               	.L7:
 112               	.LBE161:
 113               	.LBE160:
 114               	.LBB162:
 153:../../../os/rt/src/chvt.c **** 
 154:../../../os/rt/src/chvt.c ****   /* If the requested delay is lower than the minimum safe delta then it
 155:../../../os/rt/src/chvt.c ****      is raised to the minimum safe value.*/
 156:../../../os/rt/src/chvt.c ****   if (delay < currdelta) {
 157:../../../os/rt/src/chvt.c ****     /* We need to avoid that the system time goes past the alarm we are
 158:../../../os/rt/src/chvt.c ****        going to set before the alarm is actually set.*/
 159:../../../os/rt/src/chvt.c ****     delay = currdelta;
 160:../../../os/rt/src/chvt.c ****   }
 161:../../../os/rt/src/chvt.c **** #if CH_CFG_INTERVALS_SIZE > CH_CFG_ST_RESOLUTION
 162:../../../os/rt/src/chvt.c ****   else if (delay > VT_MAX_DELAY) {
 163:../../../os/rt/src/chvt.c ****     /* The delta could be too large for the physical timer to handle
 164:../../../os/rt/src/chvt.c ****        this can happen when: sizeof (systime_t) < sizeof (sysinterval_t).*/
 165:../../../os/rt/src/chvt.c ****     delay = VT_MAX_DELAY;
 166:../../../os/rt/src/chvt.c ****   }
 167:../../../os/rt/src/chvt.c **** #endif
 168:../../../os/rt/src/chvt.c **** 
 169:../../../os/rt/src/chvt.c ****   /* Being the first element inserted in the list the alarm timer
 170:../../../os/rt/src/chvt.c ****      is started.*/
 171:../../../os/rt/src/chvt.c ****   port_timer_start_alarm(chTimeAddX(vtlp->lasttime, delay));
 172:../../../os/rt/src/chvt.c **** 
 173:../../../os/rt/src/chvt.c ****   /* Deadline skip detection and correction loop.*/
 174:../../../os/rt/src/chvt.c ****   while (true) {
 175:../../../os/rt/src/chvt.c ****     systime_t newnow;
 176:../../../os/rt/src/chvt.c **** 
 177:../../../os/rt/src/chvt.c ****     /* Check on current time, we need to detect the error condition where
 178:../../../os/rt/src/chvt.c ****        current time skipped past the calculated deadline.
 179:../../../os/rt/src/chvt.c ****        Note that the "<" condition is intentional, we want to make sure
 180:../../../os/rt/src/chvt.c ****        that the alarm is set before the deadline is reached because the
 181:../../../os/rt/src/chvt.c ****        comparison could happen on the transition depending on the timer
 182:../../../os/rt/src/chvt.c ****        architecture.*/
 183:../../../os/rt/src/chvt.c ****     newnow = chVTGetSystemTimeX();
 184:../../../os/rt/src/chvt.c ****     if (likely(chTimeDiffX(now, newnow) < delay)) {
 185:../../../os/rt/src/chvt.c ****       break;
 186:../../../os/rt/src/chvt.c ****     }
 187:../../../os/rt/src/chvt.c **** 
 188:../../../os/rt/src/chvt.c ****     /* Trying again with a more relaxed minimum delta.*/
 189:../../../os/rt/src/chvt.c ****     currdelta += (sysinterval_t)1;
 115               		.loc 1 189 0
 116 0062 E601      		movw r28,r12
 117               	.LVL9:
 118 0064 2196      		adiw r28,1
 119               	.LVL10:
 120               	.LBB163:
 121               	.LBB164:
  80:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
  90:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 122               		.loc 3 101 0
 123 0066 C801      		movw r24,r16
 124 0068 8C0F      		add r24,r28
 125 006a 9D1F      		adc r25,r29
 126 006c 0E94 0000 		call stSetAlarm
 127               	.LVL11:
 128               	.LBE164:
 129               	.LBE163:
 130               		.loc 1 189 0
 131 0070 6E01      		movw r12,r28
 190:../../../os/rt/src/chvt.c **** 
 191:../../../os/rt/src/chvt.c ****     /* Setting up the alarm on the next deadline.*/
 192:../../../os/rt/src/chvt.c ****     port_timer_set_alarm(chTimeAddX(now, currdelta));
 193:../../../os/rt/src/chvt.c **** 
 194:../../../os/rt/src/chvt.c ****     /* Current time becomes the new "base" time.*/
 195:../../../os/rt/src/chvt.c ****     now = newnow;
 132               		.loc 1 195 0
 133 0072 8701      		movw r16,r14
 134               	.LVL12:
 135               	.L4:
 136               	.LBB165:
 137               	.LBB166:
 138               	.LBB167:
 102:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 139               		.loc 3 113 0
 140 0074 0E94 0000 		call stGetCounter
 141               	.LVL13:
 142 0078 7C01      		movw r14,r24
 143               	.LBE167:
 144               	.LBE166:
 145               	.LBE165:
 184:../../../os/rt/src/chvt.c ****       break;
 146               		.loc 1 184 0
 147 007a 801B      		sub r24,r16
 148 007c 910B      		sbc r25,r17
 149 007e 8C17      		cp r24,r28
 150 0080 9D07      		cpc r25,r29
 151 0082 00F4      		brsh .L7
 152               	.LBE162:
 196:../../../os/rt/src/chvt.c ****     delay = currdelta;
 197:../../../os/rt/src/chvt.c ****   }
 198:../../../os/rt/src/chvt.c **** 
 199:../../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 200:../../../os/rt/src/chvt.c ****   /* Checking if a skip occurred.*/
 201:../../../os/rt/src/chvt.c ****   if (currdelta > vtlp->lastdelta) {
 153               		.loc 1 201 0
 154 0084 8091 0000 		lds r24,ch0+15
 155 0088 9091 0000 		lds r25,ch0+15+1
 156 008c 8C15      		cp r24,r12
 157 008e 9D05      		cpc r25,r13
 158 0090 00F0      		brlo .L8
 159               	/* epilogue start */
 202:../../../os/rt/src/chvt.c ****     vtlp->lastdelta = currdelta;
 203:../../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 204:../../../os/rt/src/chvt.c ****   }
 205:../../../os/rt/src/chvt.c **** #else
 206:../../../os/rt/src/chvt.c ****   /* Assertions as fallback.*/
 207:../../../os/rt/src/chvt.c ****   chDbgAssert(currdelta <= CH_CFG_ST_TIMEDELTA, "insufficient delta");
 208:../../../os/rt/src/chvt.c **** #endif
 209:../../../os/rt/src/chvt.c **** }
 160               		.loc 1 209 0
 161 0092 DF91      		pop r29
 162 0094 CF91      		pop r28
 163               	.LVL14:
 164 0096 1F91      		pop r17
 165 0098 0F91      		pop r16
 166               	.LVL15:
 167 009a FF90      		pop r15
 168 009c EF90      		pop r14
 169 009e DF90      		pop r13
 170 00a0 CF90      		pop r12
 171               	.LVL16:
 172 00a2 0895      		ret
 173               	.LVL17:
 174               	.L8:
 202:../../../os/rt/src/chvt.c ****     vtlp->lastdelta = currdelta;
 175               		.loc 1 202 0
 176 00a4 D092 0000 		sts ch0+15+1,r13
 177 00a8 C092 0000 		sts ch0+15,r12
 203:../../../os/rt/src/chvt.c ****   }
 178               		.loc 1 203 0
 179 00ac 61E0      		ldi r22,lo8(1)
 180 00ae 70E0      		ldi r23,0
 181 00b0 80E0      		ldi r24,0
 182 00b2 90E0      		ldi r25,0
 183               	/* epilogue start */
 184               		.loc 1 209 0
 185 00b4 DF91      		pop r29
 186 00b6 CF91      		pop r28
 187               	.LVL18:
 188 00b8 1F91      		pop r17
 189 00ba 0F91      		pop r16
 190               	.LVL19:
 191 00bc FF90      		pop r15
 192 00be EF90      		pop r14
 193 00c0 DF90      		pop r13
 194 00c2 CF90      		pop r12
 195               	.LVL20:
 203:../../../os/rt/src/chvt.c ****   }
 196               		.loc 1 203 0
 197 00c4 0C94 0000 		jmp chRFCUCollectFaultsI
 198               	.LVL21:
 199               		.cfi_endproc
 200               	.LFE213:
 202               		.section	.text.vt_set_alarm.constprop.4,"ax",@progbits
 204               	vt_set_alarm.constprop.4:
 205               	.LFB212:
  70:../../../os/rt/src/chvt.c ****                          systime_t now,
 206               		.loc 1 70 0
 207               		.cfi_startproc
 208               	.LVL22:
 209 0000 EF92      		push r14
 210               	.LCFI8:
 211               		.cfi_def_cfa_offset 3
 212               		.cfi_offset 14, -2
 213 0002 FF92      		push r15
 214               	.LCFI9:
 215               		.cfi_def_cfa_offset 4
 216               		.cfi_offset 15, -3
 217 0004 0F93      		push r16
 218               	.LCFI10:
 219               		.cfi_def_cfa_offset 5
 220               		.cfi_offset 16, -4
 221 0006 1F93      		push r17
 222               	.LCFI11:
 223               		.cfi_def_cfa_offset 6
 224               		.cfi_offset 17, -5
 225 0008 CF93      		push r28
 226               	.LCFI12:
 227               		.cfi_def_cfa_offset 7
 228               		.cfi_offset 28, -6
 229 000a DF93      		push r29
 230               	.LCFI13:
 231               		.cfi_def_cfa_offset 8
 232               		.cfi_offset 29, -7
 233               	/* prologue: function */
 234               	/* frame size = 0 */
 235               	/* stack size = 6 */
 236               	.L__stack_usage = 6
 237 000c 8C01      		movw r16,r24
 238               	.LVL23:
  76:../../../os/rt/src/chvt.c **** 
 239               		.loc 1 76 0
 240 000e E090 0000 		lds r14,ch0+15
 241 0012 F090 0000 		lds r15,ch0+15+1
 242               	.LVL24:
 243 0016 E701      		movw r28,r14
 244 0018 E616      		cp r14,r22
 245 001a F706      		cpc r15,r23
 246 001c 00F4      		brsh .L12
 247 001e EB01      		movw r28,r22
 248 0020 00C0      		rjmp .L12
 249               	.LVL25:
 250               	.L14:
 251               	.LBB168:
 112:../../../os/rt/src/chvt.c **** 
 252               		.loc 1 112 0
 253 0022 E701      		movw r28,r14
 254               	.LVL26:
 255 0024 2196      		adiw r28,1
 256               	.LVL27:
 115:../../../os/rt/src/chvt.c ****     delay = currdelta;
 257               		.loc 1 115 0
 258 0026 8C01      		movw r16,r24
 112:../../../os/rt/src/chvt.c **** 
 259               		.loc 1 112 0
 260 0028 7E01      		movw r14,r28
 261               	.LVL28:
 262               	.L12:
 263               	.LBB169:
 264               	.LBB170:
 101:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 265               		.loc 3 101 0
 266 002a C801      		movw r24,r16
 267 002c 8C0F      		add r24,r28
 268 002e 9D1F      		adc r25,r29
 269 0030 0E94 0000 		call stSetAlarm
 270               	.LVL29:
 271               	.LBE170:
 272               	.LBE169:
 273               	.LBB171:
 274               	.LBB172:
 275               	.LBB173:
 276               		.loc 3 113 0
 277 0034 0E94 0000 		call stGetCounter
 278               	.LVL30:
 279               	.LBE173:
 280               	.LBE172:
 281               	.LBE171:
 107:../../../os/rt/src/chvt.c ****       break;
 282               		.loc 1 107 0
 283 0038 9C01      		movw r18,r24
 284 003a 201B      		sub r18,r16
 285 003c 310B      		sbc r19,r17
 286 003e 2C17      		cp r18,r28
 287 0040 3D07      		cpc r19,r29
 288 0042 00F4      		brsh .L14
 289               	.LBE168:
 121:../../../os/rt/src/chvt.c ****     vtlp->lastdelta = currdelta;
 290               		.loc 1 121 0
 291 0044 8091 0000 		lds r24,ch0+15
 292 0048 9091 0000 		lds r25,ch0+15+1
 293 004c 8E15      		cp r24,r14
 294 004e 9F05      		cpc r25,r15
 295 0050 00F0      		brlo .L15
 296               	/* epilogue start */
 129:../../../os/rt/src/chvt.c **** 
 297               		.loc 1 129 0
 298 0052 DF91      		pop r29
 299 0054 CF91      		pop r28
 300               	.LVL31:
 301 0056 1F91      		pop r17
 302 0058 0F91      		pop r16
 303               	.LVL32:
 304 005a FF90      		pop r15
 305 005c EF90      		pop r14
 306               	.LVL33:
 307 005e 0895      		ret
 308               	.LVL34:
 309               	.L15:
 122:../../../os/rt/src/chvt.c ****     chRFCUCollectFaultsI(CH_RFCU_VT_INSUFFICIENT_DELTA);
 310               		.loc 1 122 0
 311 0060 F092 0000 		sts ch0+15+1,r15
 312 0064 E092 0000 		sts ch0+15,r14
 123:../../../os/rt/src/chvt.c ****   }
 313               		.loc 1 123 0
 314 0068 61E0      		ldi r22,lo8(1)
 315 006a 70E0      		ldi r23,0
 316 006c 80E0      		ldi r24,0
 317 006e 90E0      		ldi r25,0
 318               	/* epilogue start */
 129:../../../os/rt/src/chvt.c **** 
 319               		.loc 1 129 0
 320 0070 DF91      		pop r29
 321 0072 CF91      		pop r28
 322               	.LVL35:
 323 0074 1F91      		pop r17
 324 0076 0F91      		pop r16
 325               	.LVL36:
 326 0078 FF90      		pop r15
 327 007a EF90      		pop r14
 328               	.LVL37:
 123:../../../os/rt/src/chvt.c ****   }
 329               		.loc 1 123 0
 330 007c 0C94 0000 		jmp chRFCUCollectFaultsI
 331               	.LVL38:
 332               		.cfi_endproc
 333               	.LFE212:
 335               		.section	.text.vt_enqueue.constprop.2,"ax",@progbits
 337               	vt_enqueue.constprop.2:
 338               	.LFB214:
 210:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 211:../../../os/rt/src/chvt.c **** 
 212:../../../os/rt/src/chvt.c **** /**
 213:../../../os/rt/src/chvt.c ****  * @brief   Enqueues a virtual timer in a virtual timers list.
 214:../../../os/rt/src/chvt.c ****  *
 215:../../../os/rt/src/chvt.c ****  * @param[in] vtlp      pointer to a @p virtual_timers_list_t structure
 216:../../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t object
 217:../../../os/rt/src/chvt.c ****  * @param[in] delay     delay over current system time
 218:../../../os/rt/src/chvt.c ****  */
 219:../../../os/rt/src/chvt.c **** static void vt_enqueue(virtual_timers_list_t *vtlp,
 339               		.loc 1 219 0
 340               		.cfi_startproc
 341               	.LVL39:
 342 0000 EF92      		push r14
 343               	.LCFI14:
 344               		.cfi_def_cfa_offset 3
 345               		.cfi_offset 14, -2
 346 0002 FF92      		push r15
 347               	.LCFI15:
 348               		.cfi_def_cfa_offset 4
 349               		.cfi_offset 15, -3
 350 0004 0F93      		push r16
 351               	.LCFI16:
 352               		.cfi_def_cfa_offset 5
 353               		.cfi_offset 16, -4
 354 0006 1F93      		push r17
 355               	.LCFI17:
 356               		.cfi_def_cfa_offset 6
 357               		.cfi_offset 17, -5
 358 0008 CF93      		push r28
 359               	.LCFI18:
 360               		.cfi_def_cfa_offset 7
 361               		.cfi_offset 28, -6
 362 000a DF93      		push r29
 363               	.LCFI19:
 364               		.cfi_def_cfa_offset 8
 365               		.cfi_offset 29, -7
 366               	/* prologue: function */
 367               	/* frame size = 0 */
 368               	/* stack size = 6 */
 369               	.L__stack_usage = 6
 370 000c 8C01      		movw r16,r24
 371 000e 7B01      		movw r14,r22
 372               	.LVL40:
 373               	.LBB174:
 374               	.LBB175:
 375               	.LBB176:
 376               	.LBB177:
 377               		.loc 3 113 0
 378 0010 0E94 0000 		call stGetCounter
 379               	.LVL41:
 380               	.LBE177:
 381               	.LBE176:
 382               	.LBE175:
 383               	.LBB178:
 384               	.LBB179:
 503:../../../os/rt/include/chlists.h **** }
 385               		.loc 2 503 0
 386 0014 E091 0000 		lds r30,ch0+7
 387 0018 F091 0000 		lds r31,ch0+7+1
 388               	.LVL42:
 389               	.LBE179:
 390               	.LBE178:
 220:../../../os/rt/src/chvt.c ****                        virtual_timer_t *vtp,
 221:../../../os/rt/src/chvt.c ****                        sysinterval_t delay) {
 222:../../../os/rt/src/chvt.c ****   sysinterval_t delta;
 223:../../../os/rt/src/chvt.c **** 
 224:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 225:../../../os/rt/src/chvt.c ****   {
 226:../../../os/rt/src/chvt.c ****     sysinterval_t nowdelta;
 227:../../../os/rt/src/chvt.c ****     systime_t now = chVTGetSystemTimeX();
 228:../../../os/rt/src/chvt.c **** 
 229:../../../os/rt/src/chvt.c ****     /* Special case where the timers list is empty.*/
 230:../../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 391               		.loc 1 230 0
 392 001c 20E0      		ldi r18,hi8(ch0+7)
 393 001e E030      		cpi r30,lo8(ch0+7)
 394 0020 F207      		cpc r31,r18
 395 0022 01F4      		brne .+2
 396 0024 00C0      		rjmp .L25
 397               	.LVL43:
 398               	.LBB180:
 399               	.LBB181:
 400               		.file 4 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chtime.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chtime.h **** 
   5:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chtime.h **** 
   7:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chtime.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:../../../os/rt/include/chtime.h ****  *          intervals.
  27:../../../os/rt/include/chtime.h ****  * @{
  28:../../../os/rt/include/chtime.h ****  */
  29:../../../os/rt/include/chtime.h **** 
  30:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:../../../os/rt/include/chtime.h **** #define CHTIME_H
  32:../../../os/rt/include/chtime.h **** 
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  36:../../../os/rt/include/chtime.h **** 
  37:../../../os/rt/include/chtime.h **** /**
  38:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  39:../../../os/rt/include/chtime.h ****  * @{
  40:../../../os/rt/include/chtime.h ****  */
  41:../../../os/rt/include/chtime.h **** /**
  42:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:../../../os/rt/include/chtime.h ****  *          specification.
  44:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:../../../os/rt/include/chtime.h ****  */
  47:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:../../../os/rt/include/chtime.h **** 
  49:../../../os/rt/include/chtime.h **** /**
  50:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:../../../os/rt/include/chtime.h ****  *          specification.
  52:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:../../../os/rt/include/chtime.h ****  */
  55:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:../../../os/rt/include/chtime.h **** 
  57:../../../os/rt/include/chtime.h **** /**
  58:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:../../../os/rt/include/chtime.h ****  */
  60:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:../../../os/rt/include/chtime.h **** 
  62:../../../os/rt/include/chtime.h **** /**
  63:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:../../../os/rt/include/chtime.h ****  */
  65:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:../../../os/rt/include/chtime.h **** /** @} */
  67:../../../os/rt/include/chtime.h **** 
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  71:../../../os/rt/include/chtime.h **** 
  72:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  73:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  75:../../../os/rt/include/chtime.h **** 
  76:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:../../../os/rt/include/chtime.h **** #endif
  80:../../../os/rt/include/chtime.h **** 
  81:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:../../../os/rt/include/chtime.h **** #endif
  84:../../../os/rt/include/chtime.h **** 
  85:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:../../../os/rt/include/chtime.h **** #endif
  89:../../../os/rt/include/chtime.h **** 
  90:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:../../../os/rt/include/chtime.h **** #endif
  93:../../../os/rt/include/chtime.h **** 
  94:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:../../../os/rt/include/chtime.h **** #endif
  97:../../../os/rt/include/chtime.h **** 
  98:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  99:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 101:../../../os/rt/include/chtime.h **** 
 102:../../../os/rt/include/chtime.h **** /**
 103:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:../../../os/rt/include/chtime.h ****  */
 106:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:../../../os/rt/include/chtime.h **** #endif
 113:../../../os/rt/include/chtime.h **** 
 114:../../../os/rt/include/chtime.h **** /**
 115:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:../../../os/rt/include/chtime.h ****  */
 118:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:../../../os/rt/include/chtime.h **** #endif
 125:../../../os/rt/include/chtime.h **** 
 126:../../../os/rt/include/chtime.h **** /**
 127:../../../os/rt/include/chtime.h ****  * @brief   Type of a time stamp.
 128:../../../os/rt/include/chtime.h ****  */
 129:../../../os/rt/include/chtime.h **** typedef uint64_t systimestamp_t;
 130:../../../os/rt/include/chtime.h **** 
 131:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 132:../../../os/rt/include/chtime.h **** /**
 133:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 134:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 135:../../../os/rt/include/chtime.h ****  */
 136:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 137:../../../os/rt/include/chtime.h **** 
 138:../../../os/rt/include/chtime.h **** /**
 139:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 140:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 141:../../../os/rt/include/chtime.h ****  */
 142:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 143:../../../os/rt/include/chtime.h **** 
 144:../../../os/rt/include/chtime.h **** /**
 145:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 146:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 147:../../../os/rt/include/chtime.h ****  */
 148:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 149:../../../os/rt/include/chtime.h **** 
 150:../../../os/rt/include/chtime.h **** /**
 151:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 152:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 153:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 154:../../../os/rt/include/chtime.h ****  */
 155:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #else
 158:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 159:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 160:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 161:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 162:../../../os/rt/include/chtime.h **** #endif
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 165:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 166:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 167:../../../os/rt/include/chtime.h **** 
 168:../../../os/rt/include/chtime.h **** /**
 169:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 170:../../../os/rt/include/chtime.h ****  * @{
 171:../../../os/rt/include/chtime.h ****  */
 172:../../../os/rt/include/chtime.h **** /**
 173:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 174:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 175:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 176:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 177:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 178:../../../os/rt/include/chtime.h ****  *          converted.
 179:../../../os/rt/include/chtime.h ****  *
 180:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 181:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 182:../../../os/rt/include/chtime.h ****  *
 183:../../../os/rt/include/chtime.h ****  * @api
 184:../../../os/rt/include/chtime.h ****  */
 185:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 186:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 187:../../../os/rt/include/chtime.h **** 
 188:../../../os/rt/include/chtime.h **** /**
 189:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 190:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 191:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 192:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 193:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 194:../../../os/rt/include/chtime.h ****  *          converted.
 195:../../../os/rt/include/chtime.h ****  *
 196:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 197:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 198:../../../os/rt/include/chtime.h ****  *
 199:../../../os/rt/include/chtime.h ****  * @api
 200:../../../os/rt/include/chtime.h ****  */
 201:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 202:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 203:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 204:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 205:../../../os/rt/include/chtime.h **** 
 206:../../../os/rt/include/chtime.h **** /**
 207:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 208:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 209:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 210:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 211:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 212:../../../os/rt/include/chtime.h ****  *          converted.
 213:../../../os/rt/include/chtime.h ****  *
 214:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 215:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 216:../../../os/rt/include/chtime.h ****  *
 217:../../../os/rt/include/chtime.h ****  * @api
 218:../../../os/rt/include/chtime.h ****  */
 219:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 220:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 221:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 222:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 223:../../../os/rt/include/chtime.h **** 
 224:../../../os/rt/include/chtime.h **** /**
 225:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 226:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 227:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 228:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 229:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 230:../../../os/rt/include/chtime.h ****  *          converted.
 231:../../../os/rt/include/chtime.h ****  *
 232:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 233:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 234:../../../os/rt/include/chtime.h ****  *
 235:../../../os/rt/include/chtime.h ****  * @api
 236:../../../os/rt/include/chtime.h ****  */
 237:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 238:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 239:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 240:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 241:../../../os/rt/include/chtime.h **** 
 242:../../../os/rt/include/chtime.h **** /**
 243:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 244:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 245:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 246:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 247:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 248:../../../os/rt/include/chtime.h ****  *          converted.
 249:../../../os/rt/include/chtime.h ****  *
 250:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 251:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 252:../../../os/rt/include/chtime.h ****  *
 253:../../../os/rt/include/chtime.h ****  * @api
 254:../../../os/rt/include/chtime.h ****  */
 255:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 256:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 257:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 258:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 259:../../../os/rt/include/chtime.h **** 
 260:../../../os/rt/include/chtime.h **** /**
 261:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 262:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 263:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 264:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 265:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 266:../../../os/rt/include/chtime.h ****  *          converted.
 267:../../../os/rt/include/chtime.h ****  *
 268:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 269:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 270:../../../os/rt/include/chtime.h ****  *
 271:../../../os/rt/include/chtime.h ****  * @api
 272:../../../os/rt/include/chtime.h ****  */
 273:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 274:../../../os/rt/include/chtime.h ****   (time_usecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 275:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 276:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 277:../../../os/rt/include/chtime.h **** /** @} */
 278:../../../os/rt/include/chtime.h **** 
 279:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 280:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 281:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 282:../../../os/rt/include/chtime.h **** 
 283:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 284:../../../os/rt/include/chtime.h **** extern "C" {
 285:../../../os/rt/include/chtime.h **** #endif
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 288:../../../os/rt/include/chtime.h **** }
 289:../../../os/rt/include/chtime.h **** #endif
 290:../../../os/rt/include/chtime.h **** 
 291:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 292:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 293:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 294:../../../os/rt/include/chtime.h **** 
 295:../../../os/rt/include/chtime.h **** /**
 296:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 297:../../../os/rt/include/chtime.h ****  * @{
 298:../../../os/rt/include/chtime.h ****  */
 299:../../../os/rt/include/chtime.h **** /**
 300:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 301:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 302:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 303:../../../os/rt/include/chtime.h ****  *
 304:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 305:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 306:../../../os/rt/include/chtime.h ****  *
 307:../../../os/rt/include/chtime.h ****  * @special
 308:../../../os/rt/include/chtime.h ****  */
 309:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 310:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 311:../../../os/rt/include/chtime.h **** 
 312:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 313:../../../os/rt/include/chtime.h **** 
 314:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 315:../../../os/rt/include/chtime.h ****               "conversion overflow");
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** 
 320:../../../os/rt/include/chtime.h **** /**
 321:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 322:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 323:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/rt/include/chtime.h ****  *
 325:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 326:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 327:../../../os/rt/include/chtime.h ****  *
 328:../../../os/rt/include/chtime.h ****  * @special
 329:../../../os/rt/include/chtime.h ****  */
 330:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 331:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 332:../../../os/rt/include/chtime.h **** 
 333:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 334:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 335:../../../os/rt/include/chtime.h **** 
 336:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 337:../../../os/rt/include/chtime.h ****               "conversion overflow");
 338:../../../os/rt/include/chtime.h **** 
 339:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 340:../../../os/rt/include/chtime.h **** }
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h **** /**
 343:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 344:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 345:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 346:../../../os/rt/include/chtime.h ****  *
 347:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 348:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 349:../../../os/rt/include/chtime.h ****  *
 350:../../../os/rt/include/chtime.h ****  * @special
 351:../../../os/rt/include/chtime.h ****  */
 352:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 353:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 354:../../../os/rt/include/chtime.h **** 
 355:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 356:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 357:../../../os/rt/include/chtime.h **** 
 358:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 359:../../../os/rt/include/chtime.h ****               "conversion overflow");
 360:../../../os/rt/include/chtime.h **** 
 361:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 362:../../../os/rt/include/chtime.h **** }
 363:../../../os/rt/include/chtime.h **** 
 364:../../../os/rt/include/chtime.h **** /**
 365:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 366:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 367:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 368:../../../os/rt/include/chtime.h ****  *
 369:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 370:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 371:../../../os/rt/include/chtime.h ****  *
 372:../../../os/rt/include/chtime.h ****  * @special
 373:../../../os/rt/include/chtime.h ****  */
 374:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 375:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 376:../../../os/rt/include/chtime.h **** 
 377:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 378:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 379:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 380:../../../os/rt/include/chtime.h **** 
 381:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 382:../../../os/rt/include/chtime.h ****               "conversion overflow");
 383:../../../os/rt/include/chtime.h **** 
 384:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 385:../../../os/rt/include/chtime.h **** }
 386:../../../os/rt/include/chtime.h **** 
 387:../../../os/rt/include/chtime.h **** /**
 388:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 389:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 390:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 391:../../../os/rt/include/chtime.h ****  *
 392:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 393:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 394:../../../os/rt/include/chtime.h ****  *
 395:../../../os/rt/include/chtime.h ****  * @special
 396:../../../os/rt/include/chtime.h ****  */
 397:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 398:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 399:../../../os/rt/include/chtime.h **** 
 400:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 401:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 402:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 403:../../../os/rt/include/chtime.h **** 
 404:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 405:../../../os/rt/include/chtime.h ****               "conversion overflow");
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 408:../../../os/rt/include/chtime.h **** }
 409:../../../os/rt/include/chtime.h **** 
 410:../../../os/rt/include/chtime.h **** /**
 411:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 412:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 413:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 414:../../../os/rt/include/chtime.h ****  *
 415:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 416:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 417:../../../os/rt/include/chtime.h ****  *
 418:../../../os/rt/include/chtime.h ****  * @special
 419:../../../os/rt/include/chtime.h ****  */
 420:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 421:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 422:../../../os/rt/include/chtime.h **** 
 423:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 424:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 425:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 426:../../../os/rt/include/chtime.h **** 
 427:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 428:../../../os/rt/include/chtime.h ****               "conversion overflow");
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 431:../../../os/rt/include/chtime.h **** }
 432:../../../os/rt/include/chtime.h **** 
 433:../../../os/rt/include/chtime.h **** /**
 434:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 435:../../../os/rt/include/chtime.h ****  *
 436:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 437:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 438:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 439:../../../os/rt/include/chtime.h ****  *
 440:../../../os/rt/include/chtime.h ****  * @xclass
 441:../../../os/rt/include/chtime.h ****  */
 442:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 443:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 444:../../../os/rt/include/chtime.h **** 
 445:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 446:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 447:../../../os/rt/include/chtime.h **** #endif
 448:../../../os/rt/include/chtime.h **** 
 449:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 450:../../../os/rt/include/chtime.h **** }
 451:../../../os/rt/include/chtime.h **** 
 452:../../../os/rt/include/chtime.h **** /**
 453:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 454:../../../os/rt/include/chtime.h ****  *
 455:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 456:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 457:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 458:../../../os/rt/include/chtime.h ****  *
 459:../../../os/rt/include/chtime.h ****  * @xclass
 460:../../../os/rt/include/chtime.h ****  */
 461:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 464:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 465:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 401               		.loc 4 465 0
 402 0026 2091 0000 		lds r18,ch0+13
 403 002a 3091 0000 		lds r19,ch0+13+1
 404 002e AC01      		movw r20,r24
 405 0030 421B      		sub r20,r18
 406 0032 530B      		sbc r21,r19
 407               	.LVL44:
 408               	.LBE181:
 409               	.LBE180:
 231:../../../os/rt/src/chvt.c **** 
 232:../../../os/rt/src/chvt.c ****       vt_insert_first(vtlp, vtp, now, delay);
 233:../../../os/rt/src/chvt.c **** 
 234:../../../os/rt/src/chvt.c ****       return;
 235:../../../os/rt/src/chvt.c ****     }
 236:../../../os/rt/src/chvt.c **** 
 237:../../../os/rt/src/chvt.c ****     /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 238:../../../os/rt/src/chvt.c ****        becomes lower than 'deltanow'.*/
 239:../../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 240:../../../os/rt/src/chvt.c ****     delta    = nowdelta + delay;
 410               		.loc 1 240 0
 411 0034 E701      		movw r28,r14
 412 0036 C40F      		add r28,r20
 413 0038 D51F      		adc r29,r21
 414               	.LVL45:
 241:../../../os/rt/src/chvt.c **** 
 242:../../../os/rt/src/chvt.c ****     /* Scenario where a very large delay exceeded the numeric range, the
 243:../../../os/rt/src/chvt.c ****        delta is shortened to make it fit the numeric range, the timer
 244:../../../os/rt/src/chvt.c ****        will be triggered "deltanow" cycles earlier.*/
 245:../../../os/rt/src/chvt.c ****     if (delta < nowdelta) {
 415               		.loc 1 245 0
 416 003a C417      		cp r28,r20
 417 003c D507      		cpc r29,r21
 418 003e 00F0      		brlo .L26
 246:../../../os/rt/src/chvt.c ****       delta = delay;
 247:../../../os/rt/src/chvt.c ****     }
 248:../../../os/rt/src/chvt.c **** 
 249:../../../os/rt/src/chvt.c ****     /* Checking if this timer would become the first in the delta list, this
 250:../../../os/rt/src/chvt.c ****        requires changing the current alarm setting.*/
 251:../../../os/rt/src/chvt.c ****     if (delta < vtlp->dlist.next->delta) {
 419               		.loc 1 251 0
 420 0040 2481      		ldd r18,Z+4
 421 0042 3581      		ldd r19,Z+5
 422 0044 C217      		cp r28,r18
 423 0046 D307      		cpc r29,r19
 424 0048 00F0      		brlo .L27
 425               	.L19:
 426               	.LVL46:
 427               	.LBE174:
 428               	.LBB182:
 429               	.LBB183:
 565:../../../os/rt/include/chlists.h **** }
 566:../../../os/rt/include/chlists.h **** 
 567:../../../os/rt/include/chlists.h **** /**
 568:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element before another header element.
 569:../../../os/rt/include/chlists.h ****  *
 570:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 571:../../../os/rt/include/chlists.h ****  * @param[in] dlp       element to be inserted before the header element
 572:../../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 573:../../../os/rt/include/chlists.h ****  *
 574:../../../os/rt/include/chlists.h ****  * @notapi
 575:../../../os/rt/include/chlists.h ****  */
 576:../../../os/rt/include/chlists.h **** static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
 577:../../../os/rt/include/chlists.h ****                                           ch_delta_list_t *dlp,
 578:../../../os/rt/include/chlists.h ****                                           sysinterval_t delta) {
 579:../../../os/rt/include/chlists.h **** 
 580:../../../os/rt/include/chlists.h ****   dlp->delta      = delta;
 581:../../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 582:../../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 583:../../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 584:../../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 585:../../../os/rt/include/chlists.h **** }
 586:../../../os/rt/include/chlists.h **** 
 587:../../../os/rt/include/chlists.h **** /**
 588:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element in a delta list.
 589:../../../os/rt/include/chlists.h ****  *
 590:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header element
 591:../../../os/rt/include/chlists.h ****  * @param[in] dlep      element to be inserted before the header element
 592:../../../os/rt/include/chlists.h ****  * @param[in] delta     delta of the element to be inserted
 593:../../../os/rt/include/chlists.h ****  *
 594:../../../os/rt/include/chlists.h ****  * @notapi
 595:../../../os/rt/include/chlists.h ****  */
 596:../../../os/rt/include/chlists.h **** static inline void ch_dlist_insert(ch_delta_list_t *dlhp,
 597:../../../os/rt/include/chlists.h ****                                    ch_delta_list_t *dlep,
 598:../../../os/rt/include/chlists.h ****                                    sysinterval_t delta) {
 599:../../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp;
 600:../../../os/rt/include/chlists.h **** 
 601:../../../os/rt/include/chlists.h ****   /* The delta list is scanned in order to find the correct position for
 602:../../../os/rt/include/chlists.h ****      this element. */
 603:../../../os/rt/include/chlists.h ****   dlp = dlhp->next;
 604:../../../os/rt/include/chlists.h ****   while (likely(dlp->delta < delta)) {
 430               		.loc 2 604 0
 431 004a 2C17      		cp r18,r28
 432 004c 3D07      		cpc r19,r29
 433 004e 00F4      		brsh .L20
 434               	.LVL47:
 435               	.L21:
 605:../../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 606:../../../os/rt/include/chlists.h ****     chDbgAssert(dlp != dlep, "element already in list");
 607:../../../os/rt/include/chlists.h **** 
 608:../../../os/rt/include/chlists.h ****     delta -= dlp->delta;
 436               		.loc 2 608 0
 437 0050 C21B      		sub r28,r18
 438 0052 D30B      		sbc r29,r19
 439               	.LVL48:
 609:../../../os/rt/include/chlists.h ****     dlp = dlp->next;
 440               		.loc 2 609 0
 441 0054 0190      		ld __tmp_reg__,Z+
 442 0056 F081      		ld r31,Z
 443 0058 E02D      		mov r30,__tmp_reg__
 444               	.LVL49:
 604:../../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 445               		.loc 2 604 0
 446 005a 2481      		ldd r18,Z+4
 447 005c 3581      		ldd r19,Z+5
 448 005e 2C17      		cp r18,r28
 449 0060 3D07      		cpc r19,r29
 450 0062 00F0      		brlo .L21
 451               	.LVL50:
 452               	.L20:
 453               	.LBB184:
 454               	.LBB185:
 580:../../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 455               		.loc 2 580 0
 456 0064 D801      		movw r26,r16
 457 0066 1596      		adiw r26,4+1
 458 0068 DC93      		st X,r29
 459 006a CE93      		st -X,r28
 460 006c 1497      		sbiw r26,4
 581:../../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 461               		.loc 2 581 0
 462 006e 1196      		adiw r26,1
 463 0070 FC93      		st X,r31
 464 0072 EE93      		st -X,r30
 582:../../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 465               		.loc 2 582 0
 466 0074 8281      		ldd r24,Z+2
 467 0076 9381      		ldd r25,Z+3
 468 0078 1396      		adiw r26,2+1
 469 007a 9C93      		st X,r25
 470 007c 8E93      		st -X,r24
 471 007e 1297      		sbiw r26,2
 583:../../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 472               		.loc 2 583 0
 473 0080 DC01      		movw r26,r24
 474 0082 0D93      		st X+,r16
 475 0084 1C93      		st X,r17
 584:../../../os/rt/include/chlists.h **** }
 476               		.loc 2 584 0
 477 0086 1383      		std Z+3,r17
 478 0088 0283      		std Z+2,r16
 479               	.LVL51:
 480               	.LBE185:
 481               	.LBE184:
 610:../../../os/rt/include/chlists.h ****   }
 611:../../../os/rt/include/chlists.h **** 
 612:../../../os/rt/include/chlists.h ****   /* The timer is inserted in the delta list.*/
 613:../../../os/rt/include/chlists.h ****   ch_dlist_insert_before(dlp, dlep, delta);
 614:../../../os/rt/include/chlists.h **** 
 615:../../../os/rt/include/chlists.h ****   /* Adjusting delta for the following element.*/
 616:../../../os/rt/include/chlists.h ****   dlp->delta -= delta;
 482               		.loc 2 616 0
 483 008a 8481      		ldd r24,Z+4
 484 008c 9581      		ldd r25,Z+5
 485 008e 8C1B      		sub r24,r28
 486 0090 9D0B      		sbc r25,r29
 487 0092 9583      		std Z+5,r25
 488 0094 8483      		std Z+4,r24
 617:../../../os/rt/include/chlists.h **** 
 618:../../../os/rt/include/chlists.h ****   /* Special case when the inserted element is in last position in the list,
 619:../../../os/rt/include/chlists.h ****      the value in the header must be restored, just doing it is faster than
 620:../../../os/rt/include/chlists.h ****      checking then doing.*/
 621:../../../os/rt/include/chlists.h ****   dlhp->delta = (sysinterval_t)-1;
 489               		.loc 2 621 0
 490 0096 8FEF      		ldi r24,lo8(-1)
 491 0098 9FEF      		ldi r25,lo8(-1)
 492 009a 9093 0000 		sts ch0+11+1,r25
 493 009e 8093 0000 		sts ch0+11,r24
 494               	/* epilogue start */
 495               	.LBE183:
 496               	.LBE182:
 252:../../../os/rt/src/chvt.c **** 
 253:../../../os/rt/src/chvt.c ****       vt_set_alarm(vtlp, now, delay);
 254:../../../os/rt/src/chvt.c ****     }
 255:../../../os/rt/src/chvt.c ****   }
 256:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA == 0 */
 257:../../../os/rt/src/chvt.c **** 
 258:../../../os/rt/src/chvt.c ****   /* Delta is initially equal to the specified delay.*/
 259:../../../os/rt/src/chvt.c ****   delta = delay;
 260:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA == 0 */
 261:../../../os/rt/src/chvt.c **** 
 262:../../../os/rt/src/chvt.c ****   ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 263:../../../os/rt/src/chvt.c **** }
 497               		.loc 1 263 0
 498 00a2 DF91      		pop r29
 499 00a4 CF91      		pop r28
 500               	.LVL52:
 501 00a6 1F91      		pop r17
 502 00a8 0F91      		pop r16
 503               	.LVL53:
 504 00aa FF90      		pop r15
 505 00ac EF90      		pop r14
 506               	.LVL54:
 507 00ae 0895      		ret
 508               	.LVL55:
 509               	.L26:
 510               	.LBB186:
 246:../../../os/rt/src/chvt.c ****     }
 511               		.loc 1 246 0
 512 00b0 E701      		movw r28,r14
 513               	.LVL56:
 251:../../../os/rt/src/chvt.c **** 
 514               		.loc 1 251 0
 515 00b2 2481      		ldd r18,Z+4
 516 00b4 3581      		ldd r19,Z+5
 517 00b6 C217      		cp r28,r18
 518 00b8 D307      		cpc r29,r19
 519 00ba 00F4      		brsh .L19
 520               	.L27:
 253:../../../os/rt/src/chvt.c ****     }
 521               		.loc 1 253 0
 522 00bc B701      		movw r22,r14
 523 00be 0E94 0000 		call vt_set_alarm.constprop.4
 524               	.LVL57:
 525 00c2 E091 0000 		lds r30,ch0+7
 526 00c6 F091 0000 		lds r31,ch0+7+1
 527 00ca 2481      		ldd r18,Z+4
 528 00cc 3581      		ldd r19,Z+5
 529 00ce 00C0      		rjmp .L19
 530               	.LVL58:
 531               	.L25:
 232:../../../os/rt/src/chvt.c **** 
 532               		.loc 1 232 0
 533 00d0 A701      		movw r20,r14
 534 00d2 BC01      		movw r22,r24
 535 00d4 C801      		movw r24,r16
 536               	/* epilogue start */
 537               	.LBE186:
 538               		.loc 1 263 0
 539 00d6 DF91      		pop r29
 540 00d8 CF91      		pop r28
 541 00da 1F91      		pop r17
 542 00dc 0F91      		pop r16
 543               	.LVL59:
 544 00de FF90      		pop r15
 545 00e0 EF90      		pop r14
 546               	.LVL60:
 547               	.LBB187:
 232:../../../os/rt/src/chvt.c **** 
 548               		.loc 1 232 0
 549 00e2 0C94 0000 		jmp vt_insert_first.constprop.3
 550               	.LVL61:
 551               	.LBE187:
 552               		.cfi_endproc
 553               	.LFE214:
 555               		.section	.text.chVTObjectInit,"ax",@progbits
 556               	.global	chVTObjectInit
 558               	chVTObjectInit:
 559               	.LFB201:
 264:../../../os/rt/src/chvt.c **** 
 265:../../../os/rt/src/chvt.c **** /*===========================================================================*/
 266:../../../os/rt/src/chvt.c **** /* Module exported functions.                                                */
 267:../../../os/rt/src/chvt.c **** /*===========================================================================*/
 268:../../../os/rt/src/chvt.c **** 
 269:../../../os/rt/src/chvt.c **** /**
 270:../../../os/rt/src/chvt.c ****  * @brief   Initializes a @p virtual_timer_t object.
 271:../../../os/rt/src/chvt.c ****  * @note    Initializing a timer object is not strictly required because
 272:../../../os/rt/src/chvt.c ****  *          the function @p chVTSetI() initializes the object too. This
 273:../../../os/rt/src/chvt.c ****  *          function is only useful if you need to perform a @p chVTIsArmed()
 274:../../../os/rt/src/chvt.c ****  *          check before calling @p chVTSetI().
 275:../../../os/rt/src/chvt.c ****  *
 276:../../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t object
 277:../../../os/rt/src/chvt.c ****  *
 278:../../../os/rt/src/chvt.c ****  * @init
 279:../../../os/rt/src/chvt.c ****  */
 280:../../../os/rt/src/chvt.c **** void chVTObjectInit(virtual_timer_t *vtp) {
 560               		.loc 1 280 0
 561               		.cfi_startproc
 562               	.LVL62:
 563               	/* prologue: function */
 564               	/* frame size = 0 */
 565               	/* stack size = 0 */
 566               	.L__stack_usage = 0
 281:../../../os/rt/src/chvt.c **** 
 282:../../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 567               		.loc 1 282 0
 568 0000 FC01      		movw r30,r24
 569 0002 1182      		std Z+1,__zero_reg__
 570 0004 1082      		st Z,__zero_reg__
 571 0006 0895      		ret
 572               		.cfi_endproc
 573               	.LFE201:
 575               		.section	.text.chVTObjectDispose,"ax",@progbits
 576               	.global	chVTObjectDispose
 578               	chVTObjectDispose:
 579               	.LFB202:
 283:../../../os/rt/src/chvt.c **** }
 284:../../../os/rt/src/chvt.c **** 
 285:../../../os/rt/src/chvt.c **** /**
 286:../../../os/rt/src/chvt.c ****  * @brief   Disposes a virtual timer.
 287:../../../os/rt/src/chvt.c ****  * @note    Objects disposing does not involve freeing memory but just
 288:../../../os/rt/src/chvt.c ****  *          performing checks that make sure that the object is in a
 289:../../../os/rt/src/chvt.c ****  *          state compatible with operations stop.
 290:../../../os/rt/src/chvt.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 291:../../../os/rt/src/chvt.c ****  *          the object is also cleared, attempts to use the object would likely
 292:../../../os/rt/src/chvt.c ****  *          result in a clean memory access violation because dereferencing
 293:../../../os/rt/src/chvt.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 294:../../../os/rt/src/chvt.c ****  *          pointers.
 295:../../../os/rt/src/chvt.c ****  *
 296:../../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t object
 297:../../../os/rt/src/chvt.c ****  *
 298:../../../os/rt/src/chvt.c ****  * @dispose
 299:../../../os/rt/src/chvt.c ****  */
 300:../../../os/rt/src/chvt.c **** void chVTObjectDispose(virtual_timer_t *vtp) {
 580               		.loc 1 300 0
 581               		.cfi_startproc
 582               	.LVL63:
 583               	/* prologue: function */
 584               	/* frame size = 0 */
 585               	/* stack size = 0 */
 586               	.L__stack_usage = 0
 587 0000 0895      		ret
 588               		.cfi_endproc
 589               	.LFE202:
 591               		.section	.text.chVTDoSetI,"ax",@progbits
 592               	.global	chVTDoSetI
 594               	chVTDoSetI:
 595               	.LFB203:
 301:../../../os/rt/src/chvt.c **** 
 302:../../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 303:../../../os/rt/src/chvt.c ****   chDbgAssert(vtp->dlist.next != NULL, "object in use");
 304:../../../os/rt/src/chvt.c **** 
 305:../../../os/rt/src/chvt.c **** #if CH_CFG_HARDENING_LEVEL > 0
 306:../../../os/rt/src/chvt.c ****   memset((void *)vtp, 0, sizeof (virtual_timer_t));
 307:../../../os/rt/src/chvt.c **** #endif
 308:../../../os/rt/src/chvt.c **** }
 309:../../../os/rt/src/chvt.c **** 
 310:../../../os/rt/src/chvt.c **** /**
 311:../../../os/rt/src/chvt.c ****  * @brief   Enables a one-shot virtual timer.
 312:../../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 313:../../../os/rt/src/chvt.c ****  *          specified as parameter.
 314:../../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 315:../../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 316:../../../os/rt/src/chvt.c ****  *
 317:../../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t object
 318:../../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 319:../../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 320:../../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 321:../../../os/rt/src/chvt.c ****  *                        normal time specification.
 322:../../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 323:../../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 324:../../../os/rt/src/chvt.c ****  *                      callback the timer is disabled and the structure can
 325:../../../os/rt/src/chvt.c ****  *                      be disposed or reused.
 326:../../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 327:../../../os/rt/src/chvt.c ****  *                      function
 328:../../../os/rt/src/chvt.c ****  *
 329:../../../os/rt/src/chvt.c ****  * @iclass
 330:../../../os/rt/src/chvt.c ****  */
 331:../../../os/rt/src/chvt.c **** void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 332:../../../os/rt/src/chvt.c ****                 vtfunc_t vtfunc, void *par) {
 596               		.loc 1 332 0
 597               		.cfi_startproc
 598               	.LVL64:
 599               	/* prologue: function */
 600               	/* frame size = 0 */
 601               	/* stack size = 0 */
 602               	.L__stack_usage = 0
 333:../../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 334:../../../os/rt/src/chvt.c **** 
 335:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 336:../../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 337:../../../os/rt/src/chvt.c **** 
 338:../../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 339:../../../os/rt/src/chvt.c ****   vtp->par     = par;
 603               		.loc 1 339 0
 604 0000 FC01      		movw r30,r24
 605 0002 3187      		std Z+9,r19
 606 0004 2087      		std Z+8,r18
 340:../../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 607               		.loc 1 340 0
 608 0006 5783      		std Z+7,r21
 609 0008 4683      		std Z+6,r20
 341:../../../os/rt/src/chvt.c ****   vtp->reload  = (sysinterval_t)0;
 610               		.loc 1 341 0
 611 000a 1386      		std Z+11,__zero_reg__
 612 000c 1286      		std Z+10,__zero_reg__
 342:../../../os/rt/src/chvt.c **** 
 343:../../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 344:../../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 613               		.loc 1 344 0
 614 000e 0C94 0000 		jmp vt_enqueue.constprop.2
 615               	.LVL65:
 616               		.cfi_endproc
 617               	.LFE203:
 619               		.section	.text.chVTDoSetContinuousI,"ax",@progbits
 620               	.global	chVTDoSetContinuousI
 622               	chVTDoSetContinuousI:
 623               	.LFB204:
 345:../../../os/rt/src/chvt.c **** }
 346:../../../os/rt/src/chvt.c **** 
 347:../../../os/rt/src/chvt.c **** /**
 348:../../../os/rt/src/chvt.c ****  * @brief   Enables a continuous virtual timer.
 349:../../../os/rt/src/chvt.c ****  * @details The timer is enabled and programmed to trigger after the delay
 350:../../../os/rt/src/chvt.c ****  *          specified as parameter.
 351:../../../os/rt/src/chvt.c ****  * @pre     The timer must not be already armed before calling this function.
 352:../../../os/rt/src/chvt.c ****  * @note    The callback function is invoked from interrupt context.
 353:../../../os/rt/src/chvt.c ****  *
 354:../../../os/rt/src/chvt.c ****  * @param[out] vtp      pointer to a @p virtual_timer_t object
 355:../../../os/rt/src/chvt.c ****  * @param[in] delay     the number of ticks before the operation timeouts, the
 356:../../../os/rt/src/chvt.c ****  *                      special values are handled as follow:
 357:../../../os/rt/src/chvt.c ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 358:../../../os/rt/src/chvt.c ****  *                        normal time specification.
 359:../../../os/rt/src/chvt.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 360:../../../os/rt/src/chvt.c ****  * @param[in] vtfunc    the timer callback function. After invoking the
 361:../../../os/rt/src/chvt.c ****  *                      callback the timer is restarted.
 362:../../../os/rt/src/chvt.c ****  * @param[in] par       a parameter that will be passed to the callback
 363:../../../os/rt/src/chvt.c ****  *                      function
 364:../../../os/rt/src/chvt.c ****  *
 365:../../../os/rt/src/chvt.c ****  * @iclass
 366:../../../os/rt/src/chvt.c ****  */
 367:../../../os/rt/src/chvt.c **** void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
 368:../../../os/rt/src/chvt.c ****                           vtfunc_t vtfunc, void *par) {
 624               		.loc 1 368 0
 625               		.cfi_startproc
 626               	.LVL66:
 627               	/* prologue: function */
 628               	/* frame size = 0 */
 629               	/* stack size = 0 */
 630               	.L__stack_usage = 0
 369:../../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 370:../../../os/rt/src/chvt.c **** 
 371:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 372:../../../os/rt/src/chvt.c ****   chDbgCheck((vtp != NULL) && (vtfunc != NULL) && (delay != TIME_IMMEDIATE));
 373:../../../os/rt/src/chvt.c **** 
 374:../../../os/rt/src/chvt.c ****   /* Timer initialization.*/
 375:../../../os/rt/src/chvt.c ****   vtp->par     = par;
 631               		.loc 1 375 0
 632 0000 FC01      		movw r30,r24
 633 0002 3187      		std Z+9,r19
 634 0004 2087      		std Z+8,r18
 376:../../../os/rt/src/chvt.c ****   vtp->func    = vtfunc;
 635               		.loc 1 376 0
 636 0006 5783      		std Z+7,r21
 637 0008 4683      		std Z+6,r20
 377:../../../os/rt/src/chvt.c ****   vtp->reload  = delay;
 638               		.loc 1 377 0
 639 000a 7387      		std Z+11,r23
 640 000c 6287      		std Z+10,r22
 378:../../../os/rt/src/chvt.c **** 
 379:../../../os/rt/src/chvt.c ****   /* Inserting the timer in the delta list.*/
 380:../../../os/rt/src/chvt.c ****   vt_enqueue(vtlp, vtp, delay);
 641               		.loc 1 380 0
 642 000e 0C94 0000 		jmp vt_enqueue.constprop.2
 643               	.LVL67:
 644               		.cfi_endproc
 645               	.LFE204:
 647               		.section	.text.chVTDoResetI,"ax",@progbits
 648               	.global	chVTDoResetI
 650               	chVTDoResetI:
 651               	.LFB205:
 381:../../../os/rt/src/chvt.c **** }
 382:../../../os/rt/src/chvt.c **** 
 383:../../../os/rt/src/chvt.c **** /**
 384:../../../os/rt/src/chvt.c ****  * @brief   Disables a Virtual Timer.
 385:../../../os/rt/src/chvt.c ****  * @pre     The timer must be in armed state before calling this function.
 386:../../../os/rt/src/chvt.c ****  *
 387:../../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t object
 388:../../../os/rt/src/chvt.c ****  *
 389:../../../os/rt/src/chvt.c ****  * @iclass
 390:../../../os/rt/src/chvt.c ****  */
 391:../../../os/rt/src/chvt.c **** void chVTDoResetI(virtual_timer_t *vtp) {
 652               		.loc 1 391 0
 653               		.cfi_startproc
 654               	.LVL68:
 655 0000 CF93      		push r28
 656               	.LCFI20:
 657               		.cfi_def_cfa_offset 3
 658               		.cfi_offset 28, -2
 659 0002 DF93      		push r29
 660               	.LCFI21:
 661               		.cfi_def_cfa_offset 4
 662               		.cfi_offset 29, -3
 663               	/* prologue: function */
 664               	/* frame size = 0 */
 665               	/* stack size = 2 */
 666               	.L__stack_usage = 2
 667 0004 FC01      		movw r30,r24
 668               	.LVL69:
 392:../../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 393:../../../os/rt/src/chvt.c **** 
 394:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 395:../../../os/rt/src/chvt.c ****   chDbgCheck(vtp != NULL);
 396:../../../os/rt/src/chvt.c ****   chDbgAssert(chVTIsArmedI(vtp), "timer not armed");
 397:../../../os/rt/src/chvt.c **** 
 398:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 399:../../../os/rt/src/chvt.c **** 
 400:../../../os/rt/src/chvt.c ****   /* The delta of the timer is added to the next timer.*/
 401:../../../os/rt/src/chvt.c ****   vtp->dlist.next->delta += vtp->dlist.delta;
 402:../../../os/rt/src/chvt.c **** 
 403:../../../os/rt/src/chvt.c ****  /* Removing the element from the delta list, marking it as not armed.*/
 404:../../../os/rt/src/chvt.c ****   (void) ch_dlist_dequeue(&vtp->dlist);
 405:../../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 406:../../../os/rt/src/chvt.c **** 
 407:../../../os/rt/src/chvt.c ****   /* The above code changes the value in the header when the removed element
 408:../../../os/rt/src/chvt.c ****      is the last of the list, restoring it.*/
 409:../../../os/rt/src/chvt.c ****   vtlp->dlist.delta = (sysinterval_t)-1;
 410:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 411:../../../os/rt/src/chvt.c ****   systime_t now;
 412:../../../os/rt/src/chvt.c ****   sysinterval_t nowdelta, delta;
 413:../../../os/rt/src/chvt.c **** 
 414:../../../os/rt/src/chvt.c ****   /* If the timer is not the first of the list then it is simply unlinked
 415:../../../os/rt/src/chvt.c ****      else the operation is more complex.*/
 416:../../../os/rt/src/chvt.c ****   if (!ch_dlist_isfirst(&vtlp->dlist, &vtp->dlist)) {
 669               		.loc 1 416 0
 670 0006 8091 0000 		lds r24,ch0+7
 671 000a 9091 0000 		lds r25,ch0+7+1
 672               	.LVL70:
 673 000e E817      		cp r30,r24
 674 0010 F907      		cpc r31,r25
 675 0012 01F0      		breq .L33
 676               	.LVL71:
 677               	.LBB188:
 678               	.LBB189:
 622:../../../os/rt/include/chlists.h **** }
 623:../../../os/rt/include/chlists.h **** 
 624:../../../os/rt/include/chlists.h **** /**
 625:../../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 626:../../../os/rt/include/chlists.h ****  *
 627:../../../os/rt/include/chlists.h ****  * @param[in] dlhp      pointer to the delta list header
 628:../../../os/rt/include/chlists.h ****  *
 629:../../../os/rt/include/chlists.h ****  * @notapi
 630:../../../os/rt/include/chlists.h ****  */
 631:../../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_remove_first(ch_delta_list_t *dlhp) {
 632:../../../os/rt/include/chlists.h ****   ch_delta_list_t *dlp = dlhp->next;
 633:../../../os/rt/include/chlists.h **** 
 634:../../../os/rt/include/chlists.h ****   dlhp->next       = dlp->next;
 635:../../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 636:../../../os/rt/include/chlists.h **** 
 637:../../../os/rt/include/chlists.h ****   return dlp;
 638:../../../os/rt/include/chlists.h **** }
 639:../../../os/rt/include/chlists.h **** 
 640:../../../os/rt/include/chlists.h **** /**
 641:../../../os/rt/include/chlists.h ****  * @brief   Dequeues an element from the delta list.
 642:../../../os/rt/include/chlists.h ****  *
 643:../../../os/rt/include/chlists.h ****  * @param[in] dlp       pointer to the delta list element
 644:../../../os/rt/include/chlists.h ****  *
 645:../../../os/rt/include/chlists.h ****  * @notapi
 646:../../../os/rt/include/chlists.h ****  */
 647:../../../os/rt/include/chlists.h **** static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {
 648:../../../os/rt/include/chlists.h **** 
 649:../../../os/rt/include/chlists.h ****   dlp->prev->next = dlp->next;
 679               		.loc 2 649 0
 680 0014 C281      		ldd r28,Z+2
 681 0016 D381      		ldd r29,Z+3
 682 0018 8081      		ld r24,Z
 683 001a 9181      		ldd r25,Z+1
 684 001c 9983      		std Y+1,r25
 685 001e 8883      		st Y,r24
 650:../../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 686               		.loc 2 650 0
 687 0020 A081      		ld r26,Z
 688 0022 B181      		ldd r27,Z+1
 689 0024 1396      		adiw r26,2+1
 690 0026 DC93      		st X,r29
 691 0028 CE93      		st -X,r28
 692 002a 1297      		sbiw r26,2
 693               	.LVL72:
 694               	.LBE189:
 695               	.LBE188:
 417:../../../os/rt/src/chvt.c **** 
 418:../../../os/rt/src/chvt.c ****     /* Removing the element from the delta list.*/
 419:../../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 420:../../../os/rt/src/chvt.c **** 
 421:../../../os/rt/src/chvt.c ****     /* Adding delta to the next element, if it is not the last one.*/
 422:../../../os/rt/src/chvt.c ****     vtp->dlist.next->delta += vtp->dlist.delta;
 696               		.loc 1 422 0
 697 002c 1496      		adiw r26,4
 698 002e 2D91      		ld r18,X+
 699 0030 3C91      		ld r19,X
 700 0032 1597      		sbiw r26,4+1
 701 0034 8481      		ldd r24,Z+4
 702 0036 9581      		ldd r25,Z+5
 703 0038 820F      		add r24,r18
 704 003a 931F      		adc r25,r19
 705 003c 1596      		adiw r26,4+1
 706 003e 9C93      		st X,r25
 707 0040 8E93      		st -X,r24
 708 0042 1497      		sbiw r26,4
 423:../../../os/rt/src/chvt.c **** 
 424:../../../os/rt/src/chvt.c ****     /* Marking timer as not armed.*/
 425:../../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 709               		.loc 1 425 0
 710 0044 1182      		std Z+1,__zero_reg__
 711 0046 1082      		st Z,__zero_reg__
 426:../../../os/rt/src/chvt.c **** 
 427:../../../os/rt/src/chvt.c ****     /* Special case when the removed element from the last position in the list,
 428:../../../os/rt/src/chvt.c ****        the value in the header must be restored, just doing it is faster than
 429:../../../os/rt/src/chvt.c ****        checking then doing.*/
 430:../../../os/rt/src/chvt.c ****     vtlp->dlist.delta = (sysinterval_t)-1;
 712               		.loc 1 430 0
 713 0048 8FEF      		ldi r24,lo8(-1)
 714 004a 9FEF      		ldi r25,lo8(-1)
 715 004c 9093 0000 		sts ch0+11+1,r25
 716 0050 8093 0000 		sts ch0+11,r24
 717               	.LVL73:
 718               	.L32:
 719               	/* epilogue start */
 431:../../../os/rt/src/chvt.c **** 
 432:../../../os/rt/src/chvt.c ****     return;
 433:../../../os/rt/src/chvt.c ****   }
 434:../../../os/rt/src/chvt.c **** 
 435:../../../os/rt/src/chvt.c ****   /* Removing the first timer from the list, marking it as not armed.*/
 436:../../../os/rt/src/chvt.c ****   ch_dlist_remove_first(&vtlp->dlist);
 437:../../../os/rt/src/chvt.c ****   vtp->dlist.next = NULL;
 438:../../../os/rt/src/chvt.c **** 
 439:../../../os/rt/src/chvt.c ****   /* If the list become empty then the alarm timer is stopped and done.*/
 440:../../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 441:../../../os/rt/src/chvt.c **** 
 442:../../../os/rt/src/chvt.c ****     port_timer_stop_alarm();
 443:../../../os/rt/src/chvt.c **** 
 444:../../../os/rt/src/chvt.c ****     return;
 445:../../../os/rt/src/chvt.c ****   }
 446:../../../os/rt/src/chvt.c **** 
 447:../../../os/rt/src/chvt.c ****   /* The delta of the removed timer is added to the new first timer.*/
 448:../../../os/rt/src/chvt.c ****   vtlp->dlist.next->delta += vtp->dlist.delta;
 449:../../../os/rt/src/chvt.c **** 
 450:../../../os/rt/src/chvt.c ****   /* Distance in ticks between the last alarm event and current time.*/
 451:../../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 452:../../../os/rt/src/chvt.c ****   nowdelta = chTimeDiffX(vtlp->lasttime, now);
 453:../../../os/rt/src/chvt.c **** 
 454:../../../os/rt/src/chvt.c ****   /* If the current time surpassed the time of the next element in list
 455:../../../os/rt/src/chvt.c ****      then the event interrupt is already pending, just return.*/
 456:../../../os/rt/src/chvt.c ****   if (nowdelta >= vtlp->dlist.next->delta) {
 457:../../../os/rt/src/chvt.c ****     return;
 458:../../../os/rt/src/chvt.c ****   }
 459:../../../os/rt/src/chvt.c **** 
 460:../../../os/rt/src/chvt.c ****   /* Distance from the next scheduled event and now.*/
 461:../../../os/rt/src/chvt.c ****   delta = vtlp->dlist.next->delta - nowdelta;
 462:../../../os/rt/src/chvt.c **** 
 463:../../../os/rt/src/chvt.c ****   /* Setting up the alarm.*/
 464:../../../os/rt/src/chvt.c ****   vt_set_alarm(vtlp, now, delta);
 465:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 466:../../../os/rt/src/chvt.c **** }
 720               		.loc 1 466 0
 721 0054 DF91      		pop r29
 722 0056 CF91      		pop r28
 723 0058 0895      		ret
 724               	.LVL74:
 725               	.L33:
 726               	.LBB190:
 727               	.LBB191:
 634:../../../os/rt/include/chlists.h ****   dlhp->next->prev = dlhp;
 728               		.loc 2 634 0
 729 005a A081      		ld r26,Z
 730 005c B181      		ldd r27,Z+1
 731 005e B093 0000 		sts ch0+7+1,r27
 732 0062 A093 0000 		sts ch0+7,r26
 635:../../../os/rt/include/chlists.h **** 
 733               		.loc 2 635 0
 734 0066 80E0      		ldi r24,lo8(ch0+7)
 735 0068 90E0      		ldi r25,hi8(ch0+7)
 736               	.LVL75:
 737 006a 1396      		adiw r26,2+1
 738 006c 9C93      		st X,r25
 739 006e 8E93      		st -X,r24
 740 0070 1297      		sbiw r26,2
 741               	.LVL76:
 742               	.LBE191:
 743               	.LBE190:
 437:../../../os/rt/src/chvt.c **** 
 744               		.loc 1 437 0
 745 0072 1182      		std Z+1,__zero_reg__
 746 0074 1082      		st Z,__zero_reg__
 747               	.LVL77:
 748               	.LBB192:
 749               	.LBB193:
 503:../../../os/rt/include/chlists.h **** }
 750               		.loc 2 503 0
 751 0076 A091 0000 		lds r26,ch0+7
 752 007a B091 0000 		lds r27,ch0+7+1
 753               	.LVL78:
 754               	.LBE193:
 755               	.LBE192:
 440:../../../os/rt/src/chvt.c **** 
 756               		.loc 1 440 0
 757 007e A817      		cp r26,r24
 758 0080 B907      		cpc r27,r25
 759 0082 01F0      		breq .L36
 448:../../../os/rt/src/chvt.c **** 
 760               		.loc 1 448 0
 761 0084 1496      		adiw r26,4
 762 0086 2D91      		ld r18,X+
 763 0088 3C91      		ld r19,X
 764 008a 1597      		sbiw r26,4+1
 765 008c 8481      		ldd r24,Z+4
 766 008e 9581      		ldd r25,Z+5
 767               	.LVL79:
 768 0090 820F      		add r24,r18
 769 0092 931F      		adc r25,r19
 770 0094 1596      		adiw r26,4+1
 771 0096 9C93      		st X,r25
 772 0098 8E93      		st -X,r24
 773 009a 1497      		sbiw r26,4
 774               	.LBB194:
 775               	.LBB195:
 776               	.LBB196:
 777               		.loc 3 113 0
 778 009c 0E94 0000 		call stGetCounter
 779               	.LVL80:
 780               	.LBE196:
 781               	.LBE195:
 782               	.LBE194:
 783               	.LBB197:
 784               	.LBB198:
 785               		.loc 4 465 0
 786 00a0 2091 0000 		lds r18,ch0+13
 787 00a4 3091 0000 		lds r19,ch0+13+1
 788 00a8 AC01      		movw r20,r24
 789 00aa 421B      		sub r20,r18
 790 00ac 530B      		sbc r21,r19
 791               	.LVL81:
 792               	.LBE198:
 793               	.LBE197:
 456:../../../os/rt/src/chvt.c ****     return;
 794               		.loc 1 456 0
 795 00ae E091 0000 		lds r30,ch0+7
 796 00b2 F091 0000 		lds r31,ch0+7+1
 797 00b6 6481      		ldd r22,Z+4
 798 00b8 7581      		ldd r23,Z+5
 799 00ba 4617      		cp r20,r22
 800 00bc 5707      		cpc r21,r23
 801 00be 00F4      		brsh .L32
 802               	.LVL82:
 464:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 803               		.loc 1 464 0
 804 00c0 641B      		sub r22,r20
 805 00c2 750B      		sbc r23,r21
 806               	.LVL83:
 807               	/* epilogue start */
 808               		.loc 1 466 0
 809 00c4 DF91      		pop r29
 810 00c6 CF91      		pop r28
 464:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 811               		.loc 1 464 0
 812 00c8 0C94 0000 		jmp vt_set_alarm.constprop.4
 813               	.LVL84:
 814               	.L36:
 815               	/* epilogue start */
 816               		.loc 1 466 0
 817 00cc DF91      		pop r29
 818 00ce CF91      		pop r28
 819               	.LBB199:
 820               	.LBB200:
  89:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 821               		.loc 3 89 0
 822 00d0 0C94 0000 		jmp stStopAlarm
 823               	.LVL85:
 824               	.LBE200:
 825               	.LBE199:
 826               		.cfi_endproc
 827               	.LFE205:
 829               		.section	.text.chVTGetRemainingIntervalI,"ax",@progbits
 830               	.global	chVTGetRemainingIntervalI
 832               	chVTGetRemainingIntervalI:
 833               	.LFB206:
 467:../../../os/rt/src/chvt.c **** 
 468:../../../os/rt/src/chvt.c **** /**
 469:../../../os/rt/src/chvt.c ****  * @brief   Returns the remaining time interval before next timer trigger.
 470:../../../os/rt/src/chvt.c ****  * @note    This function can be called while the timer is active.
 471:../../../os/rt/src/chvt.c ****  *
 472:../../../os/rt/src/chvt.c ****  * @param[in] vtp       pointer to a @p virtual_timer_t object
 473:../../../os/rt/src/chvt.c ****  * @return              The remaining time interval.
 474:../../../os/rt/src/chvt.c ****  *
 475:../../../os/rt/src/chvt.c ****  * @iclass
 476:../../../os/rt/src/chvt.c ****  */
 477:../../../os/rt/src/chvt.c **** sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp) {
 834               		.loc 1 477 0
 835               		.cfi_startproc
 836               	.LVL86:
 837 0000 CF93      		push r28
 838               	.LCFI22:
 839               		.cfi_def_cfa_offset 3
 840               		.cfi_offset 28, -2
 841 0002 DF93      		push r29
 842               	.LCFI23:
 843               		.cfi_def_cfa_offset 4
 844               		.cfi_offset 29, -3
 845               	/* prologue: function */
 846               	/* frame size = 0 */
 847               	/* stack size = 2 */
 848               	.L__stack_usage = 2
 849               	.LVL87:
 478:../../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 479:../../../os/rt/src/chvt.c ****   sysinterval_t delta;
 480:../../../os/rt/src/chvt.c ****   ch_delta_list_t *dlp;
 481:../../../os/rt/src/chvt.c **** 
 482:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 483:../../../os/rt/src/chvt.c **** 
 484:../../../os/rt/src/chvt.c ****   delta = (sysinterval_t)0;
 485:../../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 850               		.loc 1 485 0
 851 0004 E091 0000 		lds r30,ch0+7
 852 0008 F091 0000 		lds r31,ch0+7+1
 853               	.LVL88:
 484:../../../os/rt/src/chvt.c ****   dlp = vtlp->dlist.next;
 854               		.loc 1 484 0
 855 000c C0E0      		ldi r28,0
 856 000e D0E0      		ldi r29,0
 857 0010 00C0      		rjmp .L40
 858               	.LVL89:
 859               	.L38:
 486:../../../os/rt/src/chvt.c ****   do {
 487:../../../os/rt/src/chvt.c ****     delta += dlp->delta;
 488:../../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 489:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 490:../../../os/rt/src/chvt.c ****       systime_t now = chVTGetSystemTimeX();
 491:../../../os/rt/src/chvt.c ****       sysinterval_t nowdelta = chTimeDiffX(vtlp->lasttime, now);
 492:../../../os/rt/src/chvt.c ****       if (nowdelta > delta) {
 493:../../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 494:../../../os/rt/src/chvt.c ****       }
 495:../../../os/rt/src/chvt.c ****       return delta - nowdelta;
 496:../../../os/rt/src/chvt.c **** #else
 497:../../../os/rt/src/chvt.c ****       return delta;
 498:../../../os/rt/src/chvt.c **** #endif
 499:../../../os/rt/src/chvt.c ****     }
 500:../../../os/rt/src/chvt.c ****     dlp = dlp->next;
 860               		.loc 1 500 0
 861 0012 0190      		ld __tmp_reg__,Z+
 862 0014 F081      		ld r31,Z
 863 0016 E02D      		mov r30,__tmp_reg__
 864               	.LVL90:
 501:../../../os/rt/src/chvt.c ****   } while (dlp != &vtlp->dlist);
 865               		.loc 1 501 0
 866 0018 30E0      		ldi r19,hi8(ch0+7)
 867 001a E030      		cpi r30,lo8(ch0+7)
 868 001c F307      		cpc r31,r19
 869 001e 01F0      		breq .L43
 870               	.LVL91:
 871               	.L40:
 487:../../../os/rt/src/chvt.c ****     if (dlp == &vtp->dlist) {
 872               		.loc 1 487 0
 873 0020 2481      		ldd r18,Z+4
 874 0022 3581      		ldd r19,Z+5
 875 0024 C20F      		add r28,r18
 876 0026 D31F      		adc r29,r19
 877               	.LVL92:
 488:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA > 0
 878               		.loc 1 488 0
 879 0028 E817      		cp r30,r24
 880 002a F907      		cpc r31,r25
 881 002c 01F4      		brne .L38
 882               	.LBB201:
 883               	.LBB202:
 884               	.LBB203:
 885               	.LBB204:
 886               		.loc 3 113 0
 887 002e 0E94 0000 		call stGetCounter
 888               	.LVL93:
 889               	.LBE204:
 890               	.LBE203:
 891               	.LBE202:
 892               	.LBB205:
 893               	.LBB206:
 894               		.loc 4 465 0
 895 0032 2091 0000 		lds r18,ch0+13
 896 0036 3091 0000 		lds r19,ch0+13+1
 897 003a 821B      		sub r24,r18
 898 003c 930B      		sbc r25,r19
 899               	.LVL94:
 900               	.LBE206:
 901               	.LBE205:
 492:../../../os/rt/src/chvt.c ****         return (sysinterval_t)0;
 902               		.loc 1 492 0
 903 003e C817      		cp r28,r24
 904 0040 D907      		cpc r29,r25
 905 0042 00F0      		brlo .L41
 495:../../../os/rt/src/chvt.c **** #else
 906               		.loc 1 495 0
 907 0044 9E01      		movw r18,r28
 908 0046 281B      		sub r18,r24
 909 0048 390B      		sbc r19,r25
 910 004a C901      		movw r24,r18
 911               	/* epilogue start */
 912               	.LBE201:
 502:../../../os/rt/src/chvt.c **** 
 503:../../../os/rt/src/chvt.c ****   chDbgAssert(false, "timer not in list");
 504:../../../os/rt/src/chvt.c **** 
 505:../../../os/rt/src/chvt.c ****   return (sysinterval_t)-1;
 506:../../../os/rt/src/chvt.c **** }
 913               		.loc 1 506 0
 914 004c DF91      		pop r29
 915 004e CF91      		pop r28
 916               	.LVL95:
 917 0050 0895      		ret
 918               	.LVL96:
 919               	.L41:
 920               	.LBB207:
 493:../../../os/rt/src/chvt.c ****       }
 921               		.loc 1 493 0
 922 0052 80E0      		ldi r24,0
 923 0054 90E0      		ldi r25,0
 924               	/* epilogue start */
 925               	.LBE207:
 926               		.loc 1 506 0
 927 0056 DF91      		pop r29
 928 0058 CF91      		pop r28
 929               	.LVL97:
 930 005a 0895      		ret
 931               	.LVL98:
 932               	.L43:
 505:../../../os/rt/src/chvt.c **** }
 933               		.loc 1 505 0
 934 005c 8FEF      		ldi r24,lo8(-1)
 935 005e 9FEF      		ldi r25,lo8(-1)
 936               	.LVL99:
 937               	/* epilogue start */
 938               		.loc 1 506 0
 939 0060 DF91      		pop r29
 940 0062 CF91      		pop r28
 941               	.LVL100:
 942 0064 0895      		ret
 943               		.cfi_endproc
 944               	.LFE206:
 946               		.section	.text.chVTDoTickI,"ax",@progbits
 947               	.global	chVTDoTickI
 949               	chVTDoTickI:
 950               	.LFB207:
 507:../../../os/rt/src/chvt.c **** 
 508:../../../os/rt/src/chvt.c **** /**
 509:../../../os/rt/src/chvt.c ****  * @brief   Virtual timers ticker.
 510:../../../os/rt/src/chvt.c ****  * @note    The system lock is released before entering the callback and
 511:../../../os/rt/src/chvt.c ****  *          re-acquired immediately after. It is callback's responsibility
 512:../../../os/rt/src/chvt.c ****  *          to acquire the lock if needed. This is done in order to reduce
 513:../../../os/rt/src/chvt.c ****  *          interrupts jitter when many timers are in use.
 514:../../../os/rt/src/chvt.c ****  *
 515:../../../os/rt/src/chvt.c ****  * @iclass
 516:../../../os/rt/src/chvt.c ****  */
 517:../../../os/rt/src/chvt.c **** void chVTDoTickI(void) {
 951               		.loc 1 517 0
 952               		.cfi_startproc
 953 0000 CF92      		push r12
 954               	.LCFI24:
 955               		.cfi_def_cfa_offset 3
 956               		.cfi_offset 12, -2
 957 0002 DF92      		push r13
 958               	.LCFI25:
 959               		.cfi_def_cfa_offset 4
 960               		.cfi_offset 13, -3
 961 0004 EF92      		push r14
 962               	.LCFI26:
 963               		.cfi_def_cfa_offset 5
 964               		.cfi_offset 14, -4
 965 0006 FF92      		push r15
 966               	.LCFI27:
 967               		.cfi_def_cfa_offset 6
 968               		.cfi_offset 15, -5
 969 0008 0F93      		push r16
 970               	.LCFI28:
 971               		.cfi_def_cfa_offset 7
 972               		.cfi_offset 16, -6
 973 000a 1F93      		push r17
 974               	.LCFI29:
 975               		.cfi_def_cfa_offset 8
 976               		.cfi_offset 17, -7
 977 000c CF93      		push r28
 978               	.LCFI30:
 979               		.cfi_def_cfa_offset 9
 980               		.cfi_offset 28, -8
 981 000e DF93      		push r29
 982               	.LCFI31:
 983               		.cfi_def_cfa_offset 10
 984               		.cfi_offset 29, -9
 985               	/* prologue: function */
 986               	/* frame size = 0 */
 987               	/* stack size = 8 */
 988               	.L__stack_usage = 8
 989               	.LVL101:
 990               	.LBB208:
 991               	.LBB209:
 992               	.LBB210:
 993               	.LBB211:
 621:../../../os/rt/include/chlists.h **** }
 994               		.loc 2 621 0
 995 0010 EE24      		clr r14
 996 0012 EA94      		dec r14
 997 0014 FE2C      		mov r15,r14
 998 0016 00C0      		rjmp .L47
 999               	.LVL102:
 1000               	.L46:
 1001               	.LBE211:
 1002               	.LBE210:
 1003               	.LBE209:
 518:../../../os/rt/src/chvt.c ****   virtual_timers_list_t *vtlp = &currcore->vtlist;
 519:../../../os/rt/src/chvt.c **** 
 520:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 521:../../../os/rt/src/chvt.c **** 
 522:../../../os/rt/src/chvt.c **** #if CH_CFG_ST_TIMEDELTA == 0
 523:../../../os/rt/src/chvt.c ****   vtlp->systime++;
 524:../../../os/rt/src/chvt.c ****   if (ch_dlist_notempty(&vtlp->dlist)) {
 525:../../../os/rt/src/chvt.c ****     /* The list is not empty, processing elements on top.*/
 526:../../../os/rt/src/chvt.c ****     --vtlp->dlist.next->delta;
 527:../../../os/rt/src/chvt.c ****     while (vtlp->dlist.next->delta == (sysinterval_t)0) {
 528:../../../os/rt/src/chvt.c ****       virtual_timer_t *vtp;
 529:../../../os/rt/src/chvt.c **** 
 530:../../../os/rt/src/chvt.c ****       /* Triggered timer.*/
 531:../../../os/rt/src/chvt.c ****       vtp = (virtual_timer_t *)vtlp->dlist.next;
 532:../../../os/rt/src/chvt.c **** 
 533:../../../os/rt/src/chvt.c ****       /* Removing the element from the delta list, marking it as not armed.*/
 534:../../../os/rt/src/chvt.c ****       (void) ch_dlist_dequeue(&vtp->dlist);
 535:../../../os/rt/src/chvt.c ****       vtp->dlist.next = NULL;
 536:../../../os/rt/src/chvt.c **** 
 537:../../../os/rt/src/chvt.c ****       chSysUnlockFromISR();
 538:../../../os/rt/src/chvt.c ****       vtp->func(vtp, vtp->par);
 539:../../../os/rt/src/chvt.c ****       chSysLockFromISR();
 540:../../../os/rt/src/chvt.c **** 
 541:../../../os/rt/src/chvt.c ****       /* If a reload is defined the timer needs to be restarted.*/
 542:../../../os/rt/src/chvt.c ****       if (vtp->reload > (sysinterval_t)0) {
 543:../../../os/rt/src/chvt.c ****         ch_dlist_insert(&vtlp->dlist, &vtp->dlist, vtp->reload);
 544:../../../os/rt/src/chvt.c ****       }
 545:../../../os/rt/src/chvt.c ****     }
 546:../../../os/rt/src/chvt.c ****   }
 547:../../../os/rt/src/chvt.c **** #else /* CH_CFG_ST_TIMEDELTA > 0 */
 548:../../../os/rt/src/chvt.c ****   virtual_timer_t *vtp;
 549:../../../os/rt/src/chvt.c ****   sysinterval_t nowdelta;
 550:../../../os/rt/src/chvt.c ****   systime_t now;
 551:../../../os/rt/src/chvt.c **** 
 552:../../../os/rt/src/chvt.c ****   /* Looping through timers consuming all timers with deltas lower or equal
 553:../../../os/rt/src/chvt.c ****      than the interval between "now" and "lasttime".*/
 554:../../../os/rt/src/chvt.c ****   while (true) {
 555:../../../os/rt/src/chvt.c ****     systime_t lasttime;
 556:../../../os/rt/src/chvt.c **** 
 557:../../../os/rt/src/chvt.c ****     /* First timer in the delta list.*/
 558:../../../os/rt/src/chvt.c ****     vtp = (virtual_timer_t *)vtlp->dlist.next;
 559:../../../os/rt/src/chvt.c **** 
 560:../../../os/rt/src/chvt.c ****     /* Delta between current time and last execution time.*/
 561:../../../os/rt/src/chvt.c ****     now = chVTGetSystemTimeX();
 562:../../../os/rt/src/chvt.c ****     nowdelta = chTimeDiffX(vtlp->lasttime, now);
 563:../../../os/rt/src/chvt.c **** 
 564:../../../os/rt/src/chvt.c ****     /* Loop break condition.
 565:../../../os/rt/src/chvt.c ****        Note that the list scan is limited by the delta list header having
 566:../../../os/rt/src/chvt.c ****        "vtlp->dlist.delta == (sysinterval_t)-1" which is greater than all
 567:../../../os/rt/src/chvt.c ****        deltas*/
 568:../../../os/rt/src/chvt.c ****     if (nowdelta < vtp->dlist.delta) {
 569:../../../os/rt/src/chvt.c ****       break;
 570:../../../os/rt/src/chvt.c ****     }
 571:../../../os/rt/src/chvt.c **** 
 572:../../../os/rt/src/chvt.c ****     /* Last time deadline is updated to the next timer's time.*/
 573:../../../os/rt/src/chvt.c ****     lasttime = chTimeAddX(vtlp->lasttime, vtp->dlist.delta);
 574:../../../os/rt/src/chvt.c ****     vtlp->lasttime = lasttime;
 575:../../../os/rt/src/chvt.c **** 
 576:../../../os/rt/src/chvt.c ****     /* Removing the timer from the list, marking it as not armed.*/
 577:../../../os/rt/src/chvt.c ****     (void) ch_dlist_dequeue(&vtp->dlist);
 578:../../../os/rt/src/chvt.c ****     vtp->dlist.next = NULL;
 579:../../../os/rt/src/chvt.c **** 
 580:../../../os/rt/src/chvt.c ****     /* If the list becomes empty then the alarm is disabled.*/
 581:../../../os/rt/src/chvt.c ****     if (ch_dlist_isempty(&vtlp->dlist)) {
 582:../../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 583:../../../os/rt/src/chvt.c ****     }
 584:../../../os/rt/src/chvt.c **** 
 585:../../../os/rt/src/chvt.c ****     /* The callback is invoked outside the kernel critical section, it
 586:../../../os/rt/src/chvt.c ****        is re-entered on the callback return. Note that "lasttime" can be
 587:../../../os/rt/src/chvt.c ****        modified within the callback if some timer function is called.*/
 588:../../../os/rt/src/chvt.c ****     chSysUnlockFromISR();
 589:../../../os/rt/src/chvt.c **** 
 590:../../../os/rt/src/chvt.c ****     vtp->func(vtp, vtp->par);
 1004               		.loc 1 590 0
 1005 0018 6885      		ldd r22,Y+8
 1006 001a 7985      		ldd r23,Y+9
 1007 001c EE81      		ldd r30,Y+6
 1008 001e FF81      		ldd r31,Y+7
 1009 0020 CE01      		movw r24,r28
 1010 0022 0995      		icall
 1011               	.LVL103:
 591:../../../os/rt/src/chvt.c **** 
 592:../../../os/rt/src/chvt.c ****     chSysLockFromISR();
 593:../../../os/rt/src/chvt.c **** 
 594:../../../os/rt/src/chvt.c ****     /* If a reload is defined the timer needs to be restarted.*/
 595:../../../os/rt/src/chvt.c ****     if (unlikely(vtp->reload > (sysinterval_t)0)) {
 1012               		.loc 1 595 0
 1013 0024 8A85      		ldd r24,Y+10
 1014 0026 9B85      		ldd r25,Y+11
 1015 0028 892B      		or r24,r25
 1016 002a 01F0      		breq .+2
 1017 002c 00C0      		rjmp .L59
 1018               	.LVL104:
 1019               	.L47:
 558:../../../os/rt/src/chvt.c **** 
 1020               		.loc 1 558 0
 1021 002e C091 0000 		lds r28,ch0+7
 1022 0032 D091 0000 		lds r29,ch0+7+1
 1023               	.LVL105:
 1024               	.LBB225:
 1025               	.LBB226:
 1026               	.LBB227:
 1027               		.loc 3 113 0
 1028 0036 0E94 0000 		call stGetCounter
 1029               	.LVL106:
 1030               	.LBE227:
 1031               	.LBE226:
 1032               	.LBE225:
 562:../../../os/rt/src/chvt.c **** 
 1033               		.loc 1 562 0
 1034 003a 0091 0000 		lds r16,ch0+13
 1035 003e 1091 0000 		lds r17,ch0+13+1
 1036               	.LVL107:
 1037               	.LBB228:
 1038               	.LBB229:
 1039               		.loc 4 465 0
 1040 0042 AC01      		movw r20,r24
 1041 0044 401B      		sub r20,r16
 1042 0046 510B      		sbc r21,r17
 1043               	.LVL108:
 1044               	.LBE229:
 1045               	.LBE228:
 568:../../../os/rt/src/chvt.c ****       break;
 1046               		.loc 1 568 0
 1047 0048 2C81      		ldd r18,Y+4
 1048 004a 3D81      		ldd r19,Y+5
 1049 004c 4217      		cp r20,r18
 1050 004e 5307      		cpc r21,r19
 1051 0050 00F0      		brlo .L45
 1052               	.LVL109:
 1053               	.LBB230:
 1054               	.LBB231:
 449:../../../os/rt/include/chtime.h **** }
 1055               		.loc 4 449 0
 1056 0052 020F      		add r16,r18
 1057 0054 131F      		adc r17,r19
 1058               	.LVL110:
 1059               	.LBE231:
 1060               	.LBE230:
 574:../../../os/rt/src/chvt.c **** 
 1061               		.loc 1 574 0
 1062 0056 1093 0000 		sts ch0+13+1,r17
 1063 005a 0093 0000 		sts ch0+13,r16
 1064               	.LVL111:
 1065               	.LBB232:
 1066               	.LBB233:
 649:../../../os/rt/include/chlists.h ****   dlp->next->prev = dlp->prev;
 1067               		.loc 2 649 0
 1068 005e EA81      		ldd r30,Y+2
 1069 0060 FB81      		ldd r31,Y+3
 1070 0062 8881      		ld r24,Y
 1071 0064 9981      		ldd r25,Y+1
 1072 0066 9183      		std Z+1,r25
 1073 0068 8083      		st Z,r24
 1074               		.loc 2 650 0
 1075 006a A881      		ld r26,Y
 1076 006c B981      		ldd r27,Y+1
 1077 006e 1396      		adiw r26,2+1
 1078 0070 FC93      		st X,r31
 1079 0072 EE93      		st -X,r30
 1080 0074 1297      		sbiw r26,2
 1081               	.LVL112:
 1082               	.LBE233:
 1083               	.LBE232:
 578:../../../os/rt/src/chvt.c **** 
 1084               		.loc 1 578 0
 1085 0076 1982      		std Y+1,__zero_reg__
 1086 0078 1882      		st Y,__zero_reg__
 581:../../../os/rt/src/chvt.c ****       port_timer_stop_alarm();
 1087               		.loc 1 581 0
 1088 007a 8091 0000 		lds r24,ch0+7
 1089 007e 9091 0000 		lds r25,ch0+7+1
 1090 0082 8050      		subi r24,lo8(ch0+7)
 1091 0084 9040      		sbci r25,hi8(ch0+7)
 1092 0086 01F4      		brne .L46
 1093               	.LBB234:
 1094               	.LBB235:
  89:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 1095               		.loc 3 89 0
 1096 0088 0E94 0000 		call stStopAlarm
 1097               	.LVL113:
 1098 008c 00C0      		rjmp .L46
 1099               	.L45:
 1100               	.LBE235:
 1101               	.LBE234:
 1102               	.LBE208:
 596:../../../os/rt/src/chvt.c ****       sysinterval_t delta, delay;
 597:../../../os/rt/src/chvt.c **** 
 598:../../../os/rt/src/chvt.c ****       /* Refreshing the now delta after spending time in the callback for
 599:../../../os/rt/src/chvt.c ****          a more accurate detection of too fast reloads.*/
 600:../../../os/rt/src/chvt.c ****       now = chVTGetSystemTimeX();
 601:../../../os/rt/src/chvt.c ****       nowdelta = chTimeDiffX(lasttime, now);
 602:../../../os/rt/src/chvt.c **** 
 603:../../../os/rt/src/chvt.c **** #if !defined(CH_VT_RFCU_DISABLED)
 604:../../../os/rt/src/chvt.c ****       /* Checking if the required reload is feasible.*/
 605:../../../os/rt/src/chvt.c ****       if (nowdelta > vtp->reload) {
 606:../../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 607:../../../os/rt/src/chvt.c ****            proceeding with a minimum delay.*/
 608:../../../os/rt/src/chvt.c **** 
 609:../../../os/rt/src/chvt.c ****         chDbgAssert(false, "skipped deadline");
 610:../../../os/rt/src/chvt.c ****         chRFCUCollectFaultsI(CH_RFCU_VT_SKIPPED_DEADLINE);
 611:../../../os/rt/src/chvt.c **** 
 612:../../../os/rt/src/chvt.c ****         delay = (sysinterval_t)0;
 613:../../../os/rt/src/chvt.c ****       }
 614:../../../os/rt/src/chvt.c ****       else {
 615:../../../os/rt/src/chvt.c ****         /* Enqueuing the timer again using the calculated delta.*/
 616:../../../os/rt/src/chvt.c ****         delay = vtp->reload - nowdelta;
 617:../../../os/rt/src/chvt.c ****       }
 618:../../../os/rt/src/chvt.c **** #else
 619:../../../os/rt/src/chvt.c ****       /* Assertions as fallback.*/
 620:../../../os/rt/src/chvt.c ****       chDbgAssert(nowdelta <= vtp->reload, "skipped deadline");
 621:../../../os/rt/src/chvt.c **** 
 622:../../../os/rt/src/chvt.c ****       /* Enqueuing the timer again using the calculated delta.*/
 623:../../../os/rt/src/chvt.c ****       delay = vtp->reload - nowdelta;
 624:../../../os/rt/src/chvt.c **** #endif
 625:../../../os/rt/src/chvt.c **** 
 626:../../../os/rt/src/chvt.c ****       /* Special case where the timers list is empty.*/
 627:../../../os/rt/src/chvt.c ****       if (ch_dlist_isempty(&vtlp->dlist)) {
 628:../../../os/rt/src/chvt.c **** 
 629:../../../os/rt/src/chvt.c ****         vt_insert_first(vtlp, vtp, now, delay);
 630:../../../os/rt/src/chvt.c **** 
 631:../../../os/rt/src/chvt.c ****         return;
 632:../../../os/rt/src/chvt.c ****       }
 633:../../../os/rt/src/chvt.c **** 
 634:../../../os/rt/src/chvt.c ****       /* Delay as delta from 'lasttime'. Note, it can overflow and the value
 635:../../../os/rt/src/chvt.c ****          becomes lower than 'nowdelta'. In that case the delta is shortened
 636:../../../os/rt/src/chvt.c ****          to make it fit the numeric range and the timer will be triggered
 637:../../../os/rt/src/chvt.c ****          "nowdelta" cycles earlier.*/
 638:../../../os/rt/src/chvt.c ****       delta = nowdelta + delay;
 639:../../../os/rt/src/chvt.c ****       if (delta < nowdelta) {
 640:../../../os/rt/src/chvt.c ****         delta = delay;
 641:../../../os/rt/src/chvt.c ****       }
 642:../../../os/rt/src/chvt.c **** 
 643:../../../os/rt/src/chvt.c ****       /* Insert into delta list. */
 644:../../../os/rt/src/chvt.c ****       ch_dlist_insert(&vtlp->dlist, &vtp->dlist, delta);
 645:../../../os/rt/src/chvt.c ****     }
 646:../../../os/rt/src/chvt.c ****   }
 647:../../../os/rt/src/chvt.c **** 
 648:../../../os/rt/src/chvt.c ****   /* If the list is empty, nothing else to do.*/
 649:../../../os/rt/src/chvt.c ****   if (ch_dlist_isempty(&vtlp->dlist)) {
 1103               		.loc 1 649 0
 1104 008e 6091 0000 		lds r22,ch0+7
 1105 0092 7091 0000 		lds r23,ch0+7+1
 1106 0096 6050      		subi r22,lo8(ch0+7)
 1107 0098 7040      		sbci r23,hi8(ch0+7)
 1108 009a 01F4      		brne .+2
 1109 009c 00C0      		rjmp .L44
 650:../../../os/rt/src/chvt.c ****     return;
 651:../../../os/rt/src/chvt.c ****   }
 652:../../../os/rt/src/chvt.c **** 
 653:../../../os/rt/src/chvt.c ****   /* The "unprocessed nowdelta" time slice is added to "last time"
 654:../../../os/rt/src/chvt.c ****      and subtracted to next timer's delta.*/
 655:../../../os/rt/src/chvt.c ****   vtlp->lasttime += nowdelta;
 1110               		.loc 1 655 0
 1111 009e 9093 0000 		sts ch0+13+1,r25
 1112 00a2 8093 0000 		sts ch0+13,r24
 656:../../../os/rt/src/chvt.c ****   vtp->dlist.delta -= nowdelta;
 1113               		.loc 1 656 0
 1114 00a6 B901      		movw r22,r18
 1115 00a8 641B      		sub r22,r20
 1116 00aa 750B      		sbc r23,r21
 1117 00ac 7D83      		std Y+5,r23
 1118 00ae 6C83      		std Y+4,r22
 1119               	/* epilogue start */
 657:../../../os/rt/src/chvt.c **** 
 658:../../../os/rt/src/chvt.c ****   /* Update alarm time to next timer.*/
 659:../../../os/rt/src/chvt.c ****   vt_set_alarm(vtlp, now, vtp->dlist.delta);
 660:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 661:../../../os/rt/src/chvt.c **** }
 1120               		.loc 1 661 0
 1121 00b0 DF91      		pop r29
 1122 00b2 CF91      		pop r28
 1123               	.LVL114:
 1124 00b4 1F91      		pop r17
 1125 00b6 0F91      		pop r16
 1126 00b8 FF90      		pop r15
 1127 00ba EF90      		pop r14
 1128 00bc DF90      		pop r13
 1129 00be CF90      		pop r12
 659:../../../os/rt/src/chvt.c **** #endif /* CH_CFG_ST_TIMEDELTA > 0 */
 1130               		.loc 1 659 0
 1131 00c0 0C94 0000 		jmp vt_set_alarm.constprop.4
 1132               	.LVL115:
 1133               	.L59:
 1134               	.LBB239:
 1135               	.LBB236:
 1136               	.LBB215:
 1137               	.LBB216:
 1138               	.LBB217:
 1139               		.loc 3 113 0
 1140 00c4 0E94 0000 		call stGetCounter
 1141               	.LVL116:
 1142 00c8 6C01      		movw r12,r24
 1143               	.LVL117:
 1144               	.LBE217:
 1145               	.LBE216:
 1146               	.LBE215:
 1147               	.LBB218:
 1148               	.LBB219:
 1149               		.loc 4 465 0
 1150 00ca AC01      		movw r20,r24
 1151 00cc 401B      		sub r20,r16
 1152 00ce 510B      		sbc r21,r17
 1153 00d0 8A01      		movw r16,r20
 1154               	.LVL118:
 1155               	.LBE219:
 1156               	.LBE218:
 605:../../../os/rt/src/chvt.c ****         /* System time is already past the deadline, logging the fault and
 1157               		.loc 1 605 0
 1158 00d2 8A85      		ldd r24,Y+10
 1159 00d4 9B85      		ldd r25,Y+11
 1160 00d6 8417      		cp r24,r20
 1161 00d8 9507      		cpc r25,r21
 1162 00da 00F0      		brlo .L60
 616:../../../os/rt/src/chvt.c ****       }
 1163               		.loc 1 616 0
 1164 00dc AC01      		movw r20,r24
 1165 00de 401B      		sub r20,r16
 1166 00e0 510B      		sbc r21,r17
 1167               	.LVL119:
 1168               	.LBB220:
 1169               	.LBB221:
 503:../../../os/rt/include/chlists.h **** }
 1170               		.loc 2 503 0
 1171 00e2 E091 0000 		lds r30,ch0+7
 1172 00e6 F091 0000 		lds r31,ch0+7+1
 1173               	.LVL120:
 1174               	.LBE221:
 1175               	.LBE220:
 627:../../../os/rt/src/chvt.c **** 
 1176               		.loc 1 627 0
 1177 00ea 20E0      		ldi r18,hi8(ch0+7)
 1178 00ec E030      		cpi r30,lo8(ch0+7)
 1179 00ee F207      		cpc r31,r18
 1180 00f0 01F4      		brne .+2
 1181 00f2 00C0      		rjmp .L49
 1182               	.LVL121:
 1183               	.L50:
 1184               	.LBB223:
 1185               	.LBB214:
 604:../../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1186               		.loc 2 604 0
 1187 00f4 2481      		ldd r18,Z+4
 1188 00f6 3581      		ldd r19,Z+5
 1189 00f8 2817      		cp r18,r24
 1190 00fa 3907      		cpc r19,r25
 1191 00fc 00F4      		brsh .L51
 1192               	.LVL122:
 1193               	.L52:
 608:../../../os/rt/include/chlists.h ****     dlp = dlp->next;
 1194               		.loc 2 608 0
 1195 00fe 821B      		sub r24,r18
 1196 0100 930B      		sbc r25,r19
 1197               	.LVL123:
 609:../../../os/rt/include/chlists.h ****   }
 1198               		.loc 2 609 0
 1199 0102 0190      		ld __tmp_reg__,Z+
 1200 0104 F081      		ld r31,Z
 1201 0106 E02D      		mov r30,__tmp_reg__
 1202               	.LVL124:
 604:../../../os/rt/include/chlists.h ****     /* Debug assert if the element is already in the list.*/
 1203               		.loc 2 604 0
 1204 0108 2481      		ldd r18,Z+4
 1205 010a 3581      		ldd r19,Z+5
 1206 010c 2817      		cp r18,r24
 1207 010e 3907      		cpc r19,r25
 1208 0110 00F0      		brlo .L52
 1209               	.L51:
 1210               	.LVL125:
 1211               	.LBB212:
 1212               	.LBB213:
 580:../../../os/rt/include/chlists.h ****   dlp->next       = dlhp;
 1213               		.loc 2 580 0
 1214 0112 9D83      		std Y+5,r25
 1215 0114 8C83      		std Y+4,r24
 581:../../../os/rt/include/chlists.h ****   dlp->prev       = dlp->next->prev;
 1216               		.loc 2 581 0
 1217 0116 F983      		std Y+1,r31
 1218 0118 E883      		st Y,r30
 582:../../../os/rt/include/chlists.h ****   dlp->prev->next = dlp;
 1219               		.loc 2 582 0
 1220 011a A281      		ldd r26,Z+2
 1221 011c B381      		ldd r27,Z+3
 1222 011e BB83      		std Y+3,r27
 1223 0120 AA83      		std Y+2,r26
 583:../../../os/rt/include/chlists.h ****   dlhp->prev      = dlp;
 1224               		.loc 2 583 0
 1225 0122 CD93      		st X+,r28
 1226 0124 DC93      		st X,r29
 584:../../../os/rt/include/chlists.h **** }
 1227               		.loc 2 584 0
 1228 0126 D383      		std Z+3,r29
 1229 0128 C283      		std Z+2,r28
 1230               	.LVL126:
 1231               	.LBE213:
 1232               	.LBE212:
 616:../../../os/rt/include/chlists.h **** 
 1233               		.loc 2 616 0
 1234 012a 2481      		ldd r18,Z+4
 1235 012c 3581      		ldd r19,Z+5
 1236 012e A901      		movw r20,r18
 1237 0130 481B      		sub r20,r24
 1238 0132 590B      		sbc r21,r25
 1239 0134 5583      		std Z+5,r21
 1240 0136 4483      		std Z+4,r20
 621:../../../os/rt/include/chlists.h **** }
 1241               		.loc 2 621 0
 1242 0138 F092 0000 		sts ch0+11+1,r15
 1243 013c E092 0000 		sts ch0+11,r14
 1244 0140 00C0      		rjmp .L47
 1245               	.LVL127:
 1246               	.L60:
 1247               	.LBE214:
 1248               	.LBE223:
 610:../../../os/rt/src/chvt.c **** 
 1249               		.loc 1 610 0
 1250 0142 62E0      		ldi r22,lo8(2)
 1251 0144 70E0      		ldi r23,0
 1252 0146 80E0      		ldi r24,0
 1253 0148 90E0      		ldi r25,0
 1254 014a 0E94 0000 		call chRFCUCollectFaultsI
 1255               	.LVL128:
 1256               	.LBB224:
 1257               	.LBB222:
 503:../../../os/rt/include/chlists.h **** }
 1258               		.loc 2 503 0
 1259 014e E091 0000 		lds r30,ch0+7
 1260 0152 F091 0000 		lds r31,ch0+7+1
 1261               	.LVL129:
 1262               	.LBE222:
 1263               	.LBE224:
 627:../../../os/rt/src/chvt.c **** 
 1264               		.loc 1 627 0
 1265 0156 50E0      		ldi r21,hi8(ch0+7)
 1266 0158 E030      		cpi r30,lo8(ch0+7)
 1267 015a F507      		cpc r31,r21
 1268 015c 01F0      		breq .L55
 1269 015e C801      		movw r24,r16
 1270 0160 00C0      		rjmp .L50
 1271               	.LVL130:
 1272               	.L44:
 1273               	/* epilogue start */
 1274               	.LBE236:
 1275               	.LBE239:
 1276               		.loc 1 661 0
 1277 0162 DF91      		pop r29
 1278 0164 CF91      		pop r28
 1279               	.LVL131:
 1280 0166 1F91      		pop r17
 1281 0168 0F91      		pop r16
 1282 016a FF90      		pop r15
 1283 016c EF90      		pop r14
 1284 016e DF90      		pop r13
 1285 0170 CF90      		pop r12
 1286 0172 0895      		ret
 1287               	.LVL132:
 1288               	.L55:
 1289               	.LBB240:
 1290               	.LBB237:
 612:../../../os/rt/src/chvt.c ****       }
 1291               		.loc 1 612 0
 1292 0174 40E0      		ldi r20,0
 1293 0176 50E0      		ldi r21,0
 1294               	.LVL133:
 1295               	.L49:
 629:../../../os/rt/src/chvt.c **** 
 1296               		.loc 1 629 0
 1297 0178 B601      		movw r22,r12
 1298 017a CE01      		movw r24,r28
 1299               	/* epilogue start */
 1300               	.LBE237:
 1301               	.LBE240:
 1302               		.loc 1 661 0
 1303 017c DF91      		pop r29
 1304 017e CF91      		pop r28
 1305               	.LVL134:
 1306 0180 1F91      		pop r17
 1307 0182 0F91      		pop r16
 1308 0184 FF90      		pop r15
 1309 0186 EF90      		pop r14
 1310 0188 DF90      		pop r13
 1311 018a CF90      		pop r12
 1312               	.LBB241:
 1313               	.LBB238:
 629:../../../os/rt/src/chvt.c **** 
 1314               		.loc 1 629 0
 1315 018c 0C94 0000 		jmp vt_insert_first.constprop.3
 1316               	.LVL135:
 1317               	.LBE238:
 1318               	.LBE241:
 1319               		.cfi_endproc
 1320               	.LFE207:
 1322               		.section	.text.chVTGetTimeStampI,"ax",@progbits
 1323               	.global	chVTGetTimeStampI
 1325               	chVTGetTimeStampI:
 1326               	.LFB208:
 662:../../../os/rt/src/chvt.c **** 
 663:../../../os/rt/src/chvt.c **** #if (CH_CFG_USE_TIMESTAMP == TRUE) || defined(__DOXYGEN__)
 664:../../../os/rt/src/chvt.c **** /**
 665:../../../os/rt/src/chvt.c ****  * @brief   Generates a monotonic time stamp.
 666:../../../os/rt/src/chvt.c ****  * @details This function generates a monotonic time stamp synchronized with
 667:../../../os/rt/src/chvt.c ****  *          the system time. The time stamp has the same resolution of
 668:../../../os/rt/src/chvt.c ****  *          system time.
 669:../../../os/rt/src/chvt.c ****  * @note    There is an assumption, this function must be called at
 670:../../../os/rt/src/chvt.c ****  *          least once before the system time wraps back to zero or
 671:../../../os/rt/src/chvt.c ****  *          synchronization is lost. You may use a periodic virtual timer with
 672:../../../os/rt/src/chvt.c ****  *          a very large interval in order to keep time stamps synchronized
 673:../../../os/rt/src/chvt.c ****  *          by calling this function.
 674:../../../os/rt/src/chvt.c ****  *
 675:../../../os/rt/src/chvt.c ****  * @return              The time stamp.
 676:../../../os/rt/src/chvt.c ****  *
 677:../../../os/rt/src/chvt.c ****  * @iclass
 678:../../../os/rt/src/chvt.c ****  */
 679:../../../os/rt/src/chvt.c **** systimestamp_t chVTGetTimeStampI(void) {
 1327               		.loc 1 679 0
 1328               		.cfi_startproc
 1329 0000 2F92      		push r2
 1330               	.LCFI32:
 1331               		.cfi_def_cfa_offset 3
 1332               		.cfi_offset 2, -2
 1333 0002 3F92      		push r3
 1334               	.LCFI33:
 1335               		.cfi_def_cfa_offset 4
 1336               		.cfi_offset 3, -3
 1337 0004 4F92      		push r4
 1338               	.LCFI34:
 1339               		.cfi_def_cfa_offset 5
 1340               		.cfi_offset 4, -4
 1341 0006 5F92      		push r5
 1342               	.LCFI35:
 1343               		.cfi_def_cfa_offset 6
 1344               		.cfi_offset 5, -5
 1345 0008 6F92      		push r6
 1346               	.LCFI36:
 1347               		.cfi_def_cfa_offset 7
 1348               		.cfi_offset 6, -6
 1349 000a 7F92      		push r7
 1350               	.LCFI37:
 1351               		.cfi_def_cfa_offset 8
 1352               		.cfi_offset 7, -7
 1353 000c 8F92      		push r8
 1354               	.LCFI38:
 1355               		.cfi_def_cfa_offset 9
 1356               		.cfi_offset 8, -8
 1357 000e 9F92      		push r9
 1358               	.LCFI39:
 1359               		.cfi_def_cfa_offset 10
 1360               		.cfi_offset 9, -9
 1361 0010 AF92      		push r10
 1362               	.LCFI40:
 1363               		.cfi_def_cfa_offset 11
 1364               		.cfi_offset 10, -10
 1365 0012 BF92      		push r11
 1366               	.LCFI41:
 1367               		.cfi_def_cfa_offset 12
 1368               		.cfi_offset 11, -11
 1369 0014 CF92      		push r12
 1370               	.LCFI42:
 1371               		.cfi_def_cfa_offset 13
 1372               		.cfi_offset 12, -12
 1373 0016 DF92      		push r13
 1374               	.LCFI43:
 1375               		.cfi_def_cfa_offset 14
 1376               		.cfi_offset 13, -13
 1377 0018 EF92      		push r14
 1378               	.LCFI44:
 1379               		.cfi_def_cfa_offset 15
 1380               		.cfi_offset 14, -14
 1381 001a FF92      		push r15
 1382               	.LCFI45:
 1383               		.cfi_def_cfa_offset 16
 1384               		.cfi_offset 15, -15
 1385 001c 0F93      		push r16
 1386               	.LCFI46:
 1387               		.cfi_def_cfa_offset 17
 1388               		.cfi_offset 16, -16
 1389 001e 1F93      		push r17
 1390               	.LCFI47:
 1391               		.cfi_def_cfa_offset 18
 1392               		.cfi_offset 17, -17
 1393               	/* prologue: function */
 1394               	/* frame size = 0 */
 1395               	/* stack size = 16 */
 1396               	.L__stack_usage = 16
 1397               	.LVL136:
 1398               	.LBB242:
 1399               	.LBB243:
 1400               	.LBB244:
 1401               		.loc 3 113 0
 1402 0020 0E94 0000 		call stGetCounter
 1403               	.LVL137:
 1404               	.LBE244:
 1405               	.LBE243:
 1406               	.LBE242:
 680:../../../os/rt/src/chvt.c ****   os_instance_t * oip = currcore;
 681:../../../os/rt/src/chvt.c ****   systimestamp_t last, stamp;
 682:../../../os/rt/src/chvt.c ****   systime_t now;
 683:../../../os/rt/src/chvt.c **** 
 684:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 685:../../../os/rt/src/chvt.c **** 
 686:../../../os/rt/src/chvt.c ****   /* Current system time.*/
 687:../../../os/rt/src/chvt.c ****   now = chVTGetSystemTimeX();
 688:../../../os/rt/src/chvt.c **** 
 689:../../../os/rt/src/chvt.c ****   /* Last time stamp generated.*/
 690:../../../os/rt/src/chvt.c ****   last = oip->vtlist.laststamp;
 1407               		.loc 1 690 0
 1408 0024 E0E0      		ldi r30,lo8(ch0)
 1409 0026 F0E0      		ldi r31,hi8(ch0)
 1410 0028 2188      		ldd r2,Z+17
 1411 002a 3288      		ldd r3,Z+18
 1412 002c 4388      		ldd r4,Z+19
 1413 002e 5488      		ldd r5,Z+20
 1414 0030 6588      		ldd r6,Z+21
 1415 0032 7688      		ldd r7,Z+22
 1416 0034 8788      		ldd r8,Z+23
 1417 0036 908C      		ldd r9,Z+24
 1418               	.LVL138:
 691:../../../os/rt/src/chvt.c **** 
 692:../../../os/rt/src/chvt.c ****   /* Interval between the last time stamp and current time used for a new
 693:../../../os/rt/src/chvt.c ****      time stamp. Note that this fails if the interval is larger than a
 694:../../../os/rt/src/chvt.c ****      systime_t type.*/
 695:../../../os/rt/src/chvt.c ****   stamp = last + (systimestamp_t)chTimeDiffX((systime_t)last, now);
 1419               		.loc 1 695 0
 1420 0038 8219      		sub r24,r2
 1421 003a 9309      		sbc r25,r3
 1422 003c 9C01      		movw r18,r24
 1423 003e 40E0      		ldi r20,0
 1424 0040 50E0      		ldi r21,0
 1425 0042 60E0      		ldi r22,0
 1426 0044 70E0      		ldi r23,0
 1427 0046 80E0      		ldi r24,0
 1428 0048 90E0      		ldi r25,0
 1429 004a 5101      		movw r10,r2
 1430 004c 6201      		movw r12,r4
 1431 004e 7301      		movw r14,r6
 1432 0050 8401      		movw r16,r8
 1433 0052 0E94 0000 		call __adddi3
 1434               	.LVL139:
 696:../../../os/rt/src/chvt.c **** 
 697:../../../os/rt/src/chvt.c ****   chDbgAssert(oip->vtlist.laststamp <= stamp, "wrapped");
 698:../../../os/rt/src/chvt.c **** 
 699:../../../os/rt/src/chvt.c ****   /* Storing the new stamp.*/
 700:../../../os/rt/src/chvt.c ****   oip->vtlist.laststamp = stamp;
 1435               		.loc 1 700 0
 1436 0056 218B      		std Z+17,r18
 1437 0058 328B      		std Z+18,r19
 1438 005a 438B      		std Z+19,r20
 1439 005c 548B      		std Z+20,r21
 1440 005e 658B      		std Z+21,r22
 1441 0060 768B      		std Z+22,r23
 1442 0062 878B      		std Z+23,r24
 1443 0064 908F      		std Z+24,r25
 1444               	/* epilogue start */
 701:../../../os/rt/src/chvt.c **** 
 702:../../../os/rt/src/chvt.c ****   return stamp;
 703:../../../os/rt/src/chvt.c **** }
 1445               		.loc 1 703 0
 1446 0066 1F91      		pop r17
 1447 0068 0F91      		pop r16
 1448 006a FF90      		pop r15
 1449 006c EF90      		pop r14
 1450 006e DF90      		pop r13
 1451 0070 CF90      		pop r12
 1452 0072 BF90      		pop r11
 1453 0074 AF90      		pop r10
 1454 0076 9F90      		pop r9
 1455 0078 8F90      		pop r8
 1456 007a 7F90      		pop r7
 1457 007c 6F90      		pop r6
 1458 007e 5F90      		pop r5
 1459 0080 4F90      		pop r4
 1460 0082 3F90      		pop r3
 1461 0084 2F90      		pop r2
 1462               	.LVL140:
 1463 0086 0895      		ret
 1464               		.cfi_endproc
 1465               	.LFE208:
 1467               		.section	.text.chVTResetTimeStampI,"ax",@progbits
 1468               	.global	chVTResetTimeStampI
 1470               	chVTResetTimeStampI:
 1471               	.LFB209:
 704:../../../os/rt/src/chvt.c **** 
 705:../../../os/rt/src/chvt.c **** /**
 706:../../../os/rt/src/chvt.c ****  * @brief   Resets and re-synchronizes the time stamps monotonic counter.
 707:../../../os/rt/src/chvt.c ****  *
 708:../../../os/rt/src/chvt.c ****  * @iclass
 709:../../../os/rt/src/chvt.c ****  */
 710:../../../os/rt/src/chvt.c **** void chVTResetTimeStampI(void) {
 1472               		.loc 1 710 0
 1473               		.cfi_startproc
 1474 0000 0F93      		push r16
 1475               	.LCFI48:
 1476               		.cfi_def_cfa_offset 3
 1477               		.cfi_offset 16, -2
 1478 0002 1F93      		push r17
 1479               	.LCFI49:
 1480               		.cfi_def_cfa_offset 4
 1481               		.cfi_offset 17, -3
 1482               	/* prologue: function */
 1483               	/* frame size = 0 */
 1484               	/* stack size = 2 */
 1485               	.L__stack_usage = 2
 1486               	.LBB245:
 1487               	.LBB246:
 1488               	.LBB247:
 1489               		.loc 3 113 0
 1490 0004 0E94 0000 		call stGetCounter
 1491               	.LVL141:
 1492               	.LBE247:
 1493               	.LBE246:
 1494               	.LBE245:
 711:../../../os/rt/src/chvt.c **** 
 712:../../../os/rt/src/chvt.c ****   chDbgCheckClassI();
 713:../../../os/rt/src/chvt.c **** 
 714:../../../os/rt/src/chvt.c ****   currcore->vtlist.laststamp = (systimestamp_t)chVTGetSystemTimeX();
 1495               		.loc 1 714 0
 1496 0008 8C01      		movw r16,r24
 1497 000a E0E0      		ldi r30,lo8(ch0)
 1498 000c F0E0      		ldi r31,hi8(ch0)
 1499 000e 818B      		std Z+17,r24
 1500 0010 128B      		std Z+18,r17
 1501 0012 138A      		std Z+19,__zero_reg__
 1502 0014 148A      		std Z+20,__zero_reg__
 1503 0016 158A      		std Z+21,__zero_reg__
 1504 0018 168A      		std Z+22,__zero_reg__
 1505 001a 178A      		std Z+23,__zero_reg__
 1506 001c 108E      		std Z+24,__zero_reg__
 1507               	/* epilogue start */
 715:../../../os/rt/src/chvt.c **** }
 1508               		.loc 1 715 0
 1509 001e 1F91      		pop r17
 1510 0020 0F91      		pop r16
 1511 0022 0895      		ret
 1512               		.cfi_endproc
 1513               	.LFE209:
 1515               		.text
 1516               	.Letext0:
 1517               		.file 5 "/usr/lib/avr/include/stdint.h"
 1518               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1519               		.file 7 "../../../os/rt/include/chearly.h"
 1520               		.file 8 "../../../os/rt/include/chobjects.h"
 1521               		.file 9 "../../../os/rt/include/chrfcu.h"
 1522               		.file 10 "../../../os/rt/include/chdebug.h"
 1523               		.file 11 "../../../os/common/ports/AVR/chcore.h"
 1524               		.file 12 "../../../os/rt/include/chsem.h"
 1525               		.file 13 "../../../os/rt/include/chmtx.h"
 1526               		.file 14 "../../../os/rt/include/chvt.h"
 1527               		.file 15 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chvt.c
     /tmp/ccLkDyYL.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccLkDyYL.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccLkDyYL.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccLkDyYL.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccLkDyYL.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccLkDyYL.s:12     .text.vt_insert_first.constprop.3:0000000000000000 vt_insert_first.constprop.3
     /tmp/ccLkDyYL.s:204    .text.vt_set_alarm.constprop.4:0000000000000000 vt_set_alarm.constprop.4
     /tmp/ccLkDyYL.s:337    .text.vt_enqueue.constprop.2:0000000000000000 vt_enqueue.constprop.2
     /tmp/ccLkDyYL.s:558    .text.chVTObjectInit:0000000000000000 chVTObjectInit
     /tmp/ccLkDyYL.s:578    .text.chVTObjectDispose:0000000000000000 chVTObjectDispose
     /tmp/ccLkDyYL.s:594    .text.chVTDoSetI:0000000000000000 chVTDoSetI
     /tmp/ccLkDyYL.s:622    .text.chVTDoSetContinuousI:0000000000000000 chVTDoSetContinuousI
     /tmp/ccLkDyYL.s:650    .text.chVTDoResetI:0000000000000000 chVTDoResetI
     /tmp/ccLkDyYL.s:832    .text.chVTGetRemainingIntervalI:0000000000000000 chVTGetRemainingIntervalI
     /tmp/ccLkDyYL.s:949    .text.chVTDoTickI:0000000000000000 chVTDoTickI
     /tmp/ccLkDyYL.s:1325   .text.chVTGetTimeStampI:0000000000000000 chVTGetTimeStampI
     /tmp/ccLkDyYL.s:1470   .text.chVTResetTimeStampI:0000000000000000 chVTResetTimeStampI

UNDEFINED SYMBOLS
ch0
stStartAlarm
stSetAlarm
stGetCounter
chRFCUCollectFaultsI
stStopAlarm
__adddi3
