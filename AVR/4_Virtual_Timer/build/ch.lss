
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  0000130a  0000139e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  00800140  00800140  000013de  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013de  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00001430  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012883  00000000  00000000  00001a88  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dc2  00000000  00000000  0001430b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000493f  00000000  00000000  000180cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fa4  00000000  00000000  0001ca0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e5c  00000000  00000000  0001d9b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d04  00000000  00000000  0001f80c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  00024510  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c0       	rjmp	.+152    	; 0xc2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c0       	rjmp	.+400    	; 0x1be <__vector_11>
      2e:	00 00       	nop
      30:	48 c0       	rjmp	.+144    	; 0xc2 <__bad_interrupt>
      32:	00 00       	nop
      34:	46 c0       	rjmp	.+140    	; 0xc2 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__vector_14>
      3a:	00 00       	nop
      3c:	42 c0       	rjmp	.+132    	; 0xc2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c0       	rjmp	.+128    	; 0xc2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c0       	rjmp	.+124    	; 0xc2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c0       	rjmp	.+120    	; 0xc2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c0       	rjmp	.+116    	; 0xc2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c0       	rjmp	.+112    	; 0xc2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c0       	rjmp	.+108    	; 0xc2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c0       	rjmp	.+104    	; 0xc2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c0       	rjmp	.+100    	; 0xc2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c0       	rjmp	.+96     	; 0xc2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c0       	rjmp	.+92     	; 0xc2 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	ea e0       	ldi	r30, 0x0A	; 10
      9e:	f3 e1       	ldi	r31, 0x13	; 19
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a0 34       	cpi	r26, 0x40	; 64
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 e4       	ldi	r26, 0x40	; 64
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	af 39       	cpi	r26, 0x9F	; 159
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	d3 d4       	rcall	.+2470   	; 0xa64 <main>
      be:	0c 94 83 09 	jmp	0x1306	; 0x1306 <_exit>

000000c2 <__bad_interrupt>:
      c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c4:	14 d0       	rcall	.+40     	; 0xee <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
      ca:	12 d0       	rcall	.+36     	; 0xf0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      cc:	04 d0       	rcall	.+8      	; 0xd6 <gptInit>
      ce:	0a d0       	rcall	.+20     	; 0xe4 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d0:	0a d0       	rcall	.+20     	; 0xe6 <boardInit>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <stInit>

000000d4 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d4:	6a c0       	rjmp	.+212    	; 0x1aa <st_lld_init>

000000d6 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
      d6:	c7 c0       	rjmp	.+398    	; 0x266 <gpt_lld_init>

000000d8 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
  gptp->config = NULL;
      de:	12 82       	std	Z+2, r1	; 0x02
      e0:	11 82       	std	Z+1, r1	; 0x01
      e2:	08 95       	ret

000000e4 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
      e4:	c3 c0       	rjmp	.+390    	; 0x26c <sd_lld_init>

000000e6 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
      e6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
      ea:	1d ba       	out	0x1d, r1	; 29
      ec:	08 95       	ret

000000ee <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
      ee:	08 95       	ret

000000f0 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
      f0:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
      f2:	80 81       	ld	r24, Z
      f4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
      f6:	81 81       	ldd	r24, Z+1	; 0x01
      f8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
      fa:	82 81       	ldd	r24, Z+2	; 0x02
      fc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
      fe:	83 81       	ldd	r24, Z+3	; 0x03
     100:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     102:	84 81       	ldd	r24, Z+4	; 0x04
     104:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     106:	85 81       	ldd	r24, Z+5	; 0x05
     108:	8a b9       	out	0x0a, r24	; 10
     10a:	08 95       	ret

0000010c <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     10c:	fc 01       	movw	r30, r24

  switch (mode) {
     10e:	42 30       	cpi	r20, 0x02	; 2
     110:	c9 f0       	breq	.+50     	; 0x144 <_pal_lld_setgroupmode+0x38>
     112:	98 f0       	brcs	.+38     	; 0x13a <_pal_lld_setgroupmode+0x2e>
     114:	45 30       	cpi	r20, 0x05	; 5
     116:	b1 f0       	breq	.+44     	; 0x144 <_pal_lld_setgroupmode+0x38>
     118:	46 30       	cpi	r20, 0x06	; 6
     11a:	21 f4       	brne	.+8      	; 0x124 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     11c:	81 81       	ldd	r24, Z+1	; 0x01
     11e:	68 2b       	or	r22, r24
     120:	61 83       	std	Z+1, r22	; 0x01
     122:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     124:	43 30       	cpi	r20, 0x03	; 3
     126:	e9 f7       	brne	.-6      	; 0x122 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	96 2f       	mov	r25, r22
     12c:	90 95       	com	r25
     12e:	89 23       	and	r24, r25
     130:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     132:	82 81       	ldd	r24, Z+2	; 0x02
     134:	68 2b       	or	r22, r24
     136:	62 83       	std	Z+2, r22	; 0x02
    break;
     138:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     13a:	44 23       	and	r20, r20
     13c:	19 f0       	breq	.+6      	; 0x144 <_pal_lld_setgroupmode+0x38>
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	99 f3       	breq	.-26     	; 0x128 <_pal_lld_setgroupmode+0x1c>
     142:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	60 95       	com	r22
     148:	86 23       	and	r24, r22
     14a:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	68 23       	and	r22, r24
     150:	62 83       	std	Z+2, r22	; 0x02
    break;
     152:	08 95       	ret

00000154 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     17c:	8d d0       	rcall	.+282    	; 0x298 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     17e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__avr_in_isr>
     182:	30 d2       	rcall	.+1120   	; 0x5e4 <chSchIsPreemptionRequired>
     184:	81 11       	cpse	r24, r1
     186:	3e d2       	rcall	.+1148   	; 0x604 <chSchDoPreemption>
}
     188:	ff 91       	pop	r31
     18a:	ef 91       	pop	r30
     18c:	bf 91       	pop	r27
     18e:	af 91       	pop	r26
     190:	9f 91       	pop	r25
     192:	8f 91       	pop	r24
     194:	7f 91       	pop	r23
     196:	6f 91       	pop	r22
     198:	5f 91       	pop	r21
     19a:	4f 91       	pop	r20
     19c:	3f 91       	pop	r19
     19e:	2f 91       	pop	r18
     1a0:	0f 90       	pop	r0
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	0f 90       	pop	r0
     1a6:	1f 90       	pop	r1
     1a8:	18 95       	reti

000001aa <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     1ae:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     1b0:	9f e7       	ldi	r25, 0x7F	; 127
     1b2:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     1b4:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     1b6:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     1b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     1bc:	08 95       	ret

000001be <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     1be:	1f 92       	push	r1
     1c0:	0f 92       	push	r0
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	0f 92       	push	r0
     1c6:	11 24       	eor	r1, r1
     1c8:	2f 93       	push	r18
     1ca:	3f 93       	push	r19
     1cc:	4f 93       	push	r20
     1ce:	5f 93       	push	r21
     1d0:	6f 93       	push	r22
     1d2:	7f 93       	push	r23
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
     1d8:	af 93       	push	r26
     1da:	bf 93       	push	r27
     1dc:	ef 93       	push	r30
     1de:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
     1e6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <GPTD1+0x6>
     1ea:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <GPTD1+0x7>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <GPTD1+0x7>
     1f4:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
     1f8:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <GPTD1+0x4>
     1fc:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <GPTD1+0x5>
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	b1 f0       	breq	.+44     	; 0x232 <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
     206:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__avr_in_isr>
     20a:	ec d1       	rcall	.+984    	; 0x5e4 <chSchIsPreemptionRequired>
     20c:	81 11       	cpse	r24, r1
     20e:	fa d1       	rcall	.+1012   	; 0x604 <chSchDoPreemption>
     210:	ff 91       	pop	r31
}
     212:	ef 91       	pop	r30
     214:	bf 91       	pop	r27
     216:	af 91       	pop	r26
     218:	9f 91       	pop	r25
     21a:	8f 91       	pop	r24
     21c:	7f 91       	pop	r23
     21e:	6f 91       	pop	r22
     220:	5f 91       	pop	r21
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti
     232:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <GPTD1+0x7>
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
     236:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <GPTD1+0x6>
     23a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <GPTD1>
    if (gptp->state == GPT_ONESHOT) {
     23e:	84 30       	cpi	r24, 0x04	; 4
     240:	41 f0       	breq	.+16     	; 0x252 <__vector_11+0x94>
     242:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <GPTD1+0x8>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
     246:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <GPTD1+0x9>
     24a:	8a e4       	ldi	r24, 0x4A	; 74
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	09 95       	icall
     250:	da cf       	rjmp	.-76     	; 0x206 <__vector_11+0x48>
     252:	92 e0       	ldi	r25, 0x02	; 2

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
     254:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <GPTD1>
     258:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
     25c:	88 7f       	andi	r24, 0xF8	; 248
     25e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     262:	96 bb       	out	0x16, r25	; 22
  *regs_table[i].tifr = (1 << OCF1A);
     264:	ee cf       	rjmp	.-36     	; 0x242 <__vector_11+0x84>

00000266 <gpt_lld_init>:
     266:	8a e4       	ldi	r24, 0x4A	; 74
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	36 cf       	rjmp	.-404    	; 0xd8 <gptObjectInit>

0000026c <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
     26c:	08 95       	ret

0000026e <chSysInit>:
    /* Registry header, access to this list depends on the current
       kernel configuration.*/
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	c4 e5       	ldi	r28, 0x54	; 84
     274:	d2 e0       	ldi	r29, 0x02	; 2
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	88 83       	st	Y, r24
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	4f d3       	rcall	.+1694   	; 0x91e <__core_init>
     280:	8f d3       	rcall	.+1822   	; 0x9a0 <__heap_init>
     282:	69 e0       	ldi	r22, 0x09	; 9
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	87 e5       	ldi	r24, 0x57	; 87
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	fc d1       	rcall	.+1016   	; 0x684 <chInstanceObjectInit>
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	88 83       	st	Y, r24
     290:	78 94       	sei
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     298:	6c c0       	rjmp	.+216    	; 0x372 <chVTDoTickI>

0000029a <chVTObjectInit>:
    dlp = dlp->next;
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
     29a:	fc 01       	movw	r30, r24
     29c:	11 82       	std	Z+1, r1	; 0x01
     29e:	10 82       	st	Z, r1
     2a0:	08 95       	ret

000002a2 <chVTDoSetI>:
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	dc 01       	movw	r26, r24
     2a8:	19 96       	adiw	r26, 0x09	; 9
     2aa:	3c 93       	st	X, r19
     2ac:	2e 93       	st	-X, r18
     2ae:	18 97       	sbiw	r26, 0x08	; 8
     2b0:	17 96       	adiw	r26, 0x07	; 7
     2b2:	5c 93       	st	X, r21
     2b4:	4e 93       	st	-X, r20
     2b6:	16 97       	sbiw	r26, 0x06	; 6
     2b8:	1b 96       	adiw	r26, 0x0b	; 11
     2ba:	1c 92       	st	X, r1
     2bc:	1e 92       	st	-X, r1
     2be:	1a 97       	sbiw	r26, 0x0a	; 10
     2c0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <ch0+0x7>
     2c4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <ch0+0x8>
     2c8:	24 81       	ldd	r18, Z+4	; 0x04
     2ca:	35 81       	ldd	r19, Z+5	; 0x05
     2cc:	26 17       	cp	r18, r22
     2ce:	37 07       	cpc	r19, r23
     2d0:	50 f4       	brcc	.+20     	; 0x2e6 <chVTDoSetI+0x44>
     2d2:	62 1b       	sub	r22, r18
     2d4:	73 0b       	sbc	r23, r19
     2d6:	01 90       	ld	r0, Z+
     2d8:	f0 81       	ld	r31, Z
     2da:	e0 2d       	mov	r30, r0
     2dc:	24 81       	ldd	r18, Z+4	; 0x04
     2de:	35 81       	ldd	r19, Z+5	; 0x05
     2e0:	26 17       	cp	r18, r22
     2e2:	37 07       	cpc	r19, r23
     2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <chVTDoSetI+0x30>
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	7c 93       	st	X, r23
     2ea:	6e 93       	st	-X, r22
     2ec:	14 97       	sbiw	r26, 0x04	; 4
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	fc 93       	st	X, r31
     2f2:	ee 93       	st	-X, r30
     2f4:	c2 81       	ldd	r28, Z+2	; 0x02
     2f6:	d3 81       	ldd	r29, Z+3	; 0x03
     2f8:	13 96       	adiw	r26, 0x03	; 3
     2fa:	dc 93       	st	X, r29
     2fc:	ce 93       	st	-X, r28
     2fe:	12 97       	sbiw	r26, 0x02	; 2
     300:	b9 83       	std	Y+1, r27	; 0x01
     302:	a8 83       	st	Y, r26
     304:	b3 83       	std	Z+3, r27	; 0x03
     306:	a2 83       	std	Z+2, r26	; 0x02
     308:	84 81       	ldd	r24, Z+4	; 0x04
     30a:	95 81       	ldd	r25, Z+5	; 0x05
     30c:	86 1b       	sub	r24, r22
     30e:	97 0b       	sbc	r25, r23
     310:	95 83       	std	Z+5, r25	; 0x05
     312:	84 83       	std	Z+4, r24	; 0x04
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f ef       	ldi	r25, 0xFF	; 255
     318:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <ch0+0xc>
     31c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <ch0+0xb>
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <chVTDoResetI>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	fc 01       	movw	r30, r24
     32c:	a0 81       	ld	r26, Z
     32e:	b1 81       	ldd	r27, Z+1	; 0x01
     330:	14 96       	adiw	r26, 0x04	; 4
     332:	2d 91       	ld	r18, X+
     334:	3c 91       	ld	r19, X
     336:	15 97       	sbiw	r26, 0x05	; 5
     338:	84 81       	ldd	r24, Z+4	; 0x04
     33a:	95 81       	ldd	r25, Z+5	; 0x05
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	15 96       	adiw	r26, 0x05	; 5
     342:	9c 93       	st	X, r25
     344:	8e 93       	st	-X, r24
     346:	14 97       	sbiw	r26, 0x04	; 4
     348:	c2 81       	ldd	r28, Z+2	; 0x02
     34a:	d3 81       	ldd	r29, Z+3	; 0x03
     34c:	b9 83       	std	Y+1, r27	; 0x01
     34e:	a8 83       	st	Y, r26
     350:	a0 81       	ld	r26, Z
     352:	b1 81       	ldd	r27, Z+1	; 0x01
     354:	13 96       	adiw	r26, 0x03	; 3
     356:	dc 93       	st	X, r29
     358:	ce 93       	st	-X, r28
     35a:	12 97       	sbiw	r26, 0x02	; 2
     35c:	11 82       	std	Z+1, r1	; 0x01
     35e:	10 82       	st	Z, r1
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f ef       	ldi	r25, 0xFF	; 255
     364:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <ch0+0xc>
     368:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <ch0+0xb>
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
     37a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <ch0+0xd>
     37e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <ch0+0xe>
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <ch0+0xe>
     388:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <ch0+0xd>
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp != dlhp->next);
     38c:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <ch0+0x7>
     390:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <ch0+0x8>
  if (ch_dlist_notempty(&vtlp->dlist)) {
     394:	42 e0       	ldi	r20, 0x02	; 2
     396:	ce 35       	cpi	r28, 0x5E	; 94
     398:	d4 07       	cpc	r29, r20
     39a:	41 f1       	breq	.+80     	; 0x3ec <chVTDoTickI+0x7a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
     39c:	8c 81       	ldd	r24, Y+4	; 0x04
     39e:	9d 81       	ldd	r25, Y+5	; 0x05
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	8c 83       	std	Y+4, r24	; 0x04
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     3a6:	0f ef       	ldi	r16, 0xFF	; 255
     3a8:	1f ef       	ldi	r17, 0xFF	; 255
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3aa:	1e c0       	rjmp	.+60     	; 0x3e8 <chVTDoTickI+0x76>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
     3ac:	ea 81       	ldd	r30, Y+2	; 0x02
     3ae:	fb 81       	ldd	r31, Y+3	; 0x03
     3b0:	88 81       	ld	r24, Y
     3b2:	99 81       	ldd	r25, Y+1	; 0x01
     3b4:	91 83       	std	Z+1, r25	; 0x01
     3b6:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
     3b8:	a8 81       	ld	r26, Y
     3ba:	b9 81       	ldd	r27, Y+1	; 0x01
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	fc 93       	st	X, r31
     3c0:	ee 93       	st	-X, r30
     3c2:	12 97       	sbiw	r26, 0x02	; 2
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
     3c4:	19 82       	std	Y+1, r1	; 0x01
     3c6:	18 82       	st	Y, r1

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
     3c8:	68 85       	ldd	r22, Y+8	; 0x08
     3ca:	79 85       	ldd	r23, Y+9	; 0x09
     3cc:	ee 81       	ldd	r30, Y+6	; 0x06
     3ce:	ff 81       	ldd	r31, Y+7	; 0x07
     3d0:	ce 01       	movw	r24, r28
     3d2:	09 95       	icall
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
     3d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	69 f4       	brne	.+26     	; 0x3f6 <chVTDoTickI+0x84>
     3dc:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <ch0+0x7>
     3e0:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <ch0+0x8>
     3e4:	8c 81       	ldd	r24, Y+4	; 0x04
     3e6:	9d 81       	ldd	r25, Y+5	; 0x05
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
  if (ch_dlist_notempty(&vtlp->dlist)) {
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3e8:	89 2b       	or	r24, r25
     3ea:	01 f3       	breq	.-64     	; 0x3ac <chVTDoTickI+0x3a>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret
     3f6:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <ch0+0x7>
     3fa:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <ch0+0x8>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     3fe:	24 81       	ldd	r18, Z+4	; 0x04
     400:	35 81       	ldd	r19, Z+5	; 0x05
     402:	28 17       	cp	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	50 f4       	brcc	.+20     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
     408:	82 1b       	sub	r24, r18
     40a:	93 0b       	sbc	r25, r19
    dlp = dlp->next;
     40c:	01 90       	ld	r0, Z+
     40e:	f0 81       	ld	r31, Z
     410:	e0 2d       	mov	r30, r0
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     412:	24 81       	ldd	r18, Z+4	; 0x04
     414:	35 81       	ldd	r19, Z+5	; 0x05
     416:	28 17       	cp	r18, r24
     418:	39 07       	cpc	r19, r25
     41a:	b0 f3       	brcs	.-20     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
     41c:	9d 83       	std	Y+5, r25	; 0x05
     41e:	8c 83       	std	Y+4, r24	; 0x04
  dlp->next       = dlhp;
     420:	f9 83       	std	Y+1, r31	; 0x01
     422:	e8 83       	st	Y, r30
  dlp->prev       = dlp->next->prev;
     424:	a2 81       	ldd	r26, Z+2	; 0x02
     426:	b3 81       	ldd	r27, Z+3	; 0x03
     428:	bb 83       	std	Y+3, r27	; 0x03
     42a:	aa 83       	std	Y+2, r26	; 0x02
  dlp->prev->next = dlp;
     42c:	cd 93       	st	X+, r28
     42e:	dc 93       	st	X, r29
  dlhp->prev      = dlp;
     430:	d3 83       	std	Z+3, r29	; 0x03
     432:	c2 83       	std	Z+2, r28	; 0x02

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
     434:	24 81       	ldd	r18, Z+4	; 0x04
     436:	35 81       	ldd	r19, Z+5	; 0x05
     438:	a9 01       	movw	r20, r18
     43a:	48 1b       	sub	r20, r24
     43c:	59 0b       	sbc	r21, r25
     43e:	55 83       	std	Z+5, r21	; 0x05
     440:	44 83       	std	Z+4, r20	; 0x04

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     442:	10 93 63 02 	sts	0x0263, r17	; 0x800263 <ch0+0xc>
     446:	00 93 62 02 	sts	0x0262, r16	; 0x800262 <ch0+0xb>
     44a:	c8 cf       	rjmp	.-112    	; 0x3dc <chVTDoTickI+0x6a>

0000044c <__sch_wakeup>:
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	db 01       	movw	r26, r22
     452:	1f 96       	adiw	r26, 0x0f	; 15
     454:	8c 91       	ld	r24, X
     456:	1f 97       	sbiw	r26, 0x0f	; 15
     458:	84 30       	cpi	r24, 0x04	; 4
     45a:	f1 f1       	breq	.+124    	; 0x4d8 <__sch_wakeup+0x8c>
     45c:	80 f5       	brcc	.+96     	; 0x4be <__sch_wakeup+0x72>
     45e:	88 23       	and	r24, r24
     460:	59 f1       	breq	.+86     	; 0x4b8 <__sch_wakeup+0x6c>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	31 f4       	brne	.+12     	; 0x472 <__sch_wakeup+0x26>
     466:	52 96       	adiw	r26, 0x12	; 18
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	53 97       	sbiw	r26, 0x13	; 19
     46e:	11 82       	std	Z+1, r1	; 0x01
     470:	10 82       	st	Z, r1
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	53 96       	adiw	r26, 0x13	; 19
     478:	9c 93       	st	X, r25
     47a:	8e 93       	st	-X, r24
     47c:	52 97       	sbiw	r26, 0x12	; 18
     47e:	1f 96       	adiw	r26, 0x0f	; 15
     480:	1c 92       	st	X, r1
     482:	1f 97       	sbiw	r26, 0x0f	; 15
     484:	1b 96       	adiw	r26, 0x0b	; 11
     486:	ed 91       	ld	r30, X+
     488:	fc 91       	ld	r31, X
     48a:	1c 97       	sbiw	r26, 0x0c	; 12
     48c:	14 96       	adiw	r26, 0x04	; 4
     48e:	9c 91       	ld	r25, X
     490:	14 97       	sbiw	r26, 0x04	; 4
     492:	01 90       	ld	r0, Z+
     494:	f0 81       	ld	r31, Z
     496:	e0 2d       	mov	r30, r0
     498:	84 81       	ldd	r24, Z+4	; 0x04
     49a:	89 17       	cp	r24, r25
     49c:	d0 f7       	brcc	.-12     	; 0x492 <__sch_wakeup+0x46>
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	fc 93       	st	X, r31
     4a2:	ee 93       	st	-X, r30
     4a4:	c2 81       	ldd	r28, Z+2	; 0x02
     4a6:	d3 81       	ldd	r29, Z+3	; 0x03
     4a8:	13 96       	adiw	r26, 0x03	; 3
     4aa:	dc 93       	st	X, r29
     4ac:	ce 93       	st	-X, r28
     4ae:	12 97       	sbiw	r26, 0x02	; 2
     4b0:	b9 83       	std	Y+1, r27	; 0x01
     4b2:	a8 83       	st	Y, r26
     4b4:	b3 83       	std	Z+3, r27	; 0x03
     4b6:	a2 83       	std	Z+2, r26	; 0x02
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret
     4be:	87 30       	cpi	r24, 0x07	; 7
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <__sch_wakeup+0x8c>
     4c2:	8c 30       	cpi	r24, 0x0C	; 12
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <__sch_wakeup+0x8c>
     4c6:	85 30       	cpi	r24, 0x05	; 5
     4c8:	a1 f6       	brne	.-88     	; 0x472 <__sch_wakeup+0x26>
     4ca:	52 96       	adiw	r26, 0x12	; 18
     4cc:	ed 91       	ld	r30, X+
     4ce:	fc 91       	ld	r31, X
     4d0:	53 97       	sbiw	r26, 0x13	; 19
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	84 83       	std	Z+4, r24	; 0x04
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	8d 91       	ld	r24, X+
     4e2:	9c 91       	ld	r25, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	cd 91       	ld	r28, X+
     4ec:	dc 91       	ld	r29, X
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	fb 83       	std	Y+3, r31	; 0x03
     4f2:	ea 83       	std	Y+2, r30	; 0x02
     4f4:	be cf       	rjmp	.-132    	; 0x472 <__sch_wakeup+0x26>

000004f6 <chSchReadyI>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	dc 01       	movw	r26, r24
     4fc:	1f 96       	adiw	r26, 0x0f	; 15
     4fe:	1c 92       	st	X, r1
     500:	1f 97       	sbiw	r26, 0x0f	; 15
     502:	1b 96       	adiw	r26, 0x0b	; 11
     504:	ed 91       	ld	r30, X+
     506:	fc 91       	ld	r31, X
     508:	1c 97       	sbiw	r26, 0x0c	; 12
     50a:	14 96       	adiw	r26, 0x04	; 4
     50c:	2c 91       	ld	r18, X
     50e:	14 97       	sbiw	r26, 0x04	; 4
     510:	01 90       	ld	r0, Z+
     512:	f0 81       	ld	r31, Z
     514:	e0 2d       	mov	r30, r0
     516:	94 81       	ldd	r25, Z+4	; 0x04
     518:	92 17       	cp	r25, r18
     51a:	d0 f7       	brcc	.-12     	; 0x510 <chSchReadyI+0x1a>
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	fc 93       	st	X, r31
     520:	ee 93       	st	-X, r30
     522:	c2 81       	ldd	r28, Z+2	; 0x02
     524:	d3 81       	ldd	r29, Z+3	; 0x03
     526:	13 96       	adiw	r26, 0x03	; 3
     528:	dc 93       	st	X, r29
     52a:	ce 93       	st	-X, r28
     52c:	12 97       	sbiw	r26, 0x02	; 2
     52e:	b9 83       	std	Y+1, r27	; 0x01
     530:	a8 83       	st	Y, r26
     532:	b3 83       	std	Z+3, r27	; 0x03
     534:	a2 83       	std	Z+2, r26	; 0x02
     536:	cd 01       	movw	r24, r26
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <chSchGoSleepS>:
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	e7 e5       	ldi	r30, 0x57	; 87
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	65 81       	ldd	r22, Z+5	; 0x05
     548:	76 81       	ldd	r23, Z+6	; 0x06
     54a:	db 01       	movw	r26, r22
     54c:	1f 96       	adiw	r26, 0x0f	; 15
     54e:	8c 93       	st	X, r24
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	ec 01       	movw	r28, r24
     556:	a8 81       	ld	r26, Y
     558:	b9 81       	ldd	r27, Y+1	; 0x01
     55a:	b1 83       	std	Z+1, r27	; 0x01
     55c:	a0 83       	st	Z, r26
     55e:	13 96       	adiw	r26, 0x03	; 3
     560:	fc 93       	st	X, r31
     562:	ee 93       	st	-X, r30
     564:	12 97       	sbiw	r26, 0x02	; 2
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	2f 87       	std	Y+15, r18	; 0x0f
     56a:	96 83       	std	Z+6, r25	; 0x06
     56c:	85 83       	std	Z+5, r24	; 0x05
     56e:	2c d2       	rcall	.+1112   	; 0x9c8 <_port_switch>
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <chSchGoSleepTimeoutS>:
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	2c 97       	sbiw	r28, 0x0c	; 12
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	f8 2e       	mov	r15, r24
     592:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <ch0+0x5>
     596:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <ch0+0x6>
     59a:	6f 3f       	cpi	r22, 0xFF	; 255
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	78 07       	cpc	r23, r24
     5a0:	f1 f0       	breq	.+60     	; 0x5de <chSchGoSleepTimeoutS+0x68>
     5a2:	98 01       	movw	r18, r16
     5a4:	46 e2       	ldi	r20, 0x26	; 38
     5a6:	52 e0       	ldi	r21, 0x02	; 2
     5a8:	ce 01       	movw	r24, r28
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	7a de       	rcall	.-780    	; 0x2a2 <chVTDoSetI>
     5ae:	8f 2d       	mov	r24, r15
     5b0:	c6 df       	rcall	.-116    	; 0x53e <chSchGoSleepS>
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	89 2b       	or	r24, r25
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <chSchGoSleepTimeoutS+0x4a>
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	b3 de       	rcall	.-666    	; 0x326 <chVTDoResetI>
     5c0:	f8 01       	movw	r30, r16
     5c2:	82 89       	ldd	r24, Z+18	; 0x12
     5c4:	93 89       	ldd	r25, Z+19	; 0x13
     5c6:	2c 96       	adiw	r28, 0x0c	; 12
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	08 95       	ret
     5de:	8f 2d       	mov	r24, r15
     5e0:	ae df       	rcall	.-164    	; 0x53e <chSchGoSleepS>
     5e2:	ee cf       	rjmp	.-36     	; 0x5c0 <chSchGoSleepTimeoutS+0x4a>

000005e4 <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
     5e4:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <ch0>
     5e8:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
     5ec:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <ch0+0x5>
     5f0:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	14 96       	adiw	r26, 0x04	; 4
     5f8:	2c 91       	ld	r18, X
     5fa:	94 81       	ldd	r25, Z+4	; 0x04
     5fc:	92 17       	cp	r25, r18
     5fe:	08 f0       	brcs	.+2      	; 0x602 <chSchIsPreemptionRequired+0x1e>
     600:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     602:	08 95       	ret

00000604 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
     608:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <ch0+0x5>
     60c:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
     610:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <ch0>
     614:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <ch0+0x1>

  pqp->next       = p->next;
     618:	ea 01       	movw	r28, r20
     61a:	e8 81       	ld	r30, Y
     61c:	f9 81       	ldd	r31, Y+1	; 0x01
     61e:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <ch0+0x1>
     622:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <ch0>
  pqp->next->prev = pqp;
     626:	87 e5       	ldi	r24, 0x57	; 87
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	93 83       	std	Z+3, r25	; 0x03
     62c:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
     632:	50 93 5d 02 	sts	0x025D, r21	; 0x80025d <ch0+0x6>
     636:	40 93 5c 02 	sts	0x025C, r20	; 0x80025c <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
     63a:	1f 96       	adiw	r26, 0x0f	; 15
     63c:	1c 92       	st	X, r1
     63e:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
     640:	1b 96       	adiw	r26, 0x0b	; 11
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	1c 97       	sbiw	r26, 0x0c	; 12
     648:	14 96       	adiw	r26, 0x04	; 4
     64a:	2c 91       	ld	r18, X
     64c:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
     64e:	01 90       	ld	r0, Z+
     650:	f0 81       	ld	r31, Z
     652:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
     654:	94 81       	ldd	r25, Z+4	; 0x04
     656:	29 17       	cp	r18, r25
     658:	d0 f3       	brcs	.-12     	; 0x64e <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	fc 93       	st	X, r31
     65e:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	93 81       	ldd	r25, Z+3	; 0x03
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	9c 93       	st	X, r25
     668:	8e 93       	st	-X, r24
     66a:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
     66c:	ec 01       	movw	r28, r24
     66e:	b9 83       	std	Y+1, r27	; 0x01
     670:	a8 83       	st	Y, r26
  pqp->prev     = p;
     672:	b3 83       	std	Z+3, r27	; 0x03
     674:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
     676:	bd 01       	movw	r22, r26
     678:	ca 01       	movw	r24, r20
     67a:	a6 d1       	rcall	.+844    	; 0x9c8 <_port_switch>
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
     682:	ff cf       	rjmp	.-2      	; 0x682 <__idle_thread>

00000684 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	2b 97       	sbiw	r28, 0x0b	; 11
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	8c 01       	movw	r16, r24
     6a4:	7b 01       	movw	r14, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
     6a6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <ch_system+0x2>
     6aa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
     6ae:	fc 01       	movw	r30, r24
     6b0:	14 8e       	std	Z+28, r1	; 0x1c
     6b2:	13 8e       	std	Z+27, r1	; 0x1b

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
     6b4:	72 a3       	std	Z+34, r23	; 0x22
     6b6:	61 a3       	std	Z+33, r22	; 0x21

  /* Port initialization for the current instance.*/
  port_init(oip);
     6b8:	dd 24       	eor	r13, r13
     6ba:	d3 94       	inc	r13
     6bc:	d0 92 9e 02 	sts	0x029E, r13	; 0x80029e <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	80 83       	st	Z, r24
  pqp->prev = pqp;
     6c4:	93 83       	std	Z+3, r25	; 0x03
     6c6:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
     6c8:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
     6ca:	47 96       	adiw	r24, 0x17	; 23
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     6cc:	90 8f       	std	Z+24, r25	; 0x18
     6ce:	87 8b       	std	Z+23, r24	; 0x17
  qp->prev = qp;
     6d0:	92 8f       	std	Z+26, r25	; 0x1a
     6d2:	81 8f       	std	Z+25, r24	; 0x19
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
     6d4:	15 8e       	std	Z+29, r1	; 0x1d
     6d6:	16 8e       	std	Z+30, r1	; 0x1e
     6d8:	17 8e       	std	Z+31, r1	; 0x1f
     6da:	10 a2       	std	Z+32, r1	; 0x20
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
     6dc:	40 97       	sbiw	r24, 0x10	; 16
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
     6de:	90 87       	std	Z+8, r25	; 0x08
     6e0:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
     6e2:	92 87       	std	Z+10, r25	; 0x0a
     6e4:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	94 87       	std	Z+12, r25	; 0x0c
     6ec:	83 87       	std	Z+11, r24	; 0x0b
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
     6ee:	16 86       	std	Z+14, r1	; 0x0e
     6f0:	15 86       	std	Z+13, r1	; 0x0d
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
     6f2:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <ch0+0xd>
     6f6:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <ch0+0xe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
     6fa:	27 87       	std	Z+15, r18	; 0x0f
     6fc:	30 8b       	std	Z+16, r19	; 0x10
     6fe:	11 8a       	std	Z+17, r1	; 0x11
     700:	12 8a       	std	Z+18, r1	; 0x12
     702:	13 8a       	std	Z+19, r1	; 0x13
     704:	14 8a       	std	Z+20, r1	; 0x14
     706:	15 8a       	std	Z+21, r1	; 0x15
     708:	16 8a       	std	Z+22, r1	; 0x16
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
     70a:	ef 5b       	subi	r30, 0xBF	; 191
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	11 82       	std	Z+1, r1	; 0x01
     710:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
     712:	b8 01       	movw	r22, r16
     714:	6d 5d       	subi	r22, 0xDD	; 221
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	20 e8       	ldi	r18, 0x80	; 128
     71a:	44 e1       	ldi	r20, 0x14	; 20
     71c:	51 e0       	ldi	r21, 0x01	; 1
     71e:	c8 01       	movw	r24, r16
     720:	2a d0       	rcall	.+84     	; 0x776 <__thd_object_init>
     722:	f8 01       	movw	r30, r16
     724:	96 83       	std	Z+6, r25	; 0x06
     726:	85 83       	std	Z+5, r24	; 0x05
  oip->rlist.current->wabase = oicp->mainthread_base;
  oip->rlist.current->waend  = oicp->mainthread_end;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
     728:	fc 01       	movw	r30, r24
     72a:	d7 86       	std	Z+15, r13	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
     72c:	8f e0       	ldi	r24, 0x0F	; 15
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9a 83       	std	Y+2, r25	; 0x02
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	f7 01       	movw	r30, r14
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	95 81       	ldd	r25, Z+5	; 0x05
     742:	9e 83       	std	Y+6, r25	; 0x06
     744:	8d 83       	std	Y+5, r24	; 0x05
     746:	df 82       	std	Y+7, r13	; 0x07
     748:	81 e4       	ldi	r24, 0x41	; 65
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	99 87       	std	Y+9, r25	; 0x09
     74e:	88 87       	std	Y+8, r24	; 0x08
     750:	1b 86       	std	Y+11, r1	; 0x0b
     752:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	9e d0       	rcall	.+316    	; 0x896 <chThdCreateI>
  }
#endif
}
     75a:	2b 96       	adiw	r28, 0x0b	; 11
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	08 95       	ret

00000776 <__thd_object_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	fb 01       	movw	r30, r22
     77c:	24 83       	std	Z+4, r18	; 0x04
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	37 87       	std	Z+15, r19	; 0x0f
     782:	10 8a       	std	Z+16, r1	; 0x10
     784:	94 87       	std	Z+12, r25	; 0x0c
     786:	83 87       	std	Z+11, r24	; 0x0b
     788:	25 8f       	std	Z+29, r18	; 0x1d
     78a:	14 8e       	std	Z+28, r1	; 0x1c
     78c:	13 8e       	std	Z+27, r1	; 0x1b
     78e:	12 8e       	std	Z+26, r1	; 0x1a
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	21 8b       	std	Z+17, r18	; 0x11
     794:	56 87       	std	Z+14, r21	; 0x0e
     796:	45 87       	std	Z+13, r20	; 0x0d
     798:	9b 01       	movw	r18, r22
     79a:	29 5f       	subi	r18, 0xF9	; 249
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	ac 01       	movw	r20, r24
     7a0:	49 5e       	subi	r20, 0xE9	; 233
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	50 87       	std	Z+8, r21	; 0x08
     7a6:	47 83       	std	Z+7, r20	; 0x07
     7a8:	ec 01       	movw	r28, r24
     7aa:	a9 8d       	ldd	r26, Y+25	; 0x19
     7ac:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7ae:	b2 87       	std	Z+10, r27	; 0x0a
     7b0:	a1 87       	std	Z+9, r26	; 0x09
     7b2:	2d 93       	st	X+, r18
     7b4:	3c 93       	st	X, r19
     7b6:	3a 8f       	std	Y+26, r19	; 0x1a
     7b8:	29 8f       	std	Y+25, r18	; 0x19
     7ba:	cb 01       	movw	r24, r22
     7bc:	44 96       	adiw	r24, 0x14	; 20
     7be:	95 8b       	std	Z+21, r25	; 0x15
     7c0:	84 8b       	std	Z+20, r24	; 0x14
     7c2:	02 96       	adiw	r24, 0x02	; 2
     7c4:	97 8b       	std	Z+23, r25	; 0x17
     7c6:	86 8b       	std	Z+22, r24	; 0x16
     7c8:	91 8f       	std	Z+25, r25	; 0x19
     7ca:	80 8f       	std	Z+24, r24	; 0x18
     7cc:	cb 01       	movw	r24, r22
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <chThdCreateSuspendedI>:
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	dc 01       	movw	r26, r24
     7da:	14 96       	adiw	r26, 0x04	; 4
     7dc:	2d 91       	ld	r18, X+
     7de:	3c 91       	ld	r19, X
     7e0:	15 97       	sbiw	r26, 0x05	; 5
     7e2:	f9 01       	movw	r30, r18
     7e4:	7e 97       	sbiw	r30, 0x1e	; 30
     7e6:	e9 01       	movw	r28, r18
     7e8:	e3 97       	sbiw	r28, 0x33	; 51
     7ea:	d6 83       	std	Z+6, r29	; 0x06
     7ec:	c5 83       	std	Z+5, r28	; 0x05
     7ee:	17 96       	adiw	r26, 0x07	; 7
     7f0:	8c 91       	ld	r24, X
     7f2:	17 97       	sbiw	r26, 0x07	; 7
     7f4:	8a 8b       	std	Y+18, r24	; 0x12
     7f6:	18 96       	adiw	r26, 0x08	; 8
     7f8:	8c 91       	ld	r24, X
     7fa:	18 97       	sbiw	r26, 0x08	; 8
     7fc:	89 8b       	std	Y+17, r24	; 0x11
     7fe:	19 96       	adiw	r26, 0x09	; 9
     800:	8c 91       	ld	r24, X
     802:	19 97       	sbiw	r26, 0x09	; 9
     804:	88 8b       	std	Y+16, r24	; 0x10
     806:	1a 96       	adiw	r26, 0x0a	; 10
     808:	8c 91       	ld	r24, X
     80a:	1a 97       	sbiw	r26, 0x0a	; 10
     80c:	8f 87       	std	Y+15, r24	; 0x0f
     80e:	83 e1       	ldi	r24, 0x13	; 19
     810:	95 e0       	ldi	r25, 0x05	; 5
     812:	9b 8b       	std	Y+19, r25	; 0x13
     814:	8c 8b       	std	Y+20, r24	; 0x14
     816:	16 96       	adiw	r26, 0x06	; 6
     818:	8c 91       	ld	r24, X
     81a:	16 97       	sbiw	r26, 0x06	; 6
     81c:	4d 91       	ld	r20, X+
     81e:	5c 91       	ld	r21, X
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	97 87       	std	Z+15, r25	; 0x0f
     826:	10 8a       	std	Z+16, r1	; 0x10
     828:	67 e5       	ldi	r22, 0x57	; 87
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	74 87       	std	Z+12, r23	; 0x0c
     82e:	63 87       	std	Z+11, r22	; 0x0b
     830:	85 8f       	std	Z+29, r24	; 0x1d
     832:	14 8e       	std	Z+28, r1	; 0x1c
     834:	13 8e       	std	Z+27, r1	; 0x1b
     836:	12 8e       	std	Z+26, r1	; 0x1a
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	81 8b       	std	Z+17, r24	; 0x11
     83c:	56 87       	std	Z+14, r21	; 0x0e
     83e:	45 87       	std	Z+13, r20	; 0x0d
     840:	d9 01       	movw	r26, r18
     842:	57 97       	sbiw	r26, 0x17	; 23
     844:	8e e6       	ldi	r24, 0x6E	; 110
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	11 96       	adiw	r26, 0x01	; 1
     84a:	9c 93       	st	X, r25
     84c:	8e 93       	st	-X, r24
     84e:	eb 01       	movw	r28, r22
     850:	89 8d       	ldd	r24, Y+25	; 0x19
     852:	9a 8d       	ldd	r25, Y+26	; 0x1a
     854:	13 96       	adiw	r26, 0x03	; 3
     856:	9c 93       	st	X, r25
     858:	8e 93       	st	-X, r24
     85a:	12 97       	sbiw	r26, 0x02	; 2
     85c:	ec 01       	movw	r28, r24
     85e:	b9 83       	std	Y+1, r27	; 0x01
     860:	a8 83       	st	Y, r26
     862:	eb 01       	movw	r28, r22
     864:	ba 8f       	std	Y+26, r27	; 0x1a
     866:	a9 8f       	std	Y+25, r26	; 0x19
     868:	1d 96       	adiw	r26, 0x0d	; 13
     86a:	0b 2e       	mov	r0, r27
     86c:	11 96       	adiw	r26, 0x01	; 1
     86e:	0c 92       	st	X, r0
     870:	11 97       	sbiw	r26, 0x01	; 1
     872:	ac 93       	st	X, r26
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	0b 2e       	mov	r0, r27
     878:	11 96       	adiw	r26, 0x01	; 1
     87a:	0c 92       	st	X, r0
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	ac 93       	st	X, r26
     880:	0a 2e       	mov	r0, r26
     882:	1b 2e       	mov	r1, r27
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	1c 92       	st	X, r1
     888:	0e 92       	st	-X, r0
     88a:	11 24       	eor	r1, r1
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	cf 01       	movw	r24, r30
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <chThdCreateI>:
     896:	9e df       	rcall	.-196    	; 0x7d4 <chThdCreateSuspendedI>
     898:	2e ce       	rjmp	.-932    	; 0x4f6 <chSchReadyI>

0000089a <chThdExitS>:
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	c0 91 5c 02 	lds	r28, 0x025C	; 0x80025c <ch0+0x5>
     8a6:	d0 91 5d 02 	lds	r29, 0x025D	; 0x80025d <ch0+0x6>
     8aa:	9b 8b       	std	Y+19, r25	; 0x13
     8ac:	8a 8b       	std	Y+18, r24	; 0x12
     8ae:	8e 01       	movw	r16, r28
     8b0:	0c 5e       	subi	r16, 0xEC	; 236
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	8c 89       	ldd	r24, Y+20	; 0x14
     8b6:	9d 89       	ldd	r25, Y+21	; 0x15
     8b8:	08 17       	cp	r16, r24
     8ba:	19 07       	cpc	r17, r25
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <chThdExitS+0x3a>
     8be:	fc 01       	movw	r30, r24
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	3d 8b       	std	Y+21, r19	; 0x15
     8c6:	2c 8b       	std	Y+20, r18	; 0x14
     8c8:	16 de       	rcall	.-980    	; 0x4f6 <chSchReadyI>
     8ca:	8c 89       	ldd	r24, Y+20	; 0x14
     8cc:	9d 89       	ldd	r25, Y+21	; 0x15
     8ce:	80 17       	cp	r24, r16
     8d0:	91 07       	cpc	r25, r17
     8d2:	a9 f7       	brne	.-22     	; 0x8be <chThdExitS+0x24>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	81 11       	cpse	r24, r1
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <chThdExitS+0x58>
     8da:	e9 85       	ldd	r30, Y+9	; 0x09
     8dc:	fa 85       	ldd	r31, Y+10	; 0x0a
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	98 85       	ldd	r25, Y+8	; 0x08
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	af 81       	ldd	r26, Y+7	; 0x07
     8e8:	b8 85       	ldd	r27, Y+8	; 0x08
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	fc 93       	st	X, r31
     8ee:	ee 93       	st	-X, r30
     8f0:	12 97       	sbiw	r26, 0x02	; 2
     8f2:	8f e0       	ldi	r24, 0x0F	; 15
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	20 ce       	rjmp	.-960    	; 0x53e <chSchGoSleepS>

000008fe <chThdExit>:
     8fe:	f8 94       	cli
     900:	cc cf       	rjmp	.-104    	; 0x89a <chThdExitS>

00000902 <chThdSleep>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     902:	f8 94       	cli
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
     904:	bc 01       	movw	r22, r24
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	36 de       	rcall	.-916    	; 0x576 <chSchGoSleepTimeoutS>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     90a:	78 94       	sei
     90c:	08 95       	ret

0000090e <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     90e:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	80 83       	st	Z, r24
  qp->prev = qp;
     914:	93 83       	std	Z+3, r25	; 0x03
     916:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
     918:	15 82       	std	Z+5, r1	; 0x05
     91a:	14 82       	std	Z+4, r1	; 0x04
     91c:	08 95       	ret

0000091e <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
     91e:	ea e9       	ldi	r30, 0x9A	; 154
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	8b ea       	ldi	r24, 0xAB	; 171
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	80 83       	st	Z, r24
     92a:	8b e2       	ldi	r24, 0x2B	; 43
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	93 83       	std	Z+3, r25	; 0x03
     930:	82 83       	std	Z+2, r24	; 0x02
     932:	08 95       	ret

00000934 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     934:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
     936:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <ch_memcore+0x2>
     93a:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <ch_memcore+0x3>
     93e:	f9 01       	movw	r30, r18
     940:	e8 1b       	sub	r30, r24
     942:	f9 0b       	sbc	r31, r25
     944:	71 95       	neg	r23
     946:	61 95       	neg	r22
     948:	71 09       	sbc	r23, r1
     94a:	6e 23       	and	r22, r30
     94c:	7f 23       	and	r23, r31
  prev = p - offset;
     94e:	cb 01       	movw	r24, r22
     950:	84 1b       	sub	r24, r20
     952:	95 0b       	sbc	r25, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
     954:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <ch_memcore>
     958:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <ch_memcore+0x1>
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	50 f0       	brcs	.+20     	; 0x976 <chCoreAllocFromTop+0x42>
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	38 f0       	brcs	.+14     	; 0x976 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
     968:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <ch_memcore+0x3>
     96c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <ch_memcore+0x2>

  return p;
     970:	cb 01       	movw	r24, r22
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     972:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     974:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     97c:	08 95       	ret

0000097e <chCoreGetStatusX>:
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
     97e:	ea e9       	ldi	r30, 0x9A	; 154
     980:	f2 e0       	ldi	r31, 0x02	; 2
     982:	40 81       	ld	r20, Z
     984:	51 81       	ldd	r21, Z+1	; 0x01
     986:	dc 01       	movw	r26, r24
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	5c 93       	st	X, r21
     98c:	4e 93       	st	-X, r20
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
     98e:	22 81       	ldd	r18, Z+2	; 0x02
     990:	33 81       	ldd	r19, Z+3	; 0x03
     992:	24 1b       	sub	r18, r20
     994:	35 0b       	sbc	r19, r21
     996:	13 96       	adiw	r26, 0x03	; 3
     998:	3c 93       	st	X, r19
     99a:	2e 93       	st	-X, r18
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	08 95       	ret

000009a0 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29

  default_heap.provider = chCoreAllocAlignedWithOffset;
     9a4:	cb e2       	ldi	r28, 0x2B	; 43
     9a6:	d2 e0       	ldi	r29, 0x02	; 2
     9a8:	8a e9       	ldi	r24, 0x9A	; 154
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	99 83       	std	Y+1, r25	; 0x01
     9ae:	88 83       	st	Y, r24
  chCoreGetStatusX(&default_heap.area);
     9b0:	8d e2       	ldi	r24, 0x2D	; 45
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	e4 df       	rcall	.-56     	; 0x97e <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
     9b6:	1f 82       	std	Y+7, r1	; 0x07
     9b8:	1e 82       	std	Y+6, r1	; 0x06
  H_FREE_PAGES(&default_heap.header) = 0;
     9ba:	19 86       	std	Y+9, r1	; 0x09
     9bc:	18 86       	std	Y+8, r1	; 0x08
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9be:	85 e3       	ldi	r24, 0x35	; 53
     9c0:	92 e0       	ldi	r25, 0x02	; 2
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
     9c2:	df 91       	pop	r29
  default_heap.provider = chCoreAllocAlignedWithOffset;
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9c4:	cf 91       	pop	r28
     9c6:	a3 cf       	rjmp	.-186    	; 0x90e <chMtxObjectInit>

000009c8 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     9c8:	2f 92       	push	r2
  asm volatile ("push    r3");
     9ca:	3f 92       	push	r3
  asm volatile ("push    r4");
     9cc:	4f 92       	push	r4
  asm volatile ("push    r5");
     9ce:	5f 92       	push	r5
  asm volatile ("push    r6");
     9d0:	6f 92       	push	r6
  asm volatile ("push    r7");
     9d2:	7f 92       	push	r7
  asm volatile ("push    r8");
     9d4:	8f 92       	push	r8
  asm volatile ("push    r9");
     9d6:	9f 92       	push	r9
  asm volatile ("push    r10");
     9d8:	af 92       	push	r10
  asm volatile ("push    r11");
     9da:	bf 92       	push	r11
  asm volatile ("push    r12");
     9dc:	cf 92       	push	r12
  asm volatile ("push    r13");
     9de:	df 92       	push	r13
  asm volatile ("push    r14");
     9e0:	ef 92       	push	r14
  asm volatile ("push    r15");
     9e2:	ff 92       	push	r15
  asm volatile ("push    r16");
     9e4:	0f 93       	push	r16
  asm volatile ("push    r17");
     9e6:	1f 93       	push	r17
  asm volatile ("push    r28");
     9e8:	cf 93       	push	r28
  asm volatile ("push    r29");
     9ea:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
     9ec:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     9ee:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     9f0:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     9f2:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     9f4:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     9f6:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     9f8:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     9fa:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     9fc:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     9fe:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     a00:	df 91       	pop	r29
  asm volatile ("pop     r28");
     a02:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     a04:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     a06:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     a08:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     a0a:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     a0c:	df 90       	pop	r13
  asm volatile ("pop     r12");
     a0e:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     a10:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     a12:	af 90       	pop	r10
  asm volatile ("pop     r9");
     a14:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     a16:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     a18:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     a1a:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     a1c:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     a1e:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     a20:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     a22:	2f 90       	pop	r2
  asm volatile ("ret");
     a24:	08 95       	ret

00000a26 <_port_thread_start>:
     a26:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     a28:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     a2a:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     a2c:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     a2e:	67 cf       	rjmp	.-306    	; 0x8fe <chThdExit>

00000a30 <led_cb>:
/*
 * LED timer callback.
 */
static void led_cb(void *arg) {
 
    palTogglePad(LED_PORT, LED_PIN);    //  Muda o estado lógico do LED 
     a30:	8b b1       	in	r24, 0x0b	; 11
     a32:	80 58       	subi	r24, 0x80	; 128
     a34:	8b b9       	out	0x0b, r24	; 11
    n++;                                //  Soma mais um na variável n
     a36:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <n>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     a40:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
     a44:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     a48:	89 2b       	or	r24, r25
     a4a:	19 f0       	breq	.+6      	; 0xa52 <led_cb+0x22>
    chVTDoResetI(vtp);
     a4c:	8d e3       	ldi	r24, 0x3D	; 61
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	6a dc       	rcall	.-1836   	; 0x326 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	48 e1       	ldi	r20, 0x18	; 24
     a58:	55 e0       	ldi	r21, 0x05	; 5
     a5a:	68 e0       	ldi	r22, 0x08	; 8
     a5c:	7d e3       	ldi	r23, 0x3D	; 61
     a5e:	8d e3       	ldi	r24, 0x3D	; 61
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	1f cc       	rjmp	.-1986   	; 0x2a2 <chVTDoSetI>

00000a64 <main>:
/*
 * Application main function.
 */
int main(void) {

    halInit();
     a64:	2f db       	rcall	.-2466   	; 0xc4 <halInit>
    chSysInit();
     a66:	03 dc       	rcall	.-2042   	; 0x26e <chSysInit>
     a68:	46 e0       	ldi	r20, 0x06	; 6

    palSetPadMode(LED_PORT, LED_PIN, PAL_MODE_OUTPUT_PUSHPULL);
     a6a:	60 e8       	ldi	r22, 0x80	; 128
     a6c:	89 e2       	ldi	r24, 0x29	; 41
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	4d db       	rcall	.-2406   	; 0x10c <_pal_lld_setgroupmode>
     a72:	46 e0       	ldi	r20, 0x06	; 6
    palSetPadMode(IOPORT2, 1, PAL_MODE_OUTPUT_PUSHPULL);
     a74:	62 e0       	ldi	r22, 0x02	; 2
     a76:	83 e2       	ldi	r24, 0x23	; 35
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	48 db       	rcall	.-2416   	; 0x10c <_pal_lld_setgroupmode>
     a7c:	29 9a       	sbi	0x05, 1	; 5
    palWritePad(IOPORT2, 1, 1);
    palClearPad(LED_PORT, LED_PIN);
     a7e:	5f 98       	cbi	0x0b, 7	; 11

     /* LED timer initialization.*/
    chVTObjectInit(&led_vt);    // Inicializa o temporizador virtual.
     a80:	8d e3       	ldi	r24, 0x3D	; 61
     a82:	92 e0       	ldi	r25, 0x02	; 2
     a84:	0a dc       	rcall	.-2028   	; 0x29a <chVTObjectInit>
     a86:	f8 94       	cli
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     a88:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     a8c:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     a90:	89 2b       	or	r24, r25
     a92:	19 f0       	breq	.+6      	; 0xa9a <main+0x36>
    chVTDoResetI(vtp);
     a94:	8d e3       	ldi	r24, 0x3D	; 61
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	46 dc       	rcall	.-1908   	; 0x326 <chVTDoResetI>
     a9a:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	48 e1       	ldi	r20, 0x18	; 24
     aa0:	55 e0       	ldi	r21, 0x05	; 5
     aa2:	68 e0       	ldi	r22, 0x08	; 8
     aa4:	7d e3       	ldi	r23, 0x3D	; 61
     aa6:	8d e3       	ldi	r24, 0x3D	; 61
     aa8:	92 e0       	ldi	r25, 0x02	; 2
     aaa:	fb db       	rcall	.-2058   	; 0x2a2 <chVTDoSetI>
     aac:	78 94       	sei
 
    /* Starting blinker.*/
    chVTSet(&led_vt, TIME_MS2I(1000), led_cb, NULL);    // Define o temporizador para chamar a função led_cb após 1 segundo.
    
    while(1){
        if(n>3){
     aae:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	38 f4       	brcc	.+14     	; 0xac4 <main+0x60>
            /* Stopping blinker.*/
            chVTReset(&led_vt);
            palClearPad(LED_PORT, LED_PIN);
            break;
        }
    chThdSleepMilliseconds(500);
     ab6:	84 e8       	ldi	r24, 0x84	; 132
     ab8:	9e e1       	ldi	r25, 0x1E	; 30
     aba:	23 df       	rcall	.-442    	; 0x902 <chThdSleep>
     abc:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
 
    /* Starting blinker.*/
    chVTSet(&led_vt, TIME_MS2I(1000), led_cb, NULL);    // Define o temporizador para chamar a função led_cb após 1 segundo.
    
    while(1){
        if(n>3){
     ac0:	84 30       	cpi	r24, 0x04	; 4
     ac2:	c8 f3       	brcs	.-14     	; 0xab6 <main+0x52>
     ac4:	f8 94       	cli
     ac6:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     aca:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     ace:	89 2b       	or	r24, r25
     ad0:	19 f0       	breq	.+6      	; 0xad8 <main+0x74>
    chVTDoResetI(vtp);
     ad2:	8d e3       	ldi	r24, 0x3D	; 61
     ad4:	92 e0       	ldi	r25, 0x02	; 2
     ad6:	27 dc       	rcall	.-1970   	; 0x326 <chVTDoResetI>
     ad8:	78 94       	sei
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     ada:	5f 98       	cbi	0x0b, 7	; 11
            /* Stopping blinker.*/
            chVTReset(&led_vt);
            palClearPad(LED_PORT, LED_PIN);
     adc:	80 e0       	ldi	r24, 0x00	; 0
    
    }

    
 
}
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	08 95       	ret

00000ae2 <vfprintf>:
     ae2:	ab e0       	ldi	r26, 0x0B	; 11
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	e6 e7       	ldi	r30, 0x76	; 118
     ae8:	f5 e0       	ldi	r31, 0x05	; 5
     aea:	d3 c2       	rjmp	.+1446   	; 0x1092 <__prologue_saves__+0x8>
     aec:	6c 01       	movw	r12, r24
     aee:	7b 01       	movw	r14, r22
     af0:	3a 01       	movw	r6, r20
     af2:	fc 01       	movw	r30, r24
     af4:	17 82       	std	Z+7, r1	; 0x07
     af6:	16 82       	std	Z+6, r1	; 0x06
     af8:	83 81       	ldd	r24, Z+3	; 0x03
     afa:	81 ff       	sbrs	r24, 1
     afc:	f9 c0       	rjmp	.+498    	; 0xcf0 <vfprintf+0x20e>
     afe:	ce 01       	movw	r24, r28
     b00:	01 96       	adiw	r24, 0x01	; 1
     b02:	4c 01       	movw	r8, r24
     b04:	f6 01       	movw	r30, r12
     b06:	b3 80       	ldd	r11, Z+3	; 0x03
     b08:	f7 01       	movw	r30, r14
     b0a:	b3 fc       	sbrc	r11, 3
     b0c:	05 91       	lpm	r16, Z+
     b0e:	b3 fe       	sbrs	r11, 3
     b10:	01 91       	ld	r16, Z+
     b12:	7f 01       	movw	r14, r30
     b14:	00 23       	and	r16, r16
     b16:	09 f4       	brne	.+2      	; 0xb1a <vfprintf+0x38>
     b18:	e7 c0       	rjmp	.+462    	; 0xce8 <vfprintf+0x206>
     b1a:	05 32       	cpi	r16, 0x25	; 37
     b1c:	49 f4       	brne	.+18     	; 0xb30 <vfprintf+0x4e>
     b1e:	b3 fc       	sbrc	r11, 3
     b20:	05 91       	lpm	r16, Z+
     b22:	b3 fe       	sbrs	r11, 3
     b24:	01 91       	ld	r16, Z+
     b26:	7f 01       	movw	r14, r30
     b28:	05 32       	cpi	r16, 0x25	; 37
     b2a:	11 f0       	breq	.+4      	; 0xb30 <vfprintf+0x4e>
     b2c:	10 e0       	ldi	r17, 0x00	; 0
     b2e:	17 c0       	rjmp	.+46     	; 0xb5e <vfprintf+0x7c>
     b30:	b6 01       	movw	r22, r12
     b32:	80 2f       	mov	r24, r16
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	31 d3       	rcall	.+1634   	; 0x119a <fputc>
     b38:	53 01       	movw	r10, r6
     b3a:	35 01       	movw	r6, r10
     b3c:	e3 cf       	rjmp	.-58     	; 0xb04 <vfprintf+0x22>
     b3e:	00 23       	and	r16, r16
     b40:	09 f4       	brne	.+2      	; 0xb44 <vfprintf+0x62>
     b42:	d2 c0       	rjmp	.+420    	; 0xce8 <vfprintf+0x206>
     b44:	60 2f       	mov	r22, r16
     b46:	70 e0       	ldi	r23, 0x00	; 0
     b48:	8f e6       	ldi	r24, 0x6F	; 111
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	dd d2       	rcall	.+1466   	; 0x1108 <strchr_P>
     b4e:	89 2b       	or	r24, r25
     b50:	49 f0       	breq	.+18     	; 0xb64 <vfprintf+0x82>
     b52:	f7 01       	movw	r30, r14
     b54:	b3 fc       	sbrc	r11, 3
     b56:	05 91       	lpm	r16, Z+
     b58:	b3 fe       	sbrs	r11, 3
     b5a:	01 91       	ld	r16, Z+
     b5c:	7f 01       	movw	r14, r30
     b5e:	17 ff       	sbrs	r17, 7
     b60:	ee cf       	rjmp	.-36     	; 0xb3e <vfprintf+0x5c>
     b62:	04 c0       	rjmp	.+8      	; 0xb6c <vfprintf+0x8a>
     b64:	03 32       	cpi	r16, 0x23	; 35
     b66:	39 f0       	breq	.+14     	; 0xb76 <vfprintf+0x94>
     b68:	0c 36       	cpi	r16, 0x6C	; 108
     b6a:	19 f0       	breq	.+6      	; 0xb72 <vfprintf+0x90>
     b6c:	01 11       	cpse	r16, r1
     b6e:	05 c0       	rjmp	.+10     	; 0xb7a <vfprintf+0x98>
     b70:	bb c0       	rjmp	.+374    	; 0xce8 <vfprintf+0x206>
     b72:	10 68       	ori	r17, 0x80	; 128
     b74:	ee cf       	rjmp	.-36     	; 0xb52 <vfprintf+0x70>
     b76:	10 e1       	ldi	r17, 0x10	; 16
     b78:	ec cf       	rjmp	.-40     	; 0xb52 <vfprintf+0x70>
     b7a:	60 2f       	mov	r22, r16
     b7c:	70 e0       	ldi	r23, 0x00	; 0
     b7e:	88 e6       	ldi	r24, 0x68	; 104
     b80:	90 e0       	ldi	r25, 0x00	; 0
     b82:	c2 d2       	rcall	.+1412   	; 0x1108 <strchr_P>
     b84:	89 2b       	or	r24, r25
     b86:	41 f0       	breq	.+16     	; 0xb98 <vfprintf+0xb6>
     b88:	53 01       	movw	r10, r6
     b8a:	f4 e0       	ldi	r31, 0x04	; 4
     b8c:	af 0e       	add	r10, r31
     b8e:	b1 1c       	adc	r11, r1
     b90:	b6 01       	movw	r22, r12
     b92:	8f e3       	ldi	r24, 0x3F	; 63
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	10 c0       	rjmp	.+32     	; 0xbb8 <vfprintf+0xd6>
     b98:	03 36       	cpi	r16, 0x63	; 99
     b9a:	31 f0       	breq	.+12     	; 0xba8 <vfprintf+0xc6>
     b9c:	03 37       	cpi	r16, 0x73	; 115
     b9e:	71 f0       	breq	.+28     	; 0xbbc <vfprintf+0xda>
     ba0:	03 35       	cpi	r16, 0x53	; 83
     ba2:	01 f5       	brne	.+64     	; 0xbe4 <vfprintf+0x102>
     ba4:	11 60       	ori	r17, 0x01	; 1
     ba6:	0a c0       	rjmp	.+20     	; 0xbbc <vfprintf+0xda>
     ba8:	53 01       	movw	r10, r6
     baa:	82 e0       	ldi	r24, 0x02	; 2
     bac:	a8 0e       	add	r10, r24
     bae:	b1 1c       	adc	r11, r1
     bb0:	b6 01       	movw	r22, r12
     bb2:	f3 01       	movw	r30, r6
     bb4:	80 81       	ld	r24, Z
     bb6:	91 81       	ldd	r25, Z+1	; 0x01
     bb8:	f0 d2       	rcall	.+1504   	; 0x119a <fputc>
     bba:	bf cf       	rjmp	.-130    	; 0xb3a <vfprintf+0x58>
     bbc:	53 01       	movw	r10, r6
     bbe:	f2 e0       	ldi	r31, 0x02	; 2
     bc0:	af 0e       	add	r10, r31
     bc2:	b1 1c       	adc	r11, r1
     bc4:	f3 01       	movw	r30, r6
     bc6:	60 80       	ld	r6, Z
     bc8:	71 80       	ldd	r7, Z+1	; 0x01
     bca:	f3 01       	movw	r30, r6
     bcc:	10 fd       	sbrc	r17, 0
     bce:	85 91       	lpm	r24, Z+
     bd0:	10 ff       	sbrs	r17, 0
     bd2:	81 91       	ld	r24, Z+
     bd4:	3f 01       	movw	r6, r30
     bd6:	88 23       	and	r24, r24
     bd8:	09 f4       	brne	.+2      	; 0xbdc <vfprintf+0xfa>
     bda:	af cf       	rjmp	.-162    	; 0xb3a <vfprintf+0x58>
     bdc:	b6 01       	movw	r22, r12
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	dc d2       	rcall	.+1464   	; 0x119a <fputc>
     be2:	f3 cf       	rjmp	.-26     	; 0xbca <vfprintf+0xe8>
     be4:	04 36       	cpi	r16, 0x64	; 100
     be6:	11 f0       	breq	.+4      	; 0xbec <vfprintf+0x10a>
     be8:	09 36       	cpi	r16, 0x69	; 105
     bea:	21 f5       	brne	.+72     	; 0xc34 <vfprintf+0x152>
     bec:	53 01       	movw	r10, r6
     bee:	17 ff       	sbrs	r17, 7
     bf0:	09 c0       	rjmp	.+18     	; 0xc04 <vfprintf+0x122>
     bf2:	f4 e0       	ldi	r31, 0x04	; 4
     bf4:	af 0e       	add	r10, r31
     bf6:	b1 1c       	adc	r11, r1
     bf8:	f3 01       	movw	r30, r6
     bfa:	60 81       	ld	r22, Z
     bfc:	71 81       	ldd	r23, Z+1	; 0x01
     bfe:	82 81       	ldd	r24, Z+2	; 0x02
     c00:	93 81       	ldd	r25, Z+3	; 0x03
     c02:	0a c0       	rjmp	.+20     	; 0xc18 <vfprintf+0x136>
     c04:	f2 e0       	ldi	r31, 0x02	; 2
     c06:	af 0e       	add	r10, r31
     c08:	b1 1c       	adc	r11, r1
     c0a:	f3 01       	movw	r30, r6
     c0c:	60 81       	ld	r22, Z
     c0e:	71 81       	ldd	r23, Z+1	; 0x01
     c10:	07 2e       	mov	r0, r23
     c12:	00 0c       	add	r0, r0
     c14:	88 0b       	sbc	r24, r24
     c16:	99 0b       	sbc	r25, r25
     c18:	1f 7e       	andi	r17, 0xEF	; 239
     c1a:	97 ff       	sbrs	r25, 7
     c1c:	08 c0       	rjmp	.+16     	; 0xc2e <vfprintf+0x14c>
     c1e:	90 95       	com	r25
     c20:	80 95       	com	r24
     c22:	70 95       	com	r23
     c24:	61 95       	neg	r22
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	8f 4f       	sbci	r24, 0xFF	; 255
     c2a:	9f 4f       	sbci	r25, 0xFF	; 255
     c2c:	10 64       	ori	r17, 0x40	; 64
     c2e:	2a e0       	ldi	r18, 0x0A	; 10
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	30 c0       	rjmp	.+96     	; 0xc94 <vfprintf+0x1b2>
     c34:	00 37       	cpi	r16, 0x70	; 112
     c36:	91 f0       	breq	.+36     	; 0xc5c <vfprintf+0x17a>
     c38:	40 f4       	brcc	.+16     	; 0xc4a <vfprintf+0x168>
     c3a:	08 35       	cpi	r16, 0x58	; 88
     c3c:	a1 f0       	breq	.+40     	; 0xc66 <vfprintf+0x184>
     c3e:	0f 36       	cpi	r16, 0x6F	; 111
     c40:	09 f0       	breq	.+2      	; 0xc44 <vfprintf+0x162>
     c42:	52 c0       	rjmp	.+164    	; 0xce8 <vfprintf+0x206>
     c44:	28 e0       	ldi	r18, 0x08	; 8
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	11 c0       	rjmp	.+34     	; 0xc6c <vfprintf+0x18a>
     c4a:	05 37       	cpi	r16, 0x75	; 117
     c4c:	19 f0       	breq	.+6      	; 0xc54 <vfprintf+0x172>
     c4e:	08 37       	cpi	r16, 0x78	; 120
     c50:	31 f0       	breq	.+12     	; 0xc5e <vfprintf+0x17c>
     c52:	4a c0       	rjmp	.+148    	; 0xce8 <vfprintf+0x206>
     c54:	1f 7e       	andi	r17, 0xEF	; 239
     c56:	2a e0       	ldi	r18, 0x0A	; 10
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	08 c0       	rjmp	.+16     	; 0xc6c <vfprintf+0x18a>
     c5c:	10 61       	ori	r17, 0x10	; 16
     c5e:	14 62       	ori	r17, 0x24	; 36
     c60:	20 e1       	ldi	r18, 0x10	; 16
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	03 c0       	rjmp	.+6      	; 0xc6c <vfprintf+0x18a>
     c66:	14 60       	ori	r17, 0x04	; 4
     c68:	20 e1       	ldi	r18, 0x10	; 16
     c6a:	32 e0       	ldi	r19, 0x02	; 2
     c6c:	53 01       	movw	r10, r6
     c6e:	17 ff       	sbrs	r17, 7
     c70:	09 c0       	rjmp	.+18     	; 0xc84 <vfprintf+0x1a2>
     c72:	f4 e0       	ldi	r31, 0x04	; 4
     c74:	af 0e       	add	r10, r31
     c76:	b1 1c       	adc	r11, r1
     c78:	f3 01       	movw	r30, r6
     c7a:	60 81       	ld	r22, Z
     c7c:	71 81       	ldd	r23, Z+1	; 0x01
     c7e:	82 81       	ldd	r24, Z+2	; 0x02
     c80:	93 81       	ldd	r25, Z+3	; 0x03
     c82:	08 c0       	rjmp	.+16     	; 0xc94 <vfprintf+0x1b2>
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	af 0e       	add	r10, r31
     c88:	b1 1c       	adc	r11, r1
     c8a:	f3 01       	movw	r30, r6
     c8c:	60 81       	ld	r22, Z
     c8e:	71 81       	ldd	r23, Z+1	; 0x01
     c90:	80 e0       	ldi	r24, 0x00	; 0
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a4 01       	movw	r20, r8
     c96:	d6 d2       	rcall	.+1452   	; 0x1244 <__ultoa_invert>
     c98:	08 2f       	mov	r16, r24
     c9a:	08 19       	sub	r16, r8
     c9c:	16 ff       	sbrs	r17, 6
     c9e:	04 c0       	rjmp	.+8      	; 0xca8 <vfprintf+0x1c6>
     ca0:	b6 01       	movw	r22, r12
     ca2:	8d e2       	ldi	r24, 0x2D	; 45
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	79 d2       	rcall	.+1266   	; 0x119a <fputc>
     ca8:	14 ff       	sbrs	r17, 4
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <vfprintf+0x1f0>
     cac:	fe 01       	movw	r30, r28
     cae:	e0 0f       	add	r30, r16
     cb0:	f1 1d       	adc	r31, r1
     cb2:	80 81       	ld	r24, Z
     cb4:	80 33       	cpi	r24, 0x30	; 48
     cb6:	69 f0       	breq	.+26     	; 0xcd2 <vfprintf+0x1f0>
     cb8:	b6 01       	movw	r22, r12
     cba:	80 e3       	ldi	r24, 0x30	; 48
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	6d d2       	rcall	.+1242   	; 0x119a <fputc>
     cc0:	12 ff       	sbrs	r17, 2
     cc2:	07 c0       	rjmp	.+14     	; 0xcd2 <vfprintf+0x1f0>
     cc4:	10 72       	andi	r17, 0x20	; 32
     cc6:	81 2f       	mov	r24, r17
     cc8:	90 e0       	ldi	r25, 0x00	; 0
     cca:	b6 01       	movw	r22, r12
     ccc:	88 5a       	subi	r24, 0xA8	; 168
     cce:	9f 4f       	sbci	r25, 0xFF	; 255
     cd0:	64 d2       	rcall	.+1224   	; 0x119a <fputc>
     cd2:	01 50       	subi	r16, 0x01	; 1
     cd4:	f4 01       	movw	r30, r8
     cd6:	e0 0f       	add	r30, r16
     cd8:	f1 1d       	adc	r31, r1
     cda:	80 81       	ld	r24, Z
     cdc:	b6 01       	movw	r22, r12
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	5c d2       	rcall	.+1208   	; 0x119a <fputc>
     ce2:	01 11       	cpse	r16, r1
     ce4:	f6 cf       	rjmp	.-20     	; 0xcd2 <vfprintf+0x1f0>
     ce6:	29 cf       	rjmp	.-430    	; 0xb3a <vfprintf+0x58>
     ce8:	f6 01       	movw	r30, r12
     cea:	86 81       	ldd	r24, Z+6	; 0x06
     cec:	97 81       	ldd	r25, Z+7	; 0x07
     cee:	02 c0       	rjmp	.+4      	; 0xcf4 <vfprintf+0x212>
     cf0:	8f ef       	ldi	r24, 0xFF	; 255
     cf2:	9f ef       	ldi	r25, 0xFF	; 255
     cf4:	2b 96       	adiw	r28, 0x0b	; 11
     cf6:	ee e0       	ldi	r30, 0x0E	; 14
     cf8:	e8 c1       	rjmp	.+976    	; 0x10ca <__epilogue_restores__+0x8>

00000cfa <putval>:
     cfa:	20 fd       	sbrc	r18, 0
     cfc:	09 c0       	rjmp	.+18     	; 0xd10 <putval+0x16>
     cfe:	fc 01       	movw	r30, r24
     d00:	23 fd       	sbrc	r18, 3
     d02:	05 c0       	rjmp	.+10     	; 0xd0e <putval+0x14>
     d04:	22 ff       	sbrs	r18, 2
     d06:	02 c0       	rjmp	.+4      	; 0xd0c <putval+0x12>
     d08:	73 83       	std	Z+3, r23	; 0x03
     d0a:	62 83       	std	Z+2, r22	; 0x02
     d0c:	51 83       	std	Z+1, r21	; 0x01
     d0e:	40 83       	st	Z, r20
     d10:	08 95       	ret

00000d12 <mulacc>:
     d12:	44 fd       	sbrc	r20, 4
     d14:	17 c0       	rjmp	.+46     	; 0xd44 <mulacc+0x32>
     d16:	46 fd       	sbrc	r20, 6
     d18:	17 c0       	rjmp	.+46     	; 0xd48 <mulacc+0x36>
     d1a:	ab 01       	movw	r20, r22
     d1c:	bc 01       	movw	r22, r24
     d1e:	da 01       	movw	r26, r20
     d20:	fb 01       	movw	r30, r22
     d22:	aa 0f       	add	r26, r26
     d24:	bb 1f       	adc	r27, r27
     d26:	ee 1f       	adc	r30, r30
     d28:	ff 1f       	adc	r31, r31
     d2a:	10 94       	com	r1
     d2c:	d1 f7       	brne	.-12     	; 0xd22 <mulacc+0x10>
     d2e:	4a 0f       	add	r20, r26
     d30:	5b 1f       	adc	r21, r27
     d32:	6e 1f       	adc	r22, r30
     d34:	7f 1f       	adc	r23, r31
     d36:	cb 01       	movw	r24, r22
     d38:	ba 01       	movw	r22, r20
     d3a:	66 0f       	add	r22, r22
     d3c:	77 1f       	adc	r23, r23
     d3e:	88 1f       	adc	r24, r24
     d40:	99 1f       	adc	r25, r25
     d42:	09 c0       	rjmp	.+18     	; 0xd56 <mulacc+0x44>
     d44:	33 e0       	ldi	r19, 0x03	; 3
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <mulacc+0x38>
     d48:	34 e0       	ldi	r19, 0x04	; 4
     d4a:	66 0f       	add	r22, r22
     d4c:	77 1f       	adc	r23, r23
     d4e:	88 1f       	adc	r24, r24
     d50:	99 1f       	adc	r25, r25
     d52:	31 50       	subi	r19, 0x01	; 1
     d54:	d1 f7       	brne	.-12     	; 0xd4a <mulacc+0x38>
     d56:	62 0f       	add	r22, r18
     d58:	71 1d       	adc	r23, r1
     d5a:	81 1d       	adc	r24, r1
     d5c:	91 1d       	adc	r25, r1
     d5e:	08 95       	ret

00000d60 <skip_spaces>:
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	8c 01       	movw	r16, r24
     d6a:	c8 01       	movw	r24, r16
     d6c:	d8 d1       	rcall	.+944    	; 0x111e <fgetc>
     d6e:	ec 01       	movw	r28, r24
     d70:	97 fd       	sbrc	r25, 7
     d72:	06 c0       	rjmp	.+12     	; 0xd80 <skip_spaces+0x20>
     d74:	c1 d1       	rcall	.+898    	; 0x10f8 <isspace>
     d76:	89 2b       	or	r24, r25
     d78:	c1 f7       	brne	.-16     	; 0xd6a <skip_spaces+0xa>
     d7a:	b8 01       	movw	r22, r16
     d7c:	ce 01       	movw	r24, r28
     d7e:	49 d2       	rcall	.+1170   	; 0x1212 <ungetc>
     d80:	ce 01       	movw	r24, r28
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	08 95       	ret

00000d8c <conv_int>:
     d8c:	8f 92       	push	r8
     d8e:	9f 92       	push	r9
     d90:	af 92       	push	r10
     d92:	bf 92       	push	r11
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	8c 01       	movw	r16, r24
     da2:	d6 2f       	mov	r29, r22
     da4:	7a 01       	movw	r14, r20
     da6:	b2 2e       	mov	r11, r18
     da8:	ba d1       	rcall	.+884    	; 0x111e <fgetc>
     daa:	9c 01       	movw	r18, r24
     dac:	33 27       	eor	r19, r19
     dae:	2b 32       	cpi	r18, 0x2B	; 43
     db0:	31 05       	cpc	r19, r1
     db2:	31 f0       	breq	.+12     	; 0xdc0 <conv_int+0x34>
     db4:	2d 32       	cpi	r18, 0x2D	; 45
     db6:	31 05       	cpc	r19, r1
     db8:	59 f4       	brne	.+22     	; 0xdd0 <conv_int+0x44>
     dba:	8b 2d       	mov	r24, r11
     dbc:	80 68       	ori	r24, 0x80	; 128
     dbe:	b8 2e       	mov	r11, r24
     dc0:	d1 50       	subi	r29, 0x01	; 1
     dc2:	11 f4       	brne	.+4      	; 0xdc8 <conv_int+0x3c>
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	61 c0       	rjmp	.+194    	; 0xe8a <conv_int+0xfe>
     dc8:	c8 01       	movw	r24, r16
     dca:	a9 d1       	rcall	.+850    	; 0x111e <fgetc>
     dcc:	97 fd       	sbrc	r25, 7
     dce:	fa cf       	rjmp	.-12     	; 0xdc4 <conv_int+0x38>
     dd0:	cb 2d       	mov	r28, r11
     dd2:	cd 7f       	andi	r28, 0xFD	; 253
     dd4:	2b 2d       	mov	r18, r11
     dd6:	20 73       	andi	r18, 0x30	; 48
     dd8:	f9 f4       	brne	.+62     	; 0xe18 <conv_int+0x8c>
     dda:	80 33       	cpi	r24, 0x30	; 48
     ddc:	e9 f4       	brne	.+58     	; 0xe18 <conv_int+0x8c>
     dde:	aa 24       	eor	r10, r10
     de0:	aa 94       	dec	r10
     de2:	ad 0e       	add	r10, r29
     de4:	09 f4       	brne	.+2      	; 0xde8 <conv_int+0x5c>
     de6:	3e c0       	rjmp	.+124    	; 0xe64 <conv_int+0xd8>
     de8:	c8 01       	movw	r24, r16
     dea:	99 d1       	rcall	.+818    	; 0x111e <fgetc>
     dec:	97 fd       	sbrc	r25, 7
     dee:	3a c0       	rjmp	.+116    	; 0xe64 <conv_int+0xd8>
     df0:	9c 01       	movw	r18, r24
     df2:	2f 7d       	andi	r18, 0xDF	; 223
     df4:	33 27       	eor	r19, r19
     df6:	28 35       	cpi	r18, 0x58	; 88
     df8:	31 05       	cpc	r19, r1
     dfa:	41 f4       	brne	.+16     	; 0xe0c <conv_int+0x80>
     dfc:	c2 64       	ori	r28, 0x42	; 66
     dfe:	d2 50       	subi	r29, 0x02	; 2
     e00:	89 f1       	breq	.+98     	; 0xe64 <conv_int+0xd8>
     e02:	c8 01       	movw	r24, r16
     e04:	8c d1       	rcall	.+792    	; 0x111e <fgetc>
     e06:	97 ff       	sbrs	r25, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <conv_int+0x8c>
     e0a:	2c c0       	rjmp	.+88     	; 0xe64 <conv_int+0xd8>
     e0c:	b6 fe       	sbrs	r11, 6
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <conv_int+0x88>
     e10:	c2 60       	ori	r28, 0x02	; 2
     e12:	01 c0       	rjmp	.+2      	; 0xe16 <conv_int+0x8a>
     e14:	c2 61       	ori	r28, 0x12	; 18
     e16:	da 2d       	mov	r29, r10
     e18:	81 2c       	mov	r8, r1
     e1a:	91 2c       	mov	r9, r1
     e1c:	54 01       	movw	r10, r8
     e1e:	20 ed       	ldi	r18, 0xD0	; 208
     e20:	28 0f       	add	r18, r24
     e22:	28 30       	cpi	r18, 0x08	; 8
     e24:	78 f0       	brcs	.+30     	; 0xe44 <conv_int+0xb8>
     e26:	c4 ff       	sbrs	r28, 4
     e28:	03 c0       	rjmp	.+6      	; 0xe30 <conv_int+0xa4>
     e2a:	b8 01       	movw	r22, r16
     e2c:	f2 d1       	rcall	.+996    	; 0x1212 <ungetc>
     e2e:	17 c0       	rjmp	.+46     	; 0xe5e <conv_int+0xd2>
     e30:	2a 30       	cpi	r18, 0x0A	; 10
     e32:	40 f0       	brcs	.+16     	; 0xe44 <conv_int+0xb8>
     e34:	c6 ff       	sbrs	r28, 6
     e36:	f9 cf       	rjmp	.-14     	; 0xe2a <conv_int+0x9e>
     e38:	2f 7d       	andi	r18, 0xDF	; 223
     e3a:	3f ee       	ldi	r19, 0xEF	; 239
     e3c:	32 0f       	add	r19, r18
     e3e:	36 30       	cpi	r19, 0x06	; 6
     e40:	a0 f7       	brcc	.-24     	; 0xe2a <conv_int+0x9e>
     e42:	27 50       	subi	r18, 0x07	; 7
     e44:	4c 2f       	mov	r20, r28
     e46:	c5 01       	movw	r24, r10
     e48:	b4 01       	movw	r22, r8
     e4a:	63 df       	rcall	.-314    	; 0xd12 <mulacc>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
     e50:	c2 60       	ori	r28, 0x02	; 2
     e52:	d1 50       	subi	r29, 0x01	; 1
     e54:	51 f0       	breq	.+20     	; 0xe6a <conv_int+0xde>
     e56:	c8 01       	movw	r24, r16
     e58:	62 d1       	rcall	.+708    	; 0x111e <fgetc>
     e5a:	97 ff       	sbrs	r25, 7
     e5c:	e0 cf       	rjmp	.-64     	; 0xe1e <conv_int+0x92>
     e5e:	c1 fd       	sbrc	r28, 1
     e60:	04 c0       	rjmp	.+8      	; 0xe6a <conv_int+0xde>
     e62:	b0 cf       	rjmp	.-160    	; 0xdc4 <conv_int+0x38>
     e64:	81 2c       	mov	r8, r1
     e66:	91 2c       	mov	r9, r1
     e68:	54 01       	movw	r10, r8
     e6a:	c7 ff       	sbrs	r28, 7
     e6c:	08 c0       	rjmp	.+16     	; 0xe7e <conv_int+0xf2>
     e6e:	b0 94       	com	r11
     e70:	a0 94       	com	r10
     e72:	90 94       	com	r9
     e74:	80 94       	com	r8
     e76:	81 1c       	adc	r8, r1
     e78:	91 1c       	adc	r9, r1
     e7a:	a1 1c       	adc	r10, r1
     e7c:	b1 1c       	adc	r11, r1
     e7e:	2c 2f       	mov	r18, r28
     e80:	b5 01       	movw	r22, r10
     e82:	a4 01       	movw	r20, r8
     e84:	c7 01       	movw	r24, r14
     e86:	39 df       	rcall	.-398    	; 0xcfa <putval>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	df 91       	pop	r29
     e8c:	cf 91       	pop	r28
     e8e:	1f 91       	pop	r17
     e90:	0f 91       	pop	r16
     e92:	ff 90       	pop	r15
     e94:	ef 90       	pop	r14
     e96:	bf 90       	pop	r11
     e98:	af 90       	pop	r10
     e9a:	9f 90       	pop	r9
     e9c:	8f 90       	pop	r8
     e9e:	08 95       	ret

00000ea0 <vfscanf>:
     ea0:	a0 e0       	ldi	r26, 0x00	; 0
     ea2:	b0 e0       	ldi	r27, 0x00	; 0
     ea4:	e5 e5       	ldi	r30, 0x55	; 85
     ea6:	f7 e0       	ldi	r31, 0x07	; 7
     ea8:	f3 c0       	rjmp	.+486    	; 0x1090 <__prologue_saves__+0x6>
     eaa:	6c 01       	movw	r12, r24
     eac:	eb 01       	movw	r28, r22
     eae:	5a 01       	movw	r10, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	17 82       	std	Z+7, r1	; 0x07
     eb4:	16 82       	std	Z+6, r1	; 0x06
     eb6:	51 2c       	mov	r5, r1
     eb8:	f6 01       	movw	r30, r12
     eba:	f3 80       	ldd	r15, Z+3	; 0x03
     ebc:	fe 01       	movw	r30, r28
     ebe:	f3 fc       	sbrc	r15, 3
     ec0:	85 91       	lpm	r24, Z+
     ec2:	f3 fe       	sbrs	r15, 3
     ec4:	81 91       	ld	r24, Z+
     ec6:	18 2f       	mov	r17, r24
     ec8:	ef 01       	movw	r28, r30
     eca:	88 23       	and	r24, r24
     ecc:	09 f4       	brne	.+2      	; 0xed0 <vfscanf+0x30>
     ece:	d4 c0       	rjmp	.+424    	; 0x1078 <vfscanf+0x1d8>
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	12 d1       	rcall	.+548    	; 0x10f8 <isspace>
     ed4:	89 2b       	or	r24, r25
     ed6:	19 f0       	breq	.+6      	; 0xede <vfscanf+0x3e>
     ed8:	c6 01       	movw	r24, r12
     eda:	42 df       	rcall	.-380    	; 0xd60 <skip_spaces>
     edc:	ed cf       	rjmp	.-38     	; 0xeb8 <vfscanf+0x18>
     ede:	15 32       	cpi	r17, 0x25	; 37
     ee0:	41 f4       	brne	.+16     	; 0xef2 <vfscanf+0x52>
     ee2:	fe 01       	movw	r30, r28
     ee4:	f3 fc       	sbrc	r15, 3
     ee6:	15 91       	lpm	r17, Z+
     ee8:	f3 fe       	sbrs	r15, 3
     eea:	11 91       	ld	r17, Z+
     eec:	ef 01       	movw	r28, r30
     eee:	15 32       	cpi	r17, 0x25	; 37
     ef0:	71 f4       	brne	.+28     	; 0xf0e <vfscanf+0x6e>
     ef2:	c6 01       	movw	r24, r12
     ef4:	14 d1       	rcall	.+552    	; 0x111e <fgetc>
     ef6:	97 fd       	sbrc	r25, 7
     ef8:	bd c0       	rjmp	.+378    	; 0x1074 <vfscanf+0x1d4>
     efa:	41 2f       	mov	r20, r17
     efc:	50 e0       	ldi	r21, 0x00	; 0
     efe:	9c 01       	movw	r18, r24
     f00:	33 27       	eor	r19, r19
     f02:	24 17       	cp	r18, r20
     f04:	35 07       	cpc	r19, r21
     f06:	c1 f2       	breq	.-80     	; 0xeb8 <vfscanf+0x18>
     f08:	b6 01       	movw	r22, r12
     f0a:	83 d1       	rcall	.+774    	; 0x1212 <ungetc>
     f0c:	b5 c0       	rjmp	.+362    	; 0x1078 <vfscanf+0x1d8>
     f0e:	1a 32       	cpi	r17, 0x2A	; 42
     f10:	39 f4       	brne	.+14     	; 0xf20 <vfscanf+0x80>
     f12:	f3 fc       	sbrc	r15, 3
     f14:	15 91       	lpm	r17, Z+
     f16:	f3 fe       	sbrs	r15, 3
     f18:	11 91       	ld	r17, Z+
     f1a:	ef 01       	movw	r28, r30
     f1c:	01 e0       	ldi	r16, 0x01	; 1
     f1e:	01 c0       	rjmp	.+2      	; 0xf22 <vfscanf+0x82>
     f20:	00 e0       	ldi	r16, 0x00	; 0
     f22:	e1 2c       	mov	r14, r1
     f24:	20 ed       	ldi	r18, 0xD0	; 208
     f26:	21 0f       	add	r18, r17
     f28:	2a 30       	cpi	r18, 0x0A	; 10
     f2a:	78 f4       	brcc	.+30     	; 0xf4a <vfscanf+0xaa>
     f2c:	02 60       	ori	r16, 0x02	; 2
     f2e:	6e 2d       	mov	r22, r14
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	ec de       	rcall	.-552    	; 0xd12 <mulacc>
     f3a:	e6 2e       	mov	r14, r22
     f3c:	fe 01       	movw	r30, r28
     f3e:	f3 fc       	sbrc	r15, 3
     f40:	15 91       	lpm	r17, Z+
     f42:	f3 fe       	sbrs	r15, 3
     f44:	11 91       	ld	r17, Z+
     f46:	ef 01       	movw	r28, r30
     f48:	ed cf       	rjmp	.-38     	; 0xf24 <vfscanf+0x84>
     f4a:	01 ff       	sbrs	r16, 1
     f4c:	03 c0       	rjmp	.+6      	; 0xf54 <vfscanf+0xb4>
     f4e:	e1 10       	cpse	r14, r1
     f50:	03 c0       	rjmp	.+6      	; 0xf58 <vfscanf+0xb8>
     f52:	92 c0       	rjmp	.+292    	; 0x1078 <vfscanf+0x1d8>
     f54:	ee 24       	eor	r14, r14
     f56:	ea 94       	dec	r14
     f58:	18 36       	cpi	r17, 0x68	; 104
     f5a:	19 f0       	breq	.+6      	; 0xf62 <vfscanf+0xc2>
     f5c:	1c 36       	cpi	r17, 0x6C	; 108
     f5e:	51 f0       	breq	.+20     	; 0xf74 <vfscanf+0xd4>
     f60:	10 c0       	rjmp	.+32     	; 0xf82 <vfscanf+0xe2>
     f62:	fe 01       	movw	r30, r28
     f64:	f3 fc       	sbrc	r15, 3
     f66:	15 91       	lpm	r17, Z+
     f68:	f3 fe       	sbrs	r15, 3
     f6a:	11 91       	ld	r17, Z+
     f6c:	ef 01       	movw	r28, r30
     f6e:	18 36       	cpi	r17, 0x68	; 104
     f70:	41 f4       	brne	.+16     	; 0xf82 <vfscanf+0xe2>
     f72:	08 60       	ori	r16, 0x08	; 8
     f74:	04 60       	ori	r16, 0x04	; 4
     f76:	fe 01       	movw	r30, r28
     f78:	f3 fc       	sbrc	r15, 3
     f7a:	15 91       	lpm	r17, Z+
     f7c:	f3 fe       	sbrs	r15, 3
     f7e:	11 91       	ld	r17, Z+
     f80:	ef 01       	movw	r28, r30
     f82:	11 23       	and	r17, r17
     f84:	09 f4       	brne	.+2      	; 0xf88 <vfscanf+0xe8>
     f86:	78 c0       	rjmp	.+240    	; 0x1078 <vfscanf+0x1d8>
     f88:	61 2f       	mov	r22, r17
     f8a:	70 e0       	ldi	r23, 0x00	; 0
     f8c:	8f e7       	ldi	r24, 0x7F	; 127
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	bb d0       	rcall	.+374    	; 0x1108 <strchr_P>
     f92:	89 2b       	or	r24, r25
     f94:	09 f4       	brne	.+2      	; 0xf98 <vfscanf+0xf8>
     f96:	70 c0       	rjmp	.+224    	; 0x1078 <vfscanf+0x1d8>
     f98:	00 fd       	sbrc	r16, 0
     f9a:	07 c0       	rjmp	.+14     	; 0xfaa <vfscanf+0x10a>
     f9c:	f5 01       	movw	r30, r10
     f9e:	80 80       	ld	r8, Z
     fa0:	91 80       	ldd	r9, Z+1	; 0x01
     fa2:	c5 01       	movw	r24, r10
     fa4:	02 96       	adiw	r24, 0x02	; 2
     fa6:	5c 01       	movw	r10, r24
     fa8:	02 c0       	rjmp	.+4      	; 0xfae <vfscanf+0x10e>
     faa:	81 2c       	mov	r8, r1
     fac:	91 2c       	mov	r9, r1
     fae:	1e 36       	cpi	r17, 0x6E	; 110
     fb0:	49 f4       	brne	.+18     	; 0xfc4 <vfscanf+0x124>
     fb2:	f6 01       	movw	r30, r12
     fb4:	46 81       	ldd	r20, Z+6	; 0x06
     fb6:	57 81       	ldd	r21, Z+7	; 0x07
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	70 e0       	ldi	r23, 0x00	; 0
     fbc:	20 2f       	mov	r18, r16
     fbe:	c4 01       	movw	r24, r8
     fc0:	9c de       	rcall	.-712    	; 0xcfa <putval>
     fc2:	7a cf       	rjmp	.-268    	; 0xeb8 <vfscanf+0x18>
     fc4:	13 36       	cpi	r17, 0x63	; 99
     fc6:	a1 f4       	brne	.+40     	; 0xff0 <vfscanf+0x150>
     fc8:	01 fd       	sbrc	r16, 1
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <vfscanf+0x130>
     fcc:	ee 24       	eor	r14, r14
     fce:	e3 94       	inc	r14
     fd0:	c6 01       	movw	r24, r12
     fd2:	a5 d0       	rcall	.+330    	; 0x111e <fgetc>
     fd4:	97 fd       	sbrc	r25, 7
     fd6:	4e c0       	rjmp	.+156    	; 0x1074 <vfscanf+0x1d4>
     fd8:	81 14       	cp	r8, r1
     fda:	91 04       	cpc	r9, r1
     fdc:	29 f0       	breq	.+10     	; 0xfe8 <vfscanf+0x148>
     fde:	f4 01       	movw	r30, r8
     fe0:	80 83       	st	Z, r24
     fe2:	c4 01       	movw	r24, r8
     fe4:	01 96       	adiw	r24, 0x01	; 1
     fe6:	4c 01       	movw	r8, r24
     fe8:	ea 94       	dec	r14
     fea:	e1 10       	cpse	r14, r1
     fec:	f1 cf       	rjmp	.-30     	; 0xfd0 <vfscanf+0x130>
     fee:	3e c0       	rjmp	.+124    	; 0x106c <vfscanf+0x1cc>
     ff0:	c6 01       	movw	r24, r12
     ff2:	b6 de       	rcall	.-660    	; 0xd60 <skip_spaces>
     ff4:	97 fd       	sbrc	r25, 7
     ff6:	3e c0       	rjmp	.+124    	; 0x1074 <vfscanf+0x1d4>
     ff8:	1f 36       	cpi	r17, 0x6F	; 111
     ffa:	49 f1       	breq	.+82     	; 0x104e <vfscanf+0x1ae>
     ffc:	28 f4       	brcc	.+10     	; 0x1008 <vfscanf+0x168>
     ffe:	14 36       	cpi	r17, 0x64	; 100
    1000:	21 f1       	breq	.+72     	; 0x104a <vfscanf+0x1aa>
    1002:	19 36       	cpi	r17, 0x69	; 105
    1004:	39 f1       	breq	.+78     	; 0x1054 <vfscanf+0x1b4>
    1006:	25 c0       	rjmp	.+74     	; 0x1052 <vfscanf+0x1b2>
    1008:	13 37       	cpi	r17, 0x73	; 115
    100a:	71 f0       	breq	.+28     	; 0x1028 <vfscanf+0x188>
    100c:	15 37       	cpi	r17, 0x75	; 117
    100e:	e9 f0       	breq	.+58     	; 0x104a <vfscanf+0x1aa>
    1010:	20 c0       	rjmp	.+64     	; 0x1052 <vfscanf+0x1b2>
    1012:	81 14       	cp	r8, r1
    1014:	91 04       	cpc	r9, r1
    1016:	29 f0       	breq	.+10     	; 0x1022 <vfscanf+0x182>
    1018:	f4 01       	movw	r30, r8
    101a:	60 82       	st	Z, r6
    101c:	c4 01       	movw	r24, r8
    101e:	01 96       	adiw	r24, 0x01	; 1
    1020:	4c 01       	movw	r8, r24
    1022:	ea 94       	dec	r14
    1024:	ee 20       	and	r14, r14
    1026:	59 f0       	breq	.+22     	; 0x103e <vfscanf+0x19e>
    1028:	c6 01       	movw	r24, r12
    102a:	79 d0       	rcall	.+242    	; 0x111e <fgetc>
    102c:	3c 01       	movw	r6, r24
    102e:	97 fd       	sbrc	r25, 7
    1030:	06 c0       	rjmp	.+12     	; 0x103e <vfscanf+0x19e>
    1032:	62 d0       	rcall	.+196    	; 0x10f8 <isspace>
    1034:	89 2b       	or	r24, r25
    1036:	69 f3       	breq	.-38     	; 0x1012 <vfscanf+0x172>
    1038:	b6 01       	movw	r22, r12
    103a:	c3 01       	movw	r24, r6
    103c:	ea d0       	rcall	.+468    	; 0x1212 <ungetc>
    103e:	81 14       	cp	r8, r1
    1040:	91 04       	cpc	r9, r1
    1042:	a1 f0       	breq	.+40     	; 0x106c <vfscanf+0x1cc>
    1044:	f4 01       	movw	r30, r8
    1046:	10 82       	st	Z, r1
    1048:	11 c0       	rjmp	.+34     	; 0x106c <vfscanf+0x1cc>
    104a:	00 62       	ori	r16, 0x20	; 32
    104c:	03 c0       	rjmp	.+6      	; 0x1054 <vfscanf+0x1b4>
    104e:	00 61       	ori	r16, 0x10	; 16
    1050:	01 c0       	rjmp	.+2      	; 0x1054 <vfscanf+0x1b4>
    1052:	00 64       	ori	r16, 0x40	; 64
    1054:	20 2f       	mov	r18, r16
    1056:	a4 01       	movw	r20, r8
    1058:	6e 2d       	mov	r22, r14
    105a:	c6 01       	movw	r24, r12
    105c:	97 de       	rcall	.-722    	; 0xd8c <conv_int>
    105e:	81 11       	cpse	r24, r1
    1060:	05 c0       	rjmp	.+10     	; 0x106c <vfscanf+0x1cc>
    1062:	f6 01       	movw	r30, r12
    1064:	83 81       	ldd	r24, Z+3	; 0x03
    1066:	80 73       	andi	r24, 0x30	; 48
    1068:	29 f4       	brne	.+10     	; 0x1074 <vfscanf+0x1d4>
    106a:	06 c0       	rjmp	.+12     	; 0x1078 <vfscanf+0x1d8>
    106c:	00 fd       	sbrc	r16, 0
    106e:	24 cf       	rjmp	.-440    	; 0xeb8 <vfscanf+0x18>
    1070:	53 94       	inc	r5
    1072:	22 cf       	rjmp	.-444    	; 0xeb8 <vfscanf+0x18>
    1074:	55 20       	and	r5, r5
    1076:	19 f0       	breq	.+6      	; 0x107e <vfscanf+0x1de>
    1078:	85 2d       	mov	r24, r5
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	02 c0       	rjmp	.+4      	; 0x1082 <vfscanf+0x1e2>
    107e:	8f ef       	ldi	r24, 0xFF	; 255
    1080:	9f ef       	ldi	r25, 0xFF	; 255
    1082:	cd b7       	in	r28, 0x3d	; 61
    1084:	de b7       	in	r29, 0x3e	; 62
    1086:	ef e0       	ldi	r30, 0x0F	; 15
    1088:	1f c0       	rjmp	.+62     	; 0x10c8 <__epilogue_restores__+0x6>

0000108a <__prologue_saves__>:
    108a:	2f 92       	push	r2
    108c:	3f 92       	push	r3
    108e:	4f 92       	push	r4
    1090:	5f 92       	push	r5
    1092:	6f 92       	push	r6
    1094:	7f 92       	push	r7
    1096:	8f 92       	push	r8
    1098:	9f 92       	push	r9
    109a:	af 92       	push	r10
    109c:	bf 92       	push	r11
    109e:	cf 92       	push	r12
    10a0:	df 92       	push	r13
    10a2:	ef 92       	push	r14
    10a4:	ff 92       	push	r15
    10a6:	0f 93       	push	r16
    10a8:	1f 93       	push	r17
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	ca 1b       	sub	r28, r26
    10b4:	db 0b       	sbc	r29, r27
    10b6:	0f b6       	in	r0, 0x3f	; 63
    10b8:	f8 94       	cli
    10ba:	de bf       	out	0x3e, r29	; 62
    10bc:	0f be       	out	0x3f, r0	; 63
    10be:	cd bf       	out	0x3d, r28	; 61
    10c0:	09 94       	ijmp

000010c2 <__epilogue_restores__>:
    10c2:	2a 88       	ldd	r2, Y+18	; 0x12
    10c4:	39 88       	ldd	r3, Y+17	; 0x11
    10c6:	48 88       	ldd	r4, Y+16	; 0x10
    10c8:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ca:	6e 84       	ldd	r6, Y+14	; 0x0e
    10cc:	7d 84       	ldd	r7, Y+13	; 0x0d
    10ce:	8c 84       	ldd	r8, Y+12	; 0x0c
    10d0:	9b 84       	ldd	r9, Y+11	; 0x0b
    10d2:	aa 84       	ldd	r10, Y+10	; 0x0a
    10d4:	b9 84       	ldd	r11, Y+9	; 0x09
    10d6:	c8 84       	ldd	r12, Y+8	; 0x08
    10d8:	df 80       	ldd	r13, Y+7	; 0x07
    10da:	ee 80       	ldd	r14, Y+6	; 0x06
    10dc:	fd 80       	ldd	r15, Y+5	; 0x05
    10de:	0c 81       	ldd	r16, Y+4	; 0x04
    10e0:	1b 81       	ldd	r17, Y+3	; 0x03
    10e2:	aa 81       	ldd	r26, Y+2	; 0x02
    10e4:	b9 81       	ldd	r27, Y+1	; 0x01
    10e6:	ce 0f       	add	r28, r30
    10e8:	d1 1d       	adc	r29, r1
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	f8 94       	cli
    10ee:	de bf       	out	0x3e, r29	; 62
    10f0:	0f be       	out	0x3f, r0	; 63
    10f2:	cd bf       	out	0x3d, r28	; 61
    10f4:	ed 01       	movw	r28, r26
    10f6:	08 95       	ret

000010f8 <isspace>:
    10f8:	91 11       	cpse	r25, r1
    10fa:	02 c1       	rjmp	.+516    	; 0x1300 <__ctype_isfalse>
    10fc:	80 32       	cpi	r24, 0x20	; 32
    10fe:	19 f0       	breq	.+6      	; 0x1106 <isspace+0xe>
    1100:	89 50       	subi	r24, 0x09	; 9
    1102:	85 50       	subi	r24, 0x05	; 5
    1104:	d0 f7       	brcc	.-12     	; 0x10fa <isspace+0x2>
    1106:	08 95       	ret

00001108 <strchr_P>:
    1108:	fc 01       	movw	r30, r24
    110a:	05 90       	lpm	r0, Z+
    110c:	06 16       	cp	r0, r22
    110e:	21 f0       	breq	.+8      	; 0x1118 <strchr_P+0x10>
    1110:	00 20       	and	r0, r0
    1112:	d9 f7       	brne	.-10     	; 0x110a <strchr_P+0x2>
    1114:	c0 01       	movw	r24, r0
    1116:	08 95       	ret
    1118:	31 97       	sbiw	r30, 0x01	; 1
    111a:	cf 01       	movw	r24, r30
    111c:	08 95       	ret

0000111e <fgetc>:
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	ec 01       	movw	r28, r24
    1124:	2b 81       	ldd	r18, Y+3	; 0x03
    1126:	20 ff       	sbrs	r18, 0
    1128:	33 c0       	rjmp	.+102    	; 0x1190 <fgetc+0x72>
    112a:	26 ff       	sbrs	r18, 6
    112c:	0a c0       	rjmp	.+20     	; 0x1142 <fgetc+0x24>
    112e:	2f 7b       	andi	r18, 0xBF	; 191
    1130:	2b 83       	std	Y+3, r18	; 0x03
    1132:	8e 81       	ldd	r24, Y+6	; 0x06
    1134:	9f 81       	ldd	r25, Y+7	; 0x07
    1136:	01 96       	adiw	r24, 0x01	; 1
    1138:	9f 83       	std	Y+7, r25	; 0x07
    113a:	8e 83       	std	Y+6, r24	; 0x06
    113c:	8a 81       	ldd	r24, Y+2	; 0x02
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	29 c0       	rjmp	.+82     	; 0x1194 <fgetc+0x76>
    1142:	22 ff       	sbrs	r18, 2
    1144:	0f c0       	rjmp	.+30     	; 0x1164 <fgetc+0x46>
    1146:	e8 81       	ld	r30, Y
    1148:	f9 81       	ldd	r31, Y+1	; 0x01
    114a:	80 81       	ld	r24, Z
    114c:	08 2e       	mov	r0, r24
    114e:	00 0c       	add	r0, r0
    1150:	99 0b       	sbc	r25, r25
    1152:	00 97       	sbiw	r24, 0x00	; 0
    1154:	19 f4       	brne	.+6      	; 0x115c <fgetc+0x3e>
    1156:	20 62       	ori	r18, 0x20	; 32
    1158:	2b 83       	std	Y+3, r18	; 0x03
    115a:	1a c0       	rjmp	.+52     	; 0x1190 <fgetc+0x72>
    115c:	31 96       	adiw	r30, 0x01	; 1
    115e:	f9 83       	std	Y+1, r31	; 0x01
    1160:	e8 83       	st	Y, r30
    1162:	0e c0       	rjmp	.+28     	; 0x1180 <fgetc+0x62>
    1164:	ea 85       	ldd	r30, Y+10	; 0x0a
    1166:	fb 85       	ldd	r31, Y+11	; 0x0b
    1168:	09 95       	icall
    116a:	97 ff       	sbrs	r25, 7
    116c:	09 c0       	rjmp	.+18     	; 0x1180 <fgetc+0x62>
    116e:	2b 81       	ldd	r18, Y+3	; 0x03
    1170:	01 96       	adiw	r24, 0x01	; 1
    1172:	11 f0       	breq	.+4      	; 0x1178 <fgetc+0x5a>
    1174:	80 e2       	ldi	r24, 0x20	; 32
    1176:	01 c0       	rjmp	.+2      	; 0x117a <fgetc+0x5c>
    1178:	80 e1       	ldi	r24, 0x10	; 16
    117a:	82 2b       	or	r24, r18
    117c:	8b 83       	std	Y+3, r24	; 0x03
    117e:	08 c0       	rjmp	.+16     	; 0x1190 <fgetc+0x72>
    1180:	2e 81       	ldd	r18, Y+6	; 0x06
    1182:	3f 81       	ldd	r19, Y+7	; 0x07
    1184:	2f 5f       	subi	r18, 0xFF	; 255
    1186:	3f 4f       	sbci	r19, 0xFF	; 255
    1188:	3f 83       	std	Y+7, r19	; 0x07
    118a:	2e 83       	std	Y+6, r18	; 0x06
    118c:	99 27       	eor	r25, r25
    118e:	02 c0       	rjmp	.+4      	; 0x1194 <fgetc+0x76>
    1190:	8f ef       	ldi	r24, 0xFF	; 255
    1192:	9f ef       	ldi	r25, 0xFF	; 255
    1194:	df 91       	pop	r29
    1196:	cf 91       	pop	r28
    1198:	08 95       	ret

0000119a <fputc>:
    119a:	0f 93       	push	r16
    119c:	1f 93       	push	r17
    119e:	cf 93       	push	r28
    11a0:	df 93       	push	r29
    11a2:	fb 01       	movw	r30, r22
    11a4:	23 81       	ldd	r18, Z+3	; 0x03
    11a6:	21 fd       	sbrc	r18, 1
    11a8:	03 c0       	rjmp	.+6      	; 0x11b0 <fputc+0x16>
    11aa:	8f ef       	ldi	r24, 0xFF	; 255
    11ac:	9f ef       	ldi	r25, 0xFF	; 255
    11ae:	2c c0       	rjmp	.+88     	; 0x1208 <fputc+0x6e>
    11b0:	22 ff       	sbrs	r18, 2
    11b2:	16 c0       	rjmp	.+44     	; 0x11e0 <fputc+0x46>
    11b4:	46 81       	ldd	r20, Z+6	; 0x06
    11b6:	57 81       	ldd	r21, Z+7	; 0x07
    11b8:	24 81       	ldd	r18, Z+4	; 0x04
    11ba:	35 81       	ldd	r19, Z+5	; 0x05
    11bc:	42 17       	cp	r20, r18
    11be:	53 07       	cpc	r21, r19
    11c0:	44 f4       	brge	.+16     	; 0x11d2 <fputc+0x38>
    11c2:	a0 81       	ld	r26, Z
    11c4:	b1 81       	ldd	r27, Z+1	; 0x01
    11c6:	9d 01       	movw	r18, r26
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	31 83       	std	Z+1, r19	; 0x01
    11ce:	20 83       	st	Z, r18
    11d0:	8c 93       	st	X, r24
    11d2:	26 81       	ldd	r18, Z+6	; 0x06
    11d4:	37 81       	ldd	r19, Z+7	; 0x07
    11d6:	2f 5f       	subi	r18, 0xFF	; 255
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	37 83       	std	Z+7, r19	; 0x07
    11dc:	26 83       	std	Z+6, r18	; 0x06
    11de:	14 c0       	rjmp	.+40     	; 0x1208 <fputc+0x6e>
    11e0:	8b 01       	movw	r16, r22
    11e2:	ec 01       	movw	r28, r24
    11e4:	fb 01       	movw	r30, r22
    11e6:	00 84       	ldd	r0, Z+8	; 0x08
    11e8:	f1 85       	ldd	r31, Z+9	; 0x09
    11ea:	e0 2d       	mov	r30, r0
    11ec:	09 95       	icall
    11ee:	89 2b       	or	r24, r25
    11f0:	e1 f6       	brne	.-72     	; 0x11aa <fputc+0x10>
    11f2:	d8 01       	movw	r26, r16
    11f4:	16 96       	adiw	r26, 0x06	; 6
    11f6:	8d 91       	ld	r24, X+
    11f8:	9c 91       	ld	r25, X
    11fa:	17 97       	sbiw	r26, 0x07	; 7
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	17 96       	adiw	r26, 0x07	; 7
    1200:	9c 93       	st	X, r25
    1202:	8e 93       	st	-X, r24
    1204:	16 97       	sbiw	r26, 0x06	; 6
    1206:	ce 01       	movw	r24, r28
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	1f 91       	pop	r17
    120e:	0f 91       	pop	r16
    1210:	08 95       	ret

00001212 <ungetc>:
    1212:	fb 01       	movw	r30, r22
    1214:	23 81       	ldd	r18, Z+3	; 0x03
    1216:	20 ff       	sbrs	r18, 0
    1218:	12 c0       	rjmp	.+36     	; 0x123e <ungetc+0x2c>
    121a:	26 fd       	sbrc	r18, 6
    121c:	10 c0       	rjmp	.+32     	; 0x123e <ungetc+0x2c>
    121e:	8f 3f       	cpi	r24, 0xFF	; 255
    1220:	3f ef       	ldi	r19, 0xFF	; 255
    1222:	93 07       	cpc	r25, r19
    1224:	61 f0       	breq	.+24     	; 0x123e <ungetc+0x2c>
    1226:	82 83       	std	Z+2, r24	; 0x02
    1228:	2f 7d       	andi	r18, 0xDF	; 223
    122a:	20 64       	ori	r18, 0x40	; 64
    122c:	23 83       	std	Z+3, r18	; 0x03
    122e:	26 81       	ldd	r18, Z+6	; 0x06
    1230:	37 81       	ldd	r19, Z+7	; 0x07
    1232:	21 50       	subi	r18, 0x01	; 1
    1234:	31 09       	sbc	r19, r1
    1236:	37 83       	std	Z+7, r19	; 0x07
    1238:	26 83       	std	Z+6, r18	; 0x06
    123a:	99 27       	eor	r25, r25
    123c:	08 95       	ret
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	08 95       	ret

00001244 <__ultoa_invert>:
    1244:	fa 01       	movw	r30, r20
    1246:	aa 27       	eor	r26, r26
    1248:	28 30       	cpi	r18, 0x08	; 8
    124a:	51 f1       	breq	.+84     	; 0x12a0 <__ultoa_invert+0x5c>
    124c:	20 31       	cpi	r18, 0x10	; 16
    124e:	81 f1       	breq	.+96     	; 0x12b0 <__ultoa_invert+0x6c>
    1250:	e8 94       	clt
    1252:	6f 93       	push	r22
    1254:	6e 7f       	andi	r22, 0xFE	; 254
    1256:	6e 5f       	subi	r22, 0xFE	; 254
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	8f 4f       	sbci	r24, 0xFF	; 255
    125c:	9f 4f       	sbci	r25, 0xFF	; 255
    125e:	af 4f       	sbci	r26, 0xFF	; 255
    1260:	b1 e0       	ldi	r27, 0x01	; 1
    1262:	3e d0       	rcall	.+124    	; 0x12e0 <__ultoa_invert+0x9c>
    1264:	b4 e0       	ldi	r27, 0x04	; 4
    1266:	3c d0       	rcall	.+120    	; 0x12e0 <__ultoa_invert+0x9c>
    1268:	67 0f       	add	r22, r23
    126a:	78 1f       	adc	r23, r24
    126c:	89 1f       	adc	r24, r25
    126e:	9a 1f       	adc	r25, r26
    1270:	a1 1d       	adc	r26, r1
    1272:	68 0f       	add	r22, r24
    1274:	79 1f       	adc	r23, r25
    1276:	8a 1f       	adc	r24, r26
    1278:	91 1d       	adc	r25, r1
    127a:	a1 1d       	adc	r26, r1
    127c:	6a 0f       	add	r22, r26
    127e:	71 1d       	adc	r23, r1
    1280:	81 1d       	adc	r24, r1
    1282:	91 1d       	adc	r25, r1
    1284:	a1 1d       	adc	r26, r1
    1286:	20 d0       	rcall	.+64     	; 0x12c8 <__ultoa_invert+0x84>
    1288:	09 f4       	brne	.+2      	; 0x128c <__ultoa_invert+0x48>
    128a:	68 94       	set
    128c:	3f 91       	pop	r19
    128e:	2a e0       	ldi	r18, 0x0A	; 10
    1290:	26 9f       	mul	r18, r22
    1292:	11 24       	eor	r1, r1
    1294:	30 19       	sub	r19, r0
    1296:	30 5d       	subi	r19, 0xD0	; 208
    1298:	31 93       	st	Z+, r19
    129a:	de f6       	brtc	.-74     	; 0x1252 <__ultoa_invert+0xe>
    129c:	cf 01       	movw	r24, r30
    129e:	08 95       	ret
    12a0:	46 2f       	mov	r20, r22
    12a2:	47 70       	andi	r20, 0x07	; 7
    12a4:	40 5d       	subi	r20, 0xD0	; 208
    12a6:	41 93       	st	Z+, r20
    12a8:	b3 e0       	ldi	r27, 0x03	; 3
    12aa:	0f d0       	rcall	.+30     	; 0x12ca <__ultoa_invert+0x86>
    12ac:	c9 f7       	brne	.-14     	; 0x12a0 <__ultoa_invert+0x5c>
    12ae:	f6 cf       	rjmp	.-20     	; 0x129c <__ultoa_invert+0x58>
    12b0:	46 2f       	mov	r20, r22
    12b2:	4f 70       	andi	r20, 0x0F	; 15
    12b4:	40 5d       	subi	r20, 0xD0	; 208
    12b6:	4a 33       	cpi	r20, 0x3A	; 58
    12b8:	18 f0       	brcs	.+6      	; 0x12c0 <__ultoa_invert+0x7c>
    12ba:	49 5d       	subi	r20, 0xD9	; 217
    12bc:	31 fd       	sbrc	r19, 1
    12be:	40 52       	subi	r20, 0x20	; 32
    12c0:	41 93       	st	Z+, r20
    12c2:	02 d0       	rcall	.+4      	; 0x12c8 <__ultoa_invert+0x84>
    12c4:	a9 f7       	brne	.-22     	; 0x12b0 <__ultoa_invert+0x6c>
    12c6:	ea cf       	rjmp	.-44     	; 0x129c <__ultoa_invert+0x58>
    12c8:	b4 e0       	ldi	r27, 0x04	; 4
    12ca:	a6 95       	lsr	r26
    12cc:	97 95       	ror	r25
    12ce:	87 95       	ror	r24
    12d0:	77 95       	ror	r23
    12d2:	67 95       	ror	r22
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__ultoa_invert+0x86>
    12d8:	00 97       	sbiw	r24, 0x00	; 0
    12da:	61 05       	cpc	r22, r1
    12dc:	71 05       	cpc	r23, r1
    12de:	08 95       	ret
    12e0:	9b 01       	movw	r18, r22
    12e2:	ac 01       	movw	r20, r24
    12e4:	0a 2e       	mov	r0, r26
    12e6:	06 94       	lsr	r0
    12e8:	57 95       	ror	r21
    12ea:	47 95       	ror	r20
    12ec:	37 95       	ror	r19
    12ee:	27 95       	ror	r18
    12f0:	ba 95       	dec	r27
    12f2:	c9 f7       	brne	.-14     	; 0x12e6 <__ultoa_invert+0xa2>
    12f4:	62 0f       	add	r22, r18
    12f6:	73 1f       	adc	r23, r19
    12f8:	84 1f       	adc	r24, r20
    12fa:	95 1f       	adc	r25, r21
    12fc:	a0 1d       	adc	r26, r0
    12fe:	08 95       	ret

00001300 <__ctype_isfalse>:
    1300:	99 27       	eor	r25, r25
    1302:	88 27       	eor	r24, r24

00001304 <__ctype_istrue>:
    1304:	08 95       	ret

00001306 <_exit>:
    1306:	f8 94       	cli

00001308 <__stop_program>:
    1308:	ff cf       	rjmp	.-2      	; 0x1308 <__stop_program>
