
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  00001302  00001396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000015f  00800140  00800140  000013d6  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000658  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012860  00000000  00000000  00001a80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003dc2  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004939  00000000  00000000  000180a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000fa4  00000000  00000000  0001c9dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e5c  00000000  00000000  0001d980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d04  00000000  00000000  0001f7dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  000244e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5e c0       	rjmp	.+188    	; 0xc2 <__bad_interrupt>
       6:	00 00       	nop
       8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c0       	rjmp	.+152    	; 0xc2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c0       	rjmp	.+400    	; 0x1be <__vector_11>
      2e:	00 00       	nop
      30:	48 c0       	rjmp	.+144    	; 0xc2 <__bad_interrupt>
      32:	00 00       	nop
      34:	46 c0       	rjmp	.+140    	; 0xc2 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__vector_14>
      3a:	00 00       	nop
      3c:	42 c0       	rjmp	.+132    	; 0xc2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c0       	rjmp	.+128    	; 0xc2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c0       	rjmp	.+124    	; 0xc2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c0       	rjmp	.+120    	; 0xc2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c0       	rjmp	.+116    	; 0xc2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c0       	rjmp	.+112    	; 0xc2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c0       	rjmp	.+108    	; 0xc2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c0       	rjmp	.+104    	; 0xc2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c0       	rjmp	.+100    	; 0xc2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c0       	rjmp	.+96     	; 0xc2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c0       	rjmp	.+92     	; 0xc2 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e2 e0       	ldi	r30, 0x02	; 2
      9e:	f3 e1       	ldi	r31, 0x13	; 19
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a0 34       	cpi	r26, 0x40	; 64
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 e4       	ldi	r26, 0x40	; 64
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	af 39       	cpi	r26, 0x9F	; 159
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	d3 d4       	rcall	.+2470   	; 0xa64 <main>
      be:	0c 94 7f 09 	jmp	0x12fe	; 0x12fe <_exit>

000000c2 <__bad_interrupt>:
      c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c4:	14 d0       	rcall	.+40     	; 0xee <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
      ca:	12 d0       	rcall	.+36     	; 0xf0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      cc:	04 d0       	rcall	.+8      	; 0xd6 <gptInit>
      ce:	0a d0       	rcall	.+20     	; 0xe4 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d0:	0a d0       	rcall	.+20     	; 0xe6 <boardInit>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <stInit>

000000d4 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d4:	6a c0       	rjmp	.+212    	; 0x1aa <st_lld_init>

000000d6 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
      d6:	c7 c0       	rjmp	.+398    	; 0x266 <gpt_lld_init>

000000d8 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
  gptp->config = NULL;
      de:	12 82       	std	Z+2, r1	; 0x02
      e0:	11 82       	std	Z+1, r1	; 0x01
      e2:	08 95       	ret

000000e4 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
      e4:	c3 c0       	rjmp	.+390    	; 0x26c <sd_lld_init>

000000e6 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
      e6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
      ea:	1d ba       	out	0x1d, r1	; 29
      ec:	08 95       	ret

000000ee <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
      ee:	08 95       	ret

000000f0 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
      f0:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
      f2:	80 81       	ld	r24, Z
      f4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
      f6:	81 81       	ldd	r24, Z+1	; 0x01
      f8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
      fa:	82 81       	ldd	r24, Z+2	; 0x02
      fc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
      fe:	83 81       	ldd	r24, Z+3	; 0x03
     100:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     102:	84 81       	ldd	r24, Z+4	; 0x04
     104:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     106:	85 81       	ldd	r24, Z+5	; 0x05
     108:	8a b9       	out	0x0a, r24	; 10
     10a:	08 95       	ret

0000010c <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     10c:	fc 01       	movw	r30, r24

  switch (mode) {
     10e:	42 30       	cpi	r20, 0x02	; 2
     110:	c9 f0       	breq	.+50     	; 0x144 <_pal_lld_setgroupmode+0x38>
     112:	98 f0       	brcs	.+38     	; 0x13a <_pal_lld_setgroupmode+0x2e>
     114:	45 30       	cpi	r20, 0x05	; 5
     116:	b1 f0       	breq	.+44     	; 0x144 <_pal_lld_setgroupmode+0x38>
     118:	46 30       	cpi	r20, 0x06	; 6
     11a:	21 f4       	brne	.+8      	; 0x124 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     11c:	81 81       	ldd	r24, Z+1	; 0x01
     11e:	68 2b       	or	r22, r24
     120:	61 83       	std	Z+1, r22	; 0x01
     122:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     124:	43 30       	cpi	r20, 0x03	; 3
     126:	e9 f7       	brne	.-6      	; 0x122 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	96 2f       	mov	r25, r22
     12c:	90 95       	com	r25
     12e:	89 23       	and	r24, r25
     130:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     132:	82 81       	ldd	r24, Z+2	; 0x02
     134:	68 2b       	or	r22, r24
     136:	62 83       	std	Z+2, r22	; 0x02
    break;
     138:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     13a:	44 23       	and	r20, r20
     13c:	19 f0       	breq	.+6      	; 0x144 <_pal_lld_setgroupmode+0x38>
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	99 f3       	breq	.-26     	; 0x128 <_pal_lld_setgroupmode+0x1c>
     142:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	60 95       	com	r22
     148:	86 23       	and	r24, r22
     14a:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	68 23       	and	r22, r24
     150:	62 83       	std	Z+2, r22	; 0x02
    break;
     152:	08 95       	ret

00000154 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     17c:	8d d0       	rcall	.+282    	; 0x298 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     17e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__avr_in_isr>
     182:	30 d2       	rcall	.+1120   	; 0x5e4 <chSchIsPreemptionRequired>
     184:	81 11       	cpse	r24, r1
     186:	3e d2       	rcall	.+1148   	; 0x604 <chSchDoPreemption>
}
     188:	ff 91       	pop	r31
     18a:	ef 91       	pop	r30
     18c:	bf 91       	pop	r27
     18e:	af 91       	pop	r26
     190:	9f 91       	pop	r25
     192:	8f 91       	pop	r24
     194:	7f 91       	pop	r23
     196:	6f 91       	pop	r22
     198:	5f 91       	pop	r21
     19a:	4f 91       	pop	r20
     19c:	3f 91       	pop	r19
     19e:	2f 91       	pop	r18
     1a0:	0f 90       	pop	r0
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	0f 90       	pop	r0
     1a6:	1f 90       	pop	r1
     1a8:	18 95       	reti

000001aa <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     1ae:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     1b0:	9f e7       	ldi	r25, 0x7F	; 127
     1b2:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     1b4:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     1b6:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     1b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     1bc:	08 95       	ret

000001be <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     1be:	1f 92       	push	r1
     1c0:	0f 92       	push	r0
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	0f 92       	push	r0
     1c6:	11 24       	eor	r1, r1
     1c8:	2f 93       	push	r18
     1ca:	3f 93       	push	r19
     1cc:	4f 93       	push	r20
     1ce:	5f 93       	push	r21
     1d0:	6f 93       	push	r22
     1d2:	7f 93       	push	r23
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
     1d8:	af 93       	push	r26
     1da:	bf 93       	push	r27
     1dc:	ef 93       	push	r30
     1de:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
     1e6:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <GPTD1+0x6>
     1ea:	90 91 51 02 	lds	r25, 0x0251	; 0x800251 <GPTD1+0x7>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	90 93 51 02 	sts	0x0251, r25	; 0x800251 <GPTD1+0x7>
     1f4:	80 93 50 02 	sts	0x0250, r24	; 0x800250 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
     1f8:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <GPTD1+0x4>
     1fc:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <GPTD1+0x5>
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	b1 f0       	breq	.+44     	; 0x232 <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
     206:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <__avr_in_isr>
     20a:	ec d1       	rcall	.+984    	; 0x5e4 <chSchIsPreemptionRequired>
     20c:	81 11       	cpse	r24, r1
     20e:	fa d1       	rcall	.+1012   	; 0x604 <chSchDoPreemption>
     210:	ff 91       	pop	r31
}
     212:	ef 91       	pop	r30
     214:	bf 91       	pop	r27
     216:	af 91       	pop	r26
     218:	9f 91       	pop	r25
     21a:	8f 91       	pop	r24
     21c:	7f 91       	pop	r23
     21e:	6f 91       	pop	r22
     220:	5f 91       	pop	r21
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti
     232:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <GPTD1+0x7>
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
     236:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <GPTD1+0x6>
     23a:	80 91 4a 02 	lds	r24, 0x024A	; 0x80024a <GPTD1>
    if (gptp->state == GPT_ONESHOT) {
     23e:	84 30       	cpi	r24, 0x04	; 4
     240:	41 f0       	breq	.+16     	; 0x252 <__vector_11+0x94>
     242:	e0 91 52 02 	lds	r30, 0x0252	; 0x800252 <GPTD1+0x8>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
     246:	f0 91 53 02 	lds	r31, 0x0253	; 0x800253 <GPTD1+0x9>
     24a:	8a e4       	ldi	r24, 0x4A	; 74
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	09 95       	icall
     250:	da cf       	rjmp	.-76     	; 0x206 <__vector_11+0x48>
     252:	92 e0       	ldi	r25, 0x02	; 2

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
     254:	90 93 4a 02 	sts	0x024A, r25	; 0x80024a <GPTD1>
     258:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
     25c:	88 7f       	andi	r24, 0xF8	; 248
     25e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     262:	96 bb       	out	0x16, r25	; 22
  *regs_table[i].tifr = (1 << OCF1A);
     264:	ee cf       	rjmp	.-36     	; 0x242 <__vector_11+0x84>

00000266 <gpt_lld_init>:
     266:	8a e4       	ldi	r24, 0x4A	; 74
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	36 cf       	rjmp	.-404    	; 0xd8 <gptObjectInit>

0000026c <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
     26c:	08 95       	ret

0000026e <chSysInit>:
    /* Registry header, access to this list depends on the current
       kernel configuration.*/
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	c4 e5       	ldi	r28, 0x54	; 84
     274:	d2 e0       	ldi	r29, 0x02	; 2
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	88 83       	st	Y, r24
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	4f d3       	rcall	.+1694   	; 0x91e <__core_init>
     280:	8f d3       	rcall	.+1822   	; 0x9a0 <__heap_init>
     282:	69 e0       	ldi	r22, 0x09	; 9
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	87 e5       	ldi	r24, 0x57	; 87
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	fc d1       	rcall	.+1016   	; 0x684 <chInstanceObjectInit>
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	88 83       	st	Y, r24
     290:	78 94       	sei
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     298:	6c c0       	rjmp	.+216    	; 0x372 <chVTDoTickI>

0000029a <chVTObjectInit>:
    dlp = dlp->next;
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
     29a:	fc 01       	movw	r30, r24
     29c:	11 82       	std	Z+1, r1	; 0x01
     29e:	10 82       	st	Z, r1
     2a0:	08 95       	ret

000002a2 <chVTDoSetI>:
     2a2:	cf 93       	push	r28
     2a4:	df 93       	push	r29
     2a6:	dc 01       	movw	r26, r24
     2a8:	19 96       	adiw	r26, 0x09	; 9
     2aa:	3c 93       	st	X, r19
     2ac:	2e 93       	st	-X, r18
     2ae:	18 97       	sbiw	r26, 0x08	; 8
     2b0:	17 96       	adiw	r26, 0x07	; 7
     2b2:	5c 93       	st	X, r21
     2b4:	4e 93       	st	-X, r20
     2b6:	16 97       	sbiw	r26, 0x06	; 6
     2b8:	1b 96       	adiw	r26, 0x0b	; 11
     2ba:	1c 92       	st	X, r1
     2bc:	1e 92       	st	-X, r1
     2be:	1a 97       	sbiw	r26, 0x0a	; 10
     2c0:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <ch0+0x7>
     2c4:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <ch0+0x8>
     2c8:	24 81       	ldd	r18, Z+4	; 0x04
     2ca:	35 81       	ldd	r19, Z+5	; 0x05
     2cc:	26 17       	cp	r18, r22
     2ce:	37 07       	cpc	r19, r23
     2d0:	50 f4       	brcc	.+20     	; 0x2e6 <chVTDoSetI+0x44>
     2d2:	62 1b       	sub	r22, r18
     2d4:	73 0b       	sbc	r23, r19
     2d6:	01 90       	ld	r0, Z+
     2d8:	f0 81       	ld	r31, Z
     2da:	e0 2d       	mov	r30, r0
     2dc:	24 81       	ldd	r18, Z+4	; 0x04
     2de:	35 81       	ldd	r19, Z+5	; 0x05
     2e0:	26 17       	cp	r18, r22
     2e2:	37 07       	cpc	r19, r23
     2e4:	b0 f3       	brcs	.-20     	; 0x2d2 <chVTDoSetI+0x30>
     2e6:	15 96       	adiw	r26, 0x05	; 5
     2e8:	7c 93       	st	X, r23
     2ea:	6e 93       	st	-X, r22
     2ec:	14 97       	sbiw	r26, 0x04	; 4
     2ee:	11 96       	adiw	r26, 0x01	; 1
     2f0:	fc 93       	st	X, r31
     2f2:	ee 93       	st	-X, r30
     2f4:	c2 81       	ldd	r28, Z+2	; 0x02
     2f6:	d3 81       	ldd	r29, Z+3	; 0x03
     2f8:	13 96       	adiw	r26, 0x03	; 3
     2fa:	dc 93       	st	X, r29
     2fc:	ce 93       	st	-X, r28
     2fe:	12 97       	sbiw	r26, 0x02	; 2
     300:	b9 83       	std	Y+1, r27	; 0x01
     302:	a8 83       	st	Y, r26
     304:	b3 83       	std	Z+3, r27	; 0x03
     306:	a2 83       	std	Z+2, r26	; 0x02
     308:	84 81       	ldd	r24, Z+4	; 0x04
     30a:	95 81       	ldd	r25, Z+5	; 0x05
     30c:	86 1b       	sub	r24, r22
     30e:	97 0b       	sbc	r25, r23
     310:	95 83       	std	Z+5, r25	; 0x05
     312:	84 83       	std	Z+4, r24	; 0x04
     314:	8f ef       	ldi	r24, 0xFF	; 255
     316:	9f ef       	ldi	r25, 0xFF	; 255
     318:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <ch0+0xc>
     31c:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <ch0+0xb>
     320:	df 91       	pop	r29
     322:	cf 91       	pop	r28
     324:	08 95       	ret

00000326 <chVTDoResetI>:
     326:	cf 93       	push	r28
     328:	df 93       	push	r29
     32a:	fc 01       	movw	r30, r24
     32c:	a0 81       	ld	r26, Z
     32e:	b1 81       	ldd	r27, Z+1	; 0x01
     330:	14 96       	adiw	r26, 0x04	; 4
     332:	2d 91       	ld	r18, X+
     334:	3c 91       	ld	r19, X
     336:	15 97       	sbiw	r26, 0x05	; 5
     338:	84 81       	ldd	r24, Z+4	; 0x04
     33a:	95 81       	ldd	r25, Z+5	; 0x05
     33c:	82 0f       	add	r24, r18
     33e:	93 1f       	adc	r25, r19
     340:	15 96       	adiw	r26, 0x05	; 5
     342:	9c 93       	st	X, r25
     344:	8e 93       	st	-X, r24
     346:	14 97       	sbiw	r26, 0x04	; 4
     348:	c2 81       	ldd	r28, Z+2	; 0x02
     34a:	d3 81       	ldd	r29, Z+3	; 0x03
     34c:	b9 83       	std	Y+1, r27	; 0x01
     34e:	a8 83       	st	Y, r26
     350:	a0 81       	ld	r26, Z
     352:	b1 81       	ldd	r27, Z+1	; 0x01
     354:	13 96       	adiw	r26, 0x03	; 3
     356:	dc 93       	st	X, r29
     358:	ce 93       	st	-X, r28
     35a:	12 97       	sbiw	r26, 0x02	; 2
     35c:	11 82       	std	Z+1, r1	; 0x01
     35e:	10 82       	st	Z, r1
     360:	8f ef       	ldi	r24, 0xFF	; 255
     362:	9f ef       	ldi	r25, 0xFF	; 255
     364:	90 93 63 02 	sts	0x0263, r25	; 0x800263 <ch0+0xc>
     368:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <ch0+0xb>
     36c:	df 91       	pop	r29
     36e:	cf 91       	pop	r28
     370:	08 95       	ret

00000372 <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
     372:	0f 93       	push	r16
     374:	1f 93       	push	r17
     376:	cf 93       	push	r28
     378:	df 93       	push	r29
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
     37a:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <ch0+0xd>
     37e:	90 91 65 02 	lds	r25, 0x0265	; 0x800265 <ch0+0xe>
     382:	01 96       	adiw	r24, 0x01	; 1
     384:	90 93 65 02 	sts	0x0265, r25	; 0x800265 <ch0+0xe>
     388:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <ch0+0xd>
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp != dlhp->next);
     38c:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <ch0+0x7>
     390:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <ch0+0x8>
  if (ch_dlist_notempty(&vtlp->dlist)) {
     394:	42 e0       	ldi	r20, 0x02	; 2
     396:	ce 35       	cpi	r28, 0x5E	; 94
     398:	d4 07       	cpc	r29, r20
     39a:	41 f1       	breq	.+80     	; 0x3ec <chVTDoTickI+0x7a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
     39c:	8c 81       	ldd	r24, Y+4	; 0x04
     39e:	9d 81       	ldd	r25, Y+5	; 0x05
     3a0:	01 97       	sbiw	r24, 0x01	; 1
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	8c 83       	std	Y+4, r24	; 0x04
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     3a6:	0f ef       	ldi	r16, 0xFF	; 255
     3a8:	1f ef       	ldi	r17, 0xFF	; 255
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3aa:	1e c0       	rjmp	.+60     	; 0x3e8 <chVTDoTickI+0x76>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
     3ac:	ea 81       	ldd	r30, Y+2	; 0x02
     3ae:	fb 81       	ldd	r31, Y+3	; 0x03
     3b0:	88 81       	ld	r24, Y
     3b2:	99 81       	ldd	r25, Y+1	; 0x01
     3b4:	91 83       	std	Z+1, r25	; 0x01
     3b6:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
     3b8:	a8 81       	ld	r26, Y
     3ba:	b9 81       	ldd	r27, Y+1	; 0x01
     3bc:	13 96       	adiw	r26, 0x03	; 3
     3be:	fc 93       	st	X, r31
     3c0:	ee 93       	st	-X, r30
     3c2:	12 97       	sbiw	r26, 0x02	; 2
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
     3c4:	19 82       	std	Y+1, r1	; 0x01
     3c6:	18 82       	st	Y, r1

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
     3c8:	68 85       	ldd	r22, Y+8	; 0x08
     3ca:	79 85       	ldd	r23, Y+9	; 0x09
     3cc:	ee 81       	ldd	r30, Y+6	; 0x06
     3ce:	ff 81       	ldd	r31, Y+7	; 0x07
     3d0:	ce 01       	movw	r24, r28
     3d2:	09 95       	icall
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
     3d4:	8a 85       	ldd	r24, Y+10	; 0x0a
     3d6:	9b 85       	ldd	r25, Y+11	; 0x0b
     3d8:	00 97       	sbiw	r24, 0x00	; 0
     3da:	69 f4       	brne	.+26     	; 0x3f6 <chVTDoTickI+0x84>
     3dc:	c0 91 5e 02 	lds	r28, 0x025E	; 0x80025e <ch0+0x7>
     3e0:	d0 91 5f 02 	lds	r29, 0x025F	; 0x80025f <ch0+0x8>
     3e4:	8c 81       	ldd	r24, Y+4	; 0x04
     3e6:	9d 81       	ldd	r25, Y+5	; 0x05
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
  if (ch_dlist_notempty(&vtlp->dlist)) {
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3e8:	89 2b       	or	r24, r25
     3ea:	01 f3       	breq	.-64     	; 0x3ac <chVTDoTickI+0x3a>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     3ec:	df 91       	pop	r29
     3ee:	cf 91       	pop	r28
     3f0:	1f 91       	pop	r17
     3f2:	0f 91       	pop	r16
     3f4:	08 95       	ret
     3f6:	e0 91 5e 02 	lds	r30, 0x025E	; 0x80025e <ch0+0x7>
     3fa:	f0 91 5f 02 	lds	r31, 0x025F	; 0x80025f <ch0+0x8>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     3fe:	24 81       	ldd	r18, Z+4	; 0x04
     400:	35 81       	ldd	r19, Z+5	; 0x05
     402:	28 17       	cp	r18, r24
     404:	39 07       	cpc	r19, r25
     406:	50 f4       	brcc	.+20     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
     408:	82 1b       	sub	r24, r18
     40a:	93 0b       	sbc	r25, r19
    dlp = dlp->next;
     40c:	01 90       	ld	r0, Z+
     40e:	f0 81       	ld	r31, Z
     410:	e0 2d       	mov	r30, r0
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     412:	24 81       	ldd	r18, Z+4	; 0x04
     414:	35 81       	ldd	r19, Z+5	; 0x05
     416:	28 17       	cp	r18, r24
     418:	39 07       	cpc	r19, r25
     41a:	b0 f3       	brcs	.-20     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
     41c:	9d 83       	std	Y+5, r25	; 0x05
     41e:	8c 83       	std	Y+4, r24	; 0x04
  dlp->next       = dlhp;
     420:	f9 83       	std	Y+1, r31	; 0x01
     422:	e8 83       	st	Y, r30
  dlp->prev       = dlp->next->prev;
     424:	a2 81       	ldd	r26, Z+2	; 0x02
     426:	b3 81       	ldd	r27, Z+3	; 0x03
     428:	bb 83       	std	Y+3, r27	; 0x03
     42a:	aa 83       	std	Y+2, r26	; 0x02
  dlp->prev->next = dlp;
     42c:	cd 93       	st	X+, r28
     42e:	dc 93       	st	X, r29
  dlhp->prev      = dlp;
     430:	d3 83       	std	Z+3, r29	; 0x03
     432:	c2 83       	std	Z+2, r28	; 0x02

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
     434:	24 81       	ldd	r18, Z+4	; 0x04
     436:	35 81       	ldd	r19, Z+5	; 0x05
     438:	a9 01       	movw	r20, r18
     43a:	48 1b       	sub	r20, r24
     43c:	59 0b       	sbc	r21, r25
     43e:	55 83       	std	Z+5, r21	; 0x05
     440:	44 83       	std	Z+4, r20	; 0x04

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     442:	10 93 63 02 	sts	0x0263, r17	; 0x800263 <ch0+0xc>
     446:	00 93 62 02 	sts	0x0262, r16	; 0x800262 <ch0+0xb>
     44a:	c8 cf       	rjmp	.-112    	; 0x3dc <chVTDoTickI+0x6a>

0000044c <__sch_wakeup>:
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
     44c:	cf 93       	push	r28
     44e:	df 93       	push	r29
     450:	db 01       	movw	r26, r22
     452:	1f 96       	adiw	r26, 0x0f	; 15
     454:	8c 91       	ld	r24, X
     456:	1f 97       	sbiw	r26, 0x0f	; 15
     458:	84 30       	cpi	r24, 0x04	; 4
     45a:	f1 f1       	breq	.+124    	; 0x4d8 <__sch_wakeup+0x8c>
     45c:	80 f5       	brcc	.+96     	; 0x4be <__sch_wakeup+0x72>
     45e:	88 23       	and	r24, r24
     460:	59 f1       	breq	.+86     	; 0x4b8 <__sch_wakeup+0x6c>
     462:	83 30       	cpi	r24, 0x03	; 3
     464:	31 f4       	brne	.+12     	; 0x472 <__sch_wakeup+0x26>
     466:	52 96       	adiw	r26, 0x12	; 18
     468:	ed 91       	ld	r30, X+
     46a:	fc 91       	ld	r31, X
     46c:	53 97       	sbiw	r26, 0x13	; 19
     46e:	11 82       	std	Z+1, r1	; 0x01
     470:	10 82       	st	Z, r1
     472:	8f ef       	ldi	r24, 0xFF	; 255
     474:	9f ef       	ldi	r25, 0xFF	; 255
     476:	53 96       	adiw	r26, 0x13	; 19
     478:	9c 93       	st	X, r25
     47a:	8e 93       	st	-X, r24
     47c:	52 97       	sbiw	r26, 0x12	; 18
     47e:	1f 96       	adiw	r26, 0x0f	; 15
     480:	1c 92       	st	X, r1
     482:	1f 97       	sbiw	r26, 0x0f	; 15
     484:	1b 96       	adiw	r26, 0x0b	; 11
     486:	ed 91       	ld	r30, X+
     488:	fc 91       	ld	r31, X
     48a:	1c 97       	sbiw	r26, 0x0c	; 12
     48c:	14 96       	adiw	r26, 0x04	; 4
     48e:	9c 91       	ld	r25, X
     490:	14 97       	sbiw	r26, 0x04	; 4
     492:	01 90       	ld	r0, Z+
     494:	f0 81       	ld	r31, Z
     496:	e0 2d       	mov	r30, r0
     498:	84 81       	ldd	r24, Z+4	; 0x04
     49a:	89 17       	cp	r24, r25
     49c:	d0 f7       	brcc	.-12     	; 0x492 <__sch_wakeup+0x46>
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	fc 93       	st	X, r31
     4a2:	ee 93       	st	-X, r30
     4a4:	c2 81       	ldd	r28, Z+2	; 0x02
     4a6:	d3 81       	ldd	r29, Z+3	; 0x03
     4a8:	13 96       	adiw	r26, 0x03	; 3
     4aa:	dc 93       	st	X, r29
     4ac:	ce 93       	st	-X, r28
     4ae:	12 97       	sbiw	r26, 0x02	; 2
     4b0:	b9 83       	std	Y+1, r27	; 0x01
     4b2:	a8 83       	st	Y, r26
     4b4:	b3 83       	std	Z+3, r27	; 0x03
     4b6:	a2 83       	std	Z+2, r26	; 0x02
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	08 95       	ret
     4be:	87 30       	cpi	r24, 0x07	; 7
     4c0:	59 f0       	breq	.+22     	; 0x4d8 <__sch_wakeup+0x8c>
     4c2:	8c 30       	cpi	r24, 0x0C	; 12
     4c4:	49 f0       	breq	.+18     	; 0x4d8 <__sch_wakeup+0x8c>
     4c6:	85 30       	cpi	r24, 0x05	; 5
     4c8:	a1 f6       	brne	.-88     	; 0x472 <__sch_wakeup+0x26>
     4ca:	52 96       	adiw	r26, 0x12	; 18
     4cc:	ed 91       	ld	r30, X+
     4ce:	fc 91       	ld	r31, X
     4d0:	53 97       	sbiw	r26, 0x13	; 19
     4d2:	84 81       	ldd	r24, Z+4	; 0x04
     4d4:	8f 5f       	subi	r24, 0xFF	; 255
     4d6:	84 83       	std	Z+4, r24	; 0x04
     4d8:	12 96       	adiw	r26, 0x02	; 2
     4da:	ed 91       	ld	r30, X+
     4dc:	fc 91       	ld	r31, X
     4de:	13 97       	sbiw	r26, 0x03	; 3
     4e0:	8d 91       	ld	r24, X+
     4e2:	9c 91       	ld	r25, X
     4e4:	11 97       	sbiw	r26, 0x01	; 1
     4e6:	91 83       	std	Z+1, r25	; 0x01
     4e8:	80 83       	st	Z, r24
     4ea:	cd 91       	ld	r28, X+
     4ec:	dc 91       	ld	r29, X
     4ee:	11 97       	sbiw	r26, 0x01	; 1
     4f0:	fb 83       	std	Y+3, r31	; 0x03
     4f2:	ea 83       	std	Y+2, r30	; 0x02
     4f4:	be cf       	rjmp	.-132    	; 0x472 <__sch_wakeup+0x26>

000004f6 <chSchReadyI>:
     4f6:	cf 93       	push	r28
     4f8:	df 93       	push	r29
     4fa:	dc 01       	movw	r26, r24
     4fc:	1f 96       	adiw	r26, 0x0f	; 15
     4fe:	1c 92       	st	X, r1
     500:	1f 97       	sbiw	r26, 0x0f	; 15
     502:	1b 96       	adiw	r26, 0x0b	; 11
     504:	ed 91       	ld	r30, X+
     506:	fc 91       	ld	r31, X
     508:	1c 97       	sbiw	r26, 0x0c	; 12
     50a:	14 96       	adiw	r26, 0x04	; 4
     50c:	2c 91       	ld	r18, X
     50e:	14 97       	sbiw	r26, 0x04	; 4
     510:	01 90       	ld	r0, Z+
     512:	f0 81       	ld	r31, Z
     514:	e0 2d       	mov	r30, r0
     516:	94 81       	ldd	r25, Z+4	; 0x04
     518:	92 17       	cp	r25, r18
     51a:	d0 f7       	brcc	.-12     	; 0x510 <chSchReadyI+0x1a>
     51c:	11 96       	adiw	r26, 0x01	; 1
     51e:	fc 93       	st	X, r31
     520:	ee 93       	st	-X, r30
     522:	c2 81       	ldd	r28, Z+2	; 0x02
     524:	d3 81       	ldd	r29, Z+3	; 0x03
     526:	13 96       	adiw	r26, 0x03	; 3
     528:	dc 93       	st	X, r29
     52a:	ce 93       	st	-X, r28
     52c:	12 97       	sbiw	r26, 0x02	; 2
     52e:	b9 83       	std	Y+1, r27	; 0x01
     530:	a8 83       	st	Y, r26
     532:	b3 83       	std	Z+3, r27	; 0x03
     534:	a2 83       	std	Z+2, r26	; 0x02
     536:	cd 01       	movw	r24, r26
     538:	df 91       	pop	r29
     53a:	cf 91       	pop	r28
     53c:	08 95       	ret

0000053e <chSchGoSleepS>:
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	e7 e5       	ldi	r30, 0x57	; 87
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	65 81       	ldd	r22, Z+5	; 0x05
     548:	76 81       	ldd	r23, Z+6	; 0x06
     54a:	db 01       	movw	r26, r22
     54c:	1f 96       	adiw	r26, 0x0f	; 15
     54e:	8c 93       	st	X, r24
     550:	80 81       	ld	r24, Z
     552:	91 81       	ldd	r25, Z+1	; 0x01
     554:	ec 01       	movw	r28, r24
     556:	a8 81       	ld	r26, Y
     558:	b9 81       	ldd	r27, Y+1	; 0x01
     55a:	b1 83       	std	Z+1, r27	; 0x01
     55c:	a0 83       	st	Z, r26
     55e:	13 96       	adiw	r26, 0x03	; 3
     560:	fc 93       	st	X, r31
     562:	ee 93       	st	-X, r30
     564:	12 97       	sbiw	r26, 0x02	; 2
     566:	21 e0       	ldi	r18, 0x01	; 1
     568:	2f 87       	std	Y+15, r18	; 0x0f
     56a:	96 83       	std	Z+6, r25	; 0x06
     56c:	85 83       	std	Z+5, r24	; 0x05
     56e:	2c d2       	rcall	.+1112   	; 0x9c8 <_port_switch>
     570:	df 91       	pop	r29
     572:	cf 91       	pop	r28
     574:	08 95       	ret

00000576 <chSchGoSleepTimeoutS>:
     576:	ff 92       	push	r15
     578:	0f 93       	push	r16
     57a:	1f 93       	push	r17
     57c:	cf 93       	push	r28
     57e:	df 93       	push	r29
     580:	cd b7       	in	r28, 0x3d	; 61
     582:	de b7       	in	r29, 0x3e	; 62
     584:	2c 97       	sbiw	r28, 0x0c	; 12
     586:	0f b6       	in	r0, 0x3f	; 63
     588:	f8 94       	cli
     58a:	de bf       	out	0x3e, r29	; 62
     58c:	0f be       	out	0x3f, r0	; 63
     58e:	cd bf       	out	0x3d, r28	; 61
     590:	f8 2e       	mov	r15, r24
     592:	00 91 5c 02 	lds	r16, 0x025C	; 0x80025c <ch0+0x5>
     596:	10 91 5d 02 	lds	r17, 0x025D	; 0x80025d <ch0+0x6>
     59a:	6f 3f       	cpi	r22, 0xFF	; 255
     59c:	8f ef       	ldi	r24, 0xFF	; 255
     59e:	78 07       	cpc	r23, r24
     5a0:	f1 f0       	breq	.+60     	; 0x5de <chSchGoSleepTimeoutS+0x68>
     5a2:	98 01       	movw	r18, r16
     5a4:	46 e2       	ldi	r20, 0x26	; 38
     5a6:	52 e0       	ldi	r21, 0x02	; 2
     5a8:	ce 01       	movw	r24, r28
     5aa:	01 96       	adiw	r24, 0x01	; 1
     5ac:	7a de       	rcall	.-780    	; 0x2a2 <chVTDoSetI>
     5ae:	8f 2d       	mov	r24, r15
     5b0:	c6 df       	rcall	.-116    	; 0x53e <chSchGoSleepS>
     5b2:	89 81       	ldd	r24, Y+1	; 0x01
     5b4:	9a 81       	ldd	r25, Y+2	; 0x02
     5b6:	89 2b       	or	r24, r25
     5b8:	19 f0       	breq	.+6      	; 0x5c0 <chSchGoSleepTimeoutS+0x4a>
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	b3 de       	rcall	.-666    	; 0x326 <chVTDoResetI>
     5c0:	f8 01       	movw	r30, r16
     5c2:	82 89       	ldd	r24, Z+18	; 0x12
     5c4:	93 89       	ldd	r25, Z+19	; 0x13
     5c6:	2c 96       	adiw	r28, 0x0c	; 12
     5c8:	0f b6       	in	r0, 0x3f	; 63
     5ca:	f8 94       	cli
     5cc:	de bf       	out	0x3e, r29	; 62
     5ce:	0f be       	out	0x3f, r0	; 63
     5d0:	cd bf       	out	0x3d, r28	; 61
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	08 95       	ret
     5de:	8f 2d       	mov	r24, r15
     5e0:	ae df       	rcall	.-164    	; 0x53e <chSchGoSleepS>
     5e2:	ee cf       	rjmp	.-36     	; 0x5c0 <chSchGoSleepTimeoutS+0x4a>

000005e4 <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
     5e4:	a0 91 57 02 	lds	r26, 0x0257	; 0x800257 <ch0>
     5e8:	b0 91 58 02 	lds	r27, 0x0258	; 0x800258 <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
     5ec:	e0 91 5c 02 	lds	r30, 0x025C	; 0x80025c <ch0+0x5>
     5f0:	f0 91 5d 02 	lds	r31, 0x025D	; 0x80025d <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
     5f4:	81 e0       	ldi	r24, 0x01	; 1
     5f6:	14 96       	adiw	r26, 0x04	; 4
     5f8:	2c 91       	ld	r18, X
     5fa:	94 81       	ldd	r25, Z+4	; 0x04
     5fc:	92 17       	cp	r25, r18
     5fe:	08 f0       	brcs	.+2      	; 0x602 <chSchIsPreemptionRequired+0x1e>
     600:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     602:	08 95       	ret

00000604 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
     608:	a0 91 5c 02 	lds	r26, 0x025C	; 0x80025c <ch0+0x5>
     60c:	b0 91 5d 02 	lds	r27, 0x025D	; 0x80025d <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
     610:	40 91 57 02 	lds	r20, 0x0257	; 0x800257 <ch0>
     614:	50 91 58 02 	lds	r21, 0x0258	; 0x800258 <ch0+0x1>

  pqp->next       = p->next;
     618:	ea 01       	movw	r28, r20
     61a:	e8 81       	ld	r30, Y
     61c:	f9 81       	ldd	r31, Y+1	; 0x01
     61e:	f0 93 58 02 	sts	0x0258, r31	; 0x800258 <ch0+0x1>
     622:	e0 93 57 02 	sts	0x0257, r30	; 0x800257 <ch0>
  pqp->next->prev = pqp;
     626:	87 e5       	ldi	r24, 0x57	; 87
     628:	92 e0       	ldi	r25, 0x02	; 2
     62a:	93 83       	std	Z+3, r25	; 0x03
     62c:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
     632:	50 93 5d 02 	sts	0x025D, r21	; 0x80025d <ch0+0x6>
     636:	40 93 5c 02 	sts	0x025C, r20	; 0x80025c <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
     63a:	1f 96       	adiw	r26, 0x0f	; 15
     63c:	1c 92       	st	X, r1
     63e:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
     640:	1b 96       	adiw	r26, 0x0b	; 11
     642:	ed 91       	ld	r30, X+
     644:	fc 91       	ld	r31, X
     646:	1c 97       	sbiw	r26, 0x0c	; 12
     648:	14 96       	adiw	r26, 0x04	; 4
     64a:	2c 91       	ld	r18, X
     64c:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
     64e:	01 90       	ld	r0, Z+
     650:	f0 81       	ld	r31, Z
     652:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
     654:	94 81       	ldd	r25, Z+4	; 0x04
     656:	29 17       	cp	r18, r25
     658:	d0 f3       	brcs	.-12     	; 0x64e <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
     65a:	11 96       	adiw	r26, 0x01	; 1
     65c:	fc 93       	st	X, r31
     65e:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
     660:	82 81       	ldd	r24, Z+2	; 0x02
     662:	93 81       	ldd	r25, Z+3	; 0x03
     664:	13 96       	adiw	r26, 0x03	; 3
     666:	9c 93       	st	X, r25
     668:	8e 93       	st	-X, r24
     66a:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
     66c:	ec 01       	movw	r28, r24
     66e:	b9 83       	std	Y+1, r27	; 0x01
     670:	a8 83       	st	Y, r26
  pqp->prev     = p;
     672:	b3 83       	std	Z+3, r27	; 0x03
     674:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
     676:	bd 01       	movw	r22, r26
     678:	ca 01       	movw	r24, r20
     67a:	a6 d1       	rcall	.+844    	; 0x9c8 <_port_switch>
}
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
     682:	ff cf       	rjmp	.-2      	; 0x682 <__idle_thread>

00000684 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
     684:	df 92       	push	r13
     686:	ef 92       	push	r14
     688:	ff 92       	push	r15
     68a:	0f 93       	push	r16
     68c:	1f 93       	push	r17
     68e:	cf 93       	push	r28
     690:	df 93       	push	r29
     692:	cd b7       	in	r28, 0x3d	; 61
     694:	de b7       	in	r29, 0x3e	; 62
     696:	2b 97       	sbiw	r28, 0x0b	; 11
     698:	0f b6       	in	r0, 0x3f	; 63
     69a:	f8 94       	cli
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	0f be       	out	0x3f, r0	; 63
     6a0:	cd bf       	out	0x3d, r28	; 61
     6a2:	8c 01       	movw	r16, r24
     6a4:	7b 01       	movw	r14, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
     6a6:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <ch_system+0x2>
     6aa:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
     6ae:	fc 01       	movw	r30, r24
     6b0:	14 8e       	std	Z+28, r1	; 0x1c
     6b2:	13 8e       	std	Z+27, r1	; 0x1b

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
     6b4:	72 a3       	std	Z+34, r23	; 0x22
     6b6:	61 a3       	std	Z+33, r22	; 0x21

  /* Port initialization for the current instance.*/
  port_init(oip);
     6b8:	dd 24       	eor	r13, r13
     6ba:	d3 94       	inc	r13
     6bc:	d0 92 9e 02 	sts	0x029E, r13	; 0x80029e <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
     6c0:	91 83       	std	Z+1, r25	; 0x01
     6c2:	80 83       	st	Z, r24
  pqp->prev = pqp;
     6c4:	93 83       	std	Z+3, r25	; 0x03
     6c6:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
     6c8:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
     6ca:	47 96       	adiw	r24, 0x17	; 23
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     6cc:	90 8f       	std	Z+24, r25	; 0x18
     6ce:	87 8b       	std	Z+23, r24	; 0x17
  qp->prev = qp;
     6d0:	92 8f       	std	Z+26, r25	; 0x1a
     6d2:	81 8f       	std	Z+25, r24	; 0x19
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
     6d4:	15 8e       	std	Z+29, r1	; 0x1d
     6d6:	16 8e       	std	Z+30, r1	; 0x1e
     6d8:	17 8e       	std	Z+31, r1	; 0x1f
     6da:	10 a2       	std	Z+32, r1	; 0x20
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
     6dc:	40 97       	sbiw	r24, 0x10	; 16
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
     6de:	90 87       	std	Z+8, r25	; 0x08
     6e0:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
     6e2:	92 87       	std	Z+10, r25	; 0x0a
     6e4:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
     6e6:	8f ef       	ldi	r24, 0xFF	; 255
     6e8:	9f ef       	ldi	r25, 0xFF	; 255
     6ea:	94 87       	std	Z+12, r25	; 0x0c
     6ec:	83 87       	std	Z+11, r24	; 0x0b
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
     6ee:	16 86       	std	Z+14, r1	; 0x0e
     6f0:	15 86       	std	Z+13, r1	; 0x0d
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
     6f2:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <ch0+0xd>
     6f6:	30 91 65 02 	lds	r19, 0x0265	; 0x800265 <ch0+0xe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
     6fa:	27 87       	std	Z+15, r18	; 0x0f
     6fc:	30 8b       	std	Z+16, r19	; 0x10
     6fe:	11 8a       	std	Z+17, r1	; 0x11
     700:	12 8a       	std	Z+18, r1	; 0x12
     702:	13 8a       	std	Z+19, r1	; 0x13
     704:	14 8a       	std	Z+20, r1	; 0x14
     706:	15 8a       	std	Z+21, r1	; 0x15
     708:	16 8a       	std	Z+22, r1	; 0x16
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
     70a:	ef 5b       	subi	r30, 0xBF	; 191
     70c:	ff 4f       	sbci	r31, 0xFF	; 255
     70e:	11 82       	std	Z+1, r1	; 0x01
     710:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
     712:	b8 01       	movw	r22, r16
     714:	6d 5d       	subi	r22, 0xDD	; 221
     716:	7f 4f       	sbci	r23, 0xFF	; 255
     718:	20 e8       	ldi	r18, 0x80	; 128
     71a:	44 e1       	ldi	r20, 0x14	; 20
     71c:	51 e0       	ldi	r21, 0x01	; 1
     71e:	c8 01       	movw	r24, r16
     720:	2a d0       	rcall	.+84     	; 0x776 <__thd_object_init>
     722:	f8 01       	movw	r30, r16
     724:	96 83       	std	Z+6, r25	; 0x06
     726:	85 83       	std	Z+5, r24	; 0x05
  oip->rlist.current->wabase = oicp->mainthread_base;
  oip->rlist.current->waend  = oicp->mainthread_end;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
     728:	fc 01       	movw	r30, r24
     72a:	d7 86       	std	Z+15, r13	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
     72c:	8f e0       	ldi	r24, 0x0F	; 15
     72e:	91 e0       	ldi	r25, 0x01	; 1
     730:	9a 83       	std	Y+2, r25	; 0x02
     732:	89 83       	std	Y+1, r24	; 0x01
     734:	f7 01       	movw	r30, r14
     736:	82 81       	ldd	r24, Z+2	; 0x02
     738:	93 81       	ldd	r25, Z+3	; 0x03
     73a:	9c 83       	std	Y+4, r25	; 0x04
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	84 81       	ldd	r24, Z+4	; 0x04
     740:	95 81       	ldd	r25, Z+5	; 0x05
     742:	9e 83       	std	Y+6, r25	; 0x06
     744:	8d 83       	std	Y+5, r24	; 0x05
     746:	df 82       	std	Y+7, r13	; 0x07
     748:	81 e4       	ldi	r24, 0x41	; 65
     74a:	93 e0       	ldi	r25, 0x03	; 3
     74c:	99 87       	std	Y+9, r25	; 0x09
     74e:	88 87       	std	Y+8, r24	; 0x08
     750:	1b 86       	std	Y+11, r1	; 0x0b
     752:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
     754:	ce 01       	movw	r24, r28
     756:	01 96       	adiw	r24, 0x01	; 1
     758:	9e d0       	rcall	.+316    	; 0x896 <chThdCreateI>
  }
#endif
}
     75a:	2b 96       	adiw	r28, 0x0b	; 11
     75c:	0f b6       	in	r0, 0x3f	; 63
     75e:	f8 94       	cli
     760:	de bf       	out	0x3e, r29	; 62
     762:	0f be       	out	0x3f, r0	; 63
     764:	cd bf       	out	0x3d, r28	; 61
     766:	df 91       	pop	r29
     768:	cf 91       	pop	r28
     76a:	1f 91       	pop	r17
     76c:	0f 91       	pop	r16
     76e:	ff 90       	pop	r15
     770:	ef 90       	pop	r14
     772:	df 90       	pop	r13
     774:	08 95       	ret

00000776 <__thd_object_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     776:	cf 93       	push	r28
     778:	df 93       	push	r29
     77a:	fb 01       	movw	r30, r22
     77c:	24 83       	std	Z+4, r18	; 0x04
     77e:	32 e0       	ldi	r19, 0x02	; 2
     780:	37 87       	std	Z+15, r19	; 0x0f
     782:	10 8a       	std	Z+16, r1	; 0x10
     784:	94 87       	std	Z+12, r25	; 0x0c
     786:	83 87       	std	Z+11, r24	; 0x0b
     788:	25 8f       	std	Z+29, r18	; 0x1d
     78a:	14 8e       	std	Z+28, r1	; 0x1c
     78c:	13 8e       	std	Z+27, r1	; 0x1b
     78e:	12 8e       	std	Z+26, r1	; 0x1a
     790:	21 e0       	ldi	r18, 0x01	; 1
     792:	21 8b       	std	Z+17, r18	; 0x11
     794:	56 87       	std	Z+14, r21	; 0x0e
     796:	45 87       	std	Z+13, r20	; 0x0d
     798:	9b 01       	movw	r18, r22
     79a:	29 5f       	subi	r18, 0xF9	; 249
     79c:	3f 4f       	sbci	r19, 0xFF	; 255
     79e:	ac 01       	movw	r20, r24
     7a0:	49 5e       	subi	r20, 0xE9	; 233
     7a2:	5f 4f       	sbci	r21, 0xFF	; 255
     7a4:	50 87       	std	Z+8, r21	; 0x08
     7a6:	47 83       	std	Z+7, r20	; 0x07
     7a8:	ec 01       	movw	r28, r24
     7aa:	a9 8d       	ldd	r26, Y+25	; 0x19
     7ac:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7ae:	b2 87       	std	Z+10, r27	; 0x0a
     7b0:	a1 87       	std	Z+9, r26	; 0x09
     7b2:	2d 93       	st	X+, r18
     7b4:	3c 93       	st	X, r19
     7b6:	3a 8f       	std	Y+26, r19	; 0x1a
     7b8:	29 8f       	std	Y+25, r18	; 0x19
     7ba:	cb 01       	movw	r24, r22
     7bc:	44 96       	adiw	r24, 0x14	; 20
     7be:	95 8b       	std	Z+21, r25	; 0x15
     7c0:	84 8b       	std	Z+20, r24	; 0x14
     7c2:	02 96       	adiw	r24, 0x02	; 2
     7c4:	97 8b       	std	Z+23, r25	; 0x17
     7c6:	86 8b       	std	Z+22, r24	; 0x16
     7c8:	91 8f       	std	Z+25, r25	; 0x19
     7ca:	80 8f       	std	Z+24, r24	; 0x18
     7cc:	cb 01       	movw	r24, r22
     7ce:	df 91       	pop	r29
     7d0:	cf 91       	pop	r28
     7d2:	08 95       	ret

000007d4 <chThdCreateSuspendedI>:
     7d4:	cf 93       	push	r28
     7d6:	df 93       	push	r29
     7d8:	dc 01       	movw	r26, r24
     7da:	14 96       	adiw	r26, 0x04	; 4
     7dc:	2d 91       	ld	r18, X+
     7de:	3c 91       	ld	r19, X
     7e0:	15 97       	sbiw	r26, 0x05	; 5
     7e2:	f9 01       	movw	r30, r18
     7e4:	7e 97       	sbiw	r30, 0x1e	; 30
     7e6:	e9 01       	movw	r28, r18
     7e8:	e3 97       	sbiw	r28, 0x33	; 51
     7ea:	d6 83       	std	Z+6, r29	; 0x06
     7ec:	c5 83       	std	Z+5, r28	; 0x05
     7ee:	17 96       	adiw	r26, 0x07	; 7
     7f0:	8c 91       	ld	r24, X
     7f2:	17 97       	sbiw	r26, 0x07	; 7
     7f4:	8a 8b       	std	Y+18, r24	; 0x12
     7f6:	18 96       	adiw	r26, 0x08	; 8
     7f8:	8c 91       	ld	r24, X
     7fa:	18 97       	sbiw	r26, 0x08	; 8
     7fc:	89 8b       	std	Y+17, r24	; 0x11
     7fe:	19 96       	adiw	r26, 0x09	; 9
     800:	8c 91       	ld	r24, X
     802:	19 97       	sbiw	r26, 0x09	; 9
     804:	88 8b       	std	Y+16, r24	; 0x10
     806:	1a 96       	adiw	r26, 0x0a	; 10
     808:	8c 91       	ld	r24, X
     80a:	1a 97       	sbiw	r26, 0x0a	; 10
     80c:	8f 87       	std	Y+15, r24	; 0x0f
     80e:	83 e1       	ldi	r24, 0x13	; 19
     810:	95 e0       	ldi	r25, 0x05	; 5
     812:	9b 8b       	std	Y+19, r25	; 0x13
     814:	8c 8b       	std	Y+20, r24	; 0x14
     816:	16 96       	adiw	r26, 0x06	; 6
     818:	8c 91       	ld	r24, X
     81a:	16 97       	sbiw	r26, 0x06	; 6
     81c:	4d 91       	ld	r20, X+
     81e:	5c 91       	ld	r21, X
     820:	84 83       	std	Z+4, r24	; 0x04
     822:	92 e0       	ldi	r25, 0x02	; 2
     824:	97 87       	std	Z+15, r25	; 0x0f
     826:	10 8a       	std	Z+16, r1	; 0x10
     828:	67 e5       	ldi	r22, 0x57	; 87
     82a:	72 e0       	ldi	r23, 0x02	; 2
     82c:	74 87       	std	Z+12, r23	; 0x0c
     82e:	63 87       	std	Z+11, r22	; 0x0b
     830:	85 8f       	std	Z+29, r24	; 0x1d
     832:	14 8e       	std	Z+28, r1	; 0x1c
     834:	13 8e       	std	Z+27, r1	; 0x1b
     836:	12 8e       	std	Z+26, r1	; 0x1a
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	81 8b       	std	Z+17, r24	; 0x11
     83c:	56 87       	std	Z+14, r21	; 0x0e
     83e:	45 87       	std	Z+13, r20	; 0x0d
     840:	d9 01       	movw	r26, r18
     842:	57 97       	sbiw	r26, 0x17	; 23
     844:	8e e6       	ldi	r24, 0x6E	; 110
     846:	92 e0       	ldi	r25, 0x02	; 2
     848:	11 96       	adiw	r26, 0x01	; 1
     84a:	9c 93       	st	X, r25
     84c:	8e 93       	st	-X, r24
     84e:	eb 01       	movw	r28, r22
     850:	89 8d       	ldd	r24, Y+25	; 0x19
     852:	9a 8d       	ldd	r25, Y+26	; 0x1a
     854:	13 96       	adiw	r26, 0x03	; 3
     856:	9c 93       	st	X, r25
     858:	8e 93       	st	-X, r24
     85a:	12 97       	sbiw	r26, 0x02	; 2
     85c:	ec 01       	movw	r28, r24
     85e:	b9 83       	std	Y+1, r27	; 0x01
     860:	a8 83       	st	Y, r26
     862:	eb 01       	movw	r28, r22
     864:	ba 8f       	std	Y+26, r27	; 0x1a
     866:	a9 8f       	std	Y+25, r26	; 0x19
     868:	1d 96       	adiw	r26, 0x0d	; 13
     86a:	0b 2e       	mov	r0, r27
     86c:	11 96       	adiw	r26, 0x01	; 1
     86e:	0c 92       	st	X, r0
     870:	11 97       	sbiw	r26, 0x01	; 1
     872:	ac 93       	st	X, r26
     874:	12 96       	adiw	r26, 0x02	; 2
     876:	0b 2e       	mov	r0, r27
     878:	11 96       	adiw	r26, 0x01	; 1
     87a:	0c 92       	st	X, r0
     87c:	11 97       	sbiw	r26, 0x01	; 1
     87e:	ac 93       	st	X, r26
     880:	0a 2e       	mov	r0, r26
     882:	1b 2e       	mov	r1, r27
     884:	13 96       	adiw	r26, 0x03	; 3
     886:	1c 92       	st	X, r1
     888:	0e 92       	st	-X, r0
     88a:	11 24       	eor	r1, r1
     88c:	12 97       	sbiw	r26, 0x02	; 2
     88e:	cf 01       	movw	r24, r30
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	08 95       	ret

00000896 <chThdCreateI>:
     896:	9e df       	rcall	.-196    	; 0x7d4 <chThdCreateSuspendedI>
     898:	2e ce       	rjmp	.-932    	; 0x4f6 <chSchReadyI>

0000089a <chThdExitS>:
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
     8a2:	c0 91 5c 02 	lds	r28, 0x025C	; 0x80025c <ch0+0x5>
     8a6:	d0 91 5d 02 	lds	r29, 0x025D	; 0x80025d <ch0+0x6>
     8aa:	9b 8b       	std	Y+19, r25	; 0x13
     8ac:	8a 8b       	std	Y+18, r24	; 0x12
     8ae:	8e 01       	movw	r16, r28
     8b0:	0c 5e       	subi	r16, 0xEC	; 236
     8b2:	1f 4f       	sbci	r17, 0xFF	; 255
     8b4:	8c 89       	ldd	r24, Y+20	; 0x14
     8b6:	9d 89       	ldd	r25, Y+21	; 0x15
     8b8:	08 17       	cp	r16, r24
     8ba:	19 07       	cpc	r17, r25
     8bc:	59 f0       	breq	.+22     	; 0x8d4 <chThdExitS+0x3a>
     8be:	fc 01       	movw	r30, r24
     8c0:	20 81       	ld	r18, Z
     8c2:	31 81       	ldd	r19, Z+1	; 0x01
     8c4:	3d 8b       	std	Y+21, r19	; 0x15
     8c6:	2c 8b       	std	Y+20, r18	; 0x14
     8c8:	16 de       	rcall	.-980    	; 0x4f6 <chSchReadyI>
     8ca:	8c 89       	ldd	r24, Y+20	; 0x14
     8cc:	9d 89       	ldd	r25, Y+21	; 0x15
     8ce:	80 17       	cp	r24, r16
     8d0:	91 07       	cpc	r25, r17
     8d2:	a9 f7       	brne	.-22     	; 0x8be <chThdExitS+0x24>
     8d4:	89 89       	ldd	r24, Y+17	; 0x11
     8d6:	81 11       	cpse	r24, r1
     8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <chThdExitS+0x58>
     8da:	e9 85       	ldd	r30, Y+9	; 0x09
     8dc:	fa 85       	ldd	r31, Y+10	; 0x0a
     8de:	8f 81       	ldd	r24, Y+7	; 0x07
     8e0:	98 85       	ldd	r25, Y+8	; 0x08
     8e2:	91 83       	std	Z+1, r25	; 0x01
     8e4:	80 83       	st	Z, r24
     8e6:	af 81       	ldd	r26, Y+7	; 0x07
     8e8:	b8 85       	ldd	r27, Y+8	; 0x08
     8ea:	13 96       	adiw	r26, 0x03	; 3
     8ec:	fc 93       	st	X, r31
     8ee:	ee 93       	st	-X, r30
     8f0:	12 97       	sbiw	r26, 0x02	; 2
     8f2:	8f e0       	ldi	r24, 0x0F	; 15
     8f4:	df 91       	pop	r29
     8f6:	cf 91       	pop	r28
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	20 ce       	rjmp	.-960    	; 0x53e <chSchGoSleepS>

000008fe <chThdExit>:
     8fe:	f8 94       	cli
     900:	cc cf       	rjmp	.-104    	; 0x89a <chThdExitS>

00000902 <chThdSleep>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     902:	f8 94       	cli
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
     904:	bc 01       	movw	r22, r24
     906:	88 e0       	ldi	r24, 0x08	; 8
     908:	36 de       	rcall	.-916    	; 0x576 <chSchGoSleepTimeoutS>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     90a:	78 94       	sei
     90c:	08 95       	ret

0000090e <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     90e:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     910:	91 83       	std	Z+1, r25	; 0x01
     912:	80 83       	st	Z, r24
  qp->prev = qp;
     914:	93 83       	std	Z+3, r25	; 0x03
     916:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
     918:	15 82       	std	Z+5, r1	; 0x05
     91a:	14 82       	std	Z+4, r1	; 0x04
     91c:	08 95       	ret

0000091e <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
     91e:	ea e9       	ldi	r30, 0x9A	; 154
     920:	f2 e0       	ldi	r31, 0x02	; 2
     922:	8b ea       	ldi	r24, 0xAB	; 171
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	91 83       	std	Z+1, r25	; 0x01
     928:	80 83       	st	Z, r24
     92a:	8b e2       	ldi	r24, 0x2B	; 43
     92c:	92 e0       	ldi	r25, 0x02	; 2
     92e:	93 83       	std	Z+3, r25	; 0x03
     930:	82 83       	std	Z+2, r24	; 0x02
     932:	08 95       	ret

00000934 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     934:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
     936:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <ch_memcore+0x2>
     93a:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <ch_memcore+0x3>
     93e:	f9 01       	movw	r30, r18
     940:	e8 1b       	sub	r30, r24
     942:	f9 0b       	sbc	r31, r25
     944:	71 95       	neg	r23
     946:	61 95       	neg	r22
     948:	71 09       	sbc	r23, r1
     94a:	6e 23       	and	r22, r30
     94c:	7f 23       	and	r23, r31
  prev = p - offset;
     94e:	cb 01       	movw	r24, r22
     950:	84 1b       	sub	r24, r20
     952:	95 0b       	sbc	r25, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
     954:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <ch_memcore>
     958:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <ch_memcore+0x1>
     95c:	84 17       	cp	r24, r20
     95e:	95 07       	cpc	r25, r21
     960:	50 f0       	brcs	.+20     	; 0x976 <chCoreAllocFromTop+0x42>
     962:	28 17       	cp	r18, r24
     964:	39 07       	cpc	r19, r25
     966:	38 f0       	brcs	.+14     	; 0x976 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
     968:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <ch_memcore+0x3>
     96c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <ch_memcore+0x2>

  return p;
     970:	cb 01       	movw	r24, r22
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     972:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     974:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
     976:	80 e0       	ldi	r24, 0x00	; 0
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     97c:	08 95       	ret

0000097e <chCoreGetStatusX>:
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
     97e:	ea e9       	ldi	r30, 0x9A	; 154
     980:	f2 e0       	ldi	r31, 0x02	; 2
     982:	40 81       	ld	r20, Z
     984:	51 81       	ldd	r21, Z+1	; 0x01
     986:	dc 01       	movw	r26, r24
     988:	11 96       	adiw	r26, 0x01	; 1
     98a:	5c 93       	st	X, r21
     98c:	4e 93       	st	-X, r20
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
     98e:	22 81       	ldd	r18, Z+2	; 0x02
     990:	33 81       	ldd	r19, Z+3	; 0x03
     992:	24 1b       	sub	r18, r20
     994:	35 0b       	sbc	r19, r21
     996:	13 96       	adiw	r26, 0x03	; 3
     998:	3c 93       	st	X, r19
     99a:	2e 93       	st	-X, r18
     99c:	12 97       	sbiw	r26, 0x02	; 2
     99e:	08 95       	ret

000009a0 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
     9a0:	cf 93       	push	r28
     9a2:	df 93       	push	r29

  default_heap.provider = chCoreAllocAlignedWithOffset;
     9a4:	cb e2       	ldi	r28, 0x2B	; 43
     9a6:	d2 e0       	ldi	r29, 0x02	; 2
     9a8:	8a e9       	ldi	r24, 0x9A	; 154
     9aa:	94 e0       	ldi	r25, 0x04	; 4
     9ac:	99 83       	std	Y+1, r25	; 0x01
     9ae:	88 83       	st	Y, r24
  chCoreGetStatusX(&default_heap.area);
     9b0:	8d e2       	ldi	r24, 0x2D	; 45
     9b2:	92 e0       	ldi	r25, 0x02	; 2
     9b4:	e4 df       	rcall	.-56     	; 0x97e <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
     9b6:	1f 82       	std	Y+7, r1	; 0x07
     9b8:	1e 82       	std	Y+6, r1	; 0x06
  H_FREE_PAGES(&default_heap.header) = 0;
     9ba:	19 86       	std	Y+9, r1	; 0x09
     9bc:	18 86       	std	Y+8, r1	; 0x08
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9be:	85 e3       	ldi	r24, 0x35	; 53
     9c0:	92 e0       	ldi	r25, 0x02	; 2
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
     9c2:	df 91       	pop	r29
  default_heap.provider = chCoreAllocAlignedWithOffset;
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9c4:	cf 91       	pop	r28
     9c6:	a3 cf       	rjmp	.-186    	; 0x90e <chMtxObjectInit>

000009c8 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     9c8:	2f 92       	push	r2
  asm volatile ("push    r3");
     9ca:	3f 92       	push	r3
  asm volatile ("push    r4");
     9cc:	4f 92       	push	r4
  asm volatile ("push    r5");
     9ce:	5f 92       	push	r5
  asm volatile ("push    r6");
     9d0:	6f 92       	push	r6
  asm volatile ("push    r7");
     9d2:	7f 92       	push	r7
  asm volatile ("push    r8");
     9d4:	8f 92       	push	r8
  asm volatile ("push    r9");
     9d6:	9f 92       	push	r9
  asm volatile ("push    r10");
     9d8:	af 92       	push	r10
  asm volatile ("push    r11");
     9da:	bf 92       	push	r11
  asm volatile ("push    r12");
     9dc:	cf 92       	push	r12
  asm volatile ("push    r13");
     9de:	df 92       	push	r13
  asm volatile ("push    r14");
     9e0:	ef 92       	push	r14
  asm volatile ("push    r15");
     9e2:	ff 92       	push	r15
  asm volatile ("push    r16");
     9e4:	0f 93       	push	r16
  asm volatile ("push    r17");
     9e6:	1f 93       	push	r17
  asm volatile ("push    r28");
     9e8:	cf 93       	push	r28
  asm volatile ("push    r29");
     9ea:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
     9ec:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     9ee:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     9f0:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     9f2:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     9f4:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     9f6:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     9f8:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     9fa:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     9fc:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     9fe:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     a00:	df 91       	pop	r29
  asm volatile ("pop     r28");
     a02:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     a04:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     a06:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     a08:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     a0a:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     a0c:	df 90       	pop	r13
  asm volatile ("pop     r12");
     a0e:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     a10:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     a12:	af 90       	pop	r10
  asm volatile ("pop     r9");
     a14:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     a16:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     a18:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     a1a:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     a1c:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     a1e:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     a20:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     a22:	2f 90       	pop	r2
  asm volatile ("ret");
     a24:	08 95       	ret

00000a26 <_port_thread_start>:
     a26:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     a28:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     a2a:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     a2c:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     a2e:	67 cf       	rjmp	.-306    	; 0x8fe <chThdExit>

00000a30 <led_cb>:
/*
 * LED timer callback.
 */
static void led_cb(void *arg) {
 
    palTogglePad(LED_PORT, LED_PIN);
     a30:	8b b1       	in	r24, 0x0b	; 11
     a32:	80 58       	subi	r24, 0x80	; 128
     a34:	8b b9       	out	0x0b, r24	; 11
    n=n+1;
     a36:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 49 02 	sts	0x0249, r24	; 0x800249 <n>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     a40:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
     a44:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     a48:	89 2b       	or	r24, r25
     a4a:	19 f0       	breq	.+6      	; 0xa52 <led_cb+0x22>
    chVTDoResetI(vtp);
     a4c:	8d e3       	ldi	r24, 0x3D	; 61
     a4e:	92 e0       	ldi	r25, 0x02	; 2
     a50:	6a dc       	rcall	.-1836   	; 0x326 <chVTDoResetI>
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
     a52:	20 e0       	ldi	r18, 0x00	; 0
     a54:	30 e0       	ldi	r19, 0x00	; 0
     a56:	48 e1       	ldi	r20, 0x18	; 24
     a58:	55 e0       	ldi	r21, 0x05	; 5
     a5a:	64 e8       	ldi	r22, 0x84	; 132
     a5c:	7e e1       	ldi	r23, 0x1E	; 30
     a5e:	8d e3       	ldi	r24, 0x3D	; 61
     a60:	92 e0       	ldi	r25, 0x02	; 2
     a62:	1f cc       	rjmp	.-1986   	; 0x2a2 <chVTDoSetI>

00000a64 <main>:
/*
 * Application main function.
 */
int main(void) {

    halInit();
     a64:	2f db       	rcall	.-2466   	; 0xc4 <halInit>
    chSysInit();
     a66:	03 dc       	rcall	.-2042   	; 0x26e <chSysInit>
     a68:	46 e0       	ldi	r20, 0x06	; 6

    palSetPadMode(LED_PORT, LED_PIN, PAL_MODE_OUTPUT_PUSHPULL);
     a6a:	60 e8       	ldi	r22, 0x80	; 128
     a6c:	89 e2       	ldi	r24, 0x29	; 41
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	4d db       	rcall	.-2406   	; 0x10c <_pal_lld_setgroupmode>
     a72:	5f 98       	cbi	0x0b, 7	; 11
    palClearPad(LED_PORT, LED_PIN);

     /* LED timer initialization.*/
    chVTObjectInit(&led_vt);
     a74:	8d e3       	ldi	r24, 0x3D	; 61
     a76:	92 e0       	ldi	r25, 0x02	; 2
     a78:	10 dc       	rcall	.-2016   	; 0x29a <chVTObjectInit>
     a7a:	f8 94       	cli
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     a7c:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     a80:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     a84:	89 2b       	or	r24, r25
     a86:	19 f0       	breq	.+6      	; 0xa8e <main+0x2a>
    chVTDoResetI(vtp);
     a88:	8d e3       	ldi	r24, 0x3D	; 61
     a8a:	92 e0       	ldi	r25, 0x02	; 2
     a8c:	4c dc       	rcall	.-1896   	; 0x326 <chVTDoResetI>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void chVTSetI(virtual_timer_t *vtp, sysinterval_t delay,
                            vtfunc_t vtfunc, void *par) {

  chVTResetI(vtp);
  chVTDoSetI(vtp, delay, vtfunc, par);
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	48 e1       	ldi	r20, 0x18	; 24
     a94:	55 e0       	ldi	r21, 0x05	; 5
     a96:	64 e8       	ldi	r22, 0x84	; 132
     a98:	7e e1       	ldi	r23, 0x1E	; 30
     a9a:	8d e3       	ldi	r24, 0x3D	; 61
     a9c:	92 e0       	ldi	r25, 0x02	; 2
     a9e:	01 dc       	rcall	.-2046   	; 0x2a2 <chVTDoSetI>
     aa0:	78 94       	sei
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     aa2:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
 
    /* Starting blinker.*/
    chVTSet(&led_vt, TIME_MS2I(500), led_cb, NULL);
    
    while(1){
        if(n==1){
     aa6:	81 30       	cpi	r24, 0x01	; 1
     aa8:	39 f0       	breq	.+14     	; 0xab8 <main+0x54>
            /* Stopping blinker.*/
            chVTReset(&led_vt);
            palClearPad(LED_PORT, LED_PIN);
            break;
        }
    chThdSleepMilliseconds(1000);
     aaa:	88 e0       	ldi	r24, 0x08	; 8
     aac:	9d e3       	ldi	r25, 0x3D	; 61
     aae:	29 df       	rcall	.-430    	; 0x902 <chThdSleep>
     ab0:	80 91 49 02 	lds	r24, 0x0249	; 0x800249 <n>
 
    /* Starting blinker.*/
    chVTSet(&led_vt, TIME_MS2I(500), led_cb, NULL);
    
    while(1){
        if(n==1){
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	c9 f7       	brne	.-14     	; 0xaaa <main+0x46>
     ab8:	10 92 49 02 	sts	0x0249, r1	; 0x800249 <n>
            n=0;
     abc:	f8 94       	cli
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     abe:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <led_vt>
 *
 * @iclass
 */
static inline void chVTResetI(virtual_timer_t *vtp) {

  if (chVTIsArmedI(vtp)) {
     ac2:	90 91 3e 02 	lds	r25, 0x023E	; 0x80023e <led_vt+0x1>
     ac6:	89 2b       	or	r24, r25
     ac8:	19 f0       	breq	.+6      	; 0xad0 <main+0x6c>
    chVTDoResetI(vtp);
     aca:	8d e3       	ldi	r24, 0x3D	; 61
     acc:	92 e0       	ldi	r25, 0x02	; 2
     ace:	2b dc       	rcall	.-1962   	; 0x326 <chVTDoResetI>
     ad0:	78 94       	sei
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     ad2:	5f 98       	cbi	0x0b, 7	; 11
            /* Stopping blinker.*/
            chVTReset(&led_vt);
            palClearPad(LED_PORT, LED_PIN);
     ad4:	80 e0       	ldi	r24, 0x00	; 0
    chThdSleepMilliseconds(1000);
    }

    
 
}
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	08 95       	ret

00000ada <vfprintf>:
     ada:	ab e0       	ldi	r26, 0x0B	; 11
     adc:	b0 e0       	ldi	r27, 0x00	; 0
     ade:	e2 e7       	ldi	r30, 0x72	; 114
     ae0:	f5 e0       	ldi	r31, 0x05	; 5
     ae2:	d3 c2       	rjmp	.+1446   	; 0x108a <__prologue_saves__+0x8>
     ae4:	6c 01       	movw	r12, r24
     ae6:	7b 01       	movw	r14, r22
     ae8:	3a 01       	movw	r6, r20
     aea:	fc 01       	movw	r30, r24
     aec:	17 82       	std	Z+7, r1	; 0x07
     aee:	16 82       	std	Z+6, r1	; 0x06
     af0:	83 81       	ldd	r24, Z+3	; 0x03
     af2:	81 ff       	sbrs	r24, 1
     af4:	f9 c0       	rjmp	.+498    	; 0xce8 <vfprintf+0x20e>
     af6:	ce 01       	movw	r24, r28
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	4c 01       	movw	r8, r24
     afc:	f6 01       	movw	r30, r12
     afe:	b3 80       	ldd	r11, Z+3	; 0x03
     b00:	f7 01       	movw	r30, r14
     b02:	b3 fc       	sbrc	r11, 3
     b04:	05 91       	lpm	r16, Z+
     b06:	b3 fe       	sbrs	r11, 3
     b08:	01 91       	ld	r16, Z+
     b0a:	7f 01       	movw	r14, r30
     b0c:	00 23       	and	r16, r16
     b0e:	09 f4       	brne	.+2      	; 0xb12 <vfprintf+0x38>
     b10:	e7 c0       	rjmp	.+462    	; 0xce0 <vfprintf+0x206>
     b12:	05 32       	cpi	r16, 0x25	; 37
     b14:	49 f4       	brne	.+18     	; 0xb28 <vfprintf+0x4e>
     b16:	b3 fc       	sbrc	r11, 3
     b18:	05 91       	lpm	r16, Z+
     b1a:	b3 fe       	sbrs	r11, 3
     b1c:	01 91       	ld	r16, Z+
     b1e:	7f 01       	movw	r14, r30
     b20:	05 32       	cpi	r16, 0x25	; 37
     b22:	11 f0       	breq	.+4      	; 0xb28 <vfprintf+0x4e>
     b24:	10 e0       	ldi	r17, 0x00	; 0
     b26:	17 c0       	rjmp	.+46     	; 0xb56 <vfprintf+0x7c>
     b28:	b6 01       	movw	r22, r12
     b2a:	80 2f       	mov	r24, r16
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	31 d3       	rcall	.+1634   	; 0x1192 <fputc>
     b30:	53 01       	movw	r10, r6
     b32:	35 01       	movw	r6, r10
     b34:	e3 cf       	rjmp	.-58     	; 0xafc <vfprintf+0x22>
     b36:	00 23       	and	r16, r16
     b38:	09 f4       	brne	.+2      	; 0xb3c <vfprintf+0x62>
     b3a:	d2 c0       	rjmp	.+420    	; 0xce0 <vfprintf+0x206>
     b3c:	60 2f       	mov	r22, r16
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	8f e6       	ldi	r24, 0x6F	; 111
     b42:	90 e0       	ldi	r25, 0x00	; 0
     b44:	dd d2       	rcall	.+1466   	; 0x1100 <strchr_P>
     b46:	89 2b       	or	r24, r25
     b48:	49 f0       	breq	.+18     	; 0xb5c <vfprintf+0x82>
     b4a:	f7 01       	movw	r30, r14
     b4c:	b3 fc       	sbrc	r11, 3
     b4e:	05 91       	lpm	r16, Z+
     b50:	b3 fe       	sbrs	r11, 3
     b52:	01 91       	ld	r16, Z+
     b54:	7f 01       	movw	r14, r30
     b56:	17 ff       	sbrs	r17, 7
     b58:	ee cf       	rjmp	.-36     	; 0xb36 <vfprintf+0x5c>
     b5a:	04 c0       	rjmp	.+8      	; 0xb64 <vfprintf+0x8a>
     b5c:	03 32       	cpi	r16, 0x23	; 35
     b5e:	39 f0       	breq	.+14     	; 0xb6e <vfprintf+0x94>
     b60:	0c 36       	cpi	r16, 0x6C	; 108
     b62:	19 f0       	breq	.+6      	; 0xb6a <vfprintf+0x90>
     b64:	01 11       	cpse	r16, r1
     b66:	05 c0       	rjmp	.+10     	; 0xb72 <vfprintf+0x98>
     b68:	bb c0       	rjmp	.+374    	; 0xce0 <vfprintf+0x206>
     b6a:	10 68       	ori	r17, 0x80	; 128
     b6c:	ee cf       	rjmp	.-36     	; 0xb4a <vfprintf+0x70>
     b6e:	10 e1       	ldi	r17, 0x10	; 16
     b70:	ec cf       	rjmp	.-40     	; 0xb4a <vfprintf+0x70>
     b72:	60 2f       	mov	r22, r16
     b74:	70 e0       	ldi	r23, 0x00	; 0
     b76:	88 e6       	ldi	r24, 0x68	; 104
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	c2 d2       	rcall	.+1412   	; 0x1100 <strchr_P>
     b7c:	89 2b       	or	r24, r25
     b7e:	41 f0       	breq	.+16     	; 0xb90 <vfprintf+0xb6>
     b80:	53 01       	movw	r10, r6
     b82:	f4 e0       	ldi	r31, 0x04	; 4
     b84:	af 0e       	add	r10, r31
     b86:	b1 1c       	adc	r11, r1
     b88:	b6 01       	movw	r22, r12
     b8a:	8f e3       	ldi	r24, 0x3F	; 63
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	10 c0       	rjmp	.+32     	; 0xbb0 <vfprintf+0xd6>
     b90:	03 36       	cpi	r16, 0x63	; 99
     b92:	31 f0       	breq	.+12     	; 0xba0 <vfprintf+0xc6>
     b94:	03 37       	cpi	r16, 0x73	; 115
     b96:	71 f0       	breq	.+28     	; 0xbb4 <vfprintf+0xda>
     b98:	03 35       	cpi	r16, 0x53	; 83
     b9a:	01 f5       	brne	.+64     	; 0xbdc <vfprintf+0x102>
     b9c:	11 60       	ori	r17, 0x01	; 1
     b9e:	0a c0       	rjmp	.+20     	; 0xbb4 <vfprintf+0xda>
     ba0:	53 01       	movw	r10, r6
     ba2:	82 e0       	ldi	r24, 0x02	; 2
     ba4:	a8 0e       	add	r10, r24
     ba6:	b1 1c       	adc	r11, r1
     ba8:	b6 01       	movw	r22, r12
     baa:	f3 01       	movw	r30, r6
     bac:	80 81       	ld	r24, Z
     bae:	91 81       	ldd	r25, Z+1	; 0x01
     bb0:	f0 d2       	rcall	.+1504   	; 0x1192 <fputc>
     bb2:	bf cf       	rjmp	.-130    	; 0xb32 <vfprintf+0x58>
     bb4:	53 01       	movw	r10, r6
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
     bb8:	af 0e       	add	r10, r31
     bba:	b1 1c       	adc	r11, r1
     bbc:	f3 01       	movw	r30, r6
     bbe:	60 80       	ld	r6, Z
     bc0:	71 80       	ldd	r7, Z+1	; 0x01
     bc2:	f3 01       	movw	r30, r6
     bc4:	10 fd       	sbrc	r17, 0
     bc6:	85 91       	lpm	r24, Z+
     bc8:	10 ff       	sbrs	r17, 0
     bca:	81 91       	ld	r24, Z+
     bcc:	3f 01       	movw	r6, r30
     bce:	88 23       	and	r24, r24
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <vfprintf+0xfa>
     bd2:	af cf       	rjmp	.-162    	; 0xb32 <vfprintf+0x58>
     bd4:	b6 01       	movw	r22, r12
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	dc d2       	rcall	.+1464   	; 0x1192 <fputc>
     bda:	f3 cf       	rjmp	.-26     	; 0xbc2 <vfprintf+0xe8>
     bdc:	04 36       	cpi	r16, 0x64	; 100
     bde:	11 f0       	breq	.+4      	; 0xbe4 <vfprintf+0x10a>
     be0:	09 36       	cpi	r16, 0x69	; 105
     be2:	21 f5       	brne	.+72     	; 0xc2c <vfprintf+0x152>
     be4:	53 01       	movw	r10, r6
     be6:	17 ff       	sbrs	r17, 7
     be8:	09 c0       	rjmp	.+18     	; 0xbfc <vfprintf+0x122>
     bea:	f4 e0       	ldi	r31, 0x04	; 4
     bec:	af 0e       	add	r10, r31
     bee:	b1 1c       	adc	r11, r1
     bf0:	f3 01       	movw	r30, r6
     bf2:	60 81       	ld	r22, Z
     bf4:	71 81       	ldd	r23, Z+1	; 0x01
     bf6:	82 81       	ldd	r24, Z+2	; 0x02
     bf8:	93 81       	ldd	r25, Z+3	; 0x03
     bfa:	0a c0       	rjmp	.+20     	; 0xc10 <vfprintf+0x136>
     bfc:	f2 e0       	ldi	r31, 0x02	; 2
     bfe:	af 0e       	add	r10, r31
     c00:	b1 1c       	adc	r11, r1
     c02:	f3 01       	movw	r30, r6
     c04:	60 81       	ld	r22, Z
     c06:	71 81       	ldd	r23, Z+1	; 0x01
     c08:	07 2e       	mov	r0, r23
     c0a:	00 0c       	add	r0, r0
     c0c:	88 0b       	sbc	r24, r24
     c0e:	99 0b       	sbc	r25, r25
     c10:	1f 7e       	andi	r17, 0xEF	; 239
     c12:	97 ff       	sbrs	r25, 7
     c14:	08 c0       	rjmp	.+16     	; 0xc26 <vfprintf+0x14c>
     c16:	90 95       	com	r25
     c18:	80 95       	com	r24
     c1a:	70 95       	com	r23
     c1c:	61 95       	neg	r22
     c1e:	7f 4f       	sbci	r23, 0xFF	; 255
     c20:	8f 4f       	sbci	r24, 0xFF	; 255
     c22:	9f 4f       	sbci	r25, 0xFF	; 255
     c24:	10 64       	ori	r17, 0x40	; 64
     c26:	2a e0       	ldi	r18, 0x0A	; 10
     c28:	30 e0       	ldi	r19, 0x00	; 0
     c2a:	30 c0       	rjmp	.+96     	; 0xc8c <vfprintf+0x1b2>
     c2c:	00 37       	cpi	r16, 0x70	; 112
     c2e:	91 f0       	breq	.+36     	; 0xc54 <vfprintf+0x17a>
     c30:	40 f4       	brcc	.+16     	; 0xc42 <vfprintf+0x168>
     c32:	08 35       	cpi	r16, 0x58	; 88
     c34:	a1 f0       	breq	.+40     	; 0xc5e <vfprintf+0x184>
     c36:	0f 36       	cpi	r16, 0x6F	; 111
     c38:	09 f0       	breq	.+2      	; 0xc3c <vfprintf+0x162>
     c3a:	52 c0       	rjmp	.+164    	; 0xce0 <vfprintf+0x206>
     c3c:	28 e0       	ldi	r18, 0x08	; 8
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	11 c0       	rjmp	.+34     	; 0xc64 <vfprintf+0x18a>
     c42:	05 37       	cpi	r16, 0x75	; 117
     c44:	19 f0       	breq	.+6      	; 0xc4c <vfprintf+0x172>
     c46:	08 37       	cpi	r16, 0x78	; 120
     c48:	31 f0       	breq	.+12     	; 0xc56 <vfprintf+0x17c>
     c4a:	4a c0       	rjmp	.+148    	; 0xce0 <vfprintf+0x206>
     c4c:	1f 7e       	andi	r17, 0xEF	; 239
     c4e:	2a e0       	ldi	r18, 0x0A	; 10
     c50:	30 e0       	ldi	r19, 0x00	; 0
     c52:	08 c0       	rjmp	.+16     	; 0xc64 <vfprintf+0x18a>
     c54:	10 61       	ori	r17, 0x10	; 16
     c56:	14 62       	ori	r17, 0x24	; 36
     c58:	20 e1       	ldi	r18, 0x10	; 16
     c5a:	30 e0       	ldi	r19, 0x00	; 0
     c5c:	03 c0       	rjmp	.+6      	; 0xc64 <vfprintf+0x18a>
     c5e:	14 60       	ori	r17, 0x04	; 4
     c60:	20 e1       	ldi	r18, 0x10	; 16
     c62:	32 e0       	ldi	r19, 0x02	; 2
     c64:	53 01       	movw	r10, r6
     c66:	17 ff       	sbrs	r17, 7
     c68:	09 c0       	rjmp	.+18     	; 0xc7c <vfprintf+0x1a2>
     c6a:	f4 e0       	ldi	r31, 0x04	; 4
     c6c:	af 0e       	add	r10, r31
     c6e:	b1 1c       	adc	r11, r1
     c70:	f3 01       	movw	r30, r6
     c72:	60 81       	ld	r22, Z
     c74:	71 81       	ldd	r23, Z+1	; 0x01
     c76:	82 81       	ldd	r24, Z+2	; 0x02
     c78:	93 81       	ldd	r25, Z+3	; 0x03
     c7a:	08 c0       	rjmp	.+16     	; 0xc8c <vfprintf+0x1b2>
     c7c:	f2 e0       	ldi	r31, 0x02	; 2
     c7e:	af 0e       	add	r10, r31
     c80:	b1 1c       	adc	r11, r1
     c82:	f3 01       	movw	r30, r6
     c84:	60 81       	ld	r22, Z
     c86:	71 81       	ldd	r23, Z+1	; 0x01
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a4 01       	movw	r20, r8
     c8e:	d6 d2       	rcall	.+1452   	; 0x123c <__ultoa_invert>
     c90:	08 2f       	mov	r16, r24
     c92:	08 19       	sub	r16, r8
     c94:	16 ff       	sbrs	r17, 6
     c96:	04 c0       	rjmp	.+8      	; 0xca0 <vfprintf+0x1c6>
     c98:	b6 01       	movw	r22, r12
     c9a:	8d e2       	ldi	r24, 0x2D	; 45
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	79 d2       	rcall	.+1266   	; 0x1192 <fputc>
     ca0:	14 ff       	sbrs	r17, 4
     ca2:	13 c0       	rjmp	.+38     	; 0xcca <vfprintf+0x1f0>
     ca4:	fe 01       	movw	r30, r28
     ca6:	e0 0f       	add	r30, r16
     ca8:	f1 1d       	adc	r31, r1
     caa:	80 81       	ld	r24, Z
     cac:	80 33       	cpi	r24, 0x30	; 48
     cae:	69 f0       	breq	.+26     	; 0xcca <vfprintf+0x1f0>
     cb0:	b6 01       	movw	r22, r12
     cb2:	80 e3       	ldi	r24, 0x30	; 48
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	6d d2       	rcall	.+1242   	; 0x1192 <fputc>
     cb8:	12 ff       	sbrs	r17, 2
     cba:	07 c0       	rjmp	.+14     	; 0xcca <vfprintf+0x1f0>
     cbc:	10 72       	andi	r17, 0x20	; 32
     cbe:	81 2f       	mov	r24, r17
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	b6 01       	movw	r22, r12
     cc4:	88 5a       	subi	r24, 0xA8	; 168
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	64 d2       	rcall	.+1224   	; 0x1192 <fputc>
     cca:	01 50       	subi	r16, 0x01	; 1
     ccc:	f4 01       	movw	r30, r8
     cce:	e0 0f       	add	r30, r16
     cd0:	f1 1d       	adc	r31, r1
     cd2:	80 81       	ld	r24, Z
     cd4:	b6 01       	movw	r22, r12
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	5c d2       	rcall	.+1208   	; 0x1192 <fputc>
     cda:	01 11       	cpse	r16, r1
     cdc:	f6 cf       	rjmp	.-20     	; 0xcca <vfprintf+0x1f0>
     cde:	29 cf       	rjmp	.-430    	; 0xb32 <vfprintf+0x58>
     ce0:	f6 01       	movw	r30, r12
     ce2:	86 81       	ldd	r24, Z+6	; 0x06
     ce4:	97 81       	ldd	r25, Z+7	; 0x07
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <vfprintf+0x212>
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	9f ef       	ldi	r25, 0xFF	; 255
     cec:	2b 96       	adiw	r28, 0x0b	; 11
     cee:	ee e0       	ldi	r30, 0x0E	; 14
     cf0:	e8 c1       	rjmp	.+976    	; 0x10c2 <__epilogue_restores__+0x8>

00000cf2 <putval>:
     cf2:	20 fd       	sbrc	r18, 0
     cf4:	09 c0       	rjmp	.+18     	; 0xd08 <putval+0x16>
     cf6:	fc 01       	movw	r30, r24
     cf8:	23 fd       	sbrc	r18, 3
     cfa:	05 c0       	rjmp	.+10     	; 0xd06 <putval+0x14>
     cfc:	22 ff       	sbrs	r18, 2
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <putval+0x12>
     d00:	73 83       	std	Z+3, r23	; 0x03
     d02:	62 83       	std	Z+2, r22	; 0x02
     d04:	51 83       	std	Z+1, r21	; 0x01
     d06:	40 83       	st	Z, r20
     d08:	08 95       	ret

00000d0a <mulacc>:
     d0a:	44 fd       	sbrc	r20, 4
     d0c:	17 c0       	rjmp	.+46     	; 0xd3c <mulacc+0x32>
     d0e:	46 fd       	sbrc	r20, 6
     d10:	17 c0       	rjmp	.+46     	; 0xd40 <mulacc+0x36>
     d12:	ab 01       	movw	r20, r22
     d14:	bc 01       	movw	r22, r24
     d16:	da 01       	movw	r26, r20
     d18:	fb 01       	movw	r30, r22
     d1a:	aa 0f       	add	r26, r26
     d1c:	bb 1f       	adc	r27, r27
     d1e:	ee 1f       	adc	r30, r30
     d20:	ff 1f       	adc	r31, r31
     d22:	10 94       	com	r1
     d24:	d1 f7       	brne	.-12     	; 0xd1a <mulacc+0x10>
     d26:	4a 0f       	add	r20, r26
     d28:	5b 1f       	adc	r21, r27
     d2a:	6e 1f       	adc	r22, r30
     d2c:	7f 1f       	adc	r23, r31
     d2e:	cb 01       	movw	r24, r22
     d30:	ba 01       	movw	r22, r20
     d32:	66 0f       	add	r22, r22
     d34:	77 1f       	adc	r23, r23
     d36:	88 1f       	adc	r24, r24
     d38:	99 1f       	adc	r25, r25
     d3a:	09 c0       	rjmp	.+18     	; 0xd4e <mulacc+0x44>
     d3c:	33 e0       	ldi	r19, 0x03	; 3
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <mulacc+0x38>
     d40:	34 e0       	ldi	r19, 0x04	; 4
     d42:	66 0f       	add	r22, r22
     d44:	77 1f       	adc	r23, r23
     d46:	88 1f       	adc	r24, r24
     d48:	99 1f       	adc	r25, r25
     d4a:	31 50       	subi	r19, 0x01	; 1
     d4c:	d1 f7       	brne	.-12     	; 0xd42 <mulacc+0x38>
     d4e:	62 0f       	add	r22, r18
     d50:	71 1d       	adc	r23, r1
     d52:	81 1d       	adc	r24, r1
     d54:	91 1d       	adc	r25, r1
     d56:	08 95       	ret

00000d58 <skip_spaces>:
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	cf 93       	push	r28
     d5e:	df 93       	push	r29
     d60:	8c 01       	movw	r16, r24
     d62:	c8 01       	movw	r24, r16
     d64:	d8 d1       	rcall	.+944    	; 0x1116 <fgetc>
     d66:	ec 01       	movw	r28, r24
     d68:	97 fd       	sbrc	r25, 7
     d6a:	06 c0       	rjmp	.+12     	; 0xd78 <skip_spaces+0x20>
     d6c:	c1 d1       	rcall	.+898    	; 0x10f0 <isspace>
     d6e:	89 2b       	or	r24, r25
     d70:	c1 f7       	brne	.-16     	; 0xd62 <skip_spaces+0xa>
     d72:	b8 01       	movw	r22, r16
     d74:	ce 01       	movw	r24, r28
     d76:	49 d2       	rcall	.+1170   	; 0x120a <ungetc>
     d78:	ce 01       	movw	r24, r28
     d7a:	df 91       	pop	r29
     d7c:	cf 91       	pop	r28
     d7e:	1f 91       	pop	r17
     d80:	0f 91       	pop	r16
     d82:	08 95       	ret

00000d84 <conv_int>:
     d84:	8f 92       	push	r8
     d86:	9f 92       	push	r9
     d88:	af 92       	push	r10
     d8a:	bf 92       	push	r11
     d8c:	ef 92       	push	r14
     d8e:	ff 92       	push	r15
     d90:	0f 93       	push	r16
     d92:	1f 93       	push	r17
     d94:	cf 93       	push	r28
     d96:	df 93       	push	r29
     d98:	8c 01       	movw	r16, r24
     d9a:	d6 2f       	mov	r29, r22
     d9c:	7a 01       	movw	r14, r20
     d9e:	b2 2e       	mov	r11, r18
     da0:	ba d1       	rcall	.+884    	; 0x1116 <fgetc>
     da2:	9c 01       	movw	r18, r24
     da4:	33 27       	eor	r19, r19
     da6:	2b 32       	cpi	r18, 0x2B	; 43
     da8:	31 05       	cpc	r19, r1
     daa:	31 f0       	breq	.+12     	; 0xdb8 <conv_int+0x34>
     dac:	2d 32       	cpi	r18, 0x2D	; 45
     dae:	31 05       	cpc	r19, r1
     db0:	59 f4       	brne	.+22     	; 0xdc8 <conv_int+0x44>
     db2:	8b 2d       	mov	r24, r11
     db4:	80 68       	ori	r24, 0x80	; 128
     db6:	b8 2e       	mov	r11, r24
     db8:	d1 50       	subi	r29, 0x01	; 1
     dba:	11 f4       	brne	.+4      	; 0xdc0 <conv_int+0x3c>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	61 c0       	rjmp	.+194    	; 0xe82 <conv_int+0xfe>
     dc0:	c8 01       	movw	r24, r16
     dc2:	a9 d1       	rcall	.+850    	; 0x1116 <fgetc>
     dc4:	97 fd       	sbrc	r25, 7
     dc6:	fa cf       	rjmp	.-12     	; 0xdbc <conv_int+0x38>
     dc8:	cb 2d       	mov	r28, r11
     dca:	cd 7f       	andi	r28, 0xFD	; 253
     dcc:	2b 2d       	mov	r18, r11
     dce:	20 73       	andi	r18, 0x30	; 48
     dd0:	f9 f4       	brne	.+62     	; 0xe10 <conv_int+0x8c>
     dd2:	80 33       	cpi	r24, 0x30	; 48
     dd4:	e9 f4       	brne	.+58     	; 0xe10 <conv_int+0x8c>
     dd6:	aa 24       	eor	r10, r10
     dd8:	aa 94       	dec	r10
     dda:	ad 0e       	add	r10, r29
     ddc:	09 f4       	brne	.+2      	; 0xde0 <conv_int+0x5c>
     dde:	3e c0       	rjmp	.+124    	; 0xe5c <conv_int+0xd8>
     de0:	c8 01       	movw	r24, r16
     de2:	99 d1       	rcall	.+818    	; 0x1116 <fgetc>
     de4:	97 fd       	sbrc	r25, 7
     de6:	3a c0       	rjmp	.+116    	; 0xe5c <conv_int+0xd8>
     de8:	9c 01       	movw	r18, r24
     dea:	2f 7d       	andi	r18, 0xDF	; 223
     dec:	33 27       	eor	r19, r19
     dee:	28 35       	cpi	r18, 0x58	; 88
     df0:	31 05       	cpc	r19, r1
     df2:	41 f4       	brne	.+16     	; 0xe04 <conv_int+0x80>
     df4:	c2 64       	ori	r28, 0x42	; 66
     df6:	d2 50       	subi	r29, 0x02	; 2
     df8:	89 f1       	breq	.+98     	; 0xe5c <conv_int+0xd8>
     dfa:	c8 01       	movw	r24, r16
     dfc:	8c d1       	rcall	.+792    	; 0x1116 <fgetc>
     dfe:	97 ff       	sbrs	r25, 7
     e00:	07 c0       	rjmp	.+14     	; 0xe10 <conv_int+0x8c>
     e02:	2c c0       	rjmp	.+88     	; 0xe5c <conv_int+0xd8>
     e04:	b6 fe       	sbrs	r11, 6
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <conv_int+0x88>
     e08:	c2 60       	ori	r28, 0x02	; 2
     e0a:	01 c0       	rjmp	.+2      	; 0xe0e <conv_int+0x8a>
     e0c:	c2 61       	ori	r28, 0x12	; 18
     e0e:	da 2d       	mov	r29, r10
     e10:	81 2c       	mov	r8, r1
     e12:	91 2c       	mov	r9, r1
     e14:	54 01       	movw	r10, r8
     e16:	20 ed       	ldi	r18, 0xD0	; 208
     e18:	28 0f       	add	r18, r24
     e1a:	28 30       	cpi	r18, 0x08	; 8
     e1c:	78 f0       	brcs	.+30     	; 0xe3c <conv_int+0xb8>
     e1e:	c4 ff       	sbrs	r28, 4
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <conv_int+0xa4>
     e22:	b8 01       	movw	r22, r16
     e24:	f2 d1       	rcall	.+996    	; 0x120a <ungetc>
     e26:	17 c0       	rjmp	.+46     	; 0xe56 <conv_int+0xd2>
     e28:	2a 30       	cpi	r18, 0x0A	; 10
     e2a:	40 f0       	brcs	.+16     	; 0xe3c <conv_int+0xb8>
     e2c:	c6 ff       	sbrs	r28, 6
     e2e:	f9 cf       	rjmp	.-14     	; 0xe22 <conv_int+0x9e>
     e30:	2f 7d       	andi	r18, 0xDF	; 223
     e32:	3f ee       	ldi	r19, 0xEF	; 239
     e34:	32 0f       	add	r19, r18
     e36:	36 30       	cpi	r19, 0x06	; 6
     e38:	a0 f7       	brcc	.-24     	; 0xe22 <conv_int+0x9e>
     e3a:	27 50       	subi	r18, 0x07	; 7
     e3c:	4c 2f       	mov	r20, r28
     e3e:	c5 01       	movw	r24, r10
     e40:	b4 01       	movw	r22, r8
     e42:	63 df       	rcall	.-314    	; 0xd0a <mulacc>
     e44:	4b 01       	movw	r8, r22
     e46:	5c 01       	movw	r10, r24
     e48:	c2 60       	ori	r28, 0x02	; 2
     e4a:	d1 50       	subi	r29, 0x01	; 1
     e4c:	51 f0       	breq	.+20     	; 0xe62 <conv_int+0xde>
     e4e:	c8 01       	movw	r24, r16
     e50:	62 d1       	rcall	.+708    	; 0x1116 <fgetc>
     e52:	97 ff       	sbrs	r25, 7
     e54:	e0 cf       	rjmp	.-64     	; 0xe16 <conv_int+0x92>
     e56:	c1 fd       	sbrc	r28, 1
     e58:	04 c0       	rjmp	.+8      	; 0xe62 <conv_int+0xde>
     e5a:	b0 cf       	rjmp	.-160    	; 0xdbc <conv_int+0x38>
     e5c:	81 2c       	mov	r8, r1
     e5e:	91 2c       	mov	r9, r1
     e60:	54 01       	movw	r10, r8
     e62:	c7 ff       	sbrs	r28, 7
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <conv_int+0xf2>
     e66:	b0 94       	com	r11
     e68:	a0 94       	com	r10
     e6a:	90 94       	com	r9
     e6c:	80 94       	com	r8
     e6e:	81 1c       	adc	r8, r1
     e70:	91 1c       	adc	r9, r1
     e72:	a1 1c       	adc	r10, r1
     e74:	b1 1c       	adc	r11, r1
     e76:	2c 2f       	mov	r18, r28
     e78:	b5 01       	movw	r22, r10
     e7a:	a4 01       	movw	r20, r8
     e7c:	c7 01       	movw	r24, r14
     e7e:	39 df       	rcall	.-398    	; 0xcf2 <putval>
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	df 91       	pop	r29
     e84:	cf 91       	pop	r28
     e86:	1f 91       	pop	r17
     e88:	0f 91       	pop	r16
     e8a:	ff 90       	pop	r15
     e8c:	ef 90       	pop	r14
     e8e:	bf 90       	pop	r11
     e90:	af 90       	pop	r10
     e92:	9f 90       	pop	r9
     e94:	8f 90       	pop	r8
     e96:	08 95       	ret

00000e98 <vfscanf>:
     e98:	a0 e0       	ldi	r26, 0x00	; 0
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e1 e5       	ldi	r30, 0x51	; 81
     e9e:	f7 e0       	ldi	r31, 0x07	; 7
     ea0:	f3 c0       	rjmp	.+486    	; 0x1088 <__prologue_saves__+0x6>
     ea2:	6c 01       	movw	r12, r24
     ea4:	eb 01       	movw	r28, r22
     ea6:	5a 01       	movw	r10, r20
     ea8:	fc 01       	movw	r30, r24
     eaa:	17 82       	std	Z+7, r1	; 0x07
     eac:	16 82       	std	Z+6, r1	; 0x06
     eae:	51 2c       	mov	r5, r1
     eb0:	f6 01       	movw	r30, r12
     eb2:	f3 80       	ldd	r15, Z+3	; 0x03
     eb4:	fe 01       	movw	r30, r28
     eb6:	f3 fc       	sbrc	r15, 3
     eb8:	85 91       	lpm	r24, Z+
     eba:	f3 fe       	sbrs	r15, 3
     ebc:	81 91       	ld	r24, Z+
     ebe:	18 2f       	mov	r17, r24
     ec0:	ef 01       	movw	r28, r30
     ec2:	88 23       	and	r24, r24
     ec4:	09 f4       	brne	.+2      	; 0xec8 <vfscanf+0x30>
     ec6:	d4 c0       	rjmp	.+424    	; 0x1070 <vfscanf+0x1d8>
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	12 d1       	rcall	.+548    	; 0x10f0 <isspace>
     ecc:	89 2b       	or	r24, r25
     ece:	19 f0       	breq	.+6      	; 0xed6 <vfscanf+0x3e>
     ed0:	c6 01       	movw	r24, r12
     ed2:	42 df       	rcall	.-380    	; 0xd58 <skip_spaces>
     ed4:	ed cf       	rjmp	.-38     	; 0xeb0 <vfscanf+0x18>
     ed6:	15 32       	cpi	r17, 0x25	; 37
     ed8:	41 f4       	brne	.+16     	; 0xeea <vfscanf+0x52>
     eda:	fe 01       	movw	r30, r28
     edc:	f3 fc       	sbrc	r15, 3
     ede:	15 91       	lpm	r17, Z+
     ee0:	f3 fe       	sbrs	r15, 3
     ee2:	11 91       	ld	r17, Z+
     ee4:	ef 01       	movw	r28, r30
     ee6:	15 32       	cpi	r17, 0x25	; 37
     ee8:	71 f4       	brne	.+28     	; 0xf06 <vfscanf+0x6e>
     eea:	c6 01       	movw	r24, r12
     eec:	14 d1       	rcall	.+552    	; 0x1116 <fgetc>
     eee:	97 fd       	sbrc	r25, 7
     ef0:	bd c0       	rjmp	.+378    	; 0x106c <vfscanf+0x1d4>
     ef2:	41 2f       	mov	r20, r17
     ef4:	50 e0       	ldi	r21, 0x00	; 0
     ef6:	9c 01       	movw	r18, r24
     ef8:	33 27       	eor	r19, r19
     efa:	24 17       	cp	r18, r20
     efc:	35 07       	cpc	r19, r21
     efe:	c1 f2       	breq	.-80     	; 0xeb0 <vfscanf+0x18>
     f00:	b6 01       	movw	r22, r12
     f02:	83 d1       	rcall	.+774    	; 0x120a <ungetc>
     f04:	b5 c0       	rjmp	.+362    	; 0x1070 <vfscanf+0x1d8>
     f06:	1a 32       	cpi	r17, 0x2A	; 42
     f08:	39 f4       	brne	.+14     	; 0xf18 <vfscanf+0x80>
     f0a:	f3 fc       	sbrc	r15, 3
     f0c:	15 91       	lpm	r17, Z+
     f0e:	f3 fe       	sbrs	r15, 3
     f10:	11 91       	ld	r17, Z+
     f12:	ef 01       	movw	r28, r30
     f14:	01 e0       	ldi	r16, 0x01	; 1
     f16:	01 c0       	rjmp	.+2      	; 0xf1a <vfscanf+0x82>
     f18:	00 e0       	ldi	r16, 0x00	; 0
     f1a:	e1 2c       	mov	r14, r1
     f1c:	20 ed       	ldi	r18, 0xD0	; 208
     f1e:	21 0f       	add	r18, r17
     f20:	2a 30       	cpi	r18, 0x0A	; 10
     f22:	78 f4       	brcc	.+30     	; 0xf42 <vfscanf+0xaa>
     f24:	02 60       	ori	r16, 0x02	; 2
     f26:	6e 2d       	mov	r22, r14
     f28:	70 e0       	ldi	r23, 0x00	; 0
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	40 e2       	ldi	r20, 0x20	; 32
     f30:	ec de       	rcall	.-552    	; 0xd0a <mulacc>
     f32:	e6 2e       	mov	r14, r22
     f34:	fe 01       	movw	r30, r28
     f36:	f3 fc       	sbrc	r15, 3
     f38:	15 91       	lpm	r17, Z+
     f3a:	f3 fe       	sbrs	r15, 3
     f3c:	11 91       	ld	r17, Z+
     f3e:	ef 01       	movw	r28, r30
     f40:	ed cf       	rjmp	.-38     	; 0xf1c <vfscanf+0x84>
     f42:	01 ff       	sbrs	r16, 1
     f44:	03 c0       	rjmp	.+6      	; 0xf4c <vfscanf+0xb4>
     f46:	e1 10       	cpse	r14, r1
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <vfscanf+0xb8>
     f4a:	92 c0       	rjmp	.+292    	; 0x1070 <vfscanf+0x1d8>
     f4c:	ee 24       	eor	r14, r14
     f4e:	ea 94       	dec	r14
     f50:	18 36       	cpi	r17, 0x68	; 104
     f52:	19 f0       	breq	.+6      	; 0xf5a <vfscanf+0xc2>
     f54:	1c 36       	cpi	r17, 0x6C	; 108
     f56:	51 f0       	breq	.+20     	; 0xf6c <vfscanf+0xd4>
     f58:	10 c0       	rjmp	.+32     	; 0xf7a <vfscanf+0xe2>
     f5a:	fe 01       	movw	r30, r28
     f5c:	f3 fc       	sbrc	r15, 3
     f5e:	15 91       	lpm	r17, Z+
     f60:	f3 fe       	sbrs	r15, 3
     f62:	11 91       	ld	r17, Z+
     f64:	ef 01       	movw	r28, r30
     f66:	18 36       	cpi	r17, 0x68	; 104
     f68:	41 f4       	brne	.+16     	; 0xf7a <vfscanf+0xe2>
     f6a:	08 60       	ori	r16, 0x08	; 8
     f6c:	04 60       	ori	r16, 0x04	; 4
     f6e:	fe 01       	movw	r30, r28
     f70:	f3 fc       	sbrc	r15, 3
     f72:	15 91       	lpm	r17, Z+
     f74:	f3 fe       	sbrs	r15, 3
     f76:	11 91       	ld	r17, Z+
     f78:	ef 01       	movw	r28, r30
     f7a:	11 23       	and	r17, r17
     f7c:	09 f4       	brne	.+2      	; 0xf80 <vfscanf+0xe8>
     f7e:	78 c0       	rjmp	.+240    	; 0x1070 <vfscanf+0x1d8>
     f80:	61 2f       	mov	r22, r17
     f82:	70 e0       	ldi	r23, 0x00	; 0
     f84:	8f e7       	ldi	r24, 0x7F	; 127
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	bb d0       	rcall	.+374    	; 0x1100 <strchr_P>
     f8a:	89 2b       	or	r24, r25
     f8c:	09 f4       	brne	.+2      	; 0xf90 <vfscanf+0xf8>
     f8e:	70 c0       	rjmp	.+224    	; 0x1070 <vfscanf+0x1d8>
     f90:	00 fd       	sbrc	r16, 0
     f92:	07 c0       	rjmp	.+14     	; 0xfa2 <vfscanf+0x10a>
     f94:	f5 01       	movw	r30, r10
     f96:	80 80       	ld	r8, Z
     f98:	91 80       	ldd	r9, Z+1	; 0x01
     f9a:	c5 01       	movw	r24, r10
     f9c:	02 96       	adiw	r24, 0x02	; 2
     f9e:	5c 01       	movw	r10, r24
     fa0:	02 c0       	rjmp	.+4      	; 0xfa6 <vfscanf+0x10e>
     fa2:	81 2c       	mov	r8, r1
     fa4:	91 2c       	mov	r9, r1
     fa6:	1e 36       	cpi	r17, 0x6E	; 110
     fa8:	49 f4       	brne	.+18     	; 0xfbc <vfscanf+0x124>
     faa:	f6 01       	movw	r30, r12
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	70 e0       	ldi	r23, 0x00	; 0
     fb4:	20 2f       	mov	r18, r16
     fb6:	c4 01       	movw	r24, r8
     fb8:	9c de       	rcall	.-712    	; 0xcf2 <putval>
     fba:	7a cf       	rjmp	.-268    	; 0xeb0 <vfscanf+0x18>
     fbc:	13 36       	cpi	r17, 0x63	; 99
     fbe:	a1 f4       	brne	.+40     	; 0xfe8 <vfscanf+0x150>
     fc0:	01 fd       	sbrc	r16, 1
     fc2:	02 c0       	rjmp	.+4      	; 0xfc8 <vfscanf+0x130>
     fc4:	ee 24       	eor	r14, r14
     fc6:	e3 94       	inc	r14
     fc8:	c6 01       	movw	r24, r12
     fca:	a5 d0       	rcall	.+330    	; 0x1116 <fgetc>
     fcc:	97 fd       	sbrc	r25, 7
     fce:	4e c0       	rjmp	.+156    	; 0x106c <vfscanf+0x1d4>
     fd0:	81 14       	cp	r8, r1
     fd2:	91 04       	cpc	r9, r1
     fd4:	29 f0       	breq	.+10     	; 0xfe0 <vfscanf+0x148>
     fd6:	f4 01       	movw	r30, r8
     fd8:	80 83       	st	Z, r24
     fda:	c4 01       	movw	r24, r8
     fdc:	01 96       	adiw	r24, 0x01	; 1
     fde:	4c 01       	movw	r8, r24
     fe0:	ea 94       	dec	r14
     fe2:	e1 10       	cpse	r14, r1
     fe4:	f1 cf       	rjmp	.-30     	; 0xfc8 <vfscanf+0x130>
     fe6:	3e c0       	rjmp	.+124    	; 0x1064 <vfscanf+0x1cc>
     fe8:	c6 01       	movw	r24, r12
     fea:	b6 de       	rcall	.-660    	; 0xd58 <skip_spaces>
     fec:	97 fd       	sbrc	r25, 7
     fee:	3e c0       	rjmp	.+124    	; 0x106c <vfscanf+0x1d4>
     ff0:	1f 36       	cpi	r17, 0x6F	; 111
     ff2:	49 f1       	breq	.+82     	; 0x1046 <vfscanf+0x1ae>
     ff4:	28 f4       	brcc	.+10     	; 0x1000 <vfscanf+0x168>
     ff6:	14 36       	cpi	r17, 0x64	; 100
     ff8:	21 f1       	breq	.+72     	; 0x1042 <vfscanf+0x1aa>
     ffa:	19 36       	cpi	r17, 0x69	; 105
     ffc:	39 f1       	breq	.+78     	; 0x104c <vfscanf+0x1b4>
     ffe:	25 c0       	rjmp	.+74     	; 0x104a <vfscanf+0x1b2>
    1000:	13 37       	cpi	r17, 0x73	; 115
    1002:	71 f0       	breq	.+28     	; 0x1020 <vfscanf+0x188>
    1004:	15 37       	cpi	r17, 0x75	; 117
    1006:	e9 f0       	breq	.+58     	; 0x1042 <vfscanf+0x1aa>
    1008:	20 c0       	rjmp	.+64     	; 0x104a <vfscanf+0x1b2>
    100a:	81 14       	cp	r8, r1
    100c:	91 04       	cpc	r9, r1
    100e:	29 f0       	breq	.+10     	; 0x101a <vfscanf+0x182>
    1010:	f4 01       	movw	r30, r8
    1012:	60 82       	st	Z, r6
    1014:	c4 01       	movw	r24, r8
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	4c 01       	movw	r8, r24
    101a:	ea 94       	dec	r14
    101c:	ee 20       	and	r14, r14
    101e:	59 f0       	breq	.+22     	; 0x1036 <vfscanf+0x19e>
    1020:	c6 01       	movw	r24, r12
    1022:	79 d0       	rcall	.+242    	; 0x1116 <fgetc>
    1024:	3c 01       	movw	r6, r24
    1026:	97 fd       	sbrc	r25, 7
    1028:	06 c0       	rjmp	.+12     	; 0x1036 <vfscanf+0x19e>
    102a:	62 d0       	rcall	.+196    	; 0x10f0 <isspace>
    102c:	89 2b       	or	r24, r25
    102e:	69 f3       	breq	.-38     	; 0x100a <vfscanf+0x172>
    1030:	b6 01       	movw	r22, r12
    1032:	c3 01       	movw	r24, r6
    1034:	ea d0       	rcall	.+468    	; 0x120a <ungetc>
    1036:	81 14       	cp	r8, r1
    1038:	91 04       	cpc	r9, r1
    103a:	a1 f0       	breq	.+40     	; 0x1064 <vfscanf+0x1cc>
    103c:	f4 01       	movw	r30, r8
    103e:	10 82       	st	Z, r1
    1040:	11 c0       	rjmp	.+34     	; 0x1064 <vfscanf+0x1cc>
    1042:	00 62       	ori	r16, 0x20	; 32
    1044:	03 c0       	rjmp	.+6      	; 0x104c <vfscanf+0x1b4>
    1046:	00 61       	ori	r16, 0x10	; 16
    1048:	01 c0       	rjmp	.+2      	; 0x104c <vfscanf+0x1b4>
    104a:	00 64       	ori	r16, 0x40	; 64
    104c:	20 2f       	mov	r18, r16
    104e:	a4 01       	movw	r20, r8
    1050:	6e 2d       	mov	r22, r14
    1052:	c6 01       	movw	r24, r12
    1054:	97 de       	rcall	.-722    	; 0xd84 <conv_int>
    1056:	81 11       	cpse	r24, r1
    1058:	05 c0       	rjmp	.+10     	; 0x1064 <vfscanf+0x1cc>
    105a:	f6 01       	movw	r30, r12
    105c:	83 81       	ldd	r24, Z+3	; 0x03
    105e:	80 73       	andi	r24, 0x30	; 48
    1060:	29 f4       	brne	.+10     	; 0x106c <vfscanf+0x1d4>
    1062:	06 c0       	rjmp	.+12     	; 0x1070 <vfscanf+0x1d8>
    1064:	00 fd       	sbrc	r16, 0
    1066:	24 cf       	rjmp	.-440    	; 0xeb0 <vfscanf+0x18>
    1068:	53 94       	inc	r5
    106a:	22 cf       	rjmp	.-444    	; 0xeb0 <vfscanf+0x18>
    106c:	55 20       	and	r5, r5
    106e:	19 f0       	breq	.+6      	; 0x1076 <vfscanf+0x1de>
    1070:	85 2d       	mov	r24, r5
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	02 c0       	rjmp	.+4      	; 0x107a <vfscanf+0x1e2>
    1076:	8f ef       	ldi	r24, 0xFF	; 255
    1078:	9f ef       	ldi	r25, 0xFF	; 255
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	ef e0       	ldi	r30, 0x0F	; 15
    1080:	1f c0       	rjmp	.+62     	; 0x10c0 <__epilogue_restores__+0x6>

00001082 <__prologue_saves__>:
    1082:	2f 92       	push	r2
    1084:	3f 92       	push	r3
    1086:	4f 92       	push	r4
    1088:	5f 92       	push	r5
    108a:	6f 92       	push	r6
    108c:	7f 92       	push	r7
    108e:	8f 92       	push	r8
    1090:	9f 92       	push	r9
    1092:	af 92       	push	r10
    1094:	bf 92       	push	r11
    1096:	cf 92       	push	r12
    1098:	df 92       	push	r13
    109a:	ef 92       	push	r14
    109c:	ff 92       	push	r15
    109e:	0f 93       	push	r16
    10a0:	1f 93       	push	r17
    10a2:	cf 93       	push	r28
    10a4:	df 93       	push	r29
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	ca 1b       	sub	r28, r26
    10ac:	db 0b       	sbc	r29, r27
    10ae:	0f b6       	in	r0, 0x3f	; 63
    10b0:	f8 94       	cli
    10b2:	de bf       	out	0x3e, r29	; 62
    10b4:	0f be       	out	0x3f, r0	; 63
    10b6:	cd bf       	out	0x3d, r28	; 61
    10b8:	09 94       	ijmp

000010ba <__epilogue_restores__>:
    10ba:	2a 88       	ldd	r2, Y+18	; 0x12
    10bc:	39 88       	ldd	r3, Y+17	; 0x11
    10be:	48 88       	ldd	r4, Y+16	; 0x10
    10c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    10c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    10c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    10c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    10c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    10ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    10cc:	b9 84       	ldd	r11, Y+9	; 0x09
    10ce:	c8 84       	ldd	r12, Y+8	; 0x08
    10d0:	df 80       	ldd	r13, Y+7	; 0x07
    10d2:	ee 80       	ldd	r14, Y+6	; 0x06
    10d4:	fd 80       	ldd	r15, Y+5	; 0x05
    10d6:	0c 81       	ldd	r16, Y+4	; 0x04
    10d8:	1b 81       	ldd	r17, Y+3	; 0x03
    10da:	aa 81       	ldd	r26, Y+2	; 0x02
    10dc:	b9 81       	ldd	r27, Y+1	; 0x01
    10de:	ce 0f       	add	r28, r30
    10e0:	d1 1d       	adc	r29, r1
    10e2:	0f b6       	in	r0, 0x3f	; 63
    10e4:	f8 94       	cli
    10e6:	de bf       	out	0x3e, r29	; 62
    10e8:	0f be       	out	0x3f, r0	; 63
    10ea:	cd bf       	out	0x3d, r28	; 61
    10ec:	ed 01       	movw	r28, r26
    10ee:	08 95       	ret

000010f0 <isspace>:
    10f0:	91 11       	cpse	r25, r1
    10f2:	02 c1       	rjmp	.+516    	; 0x12f8 <__ctype_isfalse>
    10f4:	80 32       	cpi	r24, 0x20	; 32
    10f6:	19 f0       	breq	.+6      	; 0x10fe <isspace+0xe>
    10f8:	89 50       	subi	r24, 0x09	; 9
    10fa:	85 50       	subi	r24, 0x05	; 5
    10fc:	d0 f7       	brcc	.-12     	; 0x10f2 <isspace+0x2>
    10fe:	08 95       	ret

00001100 <strchr_P>:
    1100:	fc 01       	movw	r30, r24
    1102:	05 90       	lpm	r0, Z+
    1104:	06 16       	cp	r0, r22
    1106:	21 f0       	breq	.+8      	; 0x1110 <strchr_P+0x10>
    1108:	00 20       	and	r0, r0
    110a:	d9 f7       	brne	.-10     	; 0x1102 <strchr_P+0x2>
    110c:	c0 01       	movw	r24, r0
    110e:	08 95       	ret
    1110:	31 97       	sbiw	r30, 0x01	; 1
    1112:	cf 01       	movw	r24, r30
    1114:	08 95       	ret

00001116 <fgetc>:
    1116:	cf 93       	push	r28
    1118:	df 93       	push	r29
    111a:	ec 01       	movw	r28, r24
    111c:	2b 81       	ldd	r18, Y+3	; 0x03
    111e:	20 ff       	sbrs	r18, 0
    1120:	33 c0       	rjmp	.+102    	; 0x1188 <fgetc+0x72>
    1122:	26 ff       	sbrs	r18, 6
    1124:	0a c0       	rjmp	.+20     	; 0x113a <fgetc+0x24>
    1126:	2f 7b       	andi	r18, 0xBF	; 191
    1128:	2b 83       	std	Y+3, r18	; 0x03
    112a:	8e 81       	ldd	r24, Y+6	; 0x06
    112c:	9f 81       	ldd	r25, Y+7	; 0x07
    112e:	01 96       	adiw	r24, 0x01	; 1
    1130:	9f 83       	std	Y+7, r25	; 0x07
    1132:	8e 83       	std	Y+6, r24	; 0x06
    1134:	8a 81       	ldd	r24, Y+2	; 0x02
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	29 c0       	rjmp	.+82     	; 0x118c <fgetc+0x76>
    113a:	22 ff       	sbrs	r18, 2
    113c:	0f c0       	rjmp	.+30     	; 0x115c <fgetc+0x46>
    113e:	e8 81       	ld	r30, Y
    1140:	f9 81       	ldd	r31, Y+1	; 0x01
    1142:	80 81       	ld	r24, Z
    1144:	08 2e       	mov	r0, r24
    1146:	00 0c       	add	r0, r0
    1148:	99 0b       	sbc	r25, r25
    114a:	00 97       	sbiw	r24, 0x00	; 0
    114c:	19 f4       	brne	.+6      	; 0x1154 <fgetc+0x3e>
    114e:	20 62       	ori	r18, 0x20	; 32
    1150:	2b 83       	std	Y+3, r18	; 0x03
    1152:	1a c0       	rjmp	.+52     	; 0x1188 <fgetc+0x72>
    1154:	31 96       	adiw	r30, 0x01	; 1
    1156:	f9 83       	std	Y+1, r31	; 0x01
    1158:	e8 83       	st	Y, r30
    115a:	0e c0       	rjmp	.+28     	; 0x1178 <fgetc+0x62>
    115c:	ea 85       	ldd	r30, Y+10	; 0x0a
    115e:	fb 85       	ldd	r31, Y+11	; 0x0b
    1160:	09 95       	icall
    1162:	97 ff       	sbrs	r25, 7
    1164:	09 c0       	rjmp	.+18     	; 0x1178 <fgetc+0x62>
    1166:	2b 81       	ldd	r18, Y+3	; 0x03
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	11 f0       	breq	.+4      	; 0x1170 <fgetc+0x5a>
    116c:	80 e2       	ldi	r24, 0x20	; 32
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <fgetc+0x5c>
    1170:	80 e1       	ldi	r24, 0x10	; 16
    1172:	82 2b       	or	r24, r18
    1174:	8b 83       	std	Y+3, r24	; 0x03
    1176:	08 c0       	rjmp	.+16     	; 0x1188 <fgetc+0x72>
    1178:	2e 81       	ldd	r18, Y+6	; 0x06
    117a:	3f 81       	ldd	r19, Y+7	; 0x07
    117c:	2f 5f       	subi	r18, 0xFF	; 255
    117e:	3f 4f       	sbci	r19, 0xFF	; 255
    1180:	3f 83       	std	Y+7, r19	; 0x07
    1182:	2e 83       	std	Y+6, r18	; 0x06
    1184:	99 27       	eor	r25, r25
    1186:	02 c0       	rjmp	.+4      	; 0x118c <fgetc+0x76>
    1188:	8f ef       	ldi	r24, 0xFF	; 255
    118a:	9f ef       	ldi	r25, 0xFF	; 255
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	08 95       	ret

00001192 <fputc>:
    1192:	0f 93       	push	r16
    1194:	1f 93       	push	r17
    1196:	cf 93       	push	r28
    1198:	df 93       	push	r29
    119a:	fb 01       	movw	r30, r22
    119c:	23 81       	ldd	r18, Z+3	; 0x03
    119e:	21 fd       	sbrc	r18, 1
    11a0:	03 c0       	rjmp	.+6      	; 0x11a8 <fputc+0x16>
    11a2:	8f ef       	ldi	r24, 0xFF	; 255
    11a4:	9f ef       	ldi	r25, 0xFF	; 255
    11a6:	2c c0       	rjmp	.+88     	; 0x1200 <fputc+0x6e>
    11a8:	22 ff       	sbrs	r18, 2
    11aa:	16 c0       	rjmp	.+44     	; 0x11d8 <fputc+0x46>
    11ac:	46 81       	ldd	r20, Z+6	; 0x06
    11ae:	57 81       	ldd	r21, Z+7	; 0x07
    11b0:	24 81       	ldd	r18, Z+4	; 0x04
    11b2:	35 81       	ldd	r19, Z+5	; 0x05
    11b4:	42 17       	cp	r20, r18
    11b6:	53 07       	cpc	r21, r19
    11b8:	44 f4       	brge	.+16     	; 0x11ca <fputc+0x38>
    11ba:	a0 81       	ld	r26, Z
    11bc:	b1 81       	ldd	r27, Z+1	; 0x01
    11be:	9d 01       	movw	r18, r26
    11c0:	2f 5f       	subi	r18, 0xFF	; 255
    11c2:	3f 4f       	sbci	r19, 0xFF	; 255
    11c4:	31 83       	std	Z+1, r19	; 0x01
    11c6:	20 83       	st	Z, r18
    11c8:	8c 93       	st	X, r24
    11ca:	26 81       	ldd	r18, Z+6	; 0x06
    11cc:	37 81       	ldd	r19, Z+7	; 0x07
    11ce:	2f 5f       	subi	r18, 0xFF	; 255
    11d0:	3f 4f       	sbci	r19, 0xFF	; 255
    11d2:	37 83       	std	Z+7, r19	; 0x07
    11d4:	26 83       	std	Z+6, r18	; 0x06
    11d6:	14 c0       	rjmp	.+40     	; 0x1200 <fputc+0x6e>
    11d8:	8b 01       	movw	r16, r22
    11da:	ec 01       	movw	r28, r24
    11dc:	fb 01       	movw	r30, r22
    11de:	00 84       	ldd	r0, Z+8	; 0x08
    11e0:	f1 85       	ldd	r31, Z+9	; 0x09
    11e2:	e0 2d       	mov	r30, r0
    11e4:	09 95       	icall
    11e6:	89 2b       	or	r24, r25
    11e8:	e1 f6       	brne	.-72     	; 0x11a2 <fputc+0x10>
    11ea:	d8 01       	movw	r26, r16
    11ec:	16 96       	adiw	r26, 0x06	; 6
    11ee:	8d 91       	ld	r24, X+
    11f0:	9c 91       	ld	r25, X
    11f2:	17 97       	sbiw	r26, 0x07	; 7
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	17 96       	adiw	r26, 0x07	; 7
    11f8:	9c 93       	st	X, r25
    11fa:	8e 93       	st	-X, r24
    11fc:	16 97       	sbiw	r26, 0x06	; 6
    11fe:	ce 01       	movw	r24, r28
    1200:	df 91       	pop	r29
    1202:	cf 91       	pop	r28
    1204:	1f 91       	pop	r17
    1206:	0f 91       	pop	r16
    1208:	08 95       	ret

0000120a <ungetc>:
    120a:	fb 01       	movw	r30, r22
    120c:	23 81       	ldd	r18, Z+3	; 0x03
    120e:	20 ff       	sbrs	r18, 0
    1210:	12 c0       	rjmp	.+36     	; 0x1236 <ungetc+0x2c>
    1212:	26 fd       	sbrc	r18, 6
    1214:	10 c0       	rjmp	.+32     	; 0x1236 <ungetc+0x2c>
    1216:	8f 3f       	cpi	r24, 0xFF	; 255
    1218:	3f ef       	ldi	r19, 0xFF	; 255
    121a:	93 07       	cpc	r25, r19
    121c:	61 f0       	breq	.+24     	; 0x1236 <ungetc+0x2c>
    121e:	82 83       	std	Z+2, r24	; 0x02
    1220:	2f 7d       	andi	r18, 0xDF	; 223
    1222:	20 64       	ori	r18, 0x40	; 64
    1224:	23 83       	std	Z+3, r18	; 0x03
    1226:	26 81       	ldd	r18, Z+6	; 0x06
    1228:	37 81       	ldd	r19, Z+7	; 0x07
    122a:	21 50       	subi	r18, 0x01	; 1
    122c:	31 09       	sbc	r19, r1
    122e:	37 83       	std	Z+7, r19	; 0x07
    1230:	26 83       	std	Z+6, r18	; 0x06
    1232:	99 27       	eor	r25, r25
    1234:	08 95       	ret
    1236:	8f ef       	ldi	r24, 0xFF	; 255
    1238:	9f ef       	ldi	r25, 0xFF	; 255
    123a:	08 95       	ret

0000123c <__ultoa_invert>:
    123c:	fa 01       	movw	r30, r20
    123e:	aa 27       	eor	r26, r26
    1240:	28 30       	cpi	r18, 0x08	; 8
    1242:	51 f1       	breq	.+84     	; 0x1298 <__ultoa_invert+0x5c>
    1244:	20 31       	cpi	r18, 0x10	; 16
    1246:	81 f1       	breq	.+96     	; 0x12a8 <__ultoa_invert+0x6c>
    1248:	e8 94       	clt
    124a:	6f 93       	push	r22
    124c:	6e 7f       	andi	r22, 0xFE	; 254
    124e:	6e 5f       	subi	r22, 0xFE	; 254
    1250:	7f 4f       	sbci	r23, 0xFF	; 255
    1252:	8f 4f       	sbci	r24, 0xFF	; 255
    1254:	9f 4f       	sbci	r25, 0xFF	; 255
    1256:	af 4f       	sbci	r26, 0xFF	; 255
    1258:	b1 e0       	ldi	r27, 0x01	; 1
    125a:	3e d0       	rcall	.+124    	; 0x12d8 <__ultoa_invert+0x9c>
    125c:	b4 e0       	ldi	r27, 0x04	; 4
    125e:	3c d0       	rcall	.+120    	; 0x12d8 <__ultoa_invert+0x9c>
    1260:	67 0f       	add	r22, r23
    1262:	78 1f       	adc	r23, r24
    1264:	89 1f       	adc	r24, r25
    1266:	9a 1f       	adc	r25, r26
    1268:	a1 1d       	adc	r26, r1
    126a:	68 0f       	add	r22, r24
    126c:	79 1f       	adc	r23, r25
    126e:	8a 1f       	adc	r24, r26
    1270:	91 1d       	adc	r25, r1
    1272:	a1 1d       	adc	r26, r1
    1274:	6a 0f       	add	r22, r26
    1276:	71 1d       	adc	r23, r1
    1278:	81 1d       	adc	r24, r1
    127a:	91 1d       	adc	r25, r1
    127c:	a1 1d       	adc	r26, r1
    127e:	20 d0       	rcall	.+64     	; 0x12c0 <__ultoa_invert+0x84>
    1280:	09 f4       	brne	.+2      	; 0x1284 <__ultoa_invert+0x48>
    1282:	68 94       	set
    1284:	3f 91       	pop	r19
    1286:	2a e0       	ldi	r18, 0x0A	; 10
    1288:	26 9f       	mul	r18, r22
    128a:	11 24       	eor	r1, r1
    128c:	30 19       	sub	r19, r0
    128e:	30 5d       	subi	r19, 0xD0	; 208
    1290:	31 93       	st	Z+, r19
    1292:	de f6       	brtc	.-74     	; 0x124a <__ultoa_invert+0xe>
    1294:	cf 01       	movw	r24, r30
    1296:	08 95       	ret
    1298:	46 2f       	mov	r20, r22
    129a:	47 70       	andi	r20, 0x07	; 7
    129c:	40 5d       	subi	r20, 0xD0	; 208
    129e:	41 93       	st	Z+, r20
    12a0:	b3 e0       	ldi	r27, 0x03	; 3
    12a2:	0f d0       	rcall	.+30     	; 0x12c2 <__ultoa_invert+0x86>
    12a4:	c9 f7       	brne	.-14     	; 0x1298 <__ultoa_invert+0x5c>
    12a6:	f6 cf       	rjmp	.-20     	; 0x1294 <__ultoa_invert+0x58>
    12a8:	46 2f       	mov	r20, r22
    12aa:	4f 70       	andi	r20, 0x0F	; 15
    12ac:	40 5d       	subi	r20, 0xD0	; 208
    12ae:	4a 33       	cpi	r20, 0x3A	; 58
    12b0:	18 f0       	brcs	.+6      	; 0x12b8 <__ultoa_invert+0x7c>
    12b2:	49 5d       	subi	r20, 0xD9	; 217
    12b4:	31 fd       	sbrc	r19, 1
    12b6:	40 52       	subi	r20, 0x20	; 32
    12b8:	41 93       	st	Z+, r20
    12ba:	02 d0       	rcall	.+4      	; 0x12c0 <__ultoa_invert+0x84>
    12bc:	a9 f7       	brne	.-22     	; 0x12a8 <__ultoa_invert+0x6c>
    12be:	ea cf       	rjmp	.-44     	; 0x1294 <__ultoa_invert+0x58>
    12c0:	b4 e0       	ldi	r27, 0x04	; 4
    12c2:	a6 95       	lsr	r26
    12c4:	97 95       	ror	r25
    12c6:	87 95       	ror	r24
    12c8:	77 95       	ror	r23
    12ca:	67 95       	ror	r22
    12cc:	ba 95       	dec	r27
    12ce:	c9 f7       	brne	.-14     	; 0x12c2 <__ultoa_invert+0x86>
    12d0:	00 97       	sbiw	r24, 0x00	; 0
    12d2:	61 05       	cpc	r22, r1
    12d4:	71 05       	cpc	r23, r1
    12d6:	08 95       	ret
    12d8:	9b 01       	movw	r18, r22
    12da:	ac 01       	movw	r20, r24
    12dc:	0a 2e       	mov	r0, r26
    12de:	06 94       	lsr	r0
    12e0:	57 95       	ror	r21
    12e2:	47 95       	ror	r20
    12e4:	37 95       	ror	r19
    12e6:	27 95       	ror	r18
    12e8:	ba 95       	dec	r27
    12ea:	c9 f7       	brne	.-14     	; 0x12de <__ultoa_invert+0xa2>
    12ec:	62 0f       	add	r22, r18
    12ee:	73 1f       	adc	r23, r19
    12f0:	84 1f       	adc	r24, r20
    12f2:	95 1f       	adc	r25, r21
    12f4:	a0 1d       	adc	r26, r0
    12f6:	08 95       	ret

000012f8 <__ctype_isfalse>:
    12f8:	99 27       	eor	r25, r25
    12fa:	88 27       	eor	r24, r24

000012fc <__ctype_istrue>:
    12fc:	08 95       	ret

000012fe <_exit>:
    12fe:	f8 94       	cli

00001300 <__stop_program>:
    1300:	ff cf       	rjmp	.-2      	; 0x1300 <__stop_program>
