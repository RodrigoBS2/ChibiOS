   1               		.file	"main.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.rodata.str1.1,"aMS",@progbits,1
  11               	.LC0:
  12 0000 426C 696E 		.string	"Blinker"
  12      6B65 7200 
  13               		.section	.text.Thread1,"ax",@progbits
  15               	Thread1:
  16               	.LFB241:
  17               		.file 1 "main.c"
   1:main.c        **** 
   2:main.c        **** 
   3:main.c        **** #include "ch.h"     // Inclui as funções relacionadas ao núcleo do sistema operacional em tempo 
   4:main.c        **** #include "hal.h"    // Inclui as funções relacionadas ao Hardware Abstraction Layer (HAL), que fa
   5:main.c        **** 
   6:main.c        **** /*
   7:main.c        ****  * LED blinker thread, times are in milliseconds.
   8:main.c        ****  */
   9:main.c        **** static THD_WORKING_AREA(waThread1, 32);     // Define o espaço de trabalho (stack) para a thread T
  10:main.c        **** 
  11:main.c        **** static THD_FUNCTION(Thread1, arg) {         /* É a função que define a thread Thread1. Ela receb
  18               		.loc 1 11 0
  19               		.cfi_startproc
  20               	.LVL0:
  21               	/* prologue: function */
  22               	/* frame size = 0 */
  23               	/* stack size = 0 */
  24               	.L__stack_usage = 0
  25               	.LBB4:
  26               	.LBB5:
  27               		.file 2 "../../../os/rt/include/chregistry.h"
   1:../../../os/rt/include/chregistry.h **** /*
   2:../../../os/rt/include/chregistry.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chregistry.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chregistry.h **** 
   5:../../../os/rt/include/chregistry.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chregistry.h **** 
   7:../../../os/rt/include/chregistry.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chregistry.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chregistry.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chregistry.h **** 
  11:../../../os/rt/include/chregistry.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chregistry.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chregistry.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chregistry.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chregistry.h **** 
  16:../../../os/rt/include/chregistry.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chregistry.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chregistry.h **** */
  19:../../../os/rt/include/chregistry.h **** 
  20:../../../os/rt/include/chregistry.h **** /**
  21:../../../os/rt/include/chregistry.h ****  * @file    rt/include/chregistry.h
  22:../../../os/rt/include/chregistry.h ****  * @brief   Threads registry macros and structures.
  23:../../../os/rt/include/chregistry.h ****  *
  24:../../../os/rt/include/chregistry.h ****  * @addtogroup registry
  25:../../../os/rt/include/chregistry.h ****  * @{
  26:../../../os/rt/include/chregistry.h ****  */
  27:../../../os/rt/include/chregistry.h **** 
  28:../../../os/rt/include/chregistry.h **** #ifndef CHREGISTRY_H
  29:../../../os/rt/include/chregistry.h **** #define CHREGISTRY_H
  30:../../../os/rt/include/chregistry.h **** 
  31:../../../os/rt/include/chregistry.h **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chregistry.h **** 
  33:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  34:../../../os/rt/include/chregistry.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  36:../../../os/rt/include/chregistry.h **** 
  37:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  38:../../../os/rt/include/chregistry.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  40:../../../os/rt/include/chregistry.h **** 
  41:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  42:../../../os/rt/include/chregistry.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  44:../../../os/rt/include/chregistry.h **** 
  45:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  46:../../../os/rt/include/chregistry.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  48:../../../os/rt/include/chregistry.h **** 
  49:../../../os/rt/include/chregistry.h **** /**
  50:../../../os/rt/include/chregistry.h ****  * @brief   ChibiOS/RT memory signature record.
  51:../../../os/rt/include/chregistry.h ****  */
  52:../../../os/rt/include/chregistry.h **** typedef struct {
  53:../../../os/rt/include/chregistry.h ****   char      identifier[4];          /**< @brief Always set to "main".       */
  54:../../../os/rt/include/chregistry.h ****   uint8_t   zero;                   /**< @brief Must be zero.               */
  55:../../../os/rt/include/chregistry.h ****   uint8_t   size;                   /**< @brief Size of this structure.     */
  56:../../../os/rt/include/chregistry.h ****   uint16_t  version;                /**< @brief Encoded ChibiOS/RT version. */
  57:../../../os/rt/include/chregistry.h ****   uint8_t   ptrsize;                /**< @brief Size of a pointer.          */
  58:../../../os/rt/include/chregistry.h ****   uint8_t   timesize;               /**< @brief Size of a @p systime_t.     */
  59:../../../os/rt/include/chregistry.h ****   uint8_t   threadsize;             /**< @brief Size of a @p thread_t.      */
  60:../../../os/rt/include/chregistry.h ****   uint8_t   off_prio;               /**< @brief Offset of @p prio field.    */
  61:../../../os/rt/include/chregistry.h ****   uint8_t   off_ctx;                /**< @brief Offset of @p ctx field.     */
  62:../../../os/rt/include/chregistry.h ****   uint8_t   off_newer;              /**< @brief Offset of @p newer field.   */
  63:../../../os/rt/include/chregistry.h ****   uint8_t   off_older;              /**< @brief Offset of @p older field.   */
  64:../../../os/rt/include/chregistry.h ****   uint8_t   off_name;               /**< @brief Offset of @p name field.    */
  65:../../../os/rt/include/chregistry.h ****   uint8_t   off_stklimit;           /**< @brief Offset of @p stklimit field.*/
  66:../../../os/rt/include/chregistry.h ****   uint8_t   off_state;              /**< @brief Offset of @p state field.   */
  67:../../../os/rt/include/chregistry.h ****   uint8_t   off_flags;              /**< @brief Offset of @p flags field.   */
  68:../../../os/rt/include/chregistry.h ****   uint8_t   off_refs;               /**< @brief Offset of @p refs field.    */
  69:../../../os/rt/include/chregistry.h ****   uint8_t   off_preempt;            /**< @brief Offset of @p ticks field.   */
  70:../../../os/rt/include/chregistry.h ****   uint8_t   off_time;               /**< @brief Offset of @p time field.    */
  71:../../../os/rt/include/chregistry.h ****   uint8_t   off_reserved[4];
  72:../../../os/rt/include/chregistry.h ****   uint8_t   intctxsize;             /**< @brief Size of a @p port_intctx.   */
  73:../../../os/rt/include/chregistry.h ****   uint8_t   intervalsize;           /**< @brief Size of a @p sysinterval_t. */
  74:../../../os/rt/include/chregistry.h ****   uint8_t   instancesnum;           /**< @brief Number of instances.        */
  75:../../../os/rt/include/chregistry.h ****   uint8_t   off_sys_state;          /**< @brief Offset of @p state field.   */
  76:../../../os/rt/include/chregistry.h ****   uint8_t   off_sys_instances;      /**< @brief Offset of @p instances array
  77:../../../os/rt/include/chregistry.h ****                                                 field.                      */
  78:../../../os/rt/include/chregistry.h ****   uint8_t   off_sys_reglist;        /**< @brief Offset of @p reglist field. */
  79:../../../os/rt/include/chregistry.h ****   uint8_t   off_sys_rfcu;           /**< @brief Offset of @p rfcu field.    */
  80:../../../os/rt/include/chregistry.h ****   uint8_t   off_sys_reserved[4];
  81:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rlist_current; /**< @brief Offset of @p rlist.current
  82:../../../os/rt/include/chregistry.h ****                                                 field.                      */
  83:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rlist;         /**< @brief Offset of @p rlist field.   */
  84:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_vtlist;        /**< @brief Offset of @p vtlist field.  */
  85:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_reglist;       /**< @brief Offset of @p reglist field. */
  86:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_core_id;       /**< @brief Offset of @p core_id field. */
  87:../../../os/rt/include/chregistry.h ****   uint8_t   off_inst_rfcu;          /**< @brief Offset of @p rfcu field.    */
  88:../../../os/rt/include/chregistry.h **** } chdebug_t;
  89:../../../os/rt/include/chregistry.h **** 
  90:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  91:../../../os/rt/include/chregistry.h **** /* Module macros.                                                            */
  92:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
  93:../../../os/rt/include/chregistry.h **** 
  94:../../../os/rt/include/chregistry.h **** /**
  95:../../../os/rt/include/chregistry.h ****  * @brief   Access to the registry list header.
  96:../../../os/rt/include/chregistry.h ****  */
  97:../../../os/rt/include/chregistry.h **** #if (CH_CFG_SMP_MODE == TRUE) || defined(__DOXYGEN__)
  98:../../../os/rt/include/chregistry.h **** #define REG_HEADER(oip) (&ch_system.reglist.queue)
  99:../../../os/rt/include/chregistry.h **** #else
 100:../../../os/rt/include/chregistry.h **** #define REG_HEADER(oip) (&(oip)->reglist.queue)
 101:../../../os/rt/include/chregistry.h **** #endif
 102:../../../os/rt/include/chregistry.h **** 
 103:../../../os/rt/include/chregistry.h **** /**
 104:../../../os/rt/include/chregistry.h ****  * @brief   Removes a thread from the registry list.
 105:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
 106:../../../os/rt/include/chregistry.h ****  *
 107:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to remove from the registry
 108:../../../os/rt/include/chregistry.h ****  */
 109:../../../os/rt/include/chregistry.h **** #define REG_REMOVE(tp) (void) ch_queue_dequeue(&(tp)->rqueue)
 110:../../../os/rt/include/chregistry.h **** 
 111:../../../os/rt/include/chregistry.h **** /**
 112:../../../os/rt/include/chregistry.h ****  * @brief   Adds a thread to the registry list.
 113:../../../os/rt/include/chregistry.h ****  * @note    This macro is not meant for use in application code.
 114:../../../os/rt/include/chregistry.h ****  *
 115:../../../os/rt/include/chregistry.h ****  * @param[in] oip       pointer to the OS instance
 116:../../../os/rt/include/chregistry.h ****  * @param[in] tp        thread to add to the registry
 117:../../../os/rt/include/chregistry.h ****  */
 118:../../../os/rt/include/chregistry.h **** #define REG_INSERT(oip, tp) ch_queue_insert(REG_HEADER(oip), &(tp)->rqueue)
 119:../../../os/rt/include/chregistry.h **** 
 120:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 121:../../../os/rt/include/chregistry.h **** /* External declarations.                                                    */
 122:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 123:../../../os/rt/include/chregistry.h **** 
 124:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 125:../../../os/rt/include/chregistry.h **** extern "C" {
 126:../../../os/rt/include/chregistry.h **** #endif
 127:../../../os/rt/include/chregistry.h ****   extern ROMCONST chdebug_t ch_debug;
 128:../../../os/rt/include/chregistry.h ****   thread_t *chRegFirstThread(void);
 129:../../../os/rt/include/chregistry.h ****   thread_t *chRegNextThread(thread_t *tp);
 130:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByName(const char *name);
 131:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByPointer(thread_t *tp);
 132:../../../os/rt/include/chregistry.h ****   thread_t *chRegFindThreadByWorkingArea(stkalign_t *wa);
 133:../../../os/rt/include/chregistry.h **** #ifdef __cplusplus
 134:../../../os/rt/include/chregistry.h **** }
 135:../../../os/rt/include/chregistry.h **** #endif
 136:../../../os/rt/include/chregistry.h **** 
 137:../../../os/rt/include/chregistry.h **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 138:../../../os/rt/include/chregistry.h **** 
 139:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 140:../../../os/rt/include/chregistry.h **** /* Module inline functions.                                                  */
 141:../../../os/rt/include/chregistry.h **** /*===========================================================================*/
 142:../../../os/rt/include/chregistry.h **** 
 143:../../../os/rt/include/chregistry.h **** /**
 144:../../../os/rt/include/chregistry.h ****  * @brief   Initializes a registry.
 145:../../../os/rt/include/chregistry.h ****  * @note    Internal use only.
 146:../../../os/rt/include/chregistry.h ****  *
 147:../../../os/rt/include/chregistry.h ****  * @param[out] rp       pointer to a @p registry_t structure
 148:../../../os/rt/include/chregistry.h ****  *
 149:../../../os/rt/include/chregistry.h ****  * @init
 150:../../../os/rt/include/chregistry.h ****  */
 151:../../../os/rt/include/chregistry.h **** static inline void __reg_object_init(registry_t *rp) {
 152:../../../os/rt/include/chregistry.h **** 
 153:../../../os/rt/include/chregistry.h ****   ch_queue_init(&rp->queue);
 154:../../../os/rt/include/chregistry.h **** }
 155:../../../os/rt/include/chregistry.h **** 
 156:../../../os/rt/include/chregistry.h **** /**
 157:../../../os/rt/include/chregistry.h ****  * @brief   Sets the current thread name.
 158:../../../os/rt/include/chregistry.h ****  * @pre     This function only stores the pointer to the name if the option
 159:../../../os/rt/include/chregistry.h ****  *          @p CH_CFG_USE_REGISTRY is enabled else no action is performed.
 160:../../../os/rt/include/chregistry.h ****  *
 161:../../../os/rt/include/chregistry.h ****  * @param[in] name      thread name as a zero terminated string
 162:../../../os/rt/include/chregistry.h ****  *
 163:../../../os/rt/include/chregistry.h ****  * @api
 164:../../../os/rt/include/chregistry.h ****  */
 165:../../../os/rt/include/chregistry.h **** static inline void chRegSetThreadName(const char *name) {
 166:../../../os/rt/include/chregistry.h **** 
 167:../../../os/rt/include/chregistry.h **** #if CH_CFG_USE_REGISTRY == TRUE
 168:../../../os/rt/include/chregistry.h ****   __sch_get_currthread()->name = name;
  28               		.loc 2 168 0
  29 0000 E091 0000 		lds r30,ch0+5
  30 0004 F091 0000 		lds r31,ch0+5+1
  31 0008 80E0      		ldi r24,lo8(.LC0)
  32 000a 90E0      		ldi r25,hi8(.LC0)
  33               	.LVL1:
  34 000c 9687      		std Z+14,r25
  35 000e 8587      		std Z+13,r24
  36               	.L2:
  37               	.LBE5:
  38               	.LBE4:
  12:main.c        ****                                                não é utilizado (por isso o (void)arg). */
  13:main.c        ****   (void)arg;
  14:main.c        ****   chRegSetThreadName("Blinker");    //  Dá um nome à thread, útil para fins de depuração.
  15:main.c        ****   while (true) {                
  16:main.c        ****     palTogglePad(IOPORT4, 7);       /* Alterna o estado do pino 7 (LED ligado/desligado). Para sabe
  39               		.loc 1 16 0 discriminator 1
  40 0010 8BB1      		in r24,0xb
  41 0012 8058      		subi r24,lo8(-(-128))
  42 0014 8BB9      		out 0xb,r24
  17:main.c        ****     chThdSleepMilliseconds(500);   // faz a thread dormir por 1000 ms (1 segundo) antes de alternar
  43               		.loc 1 17 0 discriminator 1
  44 0016 84E8      		ldi r24,lo8(-124)
  45 0018 9EE1      		ldi r25,lo8(30)
  46 001a 0E94 0000 		call chThdSleep
  47               	.LVL2:
  48 001e 00C0      		rjmp .L2
  49               		.cfi_endproc
  50               	.LFE241:
  52               		.section	.text.startup.main,"ax",@progbits
  53               	.global	main
  55               	main:
  56               	.LFB242:
  18:main.c        ****   }
  19:main.c        **** }
  20:main.c        **** 
  21:main.c        **** /*
  22:main.c        ****  * Application entry point.
  23:main.c        ****  */
  24:main.c        **** int main(void) {
  57               		.loc 1 24 0
  58               		.cfi_startproc
  59               	/* prologue: function */
  60               	/* frame size = 0 */
  61               	/* stack size = 0 */
  62               	.L__stack_usage = 0
  25:main.c        **** 
  26:main.c        **** 
  27:main.c        ****   halInit();    
  63               		.loc 1 27 0
  64 0000 0E94 0000 		call halInit
  65               	.LVL3:
  28:main.c        ****   chSysInit();  
  66               		.loc 1 28 0
  67 0004 0E94 0000 		call chSysInit
  68               	.LVL4:
  29:main.c        **** 
  30:main.c        ****   chThdCreateStatic(waThread1, sizeof(waThread1), NORMALPRIO, Thread1, NULL); // Cria e inicia a th
  69               		.loc 1 30 0
  70 0008 00E0      		ldi r16,0
  71 000a 10E0      		ldi r17,0
  72 000c 20E0      		ldi r18,lo8(gs(Thread1))
  73 000e 30E0      		ldi r19,hi8(gs(Thread1))
  74 0010 40E8      		ldi r20,lo8(-128)
  75 0012 63E8      		ldi r22,lo8(-125)
  76 0014 70E0      		ldi r23,0
  77 0016 80E0      		ldi r24,lo8(waThread1)
  78 0018 90E0      		ldi r25,hi8(waThread1)
  79 001a 0E94 0000 		call chThdCreateStatic
  80               	.LVL5:
  81               	.L5:
  31:main.c        **** 
  32:main.c        **** 
  33:main.c        ****   while (true) {
  34:main.c        ****     chThdSleepMilliseconds(1000);
  82               		.loc 1 34 0 discriminator 1
  83 001e 88E0      		ldi r24,lo8(8)
  84 0020 9DE3      		ldi r25,lo8(61)
  85 0022 0E94 0000 		call chThdSleep
  86               	.LVL6:
  87 0026 00C0      		rjmp .L5
  88               		.cfi_endproc
  89               	.LFE242:
  91               		.section	.bss.waThread1,"aw",@nobits
  94               	waThread1:
  95 0000 0000 0000 		.zero	131
  95      0000 0000 
  95      0000 0000 
  95      0000 0000 
  95      0000 0000 
  96               		.text
  97               	.Letext0:
  98               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
  99               		.file 4 "/usr/lib/avr/include/stdint.h"
 100               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 101               		.file 6 "../../../os/rt/include/chearly.h"
 102               		.file 7 "../../../os/rt/include/chobjects.h"
 103               		.file 8 "../../../os/rt/include/chrfcu.h"
 104               		.file 9 "../../../os/rt/include/chdebug.h"
 105               		.file 10 "../../../os/rt/include/chtime.h"
 106               		.file 11 "../../../os/rt/include/chlists.h"
 107               		.file 12 "../../../os/common/ports/AVR/chcore.h"
 108               		.file 13 "../../../os/rt/include/chsem.h"
 109               		.file 14 "../../../os/rt/include/chmtx.h"
 110               		.file 15 "../../../os/hal/ports/AVR/MEGA/LLD/GPIOv1/hal_pal_lld.h"
 111               		.file 16 "../../../os/rt/include/chthreads.h"
 112               		.file 17 "../../../os/hal/include/hal.h"
 113               		.file 18 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
     /tmp/ccVoXmZV.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVoXmZV.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVoXmZV.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVoXmZV.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVoXmZV.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVoXmZV.s:15     .text.Thread1:0000000000000000 Thread1
     /tmp/ccVoXmZV.s:55     .text.startup.main:0000000000000000 main
     /tmp/ccVoXmZV.s:94     .bss.waThread1:0000000000000000 waThread1

UNDEFINED SYMBOLS
ch0
chThdSleep
halInit
chSysInit
chThdCreateStatic
__do_copy_data
__do_clear_bss
