   1               		.file	"chevents.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chEvtObjectInit,"ax",@progbits
  11               	.global	chEvtObjectInit
  13               	chEvtObjectInit:
  14               	.LFB198:
  15               		.file 1 "../../../os/rt/src/chevents.c"
   1:../../../os/rt/src/chevents.c **** /*
   2:../../../os/rt/src/chevents.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chevents.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chevents.c **** 
   5:../../../os/rt/src/chevents.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chevents.c **** 
   7:../../../os/rt/src/chevents.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chevents.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chevents.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chevents.c **** 
  11:../../../os/rt/src/chevents.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chevents.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chevents.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chevents.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chevents.c **** 
  16:../../../os/rt/src/chevents.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chevents.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chevents.c **** */
  19:../../../os/rt/src/chevents.c **** /*
  20:../../../os/rt/src/chevents.c ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/src/chevents.c ****  */
  22:../../../os/rt/src/chevents.c **** 
  23:../../../os/rt/src/chevents.c **** /**
  24:../../../os/rt/src/chevents.c ****  * @file    rt/src/chevents.c
  25:../../../os/rt/src/chevents.c ****  * @brief   Events code.
  26:../../../os/rt/src/chevents.c ****  *
  27:../../../os/rt/src/chevents.c ****  * @addtogroup events
  28:../../../os/rt/src/chevents.c ****  * @details Event Flags, Event Sources and Event Listeners.
  29:../../../os/rt/src/chevents.c ****  *          <h2>Operation mode</h2>
  30:../../../os/rt/src/chevents.c ****  *          Each thread has a mask of pending events inside its
  31:../../../os/rt/src/chevents.c ****  *          @p thread_t structure.
  32:../../../os/rt/src/chevents.c ****  *          Operations defined for events:
  33:../../../os/rt/src/chevents.c ****  *          - <b>Wait</b>, the invoking thread goes to sleep until a certain
  34:../../../os/rt/src/chevents.c ****  *            AND/OR combination of events are signaled.
  35:../../../os/rt/src/chevents.c ****  *          - <b>Clear</b>, a mask of events is cleared from the pending
  36:../../../os/rt/src/chevents.c ****  *            events, the cleared events mask is returned (only the
  37:../../../os/rt/src/chevents.c ****  *            events that were actually pending and then cleared).
  38:../../../os/rt/src/chevents.c ****  *          - <b>Signal</b>, an events mask is directly ORed to the mask of
  39:../../../os/rt/src/chevents.c ****  *            the signaled thread.
  40:../../../os/rt/src/chevents.c ****  *          - <b>Broadcast</b>, each thread registered on an Event Source is
  41:../../../os/rt/src/chevents.c ****  *            signaled with the events specified in its Event Listener.
  42:../../../os/rt/src/chevents.c ****  *          - <b>Dispatch</b>, an events mask is scanned and for each bit set
  43:../../../os/rt/src/chevents.c ****  *            to one an associated handler function is invoked. Bit masks are
  44:../../../os/rt/src/chevents.c ****  *            scanned from bit zero upward.
  45:../../../os/rt/src/chevents.c ****  *          .
  46:../../../os/rt/src/chevents.c ****  *          An Event Source is a special object that can be "broadcasted" by
  47:../../../os/rt/src/chevents.c ****  *          a thread or an interrupt service routine. Broadcasting an Event
  48:../../../os/rt/src/chevents.c ****  *          Source has the effect that all the threads registered on the
  49:../../../os/rt/src/chevents.c ****  *          Event Source will be signaled with an events mask.<br>
  50:../../../os/rt/src/chevents.c ****  *          An unlimited number of Event Sources can exists in a system and
  51:../../../os/rt/src/chevents.c ****  *          each thread can be listening on an unlimited number of
  52:../../../os/rt/src/chevents.c ****  *          them.
  53:../../../os/rt/src/chevents.c ****  * @pre     In order to use the Events APIs the @p CH_CFG_USE_EVENTS option
  54:../../../os/rt/src/chevents.c ****  *          must be enabled in @p chconf.h.
  55:../../../os/rt/src/chevents.c ****  * @post    Enabling events requires 1-4 (depending on the architecture)
  56:../../../os/rt/src/chevents.c ****  *          extra bytes in the @p thread_t structure.
  57:../../../os/rt/src/chevents.c ****  * @{
  58:../../../os/rt/src/chevents.c ****  */
  59:../../../os/rt/src/chevents.c **** 
  60:../../../os/rt/src/chevents.c **** #include <string.h>
  61:../../../os/rt/src/chevents.c **** 
  62:../../../os/rt/src/chevents.c **** #include "ch.h"
  63:../../../os/rt/src/chevents.c **** 
  64:../../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  65:../../../os/rt/src/chevents.c **** 
  66:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  67:../../../os/rt/src/chevents.c **** /* Module local definitions.                                                 */
  68:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  69:../../../os/rt/src/chevents.c **** 
  70:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  71:../../../os/rt/src/chevents.c **** /* Module exported variables.                                                */
  72:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  73:../../../os/rt/src/chevents.c **** 
  74:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  75:../../../os/rt/src/chevents.c **** /* Module local types.                                                       */
  76:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  77:../../../os/rt/src/chevents.c **** 
  78:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  79:../../../os/rt/src/chevents.c **** /* Module local variables.                                                   */
  80:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  81:../../../os/rt/src/chevents.c **** 
  82:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  83:../../../os/rt/src/chevents.c **** /* Module local functions.                                                   */
  84:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  85:../../../os/rt/src/chevents.c **** 
  86:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  87:../../../os/rt/src/chevents.c **** /* Module exported functions.                                                */
  88:../../../os/rt/src/chevents.c **** /*===========================================================================*/
  89:../../../os/rt/src/chevents.c **** 
  90:../../../os/rt/src/chevents.c **** /**
  91:../../../os/rt/src/chevents.c ****  * @brief   Initializes an Event Source.
  92:../../../os/rt/src/chevents.c ****  * @note    This function can be invoked before the kernel is initialized
  93:../../../os/rt/src/chevents.c ****  *          because it just prepares a @p event_source_t object.
  94:../../../os/rt/src/chevents.c ****  *
  95:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
  96:../../../os/rt/src/chevents.c ****  *
  97:../../../os/rt/src/chevents.c ****  * @init
  98:../../../os/rt/src/chevents.c ****  */
  99:../../../os/rt/src/chevents.c **** void chEvtObjectInit(event_source_t *esp) {
  16               		.loc 1 99 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
 100:../../../os/rt/src/chevents.c **** 
 101:../../../os/rt/src/chevents.c ****   chDbgCheck(esp != NULL);
 102:../../../os/rt/src/chevents.c **** 
 103:../../../os/rt/src/chevents.c ****   esp->next = (event_listener_t *)esp;
  23               		.loc 1 103 0
  24 0000 FC01      		movw r30,r24
  25 0002 9183      		std Z+1,r25
  26 0004 8083      		st Z,r24
  27 0006 0895      		ret
  28               		.cfi_endproc
  29               	.LFE198:
  31               		.section	.text.chEvtObjectDispose,"ax",@progbits
  32               	.global	chEvtObjectDispose
  34               	chEvtObjectDispose:
  35               	.LFB199:
 104:../../../os/rt/src/chevents.c **** }
 105:../../../os/rt/src/chevents.c **** 
 106:../../../os/rt/src/chevents.c **** /**
 107:../../../os/rt/src/chevents.c ****  * @brief   Disposes an Event Source.
 108:../../../os/rt/src/chevents.c ****  * @note    Objects disposing does not involve freeing memory but just
 109:../../../os/rt/src/chevents.c ****  *          performing checks that make sure that the object is in a
 110:../../../os/rt/src/chevents.c ****  *          state compatible with operations stop.
 111:../../../os/rt/src/chevents.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 112:../../../os/rt/src/chevents.c ****  *          the object is also cleared, attempts to use the object would likely
 113:../../../os/rt/src/chevents.c ****  *          result in a clean memory access violation because dereferencing
 114:../../../os/rt/src/chevents.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 115:../../../os/rt/src/chevents.c ****  *          pointers.
 116:../../../os/rt/src/chevents.c ****  *
 117:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 118:../../../os/rt/src/chevents.c ****  *
 119:../../../os/rt/src/chevents.c ****  * @dispose
 120:../../../os/rt/src/chevents.c ****  */
 121:../../../os/rt/src/chevents.c **** void chEvtObjectDispose(event_source_t *esp) {
  36               		.loc 1 121 0
  37               		.cfi_startproc
  38               	.LVL1:
  39               	/* prologue: function */
  40               	/* frame size = 0 */
  41               	/* stack size = 0 */
  42               	.L__stack_usage = 0
  43 0000 0895      		ret
  44               		.cfi_endproc
  45               	.LFE199:
  47               		.section	.text.chEvtRegisterMaskWithFlagsI,"ax",@progbits
  48               	.global	chEvtRegisterMaskWithFlagsI
  50               	chEvtRegisterMaskWithFlagsI:
  51               	.LFB200:
 122:../../../os/rt/src/chevents.c **** 
 123:../../../os/rt/src/chevents.c ****   chDbgCheck(esp != NULL);
 124:../../../os/rt/src/chevents.c ****   chDbgAssert(esp->next != (event_listener_t *)esp, "object in use");
 125:../../../os/rt/src/chevents.c **** 
 126:../../../os/rt/src/chevents.c **** #if CH_CFG_HARDENING_LEVEL > 0
 127:../../../os/rt/src/chevents.c ****   memset((void *)esp, 0, sizeof (event_source_t));
 128:../../../os/rt/src/chevents.c **** #endif
 129:../../../os/rt/src/chevents.c **** }
 130:../../../os/rt/src/chevents.c **** 
 131:../../../os/rt/src/chevents.c **** /**
 132:../../../os/rt/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
 133:../../../os/rt/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
 134:../../../os/rt/src/chevents.c ****  *          will be notified of all events broadcasted there.
 135:../../../os/rt/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 136:../../../os/rt/src/chevents.c ****  *          different threads.
 137:../../../os/rt/src/chevents.c ****  *
 138:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 139:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to an @p event_listener_t structure
 140:../../../os/rt/src/chevents.c ****  * @param[in] events    events to be ORed to the thread when
 141:../../../os/rt/src/chevents.c ****  *                      the event source is broadcasted
 142:../../../os/rt/src/chevents.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
 143:../../../os/rt/src/chevents.c ****  *
 144:../../../os/rt/src/chevents.c ****  * @iclass
 145:../../../os/rt/src/chevents.c ****  */
 146:../../../os/rt/src/chevents.c **** void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
 147:../../../os/rt/src/chevents.c ****                                  event_listener_t *elp,
 148:../../../os/rt/src/chevents.c ****                                  eventmask_t events,
 149:../../../os/rt/src/chevents.c ****                                  eventflags_t wflags) {
  52               		.loc 1 149 0
  53               		.cfi_startproc
  54               	.LVL2:
  55               		.loc 1 149 0
  56 0000 CF93      		push r28
  57               	.LCFI0:
  58               		.cfi_def_cfa_offset 3
  59               		.cfi_offset 28, -2
  60 0002 DF93      		push r29
  61               	.LCFI1:
  62               		.cfi_def_cfa_offset 4
  63               		.cfi_offset 29, -3
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* stack size = 2 */
  67               	.L__stack_usage = 2
  68 0004 FB01      		movw r30,r22
  69               	.LBB160:
  70               	.LBB161:
  71               		.file 2 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
  72               		.loc 2 375 0
  73 0006 6091 0000 		lds r22,ch0+5
  74 000a 7091 0000 		lds r23,ch0+5+1
  75               	.LVL3:
  76               	.LBE161:
  77               	.LBE160:
 150:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 151:../../../os/rt/src/chevents.c **** 
 152:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 153:../../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 154:../../../os/rt/src/chevents.c **** 
 155:../../../os/rt/src/chevents.c ****   elp->next     = esp->next;
  78               		.loc 1 155 0
  79 000e EC01      		movw r28,r24
  80 0010 A881      		ld r26,Y
  81 0012 B981      		ldd r27,Y+1
  82 0014 B183      		std Z+1,r27
  83 0016 A083      		st Z,r26
 156:../../../os/rt/src/chevents.c ****   esp->next     = elp;
  84               		.loc 1 156 0
  85 0018 F983      		std Y+1,r31
  86 001a E883      		st Y,r30
 157:../../../os/rt/src/chevents.c ****   elp->listener = currtp;
  87               		.loc 1 157 0
  88 001c 7383      		std Z+3,r23
  89 001e 6283      		std Z+2,r22
 158:../../../os/rt/src/chevents.c ****   elp->events   = events;
  90               		.loc 1 158 0
  91 0020 4483      		std Z+4,r20
 159:../../../os/rt/src/chevents.c ****   elp->flags    = (eventflags_t)0;
  92               		.loc 1 159 0
  93 0022 1582      		std Z+5,__zero_reg__
 160:../../../os/rt/src/chevents.c ****   elp->wflags   = wflags;
  94               		.loc 1 160 0
  95 0024 2683      		std Z+6,r18
  96               	/* epilogue start */
 161:../../../os/rt/src/chevents.c **** }
  97               		.loc 1 161 0
  98 0026 DF91      		pop r29
  99 0028 CF91      		pop r28
 100 002a 0895      		ret
 101               		.cfi_endproc
 102               	.LFE200:
 104               		.section	.text.chEvtRegisterMaskWithFlags,"ax",@progbits
 105               	.global	chEvtRegisterMaskWithFlags
 107               	chEvtRegisterMaskWithFlags:
 108               	.LFB201:
 162:../../../os/rt/src/chevents.c **** 
 163:../../../os/rt/src/chevents.c **** /**
 164:../../../os/rt/src/chevents.c ****  * @brief   Registers an Event Listener on an Event Source.
 165:../../../os/rt/src/chevents.c ****  * @details Once a thread has registered as listener on an event source it
 166:../../../os/rt/src/chevents.c ****  *          will be notified of all events broadcasted there.
 167:../../../os/rt/src/chevents.c ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 168:../../../os/rt/src/chevents.c ****  *          different threads.
 169:../../../os/rt/src/chevents.c ****  *
 170:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 171:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to an @p event_listener_t structure
 172:../../../os/rt/src/chevents.c ****  * @param[in] events    events to be ORed to the thread when
 173:../../../os/rt/src/chevents.c ****  *                      the event source is broadcasted
 174:../../../os/rt/src/chevents.c ****  * @param[in] wflags    mask of flags the listening thread is interested in
 175:../../../os/rt/src/chevents.c ****  *
 176:../../../os/rt/src/chevents.c ****  * @api
 177:../../../os/rt/src/chevents.c ****  */
 178:../../../os/rt/src/chevents.c **** void chEvtRegisterMaskWithFlags(event_source_t *esp,
 179:../../../os/rt/src/chevents.c ****                                 event_listener_t *elp,
 180:../../../os/rt/src/chevents.c ****                                 eventmask_t events,
 181:../../../os/rt/src/chevents.c ****                                 eventflags_t wflags) {
 109               		.loc 1 181 0
 110               		.cfi_startproc
 111               	.LVL4:
 112 0000 CF93      		push r28
 113               	.LCFI2:
 114               		.cfi_def_cfa_offset 3
 115               		.cfi_offset 28, -2
 116 0002 DF93      		push r29
 117               	.LCFI3:
 118               		.cfi_def_cfa_offset 4
 119               		.cfi_offset 29, -3
 120               	/* prologue: function */
 121               	/* frame size = 0 */
 122               	/* stack size = 2 */
 123               	.L__stack_usage = 2
 124 0004 FB01      		movw r30,r22
 125               	.LBB162:
 126               	.LBB163:
 127               	.LBB164:
 128               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 129               		.loc 3 430 0
 130               	/* #APP */
 131               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 132 0006 F894      		cli
 133               	 ;  0 "" 2
 134               	.LVL5:
 135               	/* #NOAPP */
 136               	.LBE164:
 137               	.LBE163:
 138               	.LBE162:
 139               	.LBB165:
 140               	.LBB166:
 141               	.LBB167:
 142               	.LBB168:
 143               		.loc 2 375 0
 144 0008 6091 0000 		lds r22,ch0+5
 145 000c 7091 0000 		lds r23,ch0+5+1
 146               	.LVL6:
 147               	.LBE168:
 148               	.LBE167:
 155:../../../os/rt/src/chevents.c ****   esp->next     = elp;
 149               		.loc 1 155 0
 150 0010 EC01      		movw r28,r24
 151 0012 A881      		ld r26,Y
 152 0014 B981      		ldd r27,Y+1
 153 0016 B183      		std Z+1,r27
 154 0018 A083      		st Z,r26
 156:../../../os/rt/src/chevents.c ****   elp->listener = currtp;
 155               		.loc 1 156 0
 156 001a F983      		std Y+1,r31
 157 001c E883      		st Y,r30
 157:../../../os/rt/src/chevents.c ****   elp->events   = events;
 158               		.loc 1 157 0
 159 001e 7383      		std Z+3,r23
 160 0020 6283      		std Z+2,r22
 158:../../../os/rt/src/chevents.c ****   elp->flags    = (eventflags_t)0;
 161               		.loc 1 158 0
 162 0022 4483      		std Z+4,r20
 159:../../../os/rt/src/chevents.c ****   elp->wflags   = wflags;
 163               		.loc 1 159 0
 164 0024 1582      		std Z+5,__zero_reg__
 160:../../../os/rt/src/chevents.c **** }
 165               		.loc 1 160 0
 166 0026 2683      		std Z+6,r18
 167               	.LVL7:
 168               	.LBE166:
 169               	.LBE165:
 170               	.LBB169:
 171               	.LBB170:
 172               	.LBB171:
 173               	.LBB172:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 174               		.loc 3 440 0
 175               	/* #APP */
 176               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 177 0028 7894      		sei
 178               	 ;  0 "" 2
 179               	/* epilogue start */
 180               	/* #NOAPP */
 181               	.LBE172:
 182               	.LBE171:
 183               	.LBE170:
 184               	.LBE169:
 182:../../../os/rt/src/chevents.c **** 
 183:../../../os/rt/src/chevents.c ****   chSysLock();
 184:../../../os/rt/src/chevents.c ****   chEvtRegisterMaskWithFlagsI(esp, elp, events, wflags);
 185:../../../os/rt/src/chevents.c ****   chSysUnlock();
 186:../../../os/rt/src/chevents.c **** }
 185               		.loc 1 186 0
 186 002a DF91      		pop r29
 187 002c CF91      		pop r28
 188 002e 0895      		ret
 189               		.cfi_endproc
 190               	.LFE201:
 192               		.section	.text.chEvtUnregister,"ax",@progbits
 193               	.global	chEvtUnregister
 195               	chEvtUnregister:
 196               	.LFB202:
 187:../../../os/rt/src/chevents.c **** 
 188:../../../os/rt/src/chevents.c **** /**
 189:../../../os/rt/src/chevents.c ****  * @brief   Unregisters an Event Listener from its Event Source.
 190:../../../os/rt/src/chevents.c ****  * @note    If the event listener is not registered on the specified event
 191:../../../os/rt/src/chevents.c ****  *          source then the function does nothing.
 192:../../../os/rt/src/chevents.c ****  * @note    For optimal performance it is better to perform the unregister
 193:../../../os/rt/src/chevents.c ****  *          operations in inverse order of the register operations (elements
 194:../../../os/rt/src/chevents.c ****  *          are found on top of the list).
 195:../../../os/rt/src/chevents.c ****  *
 196:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 197:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to an @p event_listener_t structure
 198:../../../os/rt/src/chevents.c ****  *
 199:../../../os/rt/src/chevents.c ****  * @api
 200:../../../os/rt/src/chevents.c ****  */
 201:../../../os/rt/src/chevents.c **** void chEvtUnregister(event_source_t *esp, event_listener_t *elp) {
 197               		.loc 1 201 0
 198               		.cfi_startproc
 199               	.LVL8:
 200               	/* prologue: function */
 201               	/* frame size = 0 */
 202               	/* stack size = 0 */
 203               	.L__stack_usage = 0
 204               	.LBB173:
 205               	.LBB174:
 206               	.LBB175:
 430:../../../os/common/ports/AVR/chcore.h **** }
 207               		.loc 3 430 0
 208               	/* #APP */
 209               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 210 0000 F894      		cli
 211               	 ;  0 "" 2
 212               	/* #NOAPP */
 213               	.LBE175:
 214               	.LBE174:
 215               	.LBE173:
 202:../../../os/rt/src/chevents.c ****   event_listener_t *p;
 203:../../../os/rt/src/chevents.c **** 
 204:../../../os/rt/src/chevents.c ****   chDbgCheck((esp != NULL) && (elp != NULL));
 205:../../../os/rt/src/chevents.c **** 
 206:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 207:../../../os/rt/src/chevents.c ****   p = (event_listener_t *)esp;
 216               		.loc 1 207 0
 217 0002 FC01      		movw r30,r24
 218 0004 00C0      		rjmp .L6
 219               	.LVL9:
 220               	.L8:
 208:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 209:../../../os/rt/src/chevents.c ****   chSysLock();
 210:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 211:../../../os/rt/src/chevents.c ****   while (p->next != (event_listener_t *)esp) {
 212:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 213:../../../os/rt/src/chevents.c ****     if (p->next == elp) {
 221               		.loc 1 213 0
 222 0006 2617      		cp r18,r22
 223 0008 3707      		cpc r19,r23
 224 000a 01F0      		breq .L11
 225 000c F901      		movw r30,r18
 226               	.LVL10:
 227               	.L6:
 211:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 228               		.loc 1 211 0
 229 000e 2081      		ld r18,Z
 230 0010 3181      		ldd r19,Z+1
 231 0012 8217      		cp r24,r18
 232 0014 9307      		cpc r25,r19
 233 0016 01F4      		brne .L8
 234               	.LBB176:
 235               	.LBB177:
 236               	.LBB178:
 237               	.LBB179:
 238               		.loc 3 440 0
 239               	/* #APP */
 240               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 241 0018 7894      		sei
 242               	 ;  0 "" 2
 243               	/* #NOAPP */
 244 001a 0895      		ret
 245               	.L11:
 246               	.LBE179:
 247               	.LBE178:
 248               	.LBE177:
 249               	.LBE176:
 214:../../../os/rt/src/chevents.c ****       p->next = elp->next;
 250               		.loc 1 214 0
 251 001c DB01      		movw r26,r22
 252 001e 8D91      		ld r24,X+
 253 0020 9C91      		ld r25,X
 254               	.LVL11:
 255 0022 9183      		std Z+1,r25
 256 0024 8083      		st Z,r24
 257               	.LBB183:
 258               	.LBB182:
 259               	.LBB181:
 260               	.LBB180:
 261               		.loc 3 440 0
 262               	/* #APP */
 263               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 264 0026 7894      		sei
 265               	 ;  0 "" 2
 266               	/* #NOAPP */
 267 0028 0895      		ret
 268               	.LBE180:
 269               	.LBE181:
 270               	.LBE182:
 271               	.LBE183:
 272               		.cfi_endproc
 273               	.LFE202:
 275               		.section	.text.chEvtGetAndClearEventsI,"ax",@progbits
 276               	.global	chEvtGetAndClearEventsI
 278               	chEvtGetAndClearEventsI:
 279               	.LFB203:
 215:../../../os/rt/src/chevents.c ****       break;
 216:../../../os/rt/src/chevents.c ****     }
 217:../../../os/rt/src/chevents.c ****     p = p->next;
 218:../../../os/rt/src/chevents.c ****   }
 219:../../../os/rt/src/chevents.c ****   chSysUnlock();
 220:../../../os/rt/src/chevents.c **** }
 221:../../../os/rt/src/chevents.c **** 
 222:../../../os/rt/src/chevents.c **** /**
 223:../../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 224:../../../os/rt/src/chevents.c ****  *
 225:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 226:../../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 227:../../../os/rt/src/chevents.c ****  *
 228:../../../os/rt/src/chevents.c ****  * @iclass
 229:../../../os/rt/src/chevents.c ****  */
 230:../../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEventsI(eventmask_t events) {
 280               		.loc 1 230 0
 281               		.cfi_startproc
 282               	.LVL12:
 283               	/* prologue: function */
 284               	/* frame size = 0 */
 285               	/* stack size = 0 */
 286               	.L__stack_usage = 0
 287               	.LBB184:
 288               	.LBB185:
 289               		.loc 2 375 0
 290 0000 E091 0000 		lds r30,ch0+5
 291 0004 F091 0000 		lds r31,ch0+5+1
 292               	.LBE185:
 293               	.LBE184:
 231:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 232:../../../os/rt/src/chevents.c ****   eventmask_t m;
 233:../../../os/rt/src/chevents.c **** 
 234:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 235:../../../os/rt/src/chevents.c **** 
 236:../../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 294               		.loc 1 236 0
 295 0008 228D      		ldd r18,Z+26
 296               	.LVL13:
 237:../../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 297               		.loc 1 237 0
 298 000a 982F      		mov r25,r24
 299 000c 9095      		com r25
 300 000e 9223      		and r25,r18
 301 0010 928F      		std Z+26,r25
 238:../../../os/rt/src/chevents.c **** 
 239:../../../os/rt/src/chevents.c ****   return m;
 240:../../../os/rt/src/chevents.c **** }
 302               		.loc 1 240 0
 303 0012 8223      		and r24,r18
 304               	.LVL14:
 305 0014 0895      		ret
 306               		.cfi_endproc
 307               	.LFE203:
 309               		.section	.text.chEvtGetAndClearEvents,"ax",@progbits
 310               	.global	chEvtGetAndClearEvents
 312               	chEvtGetAndClearEvents:
 313               	.LFB204:
 241:../../../os/rt/src/chevents.c **** 
 242:../../../os/rt/src/chevents.c **** /**
 243:../../../os/rt/src/chevents.c ****  * @brief   Clears the pending events specified in the events mask.
 244:../../../os/rt/src/chevents.c ****  *
 245:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be cleared
 246:../../../os/rt/src/chevents.c ****  * @return              The mask of pending events that were cleared.
 247:../../../os/rt/src/chevents.c ****  *
 248:../../../os/rt/src/chevents.c ****  * @api
 249:../../../os/rt/src/chevents.c ****  */
 250:../../../os/rt/src/chevents.c **** eventmask_t chEvtGetAndClearEvents(eventmask_t events) {
 314               		.loc 1 250 0
 315               		.cfi_startproc
 316               	.LVL15:
 317               	/* prologue: function */
 318               	/* frame size = 0 */
 319               	/* stack size = 0 */
 320               	.L__stack_usage = 0
 321               	.LBB186:
 322               	.LBB187:
 323               	.LBB188:
 430:../../../os/common/ports/AVR/chcore.h **** }
 324               		.loc 3 430 0
 325               	/* #APP */
 326               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 327 0000 F894      		cli
 328               	 ;  0 "" 2
 329               	.LVL16:
 330               	/* #NOAPP */
 331               	.LBE188:
 332               	.LBE187:
 333               	.LBE186:
 334               	.LBB189:
 335               	.LBB190:
 336               	.LBB191:
 337               	.LBB192:
 338               		.loc 2 375 0
 339 0002 E091 0000 		lds r30,ch0+5
 340 0006 F091 0000 		lds r31,ch0+5+1
 341               	.LBE192:
 342               	.LBE191:
 236:../../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 343               		.loc 1 236 0
 344 000a 228D      		ldd r18,Z+26
 345               	.LVL17:
 237:../../../os/rt/src/chevents.c **** 
 346               		.loc 1 237 0
 347 000c 982F      		mov r25,r24
 348 000e 9095      		com r25
 349 0010 9223      		and r25,r18
 350 0012 928F      		std Z+26,r25
 351               	.LVL18:
 352               	.LBE190:
 353               	.LBE189:
 354               	.LBB193:
 355               	.LBB194:
 356               	.LBB195:
 357               	.LBB196:
 358               		.loc 3 440 0
 359               	/* #APP */
 360               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 361 0014 7894      		sei
 362               	 ;  0 "" 2
 363               	/* #NOAPP */
 364               	.LBE196:
 365               	.LBE195:
 366               	.LBE194:
 367               	.LBE193:
 251:../../../os/rt/src/chevents.c ****   eventmask_t m;
 252:../../../os/rt/src/chevents.c **** 
 253:../../../os/rt/src/chevents.c ****   chSysLock();
 254:../../../os/rt/src/chevents.c ****   m = chEvtGetAndClearEventsI(events);
 255:../../../os/rt/src/chevents.c ****   chSysUnlock();
 256:../../../os/rt/src/chevents.c **** 
 257:../../../os/rt/src/chevents.c ****   return m;
 258:../../../os/rt/src/chevents.c **** }
 368               		.loc 1 258 0
 369 0016 8223      		and r24,r18
 370               	.LVL19:
 371 0018 0895      		ret
 372               		.cfi_endproc
 373               	.LFE204:
 375               		.section	.text.chEvtAddEvents,"ax",@progbits
 376               	.global	chEvtAddEvents
 378               	chEvtAddEvents:
 379               	.LFB205:
 259:../../../os/rt/src/chevents.c **** 
 260:../../../os/rt/src/chevents.c **** /**
 261:../../../os/rt/src/chevents.c ****  * @brief   Adds (OR) a set of events to the current thread, this is
 262:../../../os/rt/src/chevents.c ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 263:../../../os/rt/src/chevents.c ****  *
 264:../../../os/rt/src/chevents.c ****  * @param[in] events    the events to be added
 265:../../../os/rt/src/chevents.c ****  * @return              The mask of currently pending events.
 266:../../../os/rt/src/chevents.c ****  *
 267:../../../os/rt/src/chevents.c ****  * @api
 268:../../../os/rt/src/chevents.c ****  */
 269:../../../os/rt/src/chevents.c **** eventmask_t chEvtAddEvents(eventmask_t events) {
 380               		.loc 1 269 0
 381               		.cfi_startproc
 382               	.LVL20:
 383               	/* prologue: function */
 384               	/* frame size = 0 */
 385               	/* stack size = 0 */
 386               	.L__stack_usage = 0
 387               	.LBB197:
 388               	.LBB198:
 389               	.LBB199:
 430:../../../os/common/ports/AVR/chcore.h **** }
 390               		.loc 3 430 0
 391               	/* #APP */
 392               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 393 0000 F894      		cli
 394               	 ;  0 "" 2
 395               	.LVL21:
 396               	/* #NOAPP */
 397               	.LBE199:
 398               	.LBE198:
 399               	.LBE197:
 400               	.LBB200:
 401               	.LBB201:
 402               		.file 4 "../../../os/rt/include/chevents.h"
   1:../../../os/rt/include/chevents.h **** /*
   2:../../../os/rt/include/chevents.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chevents.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chevents.h **** 
   5:../../../os/rt/include/chevents.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chevents.h **** 
   7:../../../os/rt/include/chevents.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chevents.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chevents.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chevents.h **** 
  11:../../../os/rt/include/chevents.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chevents.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chevents.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chevents.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chevents.h **** 
  16:../../../os/rt/include/chevents.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chevents.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chevents.h **** */
  19:../../../os/rt/include/chevents.h **** /*
  20:../../../os/rt/include/chevents.h ****    Concepts and parts of this file have been contributed by Scott (skute).
  21:../../../os/rt/include/chevents.h ****  */
  22:../../../os/rt/include/chevents.h **** 
  23:../../../os/rt/include/chevents.h **** /**
  24:../../../os/rt/include/chevents.h ****  * @file    rt/include/chevents.h
  25:../../../os/rt/include/chevents.h ****  * @brief   Events macros and structures.
  26:../../../os/rt/include/chevents.h ****  *
  27:../../../os/rt/include/chevents.h ****  * @addtogroup events
  28:../../../os/rt/include/chevents.h ****  * @{
  29:../../../os/rt/include/chevents.h ****  */
  30:../../../os/rt/include/chevents.h **** 
  31:../../../os/rt/include/chevents.h **** #ifndef CHEVENTS_H
  32:../../../os/rt/include/chevents.h **** #define CHEVENTS_H
  33:../../../os/rt/include/chevents.h **** 
  34:../../../os/rt/include/chevents.h **** #if (CH_CFG_USE_EVENTS == TRUE) || defined(__DOXYGEN__)
  35:../../../os/rt/include/chevents.h **** 
  36:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  37:../../../os/rt/include/chevents.h **** /* Module constants.                                                         */
  38:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  39:../../../os/rt/include/chevents.h **** 
  40:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  41:../../../os/rt/include/chevents.h **** /* Module pre-compile time settings.                                         */
  42:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  43:../../../os/rt/include/chevents.h **** 
  44:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  45:../../../os/rt/include/chevents.h **** /* Derived constants and error checks.                                       */
  46:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  47:../../../os/rt/include/chevents.h **** 
  48:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  49:../../../os/rt/include/chevents.h **** /* Module data structures and types.                                         */
  50:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  51:../../../os/rt/include/chevents.h **** 
  52:../../../os/rt/include/chevents.h **** /**
  53:../../../os/rt/include/chevents.h ****  * @brief   Type of an Event Listener object.
  54:../../../os/rt/include/chevents.h ****  */
  55:../../../os/rt/include/chevents.h **** typedef struct event_listener event_listener_t;
  56:../../../os/rt/include/chevents.h **** 
  57:../../../os/rt/include/chevents.h **** /**
  58:../../../os/rt/include/chevents.h ****  * @brief   Event Listener structure.
  59:../../../os/rt/include/chevents.h ****  */
  60:../../../os/rt/include/chevents.h **** struct event_listener {
  61:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief Next Event Listener
  62:../../../os/rt/include/chevents.h ****                                                     registered on the event
  63:../../../os/rt/include/chevents.h ****                                                     source.                 */
  64:../../../os/rt/include/chevents.h ****   thread_t              *listener;      /**< @brief Thread interested in the
  65:../../../os/rt/include/chevents.h ****                                                     event source.           */
  66:../../../os/rt/include/chevents.h ****   eventmask_t           events;         /**< @brief Events to be set in
  67:../../../os/rt/include/chevents.h ****                                                     the listening thread.   */
  68:../../../os/rt/include/chevents.h ****   eventflags_t          flags;          /**< @brief Flags added to the listener
  69:../../../os/rt/include/chevents.h ****                                                     by the event source.    */
  70:../../../os/rt/include/chevents.h ****   eventflags_t          wflags;         /**< @brief Flags that this listener
  71:../../../os/rt/include/chevents.h ****                                                     interested in.          */
  72:../../../os/rt/include/chevents.h **** };
  73:../../../os/rt/include/chevents.h **** 
  74:../../../os/rt/include/chevents.h **** /**
  75:../../../os/rt/include/chevents.h ****  * @brief   Type of an Event Source object.
  76:../../../os/rt/include/chevents.h ****  */
  77:../../../os/rt/include/chevents.h **** typedef struct event_source {
  78:../../../os/rt/include/chevents.h ****   event_listener_t      *next;          /**< @brief First Event Listener
  79:../../../os/rt/include/chevents.h ****                                                     registered on the Event
  80:../../../os/rt/include/chevents.h ****                                                     Source.                 */
  81:../../../os/rt/include/chevents.h **** } event_source_t;
  82:../../../os/rt/include/chevents.h **** 
  83:../../../os/rt/include/chevents.h **** /**
  84:../../../os/rt/include/chevents.h ****  * @brief   Event Handler callback function.
  85:../../../os/rt/include/chevents.h ****  */
  86:../../../os/rt/include/chevents.h **** typedef void (*evhandler_t)(eventid_t id);
  87:../../../os/rt/include/chevents.h **** 
  88:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  89:../../../os/rt/include/chevents.h **** /* Module macros.                                                            */
  90:../../../os/rt/include/chevents.h **** /*===========================================================================*/
  91:../../../os/rt/include/chevents.h **** 
  92:../../../os/rt/include/chevents.h **** /**
  93:../../../os/rt/include/chevents.h ****  * @brief   All events allowed mask.
  94:../../../os/rt/include/chevents.h ****  */
  95:../../../os/rt/include/chevents.h **** #define ALL_EVENTS      ((eventmask_t)-1)
  96:../../../os/rt/include/chevents.h **** 
  97:../../../os/rt/include/chevents.h **** /**
  98:../../../os/rt/include/chevents.h ****  * @brief   Returns an event mask from an event identifier.
  99:../../../os/rt/include/chevents.h ****  */
 100:../../../os/rt/include/chevents.h **** #define EVENT_MASK(eid) ((eventmask_t)1 << (eventmask_t)(eid))
 101:../../../os/rt/include/chevents.h **** 
 102:../../../os/rt/include/chevents.h **** /**
 103:../../../os/rt/include/chevents.h ****  * @brief   Data part of a static event source initializer.
 104:../../../os/rt/include/chevents.h ****  * @details This macro should be used when statically initializing an event
 105:../../../os/rt/include/chevents.h ****  *          source that is part of a bigger structure.
 106:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 107:../../../os/rt/include/chevents.h ****  */
 108:../../../os/rt/include/chevents.h **** #define __EVENTSOURCE_DATA(name) {(event_listener_t *)(&name)}
 109:../../../os/rt/include/chevents.h **** 
 110:../../../os/rt/include/chevents.h **** /**
 111:../../../os/rt/include/chevents.h ****  * @brief   Static event source initializer.
 112:../../../os/rt/include/chevents.h ****  * @details Statically initialized event sources require no explicit
 113:../../../os/rt/include/chevents.h ****  *          initialization using @p chEvtInit().
 114:../../../os/rt/include/chevents.h ****  *
 115:../../../os/rt/include/chevents.h ****  * @param name          the name of the event source variable
 116:../../../os/rt/include/chevents.h ****  */
 117:../../../os/rt/include/chevents.h **** #define EVENTSOURCE_DECL(name) event_source_t name = __EVENTSOURCE_DATA(name)
 118:../../../os/rt/include/chevents.h **** 
 119:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 120:../../../os/rt/include/chevents.h **** /* External declarations.                                                    */
 121:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 122:../../../os/rt/include/chevents.h **** 
 123:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 124:../../../os/rt/include/chevents.h **** extern "C" {
 125:../../../os/rt/include/chevents.h **** #endif
 126:../../../os/rt/include/chevents.h ****   void chEvtObjectInit(event_source_t *esp);
 127:../../../os/rt/include/chevents.h ****   void chEvtObjectDispose(event_source_t *esp);
 128:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlagsI(event_source_t *esp,
 129:../../../os/rt/include/chevents.h ****                                    event_listener_t *elp,
 130:../../../os/rt/include/chevents.h ****                                    eventmask_t events,
 131:../../../os/rt/include/chevents.h ****                                    eventflags_t wflags);
 132:../../../os/rt/include/chevents.h ****   void chEvtRegisterMaskWithFlags(event_source_t *esp,
 133:../../../os/rt/include/chevents.h ****                                   event_listener_t *elp,
 134:../../../os/rt/include/chevents.h ****                                   eventmask_t events,
 135:../../../os/rt/include/chevents.h ****                                   eventflags_t wflags);
 136:../../../os/rt/include/chevents.h ****   void chEvtUnregister(event_source_t *esp, event_listener_t *elp);
 137:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEventsI(eventmask_t events);
 138:../../../os/rt/include/chevents.h ****   eventmask_t chEvtGetAndClearEvents(eventmask_t events);
 139:../../../os/rt/include/chevents.h ****   eventmask_t chEvtAddEvents(eventmask_t events);
 140:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp);
 141:../../../os/rt/include/chevents.h ****   eventflags_t chEvtGetAndClearFlags(event_listener_t *elp);
 142:../../../os/rt/include/chevents.h ****   void chEvtSignal(thread_t *tp, eventmask_t events);
 143:../../../os/rt/include/chevents.h ****   void chEvtSignalI(thread_t *tp, eventmask_t events);
 144:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags);
 145:../../../os/rt/include/chevents.h ****   void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags);
 146:../../../os/rt/include/chevents.h ****   void chEvtDispatch(const evhandler_t *handlers, eventmask_t events);
 147:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) || (CH_CFG_USE_EVENTS_TIMEOUT == FALSE)
 148:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOne(eventmask_t events);
 149:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAny(eventmask_t events);
 150:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAll(eventmask_t events);
 151:../../../os/rt/include/chevents.h **** #endif
 152:../../../os/rt/include/chevents.h **** #if CH_CFG_USE_EVENTS_TIMEOUT == TRUE
 153:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout);
 154:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout);
 155:../../../os/rt/include/chevents.h ****   eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout);
 156:../../../os/rt/include/chevents.h **** #endif
 157:../../../os/rt/include/chevents.h **** #ifdef __cplusplus
 158:../../../os/rt/include/chevents.h **** }
 159:../../../os/rt/include/chevents.h **** #endif
 160:../../../os/rt/include/chevents.h **** 
 161:../../../os/rt/include/chevents.h **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) && (CH_CFG_USE_EVENTS_TIMEOUT == TRUE)
 162:../../../os/rt/include/chevents.h **** #define chEvtWaitOne(mask) chEvtWaitOneTimeout(mask, TIME_INFINITE)
 163:../../../os/rt/include/chevents.h **** #define chEvtWaitAny(mask) chEvtWaitAnyTimeout(mask, TIME_INFINITE)
 164:../../../os/rt/include/chevents.h **** #define chEvtWaitAll(mask) chEvtWaitAllTimeout(mask, TIME_INFINITE)
 165:../../../os/rt/include/chevents.h **** #endif
 166:../../../os/rt/include/chevents.h **** 
 167:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 168:../../../os/rt/include/chevents.h **** /* Module inline functions.                                                  */
 169:../../../os/rt/include/chevents.h **** /*===========================================================================*/
 170:../../../os/rt/include/chevents.h **** 
 171:../../../os/rt/include/chevents.h **** /**
 172:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 173:../../../os/rt/include/chevents.h ****  * @details Once a thread has registered as listener on an event source it
 174:../../../os/rt/include/chevents.h ****  *          will be notified of all events broadcasted there.
 175:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can specify the same bits to be ORed to
 176:../../../os/rt/include/chevents.h ****  *          different threads.
 177:../../../os/rt/include/chevents.h ****  *
 178:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to an @p event_source_t object
 179:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to an @p event_listener_t structure
 180:../../../os/rt/include/chevents.h ****  * @param[in] events    the mask of events to be ORed to the thread when
 181:../../../os/rt/include/chevents.h ****  *                      the event source is broadcasted
 182:../../../os/rt/include/chevents.h ****  *
 183:../../../os/rt/include/chevents.h ****  * @api
 184:../../../os/rt/include/chevents.h ****  */
 185:../../../os/rt/include/chevents.h **** static inline void chEvtRegisterMask(event_source_t *esp,
 186:../../../os/rt/include/chevents.h ****                                      event_listener_t *elp,
 187:../../../os/rt/include/chevents.h ****                                      eventmask_t events) {
 188:../../../os/rt/include/chevents.h **** 
 189:../../../os/rt/include/chevents.h ****   chEvtRegisterMaskWithFlags(esp, elp, events, (eventflags_t)-1);
 190:../../../os/rt/include/chevents.h **** }
 191:../../../os/rt/include/chevents.h **** 
 192:../../../os/rt/include/chevents.h **** /**
 193:../../../os/rt/include/chevents.h ****  * @brief   Registers an Event Listener on an Event Source.
 194:../../../os/rt/include/chevents.h ****  * @note    Multiple Event Listeners can use the same event identifier, the
 195:../../../os/rt/include/chevents.h ****  *          listener will share the callback function.
 196:../../../os/rt/include/chevents.h ****  *
 197:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to an @p event_source_t object
 198:../../../os/rt/include/chevents.h ****  * @param[out] elp      pointer to an @p event_listener_t structure
 199:../../../os/rt/include/chevents.h ****  * @param[in] event     numeric identifier assigned to the Event Listener.
 200:../../../os/rt/include/chevents.h ****  *                      The value must range between zero and the size, in bit,
 201:../../../os/rt/include/chevents.h ****  *                      of the @p eventmask_t type minus one.
 202:../../../os/rt/include/chevents.h ****  *
 203:../../../os/rt/include/chevents.h ****  * @api
 204:../../../os/rt/include/chevents.h ****  */
 205:../../../os/rt/include/chevents.h **** static inline void chEvtRegister(event_source_t *esp,
 206:../../../os/rt/include/chevents.h ****                                  event_listener_t *elp,
 207:../../../os/rt/include/chevents.h ****                                  eventid_t event) {
 208:../../../os/rt/include/chevents.h **** 
 209:../../../os/rt/include/chevents.h ****   chEvtRegisterMask(esp, elp, EVENT_MASK(event));
 210:../../../os/rt/include/chevents.h **** }
 211:../../../os/rt/include/chevents.h **** 
 212:../../../os/rt/include/chevents.h **** /**
 213:../../../os/rt/include/chevents.h ****  * @brief   Verifies if there is at least one @p event_listener_t registered.
 214:../../../os/rt/include/chevents.h ****  *
 215:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to an @p event_source_t object
 216:../../../os/rt/include/chevents.h ****  * @return              The event source status.
 217:../../../os/rt/include/chevents.h ****  *
 218:../../../os/rt/include/chevents.h ****  * @iclass
 219:../../../os/rt/include/chevents.h ****  */
 220:../../../os/rt/include/chevents.h **** static inline bool chEvtIsListeningI(event_source_t *esp) {
 221:../../../os/rt/include/chevents.h **** 
 222:../../../os/rt/include/chevents.h ****   return (bool)(esp != (event_source_t *)esp->next);
 223:../../../os/rt/include/chevents.h **** }
 224:../../../os/rt/include/chevents.h **** 
 225:../../../os/rt/include/chevents.h **** /**
 226:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 227:../../../os/rt/include/chevents.h ****  *          Source.
 228:../../../os/rt/include/chevents.h ****  *
 229:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to an @p event_source_t object
 230:../../../os/rt/include/chevents.h ****  *
 231:../../../os/rt/include/chevents.h ****  * @api
 232:../../../os/rt/include/chevents.h ****  */
 233:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcast(event_source_t *esp) {
 234:../../../os/rt/include/chevents.h **** 
 235:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlags(esp, (eventflags_t)0);
 236:../../../os/rt/include/chevents.h **** }
 237:../../../os/rt/include/chevents.h **** 
 238:../../../os/rt/include/chevents.h **** /**
 239:../../../os/rt/include/chevents.h ****  * @brief   Signals all the Event Listeners registered on the specified Event
 240:../../../os/rt/include/chevents.h ****  *          Source.
 241:../../../os/rt/include/chevents.h ****  * @post    This function does not reschedule so a call to a rescheduling
 242:../../../os/rt/include/chevents.h ****  *          function must be performed before unlocking the kernel. Note that
 243:../../../os/rt/include/chevents.h ****  *          interrupt handlers always reschedule on exit so an explicit
 244:../../../os/rt/include/chevents.h ****  *          reschedule must not be performed in ISRs.
 245:../../../os/rt/include/chevents.h ****  *
 246:../../../os/rt/include/chevents.h ****  * @param[in] esp       pointer to an @p event_source_t object
 247:../../../os/rt/include/chevents.h ****  *
 248:../../../os/rt/include/chevents.h ****  * @iclass
 249:../../../os/rt/include/chevents.h ****  */
 250:../../../os/rt/include/chevents.h **** static inline void chEvtBroadcastI(event_source_t *esp) {
 251:../../../os/rt/include/chevents.h **** 
 252:../../../os/rt/include/chevents.h ****   chEvtBroadcastFlagsI(esp, (eventflags_t)0);
 253:../../../os/rt/include/chevents.h **** }
 254:../../../os/rt/include/chevents.h **** 
 255:../../../os/rt/include/chevents.h **** /**
 256:../../../os/rt/include/chevents.h ****  * @brief   Adds (OR) a set of events to the current thread, this is
 257:../../../os/rt/include/chevents.h ****  *          @b much faster than using @p chEvtBroadcast() or @p chEvtSignal().
 258:../../../os/rt/include/chevents.h ****  *
 259:../../../os/rt/include/chevents.h ****  * @param[in] events    the events to be added
 260:../../../os/rt/include/chevents.h ****  * @return              The mask of currently pending events.
 261:../../../os/rt/include/chevents.h ****  *
 262:../../../os/rt/include/chevents.h ****  * @iclass
 263:../../../os/rt/include/chevents.h ****  */
 264:../../../os/rt/include/chevents.h **** static inline eventmask_t chEvtAddEventsI(eventmask_t events) {
 265:../../../os/rt/include/chevents.h **** 
 266:../../../os/rt/include/chevents.h ****   return __sch_get_currthread()->epending |= events;
 403               		.loc 4 266 0
 404 0002 E091 0000 		lds r30,ch0+5
 405 0006 F091 0000 		lds r31,ch0+5+1
 406 000a 928D      		ldd r25,Z+26
 407 000c 892B      		or r24,r25
 408               	.LVL22:
 409 000e 828F      		std Z+26,r24
 410               	.LVL23:
 411               	.LBE201:
 412               	.LBE200:
 413               	.LBB202:
 414               	.LBB203:
 415               	.LBB204:
 416               	.LBB205:
 417               		.loc 3 440 0
 418               	/* #APP */
 419               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 420 0010 7894      		sei
 421               	 ;  0 "" 2
 422               	/* #NOAPP */
 423               	.LBE205:
 424               	.LBE204:
 425               	.LBE203:
 426               	.LBE202:
 270:../../../os/rt/src/chevents.c ****   eventmask_t newevt;
 271:../../../os/rt/src/chevents.c **** 
 272:../../../os/rt/src/chevents.c ****   chSysLock();
 273:../../../os/rt/src/chevents.c ****   newevt = chEvtAddEventsI(events);
 274:../../../os/rt/src/chevents.c ****   chSysUnlock();
 275:../../../os/rt/src/chevents.c **** 
 276:../../../os/rt/src/chevents.c ****   return newevt;
 277:../../../os/rt/src/chevents.c **** }
 427               		.loc 1 277 0
 428 0012 0895      		ret
 429               		.cfi_endproc
 430               	.LFE205:
 432               		.section	.text.chEvtGetAndClearFlagsI,"ax",@progbits
 433               	.global	chEvtGetAndClearFlagsI
 435               	chEvtGetAndClearFlagsI:
 436               	.LFB206:
 278:../../../os/rt/src/chevents.c **** 
 279:../../../os/rt/src/chevents.c **** /**
 280:../../../os/rt/src/chevents.c ****  * @brief   Returns the unmasked flags associated to an @p event_listener_t.
 281:../../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 282:../../../os/rt/src/chevents.c ****  *          cleared.
 283:../../../os/rt/src/chevents.c ****  *
 284:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to an @p event_listener_t structure
 285:../../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 286:../../../os/rt/src/chevents.c ****  *                      event source.
 287:../../../os/rt/src/chevents.c ****  *
 288:../../../os/rt/src/chevents.c ****  * @iclass
 289:../../../os/rt/src/chevents.c ****  */
 290:../../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlagsI(event_listener_t *elp) {
 437               		.loc 1 290 0
 438               		.cfi_startproc
 439               	.LVL24:
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 0 */
 443               	.L__stack_usage = 0
 444 0000 FC01      		movw r30,r24
 291:../../../os/rt/src/chevents.c ****   eventflags_t flags;
 292:../../../os/rt/src/chevents.c **** 
 293:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 294:../../../os/rt/src/chevents.c ****   chDbgCheck(elp != NULL);
 295:../../../os/rt/src/chevents.c **** 
 296:../../../os/rt/src/chevents.c ****   flags = elp->flags;
 445               		.loc 1 296 0
 446 0002 9581      		ldd r25,Z+5
 447               	.LVL25:
 297:../../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 448               		.loc 1 297 0
 449 0004 1582      		std Z+5,__zero_reg__
 298:../../../os/rt/src/chevents.c **** 
 299:../../../os/rt/src/chevents.c ****   return flags & elp->wflags;
 450               		.loc 1 299 0
 451 0006 8681      		ldd r24,Z+6
 452               	.LVL26:
 300:../../../os/rt/src/chevents.c **** }
 453               		.loc 1 300 0
 454 0008 8923      		and r24,r25
 455 000a 0895      		ret
 456               		.cfi_endproc
 457               	.LFE206:
 459               		.section	.text.chEvtGetAndClearFlags,"ax",@progbits
 460               	.global	chEvtGetAndClearFlags
 462               	chEvtGetAndClearFlags:
 463               	.LFB207:
 301:../../../os/rt/src/chevents.c **** 
 302:../../../os/rt/src/chevents.c **** /**
 303:../../../os/rt/src/chevents.c ****  * @brief   Returns the flags associated to an @p event_listener_t.
 304:../../../os/rt/src/chevents.c ****  * @details The flags are returned and the @p event_listener_t flags mask is
 305:../../../os/rt/src/chevents.c ****  *          cleared.
 306:../../../os/rt/src/chevents.c ****  *
 307:../../../os/rt/src/chevents.c ****  * @param[in] elp       pointer to an @p event_listener_t structure
 308:../../../os/rt/src/chevents.c ****  * @return              The flags added to the listener by the associated
 309:../../../os/rt/src/chevents.c ****  *                      event source.
 310:../../../os/rt/src/chevents.c ****  *
 311:../../../os/rt/src/chevents.c ****  * @api
 312:../../../os/rt/src/chevents.c ****  */
 313:../../../os/rt/src/chevents.c **** eventflags_t chEvtGetAndClearFlags(event_listener_t *elp) {
 464               		.loc 1 313 0
 465               		.cfi_startproc
 466               	.LVL27:
 467               	/* prologue: function */
 468               	/* frame size = 0 */
 469               	/* stack size = 0 */
 470               	.L__stack_usage = 0
 471 0000 FC01      		movw r30,r24
 472               	.LBB206:
 473               	.LBB207:
 474               	.LBB208:
 430:../../../os/common/ports/AVR/chcore.h **** }
 475               		.loc 3 430 0
 476               	/* #APP */
 477               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 478 0002 F894      		cli
 479               	 ;  0 "" 2
 480               	/* #NOAPP */
 481               	.LBE208:
 482               	.LBE207:
 483               	.LBE206:
 314:../../../os/rt/src/chevents.c ****   eventflags_t flags;
 315:../../../os/rt/src/chevents.c **** 
 316:../../../os/rt/src/chevents.c ****   chDbgCheck(elp != NULL);
 317:../../../os/rt/src/chevents.c **** 
 318:../../../os/rt/src/chevents.c ****   chSysLock();
 319:../../../os/rt/src/chevents.c ****   flags = elp->flags;
 484               		.loc 1 319 0
 485 0004 9581      		ldd r25,Z+5
 486               	.LVL28:
 320:../../../os/rt/src/chevents.c ****   elp->flags = (eventflags_t)0;
 487               		.loc 1 320 0
 488 0006 1582      		std Z+5,__zero_reg__
 489               	.LBB209:
 490               	.LBB210:
 491               	.LBB211:
 492               	.LBB212:
 493               		.loc 3 440 0
 494               	/* #APP */
 495               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 496 0008 7894      		sei
 497               	 ;  0 "" 2
 498               	/* #NOAPP */
 499               	.LBE212:
 500               	.LBE211:
 501               	.LBE210:
 502               	.LBE209:
 321:../../../os/rt/src/chevents.c ****   chSysUnlock();
 322:../../../os/rt/src/chevents.c **** 
 323:../../../os/rt/src/chevents.c ****   return flags & elp->wflags;
 503               		.loc 1 323 0
 504 000a 8681      		ldd r24,Z+6
 505               	.LVL29:
 324:../../../os/rt/src/chevents.c **** }
 506               		.loc 1 324 0
 507 000c 8923      		and r24,r25
 508 000e 0895      		ret
 509               		.cfi_endproc
 510               	.LFE207:
 512               		.section	.text.chEvtSignalI,"ax",@progbits
 513               	.global	chEvtSignalI
 515               	chEvtSignalI:
 516               	.LFB208:
 325:../../../os/rt/src/chevents.c **** 
 326:../../../os/rt/src/chevents.c **** /**
 327:../../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 328:../../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 329:../../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 330:../../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 331:../../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 332:../../../os/rt/src/chevents.c ****  *
 333:../../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 334:../../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 335:../../../os/rt/src/chevents.c ****  *
 336:../../../os/rt/src/chevents.c ****  * @iclass
 337:../../../os/rt/src/chevents.c ****  */
 338:../../../os/rt/src/chevents.c **** void chEvtSignalI(thread_t *tp, eventmask_t events) {
 517               		.loc 1 338 0
 518               		.cfi_startproc
 519               	.LVL30:
 520               	/* prologue: function */
 521               	/* frame size = 0 */
 522               	/* stack size = 0 */
 523               	.L__stack_usage = 0
 524 0000 FC01      		movw r30,r24
 339:../../../os/rt/src/chevents.c **** 
 340:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 341:../../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 342:../../../os/rt/src/chevents.c **** 
 343:../../../os/rt/src/chevents.c ****   tp->epending |= events;
 525               		.loc 1 343 0
 526 0002 928D      		ldd r25,Z+26
 527 0004 692B      		or r22,r25
 528               	.LVL31:
 529 0006 628F      		std Z+26,r22
 344:../../../os/rt/src/chevents.c ****   /* Test on the AND/OR conditions wait states.*/
 345:../../../os/rt/src/chevents.c ****   if (((tp->state == CH_STATE_WTOREVT) &&
 530               		.loc 1 345 0
 531 0008 8785      		ldd r24,Z+15
 532               	.LVL32:
 533 000a 8A30      		cpi r24,lo8(10)
 534 000c 01F0      		breq .L21
 346:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 535               		.loc 1 346 0
 536 000e 8B30      		cpi r24,lo8(11)
 537 0010 01F0      		breq .L22
 538               	.L17:
 539 0012 0895      		ret
 540               	.L22:
 347:../../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 348:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) == tp->u.ewmask))) {
 541               		.loc 1 348 0
 542 0014 8289      		ldd r24,Z+18
 347:../../../os/rt/src/chevents.c ****       ((tp->state == CH_STATE_WTANDEVT) &&
 543               		.loc 1 347 0
 544 0016 6823      		and r22,r24
 545 0018 8613      		cpse r24,r22
 546 001a 00C0      		rjmp .L17
 547               	.L19:
 349:../../../os/rt/src/chevents.c ****     tp->u.rdymsg = MSG_OK;
 548               		.loc 1 349 0
 549 001c 138A      		std Z+19,__zero_reg__
 550 001e 128A      		std Z+18,__zero_reg__
 350:../../../os/rt/src/chevents.c ****     (void) chSchReadyI(tp);
 551               		.loc 1 350 0
 552 0020 CF01      		movw r24,r30
 553 0022 0C94 0000 		jmp chSchReadyI
 554               	.LVL33:
 555               	.L21:
 345:../../../os/rt/src/chevents.c ****        ((tp->epending & tp->u.ewmask) != (eventmask_t)0)) ||
 556               		.loc 1 345 0 discriminator 1
 557 0026 8289      		ldd r24,Z+18
 558 0028 6823      		and r22,r24
 559 002a 01F4      		brne .L19
 560 002c 0895      		ret
 561               		.cfi_endproc
 562               	.LFE208:
 564               		.section	.text.chEvtSignal,"ax",@progbits
 565               	.global	chEvtSignal
 567               	chEvtSignal:
 568               	.LFB209:
 351:../../../os/rt/src/chevents.c ****   }
 352:../../../os/rt/src/chevents.c **** }
 353:../../../os/rt/src/chevents.c **** 
 354:../../../os/rt/src/chevents.c **** /**
 355:../../../os/rt/src/chevents.c ****  * @brief   Adds a set of event flags directly to the specified @p thread_t.
 356:../../../os/rt/src/chevents.c ****  *
 357:../../../os/rt/src/chevents.c ****  * @param[in] tp        the thread to be signaled
 358:../../../os/rt/src/chevents.c ****  * @param[in] events    the events set to be ORed
 359:../../../os/rt/src/chevents.c ****  *
 360:../../../os/rt/src/chevents.c ****  * @api
 361:../../../os/rt/src/chevents.c ****  */
 362:../../../os/rt/src/chevents.c **** void chEvtSignal(thread_t *tp, eventmask_t events) {
 569               		.loc 1 362 0
 570               		.cfi_startproc
 571               	.LVL34:
 572               	/* prologue: function */
 573               	/* frame size = 0 */
 574               	/* stack size = 0 */
 575               	.L__stack_usage = 0
 576               	.LBB213:
 577               	.LBB214:
 578               	.LBB215:
 430:../../../os/common/ports/AVR/chcore.h **** }
 579               		.loc 3 430 0
 580               	/* #APP */
 581               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 582 0000 F894      		cli
 583               	 ;  0 "" 2
 584               	/* #NOAPP */
 585               	.LBE215:
 586               	.LBE214:
 587               	.LBE213:
 363:../../../os/rt/src/chevents.c **** 
 364:../../../os/rt/src/chevents.c ****   chDbgCheck(tp != NULL);
 365:../../../os/rt/src/chevents.c **** 
 366:../../../os/rt/src/chevents.c ****   chSysLock();
 367:../../../os/rt/src/chevents.c ****   chEvtSignalI(tp, events);
 588               		.loc 1 367 0
 589 0002 0E94 0000 		call chEvtSignalI
 590               	.LVL35:
 368:../../../os/rt/src/chevents.c ****   chSchRescheduleS();
 591               		.loc 1 368 0
 592 0006 0E94 0000 		call chSchRescheduleS
 593               	.LVL36:
 594               	.LBB216:
 595               	.LBB217:
 596               	.LBB218:
 597               	.LBB219:
 598               		.loc 3 440 0
 599               	/* #APP */
 600               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 601 000a 7894      		sei
 602               	 ;  0 "" 2
 603               	/* #NOAPP */
 604 000c 0895      		ret
 605               	.LBE219:
 606               	.LBE218:
 607               	.LBE217:
 608               	.LBE216:
 609               		.cfi_endproc
 610               	.LFE209:
 612               		.section	.text.chEvtBroadcastFlagsI,"ax",@progbits
 613               	.global	chEvtBroadcastFlagsI
 615               	chEvtBroadcastFlagsI:
 616               	.LFB210:
 369:../../../os/rt/src/chevents.c ****   chSysUnlock();
 370:../../../os/rt/src/chevents.c **** }
 371:../../../os/rt/src/chevents.c **** 
 372:../../../os/rt/src/chevents.c **** /**
 373:../../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 374:../../../os/rt/src/chevents.c ****  *          Source.
 375:../../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 376:../../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 377:../../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 378:../../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 379:../../../os/rt/src/chevents.c ****  * @post    This function does not reschedule so a call to a rescheduling
 380:../../../os/rt/src/chevents.c ****  *          function must be performed before unlocking the kernel. Note that
 381:../../../os/rt/src/chevents.c ****  *          interrupt handlers always reschedule on exit so an explicit
 382:../../../os/rt/src/chevents.c ****  *          reschedule must not be performed in ISRs.
 383:../../../os/rt/src/chevents.c ****  *
 384:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 385:../../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 386:../../../os/rt/src/chevents.c ****  *
 387:../../../os/rt/src/chevents.c ****  * @iclass
 388:../../../os/rt/src/chevents.c ****  */
 389:../../../os/rt/src/chevents.c **** void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
 617               		.loc 1 389 0
 618               		.cfi_startproc
 619               	.LVL37:
 620 0000 EF92      		push r14
 621               	.LCFI4:
 622               		.cfi_def_cfa_offset 3
 623               		.cfi_offset 14, -2
 624 0002 FF92      		push r15
 625               	.LCFI5:
 626               		.cfi_def_cfa_offset 4
 627               		.cfi_offset 15, -3
 628 0004 1F93      		push r17
 629               	.LCFI6:
 630               		.cfi_def_cfa_offset 5
 631               		.cfi_offset 17, -4
 632 0006 CF93      		push r28
 633               	.LCFI7:
 634               		.cfi_def_cfa_offset 6
 635               		.cfi_offset 28, -5
 636 0008 DF93      		push r29
 637               	.LCFI8:
 638               		.cfi_def_cfa_offset 7
 639               		.cfi_offset 29, -6
 640               	/* prologue: function */
 641               	/* frame size = 0 */
 642               	/* stack size = 5 */
 643               	.L__stack_usage = 5
 644 000a 7C01      		movw r14,r24
 645 000c 162F      		mov r17,r22
 390:../../../os/rt/src/chevents.c ****   event_listener_t *elp;
 391:../../../os/rt/src/chevents.c **** 
 392:../../../os/rt/src/chevents.c ****   chDbgCheckClassI();
 393:../../../os/rt/src/chevents.c ****   chDbgCheck(esp != NULL);
 394:../../../os/rt/src/chevents.c **** 
 395:../../../os/rt/src/chevents.c ****   elp = esp->next;
 646               		.loc 1 395 0
 647 000e FC01      		movw r30,r24
 648 0010 C081      		ld r28,Z
 649 0012 D181      		ldd r29,Z+1
 650               	.LVL38:
 396:../../../os/rt/src/chevents.c ****   /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
 397:../../../os/rt/src/chevents.c ****   while (elp != (event_listener_t *)esp) {
 651               		.loc 1 397 0
 652 0014 8C17      		cp r24,r28
 653 0016 9D07      		cpc r25,r29
 654 0018 01F0      		breq .L24
 655               	.LVL39:
 656               	.L34:
 398:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 399:../../../os/rt/src/chevents.c ****     elp->flags |= flags;
 657               		.loc 1 399 0
 658 001a 8D81      		ldd r24,Y+5
 659 001c 812B      		or r24,r17
 660 001e 8D83      		std Y+5,r24
 400:../../../os/rt/src/chevents.c ****     /* When flags == 0 the thread will always be signaled because the
 401:../../../os/rt/src/chevents.c ****        source does not emit any flag.*/
 402:../../../os/rt/src/chevents.c ****     if ((flags == (eventflags_t)0) ||
 661               		.loc 1 402 0
 662 0020 1123      		tst r17
 663 0022 01F0      		breq .L26
 664               		.loc 1 402 0 is_stmt 0 discriminator 1
 665 0024 8E81      		ldd r24,Y+6
 666 0026 8123      		and r24,r17
 667 0028 01F0      		breq .L27
 668               	.L26:
 403:../../../os/rt/src/chevents.c ****         ((flags & elp->wflags) != (eventflags_t)0)) {
 404:../../../os/rt/src/chevents.c ****       chEvtSignalI(elp->listener, elp->events);
 669               		.loc 1 404 0 is_stmt 1
 670 002a 6C81      		ldd r22,Y+4
 671 002c 8A81      		ldd r24,Y+2
 672 002e 9B81      		ldd r25,Y+3
 673 0030 0E94 0000 		call chEvtSignalI
 674               	.LVL40:
 675               	.L27:
 405:../../../os/rt/src/chevents.c ****     }
 406:../../../os/rt/src/chevents.c ****     elp = elp->next;
 676               		.loc 1 406 0
 677 0034 0990      		ld __tmp_reg__,Y+
 678 0036 D881      		ld r29,Y
 679 0038 C02D      		mov r28,__tmp_reg__
 680               	.LVL41:
 397:../../../os/rt/src/chevents.c ****   /*lint -restore*/
 681               		.loc 1 397 0
 682 003a EC16      		cp r14,r28
 683 003c FD06      		cpc r15,r29
 684 003e 01F4      		brne .L34
 685               	.L24:
 686               	/* epilogue start */
 407:../../../os/rt/src/chevents.c ****   }
 408:../../../os/rt/src/chevents.c **** }
 687               		.loc 1 408 0
 688 0040 DF91      		pop r29
 689 0042 CF91      		pop r28
 690               	.LVL42:
 691 0044 1F91      		pop r17
 692               	.LVL43:
 693 0046 FF90      		pop r15
 694 0048 EF90      		pop r14
 695               	.LVL44:
 696 004a 0895      		ret
 697               		.cfi_endproc
 698               	.LFE210:
 700               		.section	.text.chEvtBroadcastFlags,"ax",@progbits
 701               	.global	chEvtBroadcastFlags
 703               	chEvtBroadcastFlags:
 704               	.LFB211:
 409:../../../os/rt/src/chevents.c **** 
 410:../../../os/rt/src/chevents.c **** /**
 411:../../../os/rt/src/chevents.c ****  * @brief   Signals all the Event Listeners registered on the specified Event
 412:../../../os/rt/src/chevents.c ****  *          Source.
 413:../../../os/rt/src/chevents.c ****  * @details This function variants ORs the specified event flags to all the
 414:../../../os/rt/src/chevents.c ****  *          threads registered on the @p event_source_t in addition to the
 415:../../../os/rt/src/chevents.c ****  *          event flags specified by the threads themselves in the
 416:../../../os/rt/src/chevents.c ****  *          @p event_listener_t objects.
 417:../../../os/rt/src/chevents.c ****  *
 418:../../../os/rt/src/chevents.c ****  * @param[in] esp       pointer to an @p event_source_t object
 419:../../../os/rt/src/chevents.c ****  * @param[in] flags     the flags set to be added to the listener flags mask
 420:../../../os/rt/src/chevents.c ****  *
 421:../../../os/rt/src/chevents.c ****  * @api
 422:../../../os/rt/src/chevents.c ****  */
 423:../../../os/rt/src/chevents.c **** void chEvtBroadcastFlags(event_source_t *esp, eventflags_t flags) {
 705               		.loc 1 423 0
 706               		.cfi_startproc
 707               	.LVL45:
 708               	/* prologue: function */
 709               	/* frame size = 0 */
 710               	/* stack size = 0 */
 711               	.L__stack_usage = 0
 712               	.LBB220:
 713               	.LBB221:
 714               	.LBB222:
 430:../../../os/common/ports/AVR/chcore.h **** }
 715               		.loc 3 430 0
 716               	/* #APP */
 717               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 718 0000 F894      		cli
 719               	 ;  0 "" 2
 720               	/* #NOAPP */
 721               	.LBE222:
 722               	.LBE221:
 723               	.LBE220:
 424:../../../os/rt/src/chevents.c **** 
 425:../../../os/rt/src/chevents.c ****   chSysLock();
 426:../../../os/rt/src/chevents.c ****   chEvtBroadcastFlagsI(esp, flags);
 724               		.loc 1 426 0
 725 0002 0E94 0000 		call chEvtBroadcastFlagsI
 726               	.LVL46:
 427:../../../os/rt/src/chevents.c ****   chSchRescheduleS();
 727               		.loc 1 427 0
 728 0006 0E94 0000 		call chSchRescheduleS
 729               	.LVL47:
 730               	.LBB223:
 731               	.LBB224:
 732               	.LBB225:
 733               	.LBB226:
 734               		.loc 3 440 0
 735               	/* #APP */
 736               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 737 000a 7894      		sei
 738               	 ;  0 "" 2
 739               	/* #NOAPP */
 740 000c 0895      		ret
 741               	.LBE226:
 742               	.LBE225:
 743               	.LBE224:
 744               	.LBE223:
 745               		.cfi_endproc
 746               	.LFE211:
 748               		.section	.text.chEvtDispatch,"ax",@progbits
 749               	.global	chEvtDispatch
 751               	chEvtDispatch:
 752               	.LFB212:
 428:../../../os/rt/src/chevents.c ****   chSysUnlock();
 429:../../../os/rt/src/chevents.c **** }
 430:../../../os/rt/src/chevents.c **** 
 431:../../../os/rt/src/chevents.c **** /**
 432:../../../os/rt/src/chevents.c ****  * @brief   Invokes the event handlers associated to an event flags mask.
 433:../../../os/rt/src/chevents.c ****  *
 434:../../../os/rt/src/chevents.c ****  * @param[in] events    mask of events to be dispatched
 435:../../../os/rt/src/chevents.c ****  * @param[in] handlers  an array of @p evhandler_t. The array must have size
 436:../../../os/rt/src/chevents.c ****  *                      equal to the number of bits in eventmask_t.
 437:../../../os/rt/src/chevents.c ****  *
 438:../../../os/rt/src/chevents.c ****  * @api
 439:../../../os/rt/src/chevents.c ****  */
 440:../../../os/rt/src/chevents.c **** void chEvtDispatch(const evhandler_t *handlers, eventmask_t events) {
 753               		.loc 1 440 0
 754               		.cfi_startproc
 755               	.LVL48:
 756 0000 BF92      		push r11
 757               	.LCFI9:
 758               		.cfi_def_cfa_offset 3
 759               		.cfi_offset 11, -2
 760 0002 CF92      		push r12
 761               	.LCFI10:
 762               		.cfi_def_cfa_offset 4
 763               		.cfi_offset 12, -3
 764 0004 DF92      		push r13
 765               	.LCFI11:
 766               		.cfi_def_cfa_offset 5
 767               		.cfi_offset 13, -4
 768 0006 EF92      		push r14
 769               	.LCFI12:
 770               		.cfi_def_cfa_offset 6
 771               		.cfi_offset 14, -5
 772 0008 FF92      		push r15
 773               	.LCFI13:
 774               		.cfi_def_cfa_offset 7
 775               		.cfi_offset 15, -6
 776 000a 0F93      		push r16
 777               	.LCFI14:
 778               		.cfi_def_cfa_offset 8
 779               		.cfi_offset 16, -7
 780 000c 1F93      		push r17
 781               	.LCFI15:
 782               		.cfi_def_cfa_offset 9
 783               		.cfi_offset 17, -8
 784 000e CF93      		push r28
 785               	.LCFI16:
 786               		.cfi_def_cfa_offset 10
 787               		.cfi_offset 28, -9
 788 0010 DF93      		push r29
 789               	.LCFI17:
 790               		.cfi_def_cfa_offset 11
 791               		.cfi_offset 29, -10
 792               	/* prologue: function */
 793               	/* frame size = 0 */
 794               	/* stack size = 9 */
 795               	.L__stack_usage = 9
 796 0012 B62E      		mov r11,r22
 797               	.LVL49:
 441:../../../os/rt/src/chevents.c ****   eventid_t eid;
 442:../../../os/rt/src/chevents.c **** 
 443:../../../os/rt/src/chevents.c ****   chDbgCheck(handlers != NULL);
 444:../../../os/rt/src/chevents.c **** 
 445:../../../os/rt/src/chevents.c ****   eid = (eventid_t)0;
 446:../../../os/rt/src/chevents.c ****   while (events != (eventmask_t)0) {
 798               		.loc 1 446 0
 799 0014 6623      		tst r22
 800 0016 01F0      		breq .L39
 801 0018 EC01      		movw r28,r24
 802 001a C12C      		mov r12,__zero_reg__
 803 001c D12C      		mov r13,__zero_reg__
 804 001e 7601      		movw r14,r12
 805 0020 462F      		mov r20,r22
 806 0022 50E0      		ldi r21,0
 447:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 448:../../../os/rt/src/chevents.c ****       chDbgAssert(handlers[eid] != NULL, "null handler");
 449:../../../os/rt/src/chevents.c ****       events &= ~EVENT_MASK(eid);
 807               		.loc 1 449 0
 808 0024 01E0      		ldi r16,lo8(1)
 809 0026 10E0      		ldi r17,0
 810               	.LVL50:
 811               	.L41:
 447:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 812               		.loc 1 447 0
 813 0028 9A01      		movw r18,r20
 814 002a 0C2C      		mov r0,r12
 815 002c 00C0      		rjmp 2f
 816               		1:
 817 002e 3595      		asr r19
 818 0030 2795      		ror r18
 819               		2:
 820 0032 0A94      		dec r0
 821 0034 02F4      		brpl 1b
 822 0036 20FD      		sbrc r18,0
 823 0038 00C0      		rjmp .L46
 450:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 451:../../../os/rt/src/chevents.c ****     }
 452:../../../os/rt/src/chevents.c ****     eid++;
 824               		.loc 1 452 0
 825 003a 8FEF      		ldi r24,-1
 826 003c C81A      		sub r12,r24
 827 003e D80A      		sbc r13,r24
 828 0040 E80A      		sbc r14,r24
 829 0042 F80A      		sbc r15,r24
 830               	.LVL51:
 831 0044 2296      		adiw r28,2
 832 0046 00C0      		rjmp .L41
 833               	.L46:
 449:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 834               		.loc 1 449 0
 835 0048 9801      		movw r18,r16
 836 004a 0C2C      		mov r0,r12
 837 004c 00C0      		rjmp 2f
 838               		1:
 839 004e 220F      		lsl r18
 840 0050 331F      		rol r19
 841               		2:
 842 0052 0A94      		dec r0
 843 0054 02F4      		brpl 1b
 844 0056 C901      		movw r24,r18
 845 0058 8095      		com r24
 846 005a B822      		and r11,r24
 847               	.LVL52:
 450:../../../os/rt/src/chevents.c ****       handlers[eid](eid);
 848               		.loc 1 450 0
 849 005c E991      		ld r30,Y+
 850 005e F991      		ld r31,Y+
 851 0060 C701      		movw r24,r14
 852 0062 B601      		movw r22,r12
 853 0064 0995      		icall
 854               	.LVL53:
 855               		.loc 1 452 0
 856 0066 3FEF      		ldi r19,-1
 857 0068 C31A      		sub r12,r19
 858 006a D30A      		sbc r13,r19
 859 006c E30A      		sbc r14,r19
 860 006e F30A      		sbc r15,r19
 861               	.LVL54:
 446:../../../os/rt/src/chevents.c ****     if ((events & EVENT_MASK(eid)) != (eventmask_t)0) {
 862               		.loc 1 446 0
 863 0070 BB20      		tst r11
 864 0072 01F0      		breq .L39
 865 0074 4B2D      		mov r20,r11
 866 0076 50E0      		ldi r21,0
 867 0078 00C0      		rjmp .L41
 868               	.LVL55:
 869               	.L39:
 870               	/* epilogue start */
 453:../../../os/rt/src/chevents.c ****   }
 454:../../../os/rt/src/chevents.c **** }
 871               		.loc 1 454 0
 872 007a DF91      		pop r29
 873 007c CF91      		pop r28
 874 007e 1F91      		pop r17
 875 0080 0F91      		pop r16
 876 0082 FF90      		pop r15
 877 0084 EF90      		pop r14
 878 0086 DF90      		pop r13
 879 0088 CF90      		pop r12
 880 008a BF90      		pop r11
 881               	.LVL56:
 882 008c 0895      		ret
 883               		.cfi_endproc
 884               	.LFE212:
 886               		.section	.text.chEvtWaitOne,"ax",@progbits
 887               	.global	chEvtWaitOne
 889               	chEvtWaitOne:
 890               	.LFB213:
 455:../../../os/rt/src/chevents.c **** 
 456:../../../os/rt/src/chevents.c **** #if (CH_CFG_OPTIMIZE_SPEED == TRUE) ||                                      \
 457:../../../os/rt/src/chevents.c ****     (CH_CFG_USE_EVENTS_TIMEOUT == FALSE) ||                                 \
 458:../../../os/rt/src/chevents.c ****     defined(__DOXYGEN__)
 459:../../../os/rt/src/chevents.c **** /**
 460:../../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 461:../../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 462:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 463:../../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 464:../../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop in
 465:../../../os/rt/src/chevents.c ****  *          order to serve all the pending events.<br>
 466:../../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 467:../../../os/rt/src/chevents.c ****  *          an higher priority.
 468:../../../os/rt/src/chevents.c ****  *
 469:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 470:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 471:../../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 472:../../../os/rt/src/chevents.c ****  *
 473:../../../os/rt/src/chevents.c ****  * @api
 474:../../../os/rt/src/chevents.c ****  */
 475:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOne(eventmask_t events) {
 891               		.loc 1 475 0
 892               		.cfi_startproc
 893               	.LVL57:
 894 0000 1F93      		push r17
 895               	.LCFI18:
 896               		.cfi_def_cfa_offset 3
 897               		.cfi_offset 17, -2
 898 0002 CF93      		push r28
 899               	.LCFI19:
 900               		.cfi_def_cfa_offset 4
 901               		.cfi_offset 28, -3
 902 0004 DF93      		push r29
 903               	.LCFI20:
 904               		.cfi_def_cfa_offset 5
 905               		.cfi_offset 29, -4
 906               	/* prologue: function */
 907               	/* frame size = 0 */
 908               	/* stack size = 3 */
 909               	.L__stack_usage = 3
 910               	.LBB227:
 911               	.LBB228:
 912               		.loc 2 375 0
 913 0006 C091 0000 		lds r28,ch0+5
 914 000a D091 0000 		lds r29,ch0+5+1
 915               	.LBE228:
 916               	.LBE227:
 917               	.LBB229:
 918               	.LBB230:
 919               	.LBB231:
 430:../../../os/common/ports/AVR/chcore.h **** }
 920               		.loc 3 430 0
 921               	/* #APP */
 922               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 923 000e F894      		cli
 924               	 ;  0 "" 2
 925               	/* #NOAPP */
 926               	.LBE231:
 927               	.LBE230:
 928               	.LBE229:
 476:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 477:../../../os/rt/src/chevents.c ****   eventmask_t m;
 478:../../../os/rt/src/chevents.c **** 
 479:../../../os/rt/src/chevents.c ****   chSysLock();
 480:../../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 929               		.loc 1 480 0
 930 0010 2A8D      		ldd r18,Y+26
 931 0012 922F      		mov r25,r18
 932 0014 9823      		and r25,r24
 933               	.LVL58:
 481:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 934               		.loc 1 481 0
 935 0016 01F4      		brne .L48
 936 0018 182F      		mov r17,r24
 482:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 937               		.loc 1 482 0
 938 001a 8A8B      		std Y+18,r24
 483:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 939               		.loc 1 483 0
 940 001c 8AE0      		ldi r24,lo8(10)
 941               	.LVL59:
 942 001e 0E94 0000 		call chSchGoSleepS
 943               	.LVL60:
 484:../../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 944               		.loc 1 484 0
 945 0022 2A8D      		ldd r18,Y+26
 946 0024 912F      		mov r25,r17
 947 0026 9223      		and r25,r18
 948               	.LVL61:
 949               	.L48:
 485:../../../os/rt/src/chevents.c ****   }
 486:../../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 950               		.loc 1 486 0
 951 0028 892F      		mov r24,r25
 952 002a 8195      		neg r24
 953 002c 8923      		and r24,r25
 954               	.LVL62:
 487:../../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 955               		.loc 1 487 0
 956 002e 982F      		mov r25,r24
 957 0030 9095      		com r25
 958 0032 2923      		and r18,r25
 959 0034 2A8F      		std Y+26,r18
 960               	.LBB232:
 961               	.LBB233:
 962               	.LBB234:
 963               	.LBB235:
 964               		.loc 3 440 0
 965               	/* #APP */
 966               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 967 0036 7894      		sei
 968               	 ;  0 "" 2
 969               	/* epilogue start */
 970               	/* #NOAPP */
 971               	.LBE235:
 972               	.LBE234:
 973               	.LBE233:
 974               	.LBE232:
 488:../../../os/rt/src/chevents.c ****   chSysUnlock();
 489:../../../os/rt/src/chevents.c **** 
 490:../../../os/rt/src/chevents.c ****   return m;
 491:../../../os/rt/src/chevents.c **** }
 975               		.loc 1 491 0
 976 0038 DF91      		pop r29
 977 003a CF91      		pop r28
 978 003c 1F91      		pop r17
 979 003e 0895      		ret
 980               		.cfi_endproc
 981               	.LFE213:
 983               		.section	.text.chEvtWaitAny,"ax",@progbits
 984               	.global	chEvtWaitAny
 986               	chEvtWaitAny:
 987               	.LFB214:
 492:../../../os/rt/src/chevents.c **** 
 493:../../../os/rt/src/chevents.c **** /**
 494:../../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 495:../../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 496:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 497:../../../os/rt/src/chevents.c ****  *          returned.
 498:../../../os/rt/src/chevents.c ****  *
 499:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 500:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 501:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 502:../../../os/rt/src/chevents.c ****  *
 503:../../../os/rt/src/chevents.c ****  * @api
 504:../../../os/rt/src/chevents.c ****  */
 505:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAny(eventmask_t events) {
 988               		.loc 1 505 0
 989               		.cfi_startproc
 990               	.LVL63:
 991 0000 1F93      		push r17
 992               	.LCFI21:
 993               		.cfi_def_cfa_offset 3
 994               		.cfi_offset 17, -2
 995 0002 CF93      		push r28
 996               	.LCFI22:
 997               		.cfi_def_cfa_offset 4
 998               		.cfi_offset 28, -3
 999 0004 DF93      		push r29
 1000               	.LCFI23:
 1001               		.cfi_def_cfa_offset 5
 1002               		.cfi_offset 29, -4
 1003               	/* prologue: function */
 1004               	/* frame size = 0 */
 1005               	/* stack size = 3 */
 1006               	.L__stack_usage = 3
 1007 0006 282F      		mov r18,r24
 1008               	.LBB236:
 1009               	.LBB237:
 1010               		.loc 2 375 0
 1011 0008 C091 0000 		lds r28,ch0+5
 1012 000c D091 0000 		lds r29,ch0+5+1
 1013               	.LBE237:
 1014               	.LBE236:
 1015               	.LBB238:
 1016               	.LBB239:
 1017               	.LBB240:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1018               		.loc 3 430 0
 1019               	/* #APP */
 1020               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1021 0010 F894      		cli
 1022               	 ;  0 "" 2
 1023               	/* #NOAPP */
 1024               	.LBE240:
 1025               	.LBE239:
 1026               	.LBE238:
 506:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 507:../../../os/rt/src/chevents.c ****   eventmask_t m;
 508:../../../os/rt/src/chevents.c **** 
 509:../../../os/rt/src/chevents.c ****   chSysLock();
 510:../../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1027               		.loc 1 510 0
 1028 0012 9A8D      		ldd r25,Y+26
 1029 0014 892F      		mov r24,r25
 1030               	.LVL64:
 1031 0016 8223      		and r24,r18
 1032               	.LVL65:
 511:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1033               		.loc 1 511 0
 1034 0018 01F4      		brne .L50
 1035 001a 122F      		mov r17,r18
 512:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 1036               		.loc 1 512 0
 1037 001c 2A8B      		std Y+18,r18
 513:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTOREVT);
 1038               		.loc 1 513 0
 1039 001e 8AE0      		ldi r24,lo8(10)
 1040               	.LVL66:
 1041 0020 0E94 0000 		call chSchGoSleepS
 1042               	.LVL67:
 514:../../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 1043               		.loc 1 514 0
 1044 0024 9A8D      		ldd r25,Y+26
 1045 0026 812F      		mov r24,r17
 1046 0028 8923      		and r24,r25
 1047               	.LVL68:
 1048               	.L50:
 515:../../../os/rt/src/chevents.c ****   }
 516:../../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 1049               		.loc 1 516 0
 1050 002a 282F      		mov r18,r24
 1051 002c 2095      		com r18
 1052 002e 9223      		and r25,r18
 1053 0030 9A8F      		std Y+26,r25
 1054               	.LBB241:
 1055               	.LBB242:
 1056               	.LBB243:
 1057               	.LBB244:
 1058               		.loc 3 440 0
 1059               	/* #APP */
 1060               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1061 0032 7894      		sei
 1062               	 ;  0 "" 2
 1063               	/* epilogue start */
 1064               	/* #NOAPP */
 1065               	.LBE244:
 1066               	.LBE243:
 1067               	.LBE242:
 1068               	.LBE241:
 517:../../../os/rt/src/chevents.c ****   chSysUnlock();
 518:../../../os/rt/src/chevents.c **** 
 519:../../../os/rt/src/chevents.c ****   return m;
 520:../../../os/rt/src/chevents.c **** }
 1069               		.loc 1 520 0
 1070 0034 DF91      		pop r29
 1071 0036 CF91      		pop r28
 1072 0038 1F91      		pop r17
 1073 003a 0895      		ret
 1074               		.cfi_endproc
 1075               	.LFE214:
 1077               		.section	.text.chEvtWaitAll,"ax",@progbits
 1078               	.global	chEvtWaitAll
 1080               	chEvtWaitAll:
 1081               	.LFB215:
 521:../../../os/rt/src/chevents.c **** 
 522:../../../os/rt/src/chevents.c **** /**
 523:../../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 524:../../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 525:../../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 526:../../../os/rt/src/chevents.c ****  *
 527:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 528:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 529:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 530:../../../os/rt/src/chevents.c ****  *
 531:../../../os/rt/src/chevents.c ****  * @api
 532:../../../os/rt/src/chevents.c ****  */
 533:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAll(eventmask_t events) {
 1082               		.loc 1 533 0
 1083               		.cfi_startproc
 1084               	.LVL69:
 1085 0000 0F93      		push r16
 1086               	.LCFI24:
 1087               		.cfi_def_cfa_offset 3
 1088               		.cfi_offset 16, -2
 1089 0002 1F93      		push r17
 1090               	.LCFI25:
 1091               		.cfi_def_cfa_offset 4
 1092               		.cfi_offset 17, -3
 1093 0004 CF93      		push r28
 1094               	.LCFI26:
 1095               		.cfi_def_cfa_offset 5
 1096               		.cfi_offset 28, -4
 1097               	/* prologue: function */
 1098               	/* frame size = 0 */
 1099               	/* stack size = 3 */
 1100               	.L__stack_usage = 3
 1101 0006 C82F      		mov r28,r24
 1102               	.LBB245:
 1103               	.LBB246:
 1104               		.loc 2 375 0
 1105 0008 0091 0000 		lds r16,ch0+5
 1106 000c 1091 0000 		lds r17,ch0+5+1
 1107               	.LBE246:
 1108               	.LBE245:
 1109               	.LBB247:
 1110               	.LBB248:
 1111               	.LBB249:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1112               		.loc 3 430 0
 1113               	/* #APP */
 1114               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1115 0010 F894      		cli
 1116               	 ;  0 "" 2
 1117               	/* #NOAPP */
 1118               	.LBE249:
 1119               	.LBE248:
 1120               	.LBE247:
 534:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 535:../../../os/rt/src/chevents.c **** 
 536:../../../os/rt/src/chevents.c ****   chSysLock();
 537:../../../os/rt/src/chevents.c ****   if ((currtp->epending & events) != events) {
 1121               		.loc 1 537 0
 1122 0012 F801      		movw r30,r16
 1123 0014 828D      		ldd r24,Z+26
 1124               	.LVL70:
 1125 0016 982F      		mov r25,r24
 1126 0018 9C23      		and r25,r28
 1127 001a C917      		cp r28,r25
 1128 001c 01F0      		breq .L52
 538:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 1129               		.loc 1 538 0
 1130 001e C28B      		std Z+18,r28
 539:../../../os/rt/src/chevents.c ****     chSchGoSleepS(CH_STATE_WTANDEVT);
 1131               		.loc 1 539 0
 1132 0020 8BE0      		ldi r24,lo8(11)
 1133 0022 0E94 0000 		call chSchGoSleepS
 1134               	.LVL71:
 1135 0026 F801      		movw r30,r16
 1136 0028 828D      		ldd r24,Z+26
 1137               	.L52:
 540:../../../os/rt/src/chevents.c ****   }
 541:../../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 1138               		.loc 1 541 0
 1139 002a 9C2F      		mov r25,r28
 1140 002c 9095      		com r25
 1141 002e 8923      		and r24,r25
 1142 0030 F801      		movw r30,r16
 1143 0032 828F      		std Z+26,r24
 1144               	.LBB250:
 1145               	.LBB251:
 1146               	.LBB252:
 1147               	.LBB253:
 1148               		.loc 3 440 0
 1149               	/* #APP */
 1150               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1151 0034 7894      		sei
 1152               	 ;  0 "" 2
 1153               	/* #NOAPP */
 1154               	.LBE253:
 1155               	.LBE252:
 1156               	.LBE251:
 1157               	.LBE250:
 542:../../../os/rt/src/chevents.c ****   chSysUnlock();
 543:../../../os/rt/src/chevents.c **** 
 544:../../../os/rt/src/chevents.c ****   return events;
 545:../../../os/rt/src/chevents.c **** }
 1158               		.loc 1 545 0
 1159 0036 8C2F      		mov r24,r28
 1160               	/* epilogue start */
 1161 0038 CF91      		pop r28
 1162               	.LVL72:
 1163 003a 1F91      		pop r17
 1164 003c 0F91      		pop r16
 1165 003e 0895      		ret
 1166               		.cfi_endproc
 1167               	.LFE215:
 1169               		.section	.text.chEvtWaitOneTimeout,"ax",@progbits
 1170               	.global	chEvtWaitOneTimeout
 1172               	chEvtWaitOneTimeout:
 1173               	.LFB216:
 546:../../../os/rt/src/chevents.c **** #endif /* CH_CFG_OPTIMIZE_SPEED || !CH_CFG_USE_EVENTS_TIMEOUT */
 547:../../../os/rt/src/chevents.c **** 
 548:../../../os/rt/src/chevents.c **** #if (CH_CFG_USE_EVENTS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 549:../../../os/rt/src/chevents.c **** /**
 550:../../../os/rt/src/chevents.c ****  * @brief   Waits for exactly one of the specified events.
 551:../../../os/rt/src/chevents.c ****  * @details The function waits for one event among those specified in
 552:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the event is cleared and returned.
 553:../../../os/rt/src/chevents.c ****  * @note    One and only one event is served in the function, the one with the
 554:../../../os/rt/src/chevents.c ****  *          lowest event id. The function is meant to be invoked into a loop
 555:../../../os/rt/src/chevents.c ****  *          in order to serve all the pending events.<br>
 556:../../../os/rt/src/chevents.c ****  *          This means that Event Listeners with a lower event identifier have
 557:../../../os/rt/src/chevents.c ****  *          an higher priority.
 558:../../../os/rt/src/chevents.c ****  *
 559:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 560:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 561:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 562:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 563:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 564:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 565:../../../os/rt/src/chevents.c ****  * @return              The mask of the lowest event id served and cleared.
 566:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 567:../../../os/rt/src/chevents.c ****  *
 568:../../../os/rt/src/chevents.c ****  * @api
 569:../../../os/rt/src/chevents.c ****  */
 570:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitOneTimeout(eventmask_t events, sysinterval_t timeout) {
 1174               		.loc 1 570 0
 1175               		.cfi_startproc
 1176               	.LVL73:
 1177 0000 1F93      		push r17
 1178               	.LCFI27:
 1179               		.cfi_def_cfa_offset 3
 1180               		.cfi_offset 17, -2
 1181 0002 CF93      		push r28
 1182               	.LCFI28:
 1183               		.cfi_def_cfa_offset 4
 1184               		.cfi_offset 28, -3
 1185 0004 DF93      		push r29
 1186               	.LCFI29:
 1187               		.cfi_def_cfa_offset 5
 1188               		.cfi_offset 29, -4
 1189               	/* prologue: function */
 1190               	/* frame size = 0 */
 1191               	/* stack size = 3 */
 1192               	.L__stack_usage = 3
 1193               	.LBB254:
 1194               	.LBB255:
 1195               		.loc 2 375 0
 1196 0006 C091 0000 		lds r28,ch0+5
 1197 000a D091 0000 		lds r29,ch0+5+1
 1198               	.LBE255:
 1199               	.LBE254:
 1200               	.LBB256:
 1201               	.LBB257:
 1202               	.LBB258:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1203               		.loc 3 430 0
 1204               	/* #APP */
 1205               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1206 000e F894      		cli
 1207               	 ;  0 "" 2
 1208               	/* #NOAPP */
 1209               	.LBE258:
 1210               	.LBE257:
 1211               	.LBE256:
 571:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 572:../../../os/rt/src/chevents.c ****   eventmask_t m;
 573:../../../os/rt/src/chevents.c **** 
 574:../../../os/rt/src/chevents.c ****   chSysLock();
 575:../../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1212               		.loc 1 575 0
 1213 0010 2A8D      		ldd r18,Y+26
 1214 0012 922F      		mov r25,r18
 1215 0014 9823      		and r25,r24
 1216               	.LVL74:
 576:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1217               		.loc 1 576 0
 1218 0016 01F4      		brne .L54
 577:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1219               		.loc 1 577 0
 1220 0018 6115      		cp r22,__zero_reg__
 1221 001a 7105      		cpc r23,__zero_reg__
 1222 001c 01F4      		brne .L59
 1223               	.LVL75:
 1224               	.L58:
 1225               	.LBB259:
 1226               	.LBB260:
 1227               	.LBB261:
 1228               	.LBB262:
 1229               		.loc 3 440 0
 1230               	/* #APP */
 1231               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1232 001e 7894      		sei
 1233               	 ;  0 "" 2
 1234               	/* #NOAPP */
 1235               	.LBE262:
 1236               	.LBE261:
 1237               	.LBE260:
 1238               	.LBE259:
 578:../../../os/rt/src/chevents.c ****       chSysUnlock();
 579:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 580:../../../os/rt/src/chevents.c ****     }
 581:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 582:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 583:../../../os/rt/src/chevents.c ****       chSysUnlock();
 584:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1239               		.loc 1 584 0
 1240 0020 80E0      		ldi r24,0
 1241               	/* epilogue start */
 585:../../../os/rt/src/chevents.c ****     }
 586:../../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 587:../../../os/rt/src/chevents.c ****   }
 588:../../../os/rt/src/chevents.c ****   m ^= m & (m - (eventmask_t)1);
 589:../../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 590:../../../os/rt/src/chevents.c ****   chSysUnlock();
 591:../../../os/rt/src/chevents.c **** 
 592:../../../os/rt/src/chevents.c ****   return m;
 593:../../../os/rt/src/chevents.c **** }
 1242               		.loc 1 593 0
 1243 0022 DF91      		pop r29
 1244 0024 CF91      		pop r28
 1245 0026 1F91      		pop r17
 1246 0028 0895      		ret
 1247               	.LVL76:
 1248               	.L59:
 1249 002a 182F      		mov r17,r24
 581:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1250               		.loc 1 581 0
 1251 002c 8A8B      		std Y+18,r24
 582:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1252               		.loc 1 582 0
 1253 002e 8AE0      		ldi r24,lo8(10)
 1254               	.LVL77:
 1255 0030 0E94 0000 		call chSchGoSleepTimeoutS
 1256               	.LVL78:
 1257 0034 97FD      		sbrc r25,7
 1258 0036 00C0      		rjmp .L58
 586:../../../os/rt/src/chevents.c ****   }
 1259               		.loc 1 586 0
 1260 0038 2A8D      		ldd r18,Y+26
 1261 003a 912F      		mov r25,r17
 1262 003c 9223      		and r25,r18
 1263               	.LVL79:
 1264               	.L54:
 588:../../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 1265               		.loc 1 588 0
 1266 003e 892F      		mov r24,r25
 1267 0040 8195      		neg r24
 1268 0042 8923      		and r24,r25
 1269               	.LVL80:
 589:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1270               		.loc 1 589 0
 1271 0044 982F      		mov r25,r24
 1272 0046 9095      		com r25
 1273 0048 2923      		and r18,r25
 1274 004a 2A8F      		std Y+26,r18
 1275               	.LBB263:
 1276               	.LBB264:
 1277               	.LBB265:
 1278               	.LBB266:
 1279               		.loc 3 440 0
 1280               	/* #APP */
 1281               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1282 004c 7894      		sei
 1283               	 ;  0 "" 2
 1284               	/* epilogue start */
 1285               	/* #NOAPP */
 1286               	.LBE266:
 1287               	.LBE265:
 1288               	.LBE264:
 1289               	.LBE263:
 1290               		.loc 1 593 0
 1291 004e DF91      		pop r29
 1292 0050 CF91      		pop r28
 1293 0052 1F91      		pop r17
 1294 0054 0895      		ret
 1295               		.cfi_endproc
 1296               	.LFE216:
 1298               		.section	.text.chEvtWaitAnyTimeout,"ax",@progbits
 1299               	.global	chEvtWaitAnyTimeout
 1301               	chEvtWaitAnyTimeout:
 1302               	.LFB217:
 594:../../../os/rt/src/chevents.c **** 
 595:../../../os/rt/src/chevents.c **** /**
 596:../../../os/rt/src/chevents.c ****  * @brief   Waits for any of the specified events.
 597:../../../os/rt/src/chevents.c ****  * @details The function waits for any event among those specified in
 598:../../../os/rt/src/chevents.c ****  *          @p events to become pending then the events are cleared and
 599:../../../os/rt/src/chevents.c ****  *          returned.
 600:../../../os/rt/src/chevents.c ****  *
 601:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 602:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS enables all the events
 603:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 604:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 605:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 606:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 607:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 608:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 609:../../../os/rt/src/chevents.c ****  *
 610:../../../os/rt/src/chevents.c ****  * @api
 611:../../../os/rt/src/chevents.c ****  */
 612:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAnyTimeout(eventmask_t events, sysinterval_t timeout) {
 1303               		.loc 1 612 0
 1304               		.cfi_startproc
 1305               	.LVL81:
 1306 0000 1F93      		push r17
 1307               	.LCFI30:
 1308               		.cfi_def_cfa_offset 3
 1309               		.cfi_offset 17, -2
 1310 0002 CF93      		push r28
 1311               	.LCFI31:
 1312               		.cfi_def_cfa_offset 4
 1313               		.cfi_offset 28, -3
 1314 0004 DF93      		push r29
 1315               	.LCFI32:
 1316               		.cfi_def_cfa_offset 5
 1317               		.cfi_offset 29, -4
 1318               	/* prologue: function */
 1319               	/* frame size = 0 */
 1320               	/* stack size = 3 */
 1321               	.L__stack_usage = 3
 1322               	.LBB267:
 1323               	.LBB268:
 1324               		.loc 2 375 0
 1325 0006 C091 0000 		lds r28,ch0+5
 1326 000a D091 0000 		lds r29,ch0+5+1
 1327               	.LBE268:
 1328               	.LBE267:
 1329               	.LBB269:
 1330               	.LBB270:
 1331               	.LBB271:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1332               		.loc 3 430 0
 1333               	/* #APP */
 1334               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1335 000e F894      		cli
 1336               	 ;  0 "" 2
 1337               	/* #NOAPP */
 1338               	.LBE271:
 1339               	.LBE270:
 1340               	.LBE269:
 613:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 614:../../../os/rt/src/chevents.c ****   eventmask_t m;
 615:../../../os/rt/src/chevents.c **** 
 616:../../../os/rt/src/chevents.c ****   chSysLock();
 617:../../../os/rt/src/chevents.c ****   m = currtp->epending & events;
 1341               		.loc 1 617 0
 1342 0010 2A8D      		ldd r18,Y+26
 1343 0012 922F      		mov r25,r18
 1344 0014 9823      		and r25,r24
 1345               	.LVL82:
 618:../../../os/rt/src/chevents.c ****   if (m == (eventmask_t)0) {
 1346               		.loc 1 618 0
 1347 0016 01F4      		brne .L61
 619:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1348               		.loc 1 619 0
 1349 0018 6115      		cp r22,__zero_reg__
 1350 001a 7105      		cpc r23,__zero_reg__
 1351 001c 01F4      		brne .L66
 1352               	.LVL83:
 1353               	.L65:
 1354               	.LBB272:
 1355               	.LBB273:
 1356               	.LBB274:
 1357               	.LBB275:
 1358               		.loc 3 440 0
 1359               	/* #APP */
 1360               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1361 001e 7894      		sei
 1362               	 ;  0 "" 2
 1363               	/* #NOAPP */
 1364               	.LBE275:
 1365               	.LBE274:
 1366               	.LBE273:
 1367               	.LBE272:
 620:../../../os/rt/src/chevents.c ****       chSysUnlock();
 621:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 622:../../../os/rt/src/chevents.c ****     }
 623:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 624:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 625:../../../os/rt/src/chevents.c ****       chSysUnlock();
 626:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1368               		.loc 1 626 0
 1369 0020 80E0      		ldi r24,0
 1370               	/* epilogue start */
 627:../../../os/rt/src/chevents.c ****     }
 628:../../../os/rt/src/chevents.c ****     m = currtp->epending & events;
 629:../../../os/rt/src/chevents.c ****   }
 630:../../../os/rt/src/chevents.c ****   currtp->epending &= ~m;
 631:../../../os/rt/src/chevents.c ****   chSysUnlock();
 632:../../../os/rt/src/chevents.c **** 
 633:../../../os/rt/src/chevents.c ****   return m;
 634:../../../os/rt/src/chevents.c **** }
 1371               		.loc 1 634 0
 1372 0022 DF91      		pop r29
 1373 0024 CF91      		pop r28
 1374 0026 1F91      		pop r17
 1375 0028 0895      		ret
 1376               	.LVL84:
 1377               	.L66:
 1378 002a 182F      		mov r17,r24
 623:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTOREVT, timeout) < MSG_OK) {
 1379               		.loc 1 623 0
 1380 002c 8A8B      		std Y+18,r24
 624:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1381               		.loc 1 624 0
 1382 002e 8AE0      		ldi r24,lo8(10)
 1383               	.LVL85:
 1384 0030 0E94 0000 		call chSchGoSleepTimeoutS
 1385               	.LVL86:
 1386 0034 97FD      		sbrc r25,7
 1387 0036 00C0      		rjmp .L65
 628:../../../os/rt/src/chevents.c ****   }
 1388               		.loc 1 628 0
 1389 0038 2A8D      		ldd r18,Y+26
 1390 003a 912F      		mov r25,r17
 1391 003c 9223      		and r25,r18
 1392               	.LVL87:
 1393               	.L61:
 630:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1394               		.loc 1 630 0
 1395 003e 892F      		mov r24,r25
 1396 0040 8095      		com r24
 1397 0042 2823      		and r18,r24
 1398 0044 2A8F      		std Y+26,r18
 1399               	.LBB276:
 1400               	.LBB277:
 1401               	.LBB278:
 1402               	.LBB279:
 1403               		.loc 3 440 0
 1404               	/* #APP */
 1405               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1406 0046 7894      		sei
 1407               	 ;  0 "" 2
 1408               	/* #NOAPP */
 1409               	.LBE279:
 1410               	.LBE278:
 1411               	.LBE277:
 1412               	.LBE276:
 633:../../../os/rt/src/chevents.c **** }
 1413               		.loc 1 633 0
 1414 0048 892F      		mov r24,r25
 1415               	/* epilogue start */
 1416               		.loc 1 634 0
 1417 004a DF91      		pop r29
 1418 004c CF91      		pop r28
 1419 004e 1F91      		pop r17
 1420 0050 0895      		ret
 1421               		.cfi_endproc
 1422               	.LFE217:
 1424               		.section	.text.chEvtWaitAllTimeout,"ax",@progbits
 1425               	.global	chEvtWaitAllTimeout
 1427               	chEvtWaitAllTimeout:
 1428               	.LFB218:
 635:../../../os/rt/src/chevents.c **** 
 636:../../../os/rt/src/chevents.c **** /**
 637:../../../os/rt/src/chevents.c ****  * @brief   Waits for all the specified events.
 638:../../../os/rt/src/chevents.c ****  * @details The function waits for all the events specified in @p events to
 639:../../../os/rt/src/chevents.c ****  *          become pending then the events are cleared and returned.
 640:../../../os/rt/src/chevents.c ****  *
 641:../../../os/rt/src/chevents.c ****  * @param[in] events    events that the function should wait
 642:../../../os/rt/src/chevents.c ****  *                      for, @p ALL_EVENTS requires all the events
 643:../../../os/rt/src/chevents.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 644:../../../os/rt/src/chevents.c ****  *                      the following special values are allowed:
 645:../../../os/rt/src/chevents.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 646:../../../os/rt/src/chevents.c ****  *                      - @a TIME_INFINITE no timeout.
 647:../../../os/rt/src/chevents.c ****  * @return              The mask of the served and cleared events.
 648:../../../os/rt/src/chevents.c ****  * @retval 0            if the operation has timed out.
 649:../../../os/rt/src/chevents.c ****  *
 650:../../../os/rt/src/chevents.c ****  * @api
 651:../../../os/rt/src/chevents.c ****  */
 652:../../../os/rt/src/chevents.c **** eventmask_t chEvtWaitAllTimeout(eventmask_t events, sysinterval_t timeout) {
 1429               		.loc 1 652 0
 1430               		.cfi_startproc
 1431               	.LVL88:
 1432 0000 0F93      		push r16
 1433               	.LCFI33:
 1434               		.cfi_def_cfa_offset 3
 1435               		.cfi_offset 16, -2
 1436 0002 1F93      		push r17
 1437               	.LCFI34:
 1438               		.cfi_def_cfa_offset 4
 1439               		.cfi_offset 17, -3
 1440 0004 CF93      		push r28
 1441               	.LCFI35:
 1442               		.cfi_def_cfa_offset 5
 1443               		.cfi_offset 28, -4
 1444               	/* prologue: function */
 1445               	/* frame size = 0 */
 1446               	/* stack size = 3 */
 1447               	.L__stack_usage = 3
 1448 0006 C82F      		mov r28,r24
 1449               	.LBB280:
 1450               	.LBB281:
 1451               		.loc 2 375 0
 1452 0008 0091 0000 		lds r16,ch0+5
 1453 000c 1091 0000 		lds r17,ch0+5+1
 1454               	.LBE281:
 1455               	.LBE280:
 1456               	.LBB282:
 1457               	.LBB283:
 1458               	.LBB284:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1459               		.loc 3 430 0
 1460               	/* #APP */
 1461               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1462 0010 F894      		cli
 1463               	 ;  0 "" 2
 1464               	/* #NOAPP */
 1465               	.LBE284:
 1466               	.LBE283:
 1467               	.LBE282:
 653:../../../os/rt/src/chevents.c ****   thread_t *currtp = chThdGetSelfX();
 654:../../../os/rt/src/chevents.c **** 
 655:../../../os/rt/src/chevents.c ****   chSysLock();
 656:../../../os/rt/src/chevents.c ****   if ((currtp->epending & events) != events) {
 1468               		.loc 1 656 0
 1469 0012 F801      		movw r30,r16
 1470 0014 828D      		ldd r24,Z+26
 1471               	.LVL89:
 1472 0016 982F      		mov r25,r24
 1473 0018 9C23      		and r25,r28
 1474 001a C917      		cp r28,r25
 1475 001c 01F0      		breq .L68
 657:../../../os/rt/src/chevents.c ****     if (TIME_IMMEDIATE == timeout) {
 1476               		.loc 1 657 0
 1477 001e 6115      		cp r22,__zero_reg__
 1478 0020 7105      		cpc r23,__zero_reg__
 1479 0022 01F4      		brne .L72
 1480               	.LVL90:
 1481               	.L71:
 1482               	.LBB285:
 1483               	.LBB286:
 1484               	.LBB287:
 1485               	.LBB288:
 1486               		.loc 3 440 0
 1487               	/* #APP */
 1488               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1489 0024 7894      		sei
 1490               	 ;  0 "" 2
 1491               	/* #NOAPP */
 1492               	.LBE288:
 1493               	.LBE287:
 1494               	.LBE286:
 1495               	.LBE285:
 658:../../../os/rt/src/chevents.c ****       chSysUnlock();
 659:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 660:../../../os/rt/src/chevents.c ****     }
 661:../../../os/rt/src/chevents.c ****     currtp->u.ewmask = events;
 662:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 663:../../../os/rt/src/chevents.c ****       chSysUnlock();
 664:../../../os/rt/src/chevents.c ****       return (eventmask_t)0;
 1496               		.loc 1 664 0
 1497 0026 80E0      		ldi r24,0
 1498               	/* epilogue start */
 665:../../../os/rt/src/chevents.c ****     }
 666:../../../os/rt/src/chevents.c ****   }
 667:../../../os/rt/src/chevents.c ****   currtp->epending &= ~events;
 668:../../../os/rt/src/chevents.c ****   chSysUnlock();
 669:../../../os/rt/src/chevents.c **** 
 670:../../../os/rt/src/chevents.c ****   return events;
 671:../../../os/rt/src/chevents.c **** }
 1499               		.loc 1 671 0
 1500 0028 CF91      		pop r28
 1501               	.LVL91:
 1502 002a 1F91      		pop r17
 1503 002c 0F91      		pop r16
 1504 002e 0895      		ret
 1505               	.LVL92:
 1506               	.L72:
 661:../../../os/rt/src/chevents.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTANDEVT, timeout) < MSG_OK) {
 1507               		.loc 1 661 0
 1508 0030 F801      		movw r30,r16
 1509 0032 C28B      		std Z+18,r28
 662:../../../os/rt/src/chevents.c ****       chSysUnlock();
 1510               		.loc 1 662 0
 1511 0034 8BE0      		ldi r24,lo8(11)
 1512 0036 0E94 0000 		call chSchGoSleepTimeoutS
 1513               	.LVL93:
 1514 003a 97FD      		sbrc r25,7
 1515 003c 00C0      		rjmp .L71
 1516 003e F801      		movw r30,r16
 1517 0040 828D      		ldd r24,Z+26
 1518               	.L68:
 667:../../../os/rt/src/chevents.c ****   chSysUnlock();
 1519               		.loc 1 667 0
 1520 0042 9C2F      		mov r25,r28
 1521 0044 9095      		com r25
 1522 0046 8923      		and r24,r25
 1523 0048 F801      		movw r30,r16
 1524 004a 828F      		std Z+26,r24
 1525               	.LBB289:
 1526               	.LBB290:
 1527               	.LBB291:
 1528               	.LBB292:
 1529               		.loc 3 440 0
 1530               	/* #APP */
 1531               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1532 004c 7894      		sei
 1533               	 ;  0 "" 2
 1534               	/* #NOAPP */
 1535               	.LBE292:
 1536               	.LBE291:
 1537               	.LBE290:
 1538               	.LBE289:
 670:../../../os/rt/src/chevents.c **** }
 1539               		.loc 1 670 0
 1540 004e 8C2F      		mov r24,r28
 1541               	/* epilogue start */
 1542               		.loc 1 671 0
 1543 0050 CF91      		pop r28
 1544               	.LVL94:
 1545 0052 1F91      		pop r17
 1546 0054 0F91      		pop r16
 1547 0056 0895      		ret
 1548               		.cfi_endproc
 1549               	.LFE218:
 1551               		.text
 1552               	.Letext0:
 1553               		.file 5 "/usr/lib/avr/include/stdint.h"
 1554               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1555               		.file 7 "../../../os/rt/include/chearly.h"
 1556               		.file 8 "../../../os/rt/include/chobjects.h"
 1557               		.file 9 "../../../os/rt/include/chrfcu.h"
 1558               		.file 10 "../../../os/rt/include/chdebug.h"
 1559               		.file 11 "../../../os/rt/include/chtime.h"
 1560               		.file 12 "../../../os/rt/include/chlists.h"
 1561               		.file 13 "../../../os/rt/include/chsem.h"
 1562               		.file 14 "../../../os/rt/include/chmtx.h"
 1563               		.file 15 "../../../os/rt/include/chsys.h"
 1564               		.file 16 "../../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chevents.c
     /tmp/ccYFaAJq.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccYFaAJq.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccYFaAJq.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccYFaAJq.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccYFaAJq.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccYFaAJq.s:13     .text.chEvtObjectInit:0000000000000000 chEvtObjectInit
     /tmp/ccYFaAJq.s:34     .text.chEvtObjectDispose:0000000000000000 chEvtObjectDispose
     /tmp/ccYFaAJq.s:50     .text.chEvtRegisterMaskWithFlagsI:0000000000000000 chEvtRegisterMaskWithFlagsI
     /tmp/ccYFaAJq.s:107    .text.chEvtRegisterMaskWithFlags:0000000000000000 chEvtRegisterMaskWithFlags
     /tmp/ccYFaAJq.s:195    .text.chEvtUnregister:0000000000000000 chEvtUnregister
     /tmp/ccYFaAJq.s:278    .text.chEvtGetAndClearEventsI:0000000000000000 chEvtGetAndClearEventsI
     /tmp/ccYFaAJq.s:312    .text.chEvtGetAndClearEvents:0000000000000000 chEvtGetAndClearEvents
     /tmp/ccYFaAJq.s:378    .text.chEvtAddEvents:0000000000000000 chEvtAddEvents
     /tmp/ccYFaAJq.s:435    .text.chEvtGetAndClearFlagsI:0000000000000000 chEvtGetAndClearFlagsI
     /tmp/ccYFaAJq.s:462    .text.chEvtGetAndClearFlags:0000000000000000 chEvtGetAndClearFlags
     /tmp/ccYFaAJq.s:515    .text.chEvtSignalI:0000000000000000 chEvtSignalI
     /tmp/ccYFaAJq.s:567    .text.chEvtSignal:0000000000000000 chEvtSignal
     /tmp/ccYFaAJq.s:615    .text.chEvtBroadcastFlagsI:0000000000000000 chEvtBroadcastFlagsI
     /tmp/ccYFaAJq.s:703    .text.chEvtBroadcastFlags:0000000000000000 chEvtBroadcastFlags
     /tmp/ccYFaAJq.s:751    .text.chEvtDispatch:0000000000000000 chEvtDispatch
     /tmp/ccYFaAJq.s:889    .text.chEvtWaitOne:0000000000000000 chEvtWaitOne
     /tmp/ccYFaAJq.s:986    .text.chEvtWaitAny:0000000000000000 chEvtWaitAny
     /tmp/ccYFaAJq.s:1080   .text.chEvtWaitAll:0000000000000000 chEvtWaitAll
     /tmp/ccYFaAJq.s:1172   .text.chEvtWaitOneTimeout:0000000000000000 chEvtWaitOneTimeout
     /tmp/ccYFaAJq.s:1301   .text.chEvtWaitAnyTimeout:0000000000000000 chEvtWaitAnyTimeout
     /tmp/ccYFaAJq.s:1427   .text.chEvtWaitAllTimeout:0000000000000000 chEvtWaitAllTimeout

UNDEFINED SYMBOLS
ch0
chSchReadyI
chSchRescheduleS
chSchGoSleepS
chSchGoSleepTimeoutS
