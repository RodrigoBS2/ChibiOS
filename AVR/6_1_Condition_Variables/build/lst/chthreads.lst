   1               		.file	"chthreads.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__thd_object_init,"ax",@progbits
  11               	.global	__thd_object_init
  13               	__thd_object_init:
  14               	.LFB193:
  15               		.file 1 "../../../os/rt/src/chthreads.c"
   1:../../../os/rt/src/chthreads.c **** /*
   2:../../../os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chthreads.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chthreads.c **** 
   5:../../../os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chthreads.c **** 
   7:../../../os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chthreads.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chthreads.c **** 
  11:../../../os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chthreads.c **** 
  16:../../../os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chthreads.c **** */
  19:../../../os/rt/src/chthreads.c **** 
  20:../../../os/rt/src/chthreads.c **** /**
  21:../../../os/rt/src/chthreads.c ****  * @file    rt/src/chthreads.c
  22:../../../os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:../../../os/rt/src/chthreads.c ****  *
  24:../../../os/rt/src/chthreads.c ****  * @addtogroup threads
  25:../../../os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:../../../os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:../../../os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:../../../os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:../../../os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:../../../os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:../../../os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:../../../os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:../../../os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:../../../os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:../../../os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:../../../os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:../../../os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:../../../os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:../../../os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:../../../os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:../../../os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:../../../os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:../../../os/rt/src/chthreads.c ****  *            is reached.
  45:../../../os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:../../../os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:../../../os/rt/src/chthreads.c ****  *          .
  48:../../../os/rt/src/chthreads.c ****  * @{
  49:../../../os/rt/src/chthreads.c ****  */
  50:../../../os/rt/src/chthreads.c **** 
  51:../../../os/rt/src/chthreads.c **** #include <string.h>
  52:../../../os/rt/src/chthreads.c **** 
  53:../../../os/rt/src/chthreads.c **** #include "ch.h"
  54:../../../os/rt/src/chthreads.c **** 
  55:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  56:../../../os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  57:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  58:../../../os/rt/src/chthreads.c **** 
  59:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  60:../../../os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  61:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  62:../../../os/rt/src/chthreads.c **** 
  63:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  64:../../../os/rt/src/chthreads.c **** /* Module local types.                                                       */
  65:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  66:../../../os/rt/src/chthreads.c **** 
  67:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  68:../../../os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  69:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  70:../../../os/rt/src/chthreads.c **** 
  71:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  72:../../../os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  73:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  74:../../../os/rt/src/chthreads.c **** 
  75:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  76:../../../os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  77:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  78:../../../os/rt/src/chthreads.c **** 
  79:../../../os/rt/src/chthreads.c **** /**
  80:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  81:../../../os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  82:../../../os/rt/src/chthreads.c ****  *
  83:../../../os/rt/src/chthreads.c ****  * @param[in] oip       pointer to the OS instance
  84:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  85:../../../os/rt/src/chthreads.c ****  * @param[in] name      thread name
  86:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  87:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  88:../../../os/rt/src/chthreads.c ****  *
  89:../../../os/rt/src/chthreads.c ****  * @notapi
  90:../../../os/rt/src/chthreads.c ****  */
  91:../../../os/rt/src/chthreads.c **** thread_t *__thd_object_init(os_instance_t *oip,
  92:../../../os/rt/src/chthreads.c ****                             thread_t *tp,
  93:../../../os/rt/src/chthreads.c ****                             const char *name,
  94:../../../os/rt/src/chthreads.c ****                             tprio_t prio) {
  16               		.loc 1 94 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FB01      		movw r30,r22
  95:../../../os/rt/src/chthreads.c **** 
  96:../../../os/rt/src/chthreads.c ****   tp->hdr.pqueue.prio   = prio;
  32               		.loc 1 96 0
  33 0006 2483      		std Z+4,r18
  97:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
  34               		.loc 1 97 0
  35 0008 32E0      		ldi r19,lo8(2)
  36 000a 3787      		std Z+15,r19
  98:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
  37               		.loc 1 98 0
  38 000c 108A      		std Z+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
  39               		.loc 1 99 0
  40 000e 9487      		std Z+12,r25
  41 0010 8387      		std Z+11,r24
 100:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 101:../../../os/rt/src/chthreads.c ****   tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
 102:../../../os/rt/src/chthreads.c **** #endif
 103:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 104:../../../os/rt/src/chthreads.c ****   tp->realprio          = prio;
  42               		.loc 1 104 0
  43 0012 258F      		std Z+29,r18
 105:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
  44               		.loc 1 105 0
  45 0014 148E      		std Z+28,__zero_reg__
  46 0016 138E      		std Z+27,__zero_reg__
 106:../../../os/rt/src/chthreads.c **** #endif
 107:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 108:../../../os/rt/src/chthreads.c ****   tp->epending          = (eventmask_t)0;
  47               		.loc 1 108 0
  48 0018 128E      		std Z+26,__zero_reg__
 109:../../../os/rt/src/chthreads.c **** #endif
 110:../../../os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 111:../../../os/rt/src/chthreads.c ****   tp->time              = (systime_t)0;
 112:../../../os/rt/src/chthreads.c **** #endif
 113:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 114:../../../os/rt/src/chthreads.c ****   tp->refs              = (trefs_t)1;
  49               		.loc 1 114 0
  50 001a 21E0      		ldi r18,lo8(1)
  51               	.LVL1:
  52 001c 218B      		std Z+17,r18
 115:../../../os/rt/src/chthreads.c ****   tp->name              = name;
  53               		.loc 1 115 0
  54 001e 5687      		std Z+14,r21
  55 0020 4587      		std Z+13,r20
 116:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
  56               		.loc 1 116 0
  57 0022 9B01      		movw r18,r22
  58 0024 295F      		subi r18,-7
  59 0026 3F4F      		sbci r19,-1
  60               	.LVL2:
  61 0028 AC01      		movw r20,r24
  62               	.LVL3:
  63 002a 495E      		subi r20,-23
  64 002c 5F4F      		sbci r21,-1
  65               	.LVL4:
  66               	.LBB222:
  67               	.LBB223:
  68               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
  69               		.loc 2 324 0
  70 002e 5087      		std Z+8,r21
  71 0030 4783      		std Z+7,r20
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
  72               		.loc 2 325 0
  73 0032 EC01      		movw r28,r24
  74 0034 A98D      		ldd r26,Y+25
  75 0036 BA8D      		ldd r27,Y+26
  76 0038 B287      		std Z+10,r27
  77 003a A187      		std Z+9,r26
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
  78               		.loc 2 326 0
  79 003c 2D93      		st X+,r18
  80 003e 3C93      		st X,r19
  81               	.LVL5:
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
  82               		.loc 2 327 0
  83 0040 3A8F      		std Y+26,r19
  84 0042 298F      		std Y+25,r18
  85               	.LVL6:
  86               	.LBE223:
  87               	.LBE222:
 117:../../../os/rt/src/chthreads.c **** #else
 118:../../../os/rt/src/chthreads.c ****   (void)name;
 119:../../../os/rt/src/chthreads.c **** #endif
 120:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 121:../../../os/rt/src/chthreads.c ****   ch_list_init(&tp->waiting);
  88               		.loc 1 121 0
  89 0044 CB01      		movw r24,r22
  90               	.LVL7:
  91 0046 4496      		adiw r24,20
  92               	.LVL8:
  93               	.LBB224:
  94               	.LBB225:
 215:../../../os/rt/include/chlists.h **** }
  95               		.loc 2 215 0
  96 0048 958B      		std Z+21,r25
  97 004a 848B      		std Z+20,r24
  98               	.LVL9:
  99               	.LBE225:
 100               	.LBE224:
 122:../../../os/rt/src/chthreads.c **** #endif
 123:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 124:../../../os/rt/src/chthreads.c ****   ch_queue_init(&tp->msgqueue);
 101               		.loc 1 124 0
 102 004c 0296      		adiw r24,2
 103               	.LVL10:
 104               	.LBB226:
 105               	.LBB227:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 106               		.loc 2 284 0
 107 004e 978B      		std Z+23,r25
 108 0050 868B      		std Z+22,r24
 285:../../../os/rt/include/chlists.h **** }
 109               		.loc 2 285 0
 110 0052 918F      		std Z+25,r25
 111 0054 808F      		std Z+24,r24
 112               	.LVL11:
 113               	.LBE227:
 114               	.LBE226:
 125:../../../os/rt/src/chthreads.c **** #endif
 126:../../../os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 127:../../../os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 128:../../../os/rt/src/chthreads.c **** #endif
 129:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 130:../../../os/rt/src/chthreads.c ****   return tp;
 131:../../../os/rt/src/chthreads.c **** }
 115               		.loc 1 131 0
 116 0056 CB01      		movw r24,r22
 117               	/* epilogue start */
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL12:
 121 005c 0895      		ret
 122               		.cfi_endproc
 123               	.LFE193:
 125               		.section	.text.chThdCreateSuspendedI,"ax",@progbits
 126               	.global	chThdCreateSuspendedI
 128               	chThdCreateSuspendedI:
 129               	.LFB194:
 132:../../../os/rt/src/chthreads.c **** 
 133:../../../os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 134:../../../os/rt/src/chthreads.c **** /**
 135:../../../os/rt/src/chthreads.c ****  * @brief   Stack fill utility.
 136:../../../os/rt/src/chthreads.c ****  *
 137:../../../os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 138:../../../os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 139:../../../os/rt/src/chthreads.c ****  *
 140:../../../os/rt/src/chthreads.c ****  * @notapi
 141:../../../os/rt/src/chthreads.c ****  */
 142:../../../os/rt/src/chthreads.c **** void __thd_stackfill(uint8_t *startp, uint8_t *endp) {
 143:../../../os/rt/src/chthreads.c **** 
 144:../../../os/rt/src/chthreads.c ****   do {
 145:../../../os/rt/src/chthreads.c ****     *startp++ = CH_DBG_STACK_FILL_VALUE;
 146:../../../os/rt/src/chthreads.c ****   } while (likely(startp < endp));
 147:../../../os/rt/src/chthreads.c **** }
 148:../../../os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS */
 149:../../../os/rt/src/chthreads.c **** 
 150:../../../os/rt/src/chthreads.c **** /**
 151:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 152:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 153:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 154:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 155:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 156:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 157:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 158:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 159:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 160:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 161:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 162:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 163:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 164:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 165:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 166:../../../os/rt/src/chthreads.c ****  *
 167:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 168:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 169:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 170:../../../os/rt/src/chthreads.c ****  *
 171:../../../os/rt/src/chthreads.c ****  * @iclass
 172:../../../os/rt/src/chthreads.c ****  */
 173:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 130               		.loc 1 173 0
 131               		.cfi_startproc
 132               	.LVL13:
 133 0000 CF93      		push r28
 134               	.LCFI2:
 135               		.cfi_def_cfa_offset 3
 136               		.cfi_offset 28, -2
 137 0002 DF93      		push r29
 138               	.LCFI3:
 139               		.cfi_def_cfa_offset 4
 140               		.cfi_offset 29, -3
 141               	/* prologue: function */
 142               	/* frame size = 0 */
 143               	/* stack size = 2 */
 144               	.L__stack_usage = 2
 145 0004 DC01      		movw r26,r24
 174:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 175:../../../os/rt/src/chthreads.c **** 
 176:../../../os/rt/src/chthreads.c ****   chDbgCheckClassI();
 177:../../../os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 178:../../../os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 179:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 180:../../../os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 181:../../../os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 182:../../../os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 183:../../../os/rt/src/chthreads.c **** 
 184:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 185:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 186:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 187:../../../os/rt/src/chthreads.c ****   tp = threadref(((uint8_t *)tdp->wend -
 146               		.loc 1 187 0
 147 0006 1496      		adiw r26,4
 148 0008 2D91      		ld r18,X+
 149 000a 3C91      		ld r19,X
 150 000c 1597      		sbiw r26,4+1
 151               	.LVL14:
 188:../../../os/rt/src/chthreads.c ****                  MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));
 189:../../../os/rt/src/chthreads.c **** 
 190:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 191:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 192:../../../os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 193:../../../os/rt/src/chthreads.c ****   tp->waend  = tdp->wend;
 194:../../../os/rt/src/chthreads.c **** #endif
 195:../../../os/rt/src/chthreads.c **** 
 196:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 197:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 152               		.loc 1 197 0
 153 000e F901      		movw r30,r18
 154 0010 7E97      		sbiw r30,30
 155               	.LVL15:
 156 0012 E901      		movw r28,r18
 157 0014 E397      		sbiw r28,51
 158 0016 D683      		std Z+6,r29
 159 0018 C583      		std Z+5,r28
 160 001a 1796      		adiw r26,7
 161 001c 8C91      		ld r24,X
 162 001e 1797      		sbiw r26,7
 163               	.LVL16:
 164 0020 8A8B      		std Y+18,r24
 165 0022 1896      		adiw r26,8
 166 0024 8C91      		ld r24,X
 167 0026 1897      		sbiw r26,8
 168 0028 898B      		std Y+17,r24
 169 002a 1996      		adiw r26,9
 170 002c 8C91      		ld r24,X
 171 002e 1997      		sbiw r26,9
 172 0030 888B      		std Y+16,r24
 173 0032 1A96      		adiw r26,10
 174 0034 8C91      		ld r24,X
 175 0036 1A97      		sbiw r26,10
 176 0038 8F87      		std Y+15,r24
 177 003a 80E0      		ldi r24,lo8(gs(_port_thread_start))
 178 003c 90E0      		ldi r25,hi8(gs(_port_thread_start))
 179 003e 9B8B      		std Y+19,r25
 180 0040 8C8B      		std Y+20,r24
 198:../../../os/rt/src/chthreads.c **** 
 199:../../../os/rt/src/chthreads.c ****   /* The thread object is initialized but not started.*/
 200:../../../os/rt/src/chthreads.c **** #if CH_CFG_SMP_MODE != FALSE
 201:../../../os/rt/src/chthreads.c ****   if (tdp->instance != NULL) {
 202:../../../os/rt/src/chthreads.c ****     return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
 203:../../../os/rt/src/chthreads.c ****   }
 204:../../../os/rt/src/chthreads.c **** #endif
 205:../../../os/rt/src/chthreads.c **** 
 206:../../../os/rt/src/chthreads.c ****   return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 181               		.loc 1 206 0
 182 0042 1696      		adiw r26,6
 183 0044 8C91      		ld r24,X
 184 0046 1697      		sbiw r26,6
 185 0048 4D91      		ld r20,X+
 186 004a 5C91      		ld r21,X
 187               	.LVL17:
 188               	.LBB228:
 189               	.LBB229:
  96:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
 190               		.loc 1 96 0
 191 004c 8483      		std Z+4,r24
  97:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
 192               		.loc 1 97 0
 193 004e 92E0      		ldi r25,lo8(2)
 194 0050 9787      		std Z+15,r25
  98:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
 195               		.loc 1 98 0
 196 0052 108A      		std Z+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 197               		.loc 1 99 0
 198 0054 60E0      		ldi r22,lo8(ch0)
 199 0056 70E0      		ldi r23,hi8(ch0)
 200 0058 7487      		std Z+12,r23
 201 005a 6387      		std Z+11,r22
 104:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
 202               		.loc 1 104 0
 203 005c 858F      		std Z+29,r24
 105:../../../os/rt/src/chthreads.c **** #endif
 204               		.loc 1 105 0
 205 005e 148E      		std Z+28,__zero_reg__
 206 0060 138E      		std Z+27,__zero_reg__
 108:../../../os/rt/src/chthreads.c **** #endif
 207               		.loc 1 108 0
 208 0062 128E      		std Z+26,__zero_reg__
 114:../../../os/rt/src/chthreads.c ****   tp->name              = name;
 209               		.loc 1 114 0
 210 0064 81E0      		ldi r24,lo8(1)
 211               	.LVL18:
 212 0066 818B      		std Z+17,r24
 115:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
 213               		.loc 1 115 0
 214 0068 5687      		std Z+14,r21
 215 006a 4587      		std Z+13,r20
 116:../../../os/rt/src/chthreads.c **** #else
 216               		.loc 1 116 0
 217 006c D901      		movw r26,r18
 218               	.LVL19:
 219 006e 5797      		sbiw r26,23
 220               	.LVL20:
 221               	.LBB230:
 222               	.LBB231:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 223               		.loc 2 324 0
 224 0070 80E0      		ldi r24,lo8(ch0+23)
 225 0072 90E0      		ldi r25,hi8(ch0+23)
 226               	.LVL21:
 227 0074 1196      		adiw r26,1
 228 0076 9C93      		st X,r25
 229 0078 8E93      		st -X,r24
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 230               		.loc 2 325 0
 231 007a EB01      		movw r28,r22
 232 007c 898D      		ldd r24,Y+25
 233 007e 9A8D      		ldd r25,Y+26
 234               	.LVL22:
 235 0080 1396      		adiw r26,2+1
 236 0082 9C93      		st X,r25
 237 0084 8E93      		st -X,r24
 238 0086 1297      		sbiw r26,2
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 239               		.loc 2 326 0
 240 0088 EC01      		movw r28,r24
 241 008a B983      		std Y+1,r27
 242 008c A883      		st Y,r26
 243               	.LVL23:
 244               		.loc 2 327 0
 245 008e EB01      		movw r28,r22
 246 0090 BA8F      		std Y+26,r27
 247 0092 A98F      		std Y+25,r26
 248               	.LVL24:
 249               	.LBE231:
 250               	.LBE230:
 251               	.LBB232:
 252               	.LBB233:
 215:../../../os/rt/include/chlists.h **** }
 253               		.loc 2 215 0
 254 0094 1D96      		adiw r26,13
 255 0096 0B2E      		mov __tmp_reg__,r27
 256 0098 1196      		adiw r26,1
 257 009a 0C92      		st X,__tmp_reg__
 258 009c 1197      		sbiw r26,1
 259 009e AC93      		st X,r26
 260               	.LBE233:
 261               	.LBE232:
 124:../../../os/rt/src/chthreads.c **** #endif
 262               		.loc 1 124 0
 263 00a0 1296      		adiw r26,2
 264               	.LVL25:
 265               	.LBB234:
 266               	.LBB235:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 267               		.loc 2 284 0
 268 00a2 0B2E      		mov __tmp_reg__,r27
 269 00a4 1196      		adiw r26,1
 270 00a6 0C92      		st X,__tmp_reg__
 271 00a8 1197      		sbiw r26,1
 272 00aa AC93      		st X,r26
 285:../../../os/rt/include/chlists.h **** }
 273               		.loc 2 285 0
 274 00ac 0A2E      		mov __tmp_reg__,r26
 275 00ae 1B2E      		mov __zero_reg__,r27
 276 00b0 1396      		adiw r26,2+1
 277 00b2 1C92      		st X,__zero_reg__
 278 00b4 0E92      		st -X,__tmp_reg__
 279 00b6 1124      		clr __zero_reg__
 280 00b8 1297      		sbiw r26,2
 281               	.LVL26:
 282               	.LBE235:
 283               	.LBE234:
 284               	.LBE229:
 285               	.LBE228:
 207:../../../os/rt/src/chthreads.c **** }
 286               		.loc 1 207 0
 287 00ba CF01      		movw r24,r30
 288               	/* epilogue start */
 289 00bc DF91      		pop r29
 290 00be CF91      		pop r28
 291 00c0 0895      		ret
 292               		.cfi_endproc
 293               	.LFE194:
 295               		.section	.text.chThdCreateSuspended,"ax",@progbits
 296               	.global	chThdCreateSuspended
 298               	chThdCreateSuspended:
 299               	.LFB195:
 208:../../../os/rt/src/chthreads.c **** 
 209:../../../os/rt/src/chthreads.c **** /**
 210:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 211:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 212:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 213:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 214:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 215:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 216:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 217:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 218:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 219:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 220:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 221:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 222:../../../os/rt/src/chthreads.c ****  *
 223:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 224:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 225:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 226:../../../os/rt/src/chthreads.c ****  *
 227:../../../os/rt/src/chthreads.c ****  * @api
 228:../../../os/rt/src/chthreads.c ****  */
 229:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 300               		.loc 1 229 0
 301               		.cfi_startproc
 302               	.LVL27:
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 307               	.LBB236:
 308               	.LBB237:
 309               	.LBB238:
 310               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 311               		.loc 3 430 0
 312               	/* #APP */
 313               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 314 0000 F894      		cli
 315               	 ;  0 "" 2
 316               	/* #NOAPP */
 317               	.LBE238:
 318               	.LBE237:
 319               	.LBE236:
 230:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 231:../../../os/rt/src/chthreads.c **** 
 232:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 233:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 234:../../../os/rt/src/chthreads.c ****               "working area in use");
 235:../../../os/rt/src/chthreads.c **** #endif
 236:../../../os/rt/src/chthreads.c **** 
 237:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 238:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)tdp->wbase, (uint8_t *)tdp->wend);
 239:../../../os/rt/src/chthreads.c **** #endif
 240:../../../os/rt/src/chthreads.c **** 
 241:../../../os/rt/src/chthreads.c ****   chSysLock();
 242:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 320               		.loc 1 242 0
 321 0002 0E94 0000 		call chThdCreateSuspendedI
 322               	.LVL28:
 323               	.LBB239:
 324               	.LBB240:
 325               	.LBB241:
 326               	.LBB242:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 327               		.loc 3 440 0
 328               	/* #APP */
 329               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 330 0006 7894      		sei
 331               	 ;  0 "" 2
 332               	/* #NOAPP */
 333               	.LBE242:
 334               	.LBE241:
 335               	.LBE240:
 336               	.LBE239:
 243:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 244:../../../os/rt/src/chthreads.c **** 
 245:../../../os/rt/src/chthreads.c ****   return tp;
 246:../../../os/rt/src/chthreads.c **** }
 337               		.loc 1 246 0
 338 0008 0895      		ret
 339               		.cfi_endproc
 340               	.LFE195:
 342               		.section	.text.chThdCreateI,"ax",@progbits
 343               	.global	chThdCreateI
 345               	chThdCreateI:
 346               	.LFB196:
 247:../../../os/rt/src/chthreads.c **** 
 248:../../../os/rt/src/chthreads.c **** /**
 249:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 250:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 251:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 252:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 253:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 254:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 255:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 256:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 257:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 258:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 259:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 260:../../../os/rt/src/chthreads.c ****  *
 261:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 262:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 263:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 264:../../../os/rt/src/chthreads.c ****  *
 265:../../../os/rt/src/chthreads.c ****  * @iclass
 266:../../../os/rt/src/chthreads.c ****  */
 267:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 347               		.loc 1 267 0
 348               		.cfi_startproc
 349               	.LVL29:
 350               	/* prologue: function */
 351               	/* frame size = 0 */
 352               	/* stack size = 0 */
 353               	.L__stack_usage = 0
 268:../../../os/rt/src/chthreads.c **** 
 269:../../../os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 354               		.loc 1 269 0
 355 0000 0E94 0000 		call chThdCreateSuspendedI
 356               	.LVL30:
 357 0004 0C94 0000 		jmp chSchReadyI
 358               	.LVL31:
 359               		.cfi_endproc
 360               	.LFE196:
 362               		.section	.text.chThdCreate,"ax",@progbits
 363               	.global	chThdCreate
 365               	chThdCreate:
 366               	.LFB197:
 270:../../../os/rt/src/chthreads.c **** }
 271:../../../os/rt/src/chthreads.c **** 
 272:../../../os/rt/src/chthreads.c **** /**
 273:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 274:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 275:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 276:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 277:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 278:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 279:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 280:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 281:../../../os/rt/src/chthreads.c ****  *
 282:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 283:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 284:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 285:../../../os/rt/src/chthreads.c ****  *
 286:../../../os/rt/src/chthreads.c ****  * @iclass
 287:../../../os/rt/src/chthreads.c ****  */
 288:../../../os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 367               		.loc 1 288 0
 368               		.cfi_startproc
 369               	.LVL32:
 370 0000 CF93      		push r28
 371               	.LCFI4:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 28, -2
 374 0002 DF93      		push r29
 375               	.LCFI5:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 29, -3
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 2 */
 381               	.L__stack_usage = 2
 382               	.LBB243:
 383               	.LBB244:
 384               	.LBB245:
 430:../../../os/common/ports/AVR/chcore.h **** }
 385               		.loc 3 430 0
 386               	/* #APP */
 387               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 388 0004 F894      		cli
 389               	 ;  0 "" 2
 390               	/* #NOAPP */
 391               	.LBE245:
 392               	.LBE244:
 393               	.LBE243:
 289:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 290:../../../os/rt/src/chthreads.c **** 
 291:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 292:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 293:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 294:../../../os/rt/src/chthreads.c ****               "working area in use");
 295:../../../os/rt/src/chthreads.c **** #endif
 296:../../../os/rt/src/chthreads.c **** 
 297:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 298:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)tdp->wbase, (uint8_t *)tdp->wend);
 299:../../../os/rt/src/chthreads.c **** #endif
 300:../../../os/rt/src/chthreads.c **** 
 301:../../../os/rt/src/chthreads.c ****   chSysLock();
 302:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 394               		.loc 1 302 0
 395 0006 0E94 0000 		call chThdCreateSuspendedI
 396               	.LVL33:
 397 000a EC01      		movw r28,r24
 398               	.LVL34:
 303:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 399               		.loc 1 303 0
 400 000c 60E0      		ldi r22,0
 401 000e 70E0      		ldi r23,0
 402 0010 0E94 0000 		call chSchWakeupS
 403               	.LVL35:
 404               	.LBB246:
 405               	.LBB247:
 406               	.LBB248:
 407               	.LBB249:
 408               		.loc 3 440 0
 409               	/* #APP */
 410               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 411 0014 7894      		sei
 412               	 ;  0 "" 2
 413               	/* #NOAPP */
 414               	.LBE249:
 415               	.LBE248:
 416               	.LBE247:
 417               	.LBE246:
 304:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 305:../../../os/rt/src/chthreads.c **** 
 306:../../../os/rt/src/chthreads.c ****   return tp;
 307:../../../os/rt/src/chthreads.c **** }
 418               		.loc 1 307 0
 419 0016 CE01      		movw r24,r28
 420               	/* epilogue start */
 421 0018 DF91      		pop r29
 422 001a CF91      		pop r28
 423               	.LVL36:
 424 001c 0895      		ret
 425               		.cfi_endproc
 426               	.LFE197:
 428               		.section	.rodata.str1.1,"aMS",@progbits,1
 429               	.LC0:
 430 0000 6E6F 6E61 		.string	"noname"
 430      6D65 00
 431               		.section	.text.chThdCreateStatic,"ax",@progbits
 432               	.global	chThdCreateStatic
 434               	chThdCreateStatic:
 435               	.LFB198:
 308:../../../os/rt/src/chthreads.c **** 
 309:../../../os/rt/src/chthreads.c **** /**
 310:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 311:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 312:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 313:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 314:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 315:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 316:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 317:../../../os/rt/src/chthreads.c ****  *
 318:../../../os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 319:../../../os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 320:../../../os/rt/src/chthreads.c ****  * @param[in] prio      priority level for the new thread
 321:../../../os/rt/src/chthreads.c ****  * @param[in] pf        thread function
 322:../../../os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 323:../../../os/rt/src/chthreads.c ****  *                      @p NULL.
 324:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 325:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 326:../../../os/rt/src/chthreads.c ****  *
 327:../../../os/rt/src/chthreads.c ****  * @api
 328:../../../os/rt/src/chthreads.c ****  */
 329:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 330:../../../os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 436               		.loc 1 330 0
 437               		.cfi_startproc
 438               	.LVL37:
 439 0000 0F93      		push r16
 440               	.LCFI6:
 441               		.cfi_def_cfa_offset 3
 442               		.cfi_offset 16, -2
 443 0002 1F93      		push r17
 444               	.LCFI7:
 445               		.cfi_def_cfa_offset 4
 446               		.cfi_offset 17, -3
 447 0004 CF93      		push r28
 448               	.LCFI8:
 449               		.cfi_def_cfa_offset 5
 450               		.cfi_offset 28, -4
 451 0006 DF93      		push r29
 452               	.LCFI9:
 453               		.cfi_def_cfa_offset 6
 454               		.cfi_offset 29, -5
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 4 */
 458               	.L__stack_usage = 4
 459               	.LBB250:
 460               	.LBB251:
 461               	.LBB252:
 430:../../../os/common/ports/AVR/chcore.h **** }
 462               		.loc 3 430 0
 463               	/* #APP */
 464               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 465 0008 F894      		cli
 466               	 ;  0 "" 2
 467               	/* #NOAPP */
 468               	.LBE252:
 469               	.LBE251:
 470               	.LBE250:
 331:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 332:../../../os/rt/src/chthreads.c **** 
 333:../../../os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 334:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 335:../../../os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 336:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 337:../../../os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 338:../../../os/rt/src/chthreads.c **** 
 339:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 340:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 341:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 342:../../../os/rt/src/chthreads.c ****               "working area in use");
 343:../../../os/rt/src/chthreads.c **** #endif
 344:../../../os/rt/src/chthreads.c **** 
 345:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 346:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
 347:../../../os/rt/src/chthreads.c **** #endif
 348:../../../os/rt/src/chthreads.c **** 
 349:../../../os/rt/src/chthreads.c ****   chSysLock();
 350:../../../os/rt/src/chthreads.c **** 
 351:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 352:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 353:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 354:../../../os/rt/src/chthreads.c ****   tp = threadref(((uint8_t *)wsp + size -
 471               		.loc 1 354 0
 472 000a 6E51      		subi r22,30
 473 000c 7109      		sbc r23,__zero_reg__
 474               	.LVL38:
 475 000e EC01      		movw r28,r24
 476 0010 C60F      		add r28,r22
 477 0012 D71F      		adc r29,r23
 478               	.LVL39:
 355:../../../os/rt/src/chthreads.c ****                  MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));
 356:../../../os/rt/src/chthreads.c **** 
 357:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 358:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 359:../../../os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 360:../../../os/rt/src/chthreads.c ****   tp->waend  = (stkalign_t *)wsp + (size / sizeof (stkalign_t));
 361:../../../os/rt/src/chthreads.c **** #endif
 362:../../../os/rt/src/chthreads.c **** 
 363:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 364:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 479               		.loc 1 364 0
 480 0014 FE01      		movw r30,r28
 481 0016 7597      		sbiw r30,21
 482 0018 FE83      		std Y+6,r31
 483 001a ED83      		std Y+5,r30
 484 001c 228B      		std Z+18,r18
 485 001e 318B      		std Z+17,r19
 486 0020 008B      		std Z+16,r16
 487 0022 1787      		std Z+15,r17
 488 0024 80E0      		ldi r24,lo8(gs(_port_thread_start))
 489 0026 90E0      		ldi r25,hi8(gs(_port_thread_start))
 490               	.LVL40:
 491 0028 938B      		std Z+19,r25
 492 002a 848B      		std Z+20,r24
 493               	.LVL41:
 494               	.LBB253:
 495               	.LBB254:
  96:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
 496               		.loc 1 96 0
 497 002c 4C83      		std Y+4,r20
  97:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
 498               		.loc 1 97 0
 499 002e 82E0      		ldi r24,lo8(2)
 500 0030 8F87      		std Y+15,r24
  98:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
 501               		.loc 1 98 0
 502 0032 188A      		std Y+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 503               		.loc 1 99 0
 504 0034 E0E0      		ldi r30,lo8(ch0)
 505 0036 F0E0      		ldi r31,hi8(ch0)
 506 0038 FC87      		std Y+12,r31
 507 003a EB87      		std Y+11,r30
 104:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
 508               		.loc 1 104 0
 509 003c 4D8F      		std Y+29,r20
 105:../../../os/rt/src/chthreads.c **** #endif
 510               		.loc 1 105 0
 511 003e 1C8E      		std Y+28,__zero_reg__
 512 0040 1B8E      		std Y+27,__zero_reg__
 108:../../../os/rt/src/chthreads.c **** #endif
 513               		.loc 1 108 0
 514 0042 1A8E      		std Y+26,__zero_reg__
 114:../../../os/rt/src/chthreads.c ****   tp->name              = name;
 515               		.loc 1 114 0
 516 0044 81E0      		ldi r24,lo8(1)
 517 0046 898B      		std Y+17,r24
 115:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
 518               		.loc 1 115 0
 519 0048 80E0      		ldi r24,lo8(.LC0)
 520 004a 90E0      		ldi r25,hi8(.LC0)
 521 004c 9E87      		std Y+14,r25
 522 004e 8D87      		std Y+13,r24
 116:../../../os/rt/src/chthreads.c **** #else
 523               		.loc 1 116 0
 524 0050 CE01      		movw r24,r28
 525 0052 0796      		adiw r24,7
 526               	.LVL42:
 527               	.LBB255:
 528               	.LBB256:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 529               		.loc 2 324 0
 530 0054 20E0      		ldi r18,lo8(ch0+23)
 531 0056 30E0      		ldi r19,hi8(ch0+23)
 532               	.LVL43:
 533 0058 3887      		std Y+8,r19
 534 005a 2F83      		std Y+7,r18
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 535               		.loc 2 325 0
 536 005c A18D      		ldd r26,Z+25
 537 005e B28D      		ldd r27,Z+26
 538 0060 BA87      		std Y+10,r27
 539 0062 A987      		std Y+9,r26
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 540               		.loc 2 326 0
 541 0064 8D93      		st X+,r24
 542 0066 9C93      		st X,r25
 543               		.loc 2 327 0
 544 0068 928F      		std Z+26,r25
 545 006a 818F      		std Z+25,r24
 546               	.LVL44:
 547               	.LBE256:
 548               	.LBE255:
 121:../../../os/rt/src/chthreads.c **** #endif
 549               		.loc 1 121 0
 550 006c 0D96      		adiw r24,13
 551               	.LBB257:
 552               	.LBB258:
 215:../../../os/rt/include/chlists.h **** }
 553               		.loc 2 215 0
 554 006e 9D8B      		std Y+21,r25
 555 0070 8C8B      		std Y+20,r24
 556               	.LVL45:
 557               	.LBE258:
 558               	.LBE257:
 124:../../../os/rt/src/chthreads.c **** #endif
 559               		.loc 1 124 0
 560 0072 0296      		adiw r24,2
 561               	.LVL46:
 562               	.LBB259:
 563               	.LBB260:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 564               		.loc 2 284 0
 565 0074 9F8B      		std Y+23,r25
 566 0076 8E8B      		std Y+22,r24
 285:../../../os/rt/include/chlists.h **** }
 567               		.loc 2 285 0
 568 0078 998F      		std Y+25,r25
 569 007a 888F      		std Y+24,r24
 570               	.LVL47:
 571               	.LBE260:
 572               	.LBE259:
 573               	.LBE254:
 574               	.LBE253:
 365:../../../os/rt/src/chthreads.c **** 
 366:../../../os/rt/src/chthreads.c ****   tp = __thd_object_init(currcore, tp, "noname", prio);
 367:../../../os/rt/src/chthreads.c **** 
 368:../../../os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 369:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 575               		.loc 1 369 0
 576 007c 60E0      		ldi r22,0
 577 007e 70E0      		ldi r23,0
 578               	.LVL48:
 579 0080 CE01      		movw r24,r28
 580 0082 0E94 0000 		call chSchWakeupS
 581               	.LVL49:
 582               	.LBB261:
 583               	.LBB262:
 584               	.LBB263:
 585               	.LBB264:
 586               		.loc 3 440 0
 587               	/* #APP */
 588               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 589 0086 7894      		sei
 590               	 ;  0 "" 2
 591               	/* #NOAPP */
 592               	.LBE264:
 593               	.LBE263:
 594               	.LBE262:
 595               	.LBE261:
 370:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 371:../../../os/rt/src/chthreads.c **** 
 372:../../../os/rt/src/chthreads.c ****   return tp;
 373:../../../os/rt/src/chthreads.c **** }
 596               		.loc 1 373 0
 597 0088 CE01      		movw r24,r28
 598               	/* epilogue start */
 599 008a DF91      		pop r29
 600 008c CF91      		pop r28
 601 008e 1F91      		pop r17
 602 0090 0F91      		pop r16
 603               	.LVL50:
 604 0092 0895      		ret
 605               		.cfi_endproc
 606               	.LFE198:
 608               		.section	.text.chThdStart,"ax",@progbits
 609               	.global	chThdStart
 611               	chThdStart:
 612               	.LFB199:
 374:../../../os/rt/src/chthreads.c **** 
 375:../../../os/rt/src/chthreads.c **** /**
 376:../../../os/rt/src/chthreads.c ****  * @brief   Starts a thread created with @p chThdCreateSuspended().
 377:../../../os/rt/src/chthreads.c ****  *
 378:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 379:../../../os/rt/src/chthreads.c ****  * @return              Thread to be started.
 380:../../../os/rt/src/chthreads.c ****  *
 381:../../../os/rt/src/chthreads.c ****  * @api
 382:../../../os/rt/src/chthreads.c ****  */
 383:../../../os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 613               		.loc 1 383 0
 614               		.cfi_startproc
 615               	.LVL51:
 616 0000 CF93      		push r28
 617               	.LCFI10:
 618               		.cfi_def_cfa_offset 3
 619               		.cfi_offset 28, -2
 620 0002 DF93      		push r29
 621               	.LCFI11:
 622               		.cfi_def_cfa_offset 4
 623               		.cfi_offset 29, -3
 624               	/* prologue: function */
 625               	/* frame size = 0 */
 626               	/* stack size = 2 */
 627               	.L__stack_usage = 2
 628 0004 EC01      		movw r28,r24
 629               	.LBB265:
 630               	.LBB266:
 631               	.LBB267:
 430:../../../os/common/ports/AVR/chcore.h **** }
 632               		.loc 3 430 0
 633               	/* #APP */
 634               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 635 0006 F894      		cli
 636               	 ;  0 "" 2
 637               	/* #NOAPP */
 638               	.LBE267:
 639               	.LBE266:
 640               	.LBE265:
 384:../../../os/rt/src/chthreads.c **** 
 385:../../../os/rt/src/chthreads.c ****   chSysLock();
 386:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 387:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 641               		.loc 1 387 0
 642 0008 60E0      		ldi r22,0
 643 000a 70E0      		ldi r23,0
 644 000c 0E94 0000 		call chSchWakeupS
 645               	.LVL52:
 646               	.LBB268:
 647               	.LBB269:
 648               	.LBB270:
 649               	.LBB271:
 650               		.loc 3 440 0
 651               	/* #APP */
 652               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 653 0010 7894      		sei
 654               	 ;  0 "" 2
 655               	/* #NOAPP */
 656               	.LBE271:
 657               	.LBE270:
 658               	.LBE269:
 659               	.LBE268:
 388:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 389:../../../os/rt/src/chthreads.c **** 
 390:../../../os/rt/src/chthreads.c ****   return tp;
 391:../../../os/rt/src/chthreads.c **** }
 660               		.loc 1 391 0
 661 0012 CE01      		movw r24,r28
 662               	/* epilogue start */
 663 0014 DF91      		pop r29
 664 0016 CF91      		pop r28
 665               	.LVL53:
 666 0018 0895      		ret
 667               		.cfi_endproc
 668               	.LFE199:
 670               		.section	.text.chThdAddRef,"ax",@progbits
 671               	.global	chThdAddRef
 673               	chThdAddRef:
 674               	.LFB200:
 392:../../../os/rt/src/chthreads.c **** 
 393:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 394:../../../os/rt/src/chthreads.c **** /**
 395:../../../os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 396:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 397:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 398:../../../os/rt/src/chthreads.c ****  *
 399:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 400:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 401:../../../os/rt/src/chthreads.c ****  *                      representing the new reference.
 402:../../../os/rt/src/chthreads.c ****  *
 403:../../../os/rt/src/chthreads.c ****  * @api
 404:../../../os/rt/src/chthreads.c ****  */
 405:../../../os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 675               		.loc 1 405 0
 676               		.cfi_startproc
 677               	.LVL54:
 678               	/* prologue: function */
 679               	/* frame size = 0 */
 680               	/* stack size = 0 */
 681               	.L__stack_usage = 0
 682               	.LBB272:
 683               	.LBB273:
 684               	.LBB274:
 430:../../../os/common/ports/AVR/chcore.h **** }
 685               		.loc 3 430 0
 686               	/* #APP */
 687               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 688 0000 F894      		cli
 689               	 ;  0 "" 2
 690               	/* #NOAPP */
 691               	.LBE274:
 692               	.LBE273:
 693               	.LBE272:
 406:../../../os/rt/src/chthreads.c **** 
 407:../../../os/rt/src/chthreads.c ****   chSysLock();
 408:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 409:../../../os/rt/src/chthreads.c ****   tp->refs++;
 694               		.loc 1 409 0
 695 0002 FC01      		movw r30,r24
 696 0004 2189      		ldd r18,Z+17
 697 0006 2F5F      		subi r18,lo8(-(1))
 698 0008 218B      		std Z+17,r18
 699               	.LBB275:
 700               	.LBB276:
 701               	.LBB277:
 702               	.LBB278:
 703               		.loc 3 440 0
 704               	/* #APP */
 705               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 706 000a 7894      		sei
 707               	 ;  0 "" 2
 708               	/* #NOAPP */
 709               	.LBE278:
 710               	.LBE277:
 711               	.LBE276:
 712               	.LBE275:
 410:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 411:../../../os/rt/src/chthreads.c **** 
 412:../../../os/rt/src/chthreads.c ****   return tp;
 413:../../../os/rt/src/chthreads.c **** }
 713               		.loc 1 413 0
 714 000c 0895      		ret
 715               		.cfi_endproc
 716               	.LFE200:
 718               		.section	.text.chThdRelease,"ax",@progbits
 719               	.global	chThdRelease
 721               	chThdRelease:
 722               	.LFB201:
 414:../../../os/rt/src/chthreads.c **** 
 415:../../../os/rt/src/chthreads.c **** /**
 416:../../../os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 417:../../../os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 418:../../../os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 419:../../../os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 420:../../../os/rt/src/chthreads.c ****  *          from the registry.<br>
 421:../../../os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 422:../../../os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 423:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 424:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 425:../../../os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 426:../../../os/rt/src/chthreads.c ****  *
 427:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 428:../../../os/rt/src/chthreads.c ****  *
 429:../../../os/rt/src/chthreads.c ****  * @api
 430:../../../os/rt/src/chthreads.c ****  */
 431:../../../os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 723               		.loc 1 431 0
 724               		.cfi_startproc
 725               	.LVL55:
 726               	/* prologue: function */
 727               	/* frame size = 0 */
 728               	/* stack size = 0 */
 729               	.L__stack_usage = 0
 730 0000 FC01      		movw r30,r24
 731               	.LBB301:
 732               	.LBB302:
 733               	.LBB303:
 430:../../../os/common/ports/AVR/chcore.h **** }
 734               		.loc 3 430 0
 735               	/* #APP */
 736               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 737 0002 F894      		cli
 738               	 ;  0 "" 2
 739               	/* #NOAPP */
 740               	.LBE303:
 741               	.LBE302:
 742               	.LBE301:
 432:../../../os/rt/src/chthreads.c **** 
 433:../../../os/rt/src/chthreads.c ****   chSysLock();
 434:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 435:../../../os/rt/src/chthreads.c ****   tp->refs--;
 743               		.loc 1 435 0
 744 0004 9189      		ldd r25,Z+17
 745 0006 9150      		subi r25,lo8(-(-1))
 746 0008 918B      		std Z+17,r25
 436:../../../os/rt/src/chthreads.c **** 
 437:../../../os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 438:../../../os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 439:../../../os/rt/src/chthreads.c ****      allocator.*/
 440:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 747               		.loc 1 440 0
 748 000a 9111      		cpse r25,__zero_reg__
 749 000c 00C0      		rjmp .L10
 750               		.loc 1 440 0 is_stmt 0 discriminator 1
 751 000e 8785      		ldd r24,Z+15
 752               	.LVL56:
 753 0010 8F30      		cpi r24,lo8(15)
 754 0012 01F0      		breq .L13
 755               	.L10:
 756               	.LBB304:
 757               	.LBB305:
 758               	.LBB306:
 759               	.LBB307:
 760               		.loc 3 440 0 is_stmt 1
 761               	/* #APP */
 762               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 763 0014 7894      		sei
 764               	 ;  0 "" 2
 765               	/* #NOAPP */
 766 0016 0895      		ret
 767               	.L13:
 768               	.LVL57:
 769               	.LBE307:
 770               	.LBE306:
 771               	.LBE305:
 772               	.LBE304:
 773               	.LBB308:
 774               	.LBB309:
 775               	.LBB310:
 776               	.LBB311:
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 345:../../../os/rt/include/chlists.h **** 
 346:../../../os/rt/include/chlists.h ****   return p;
 347:../../../os/rt/include/chlists.h **** }
 348:../../../os/rt/include/chlists.h **** 
 349:../../../os/rt/include/chlists.h **** /**
 350:../../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 351:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 352:../../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 353:../../../os/rt/include/chlists.h ****  *
 354:../../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 355:../../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 356:../../../os/rt/include/chlists.h ****  *
 357:../../../os/rt/include/chlists.h ****  * @notapi
 358:../../../os/rt/include/chlists.h ****  */
 359:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 360:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 361:../../../os/rt/include/chlists.h **** 
 362:../../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 363:../../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 364:../../../os/rt/include/chlists.h **** 
 365:../../../os/rt/include/chlists.h ****   return p;
 366:../../../os/rt/include/chlists.h **** }
 367:../../../os/rt/include/chlists.h **** 
 368:../../../os/rt/include/chlists.h **** /**
 369:../../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 370:../../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 371:../../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 372:../../../os/rt/include/chlists.h ****  *
 373:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 374:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 375:../../../os/rt/include/chlists.h ****  *
 376:../../../os/rt/include/chlists.h ****  * @notapi
 377:../../../os/rt/include/chlists.h ****  */
 378:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 379:../../../os/rt/include/chlists.h **** 
 380:../../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 777               		.loc 2 380 0
 778 0018 A185      		ldd r26,Z+9
 779 001a B285      		ldd r27,Z+10
 780 001c 8781      		ldd r24,Z+7
 781 001e 9085      		ldd r25,Z+8
 782 0020 1196      		adiw r26,1
 783 0022 9C93      		st X,r25
 784 0024 8E93      		st -X,r24
 381:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 785               		.loc 2 381 0
 786 0026 0780      		ldd __tmp_reg__,Z+7
 787 0028 F085      		ldd r31,Z+8
 788 002a E02D      		mov r30,__tmp_reg__
 789               	.LVL58:
 790 002c B383      		std Z+3,r27
 791 002e A283      		std Z+2,r26
 792               	.LVL59:
 793               	.LBE311:
 794               	.LBE310:
 795               	.LBB312:
 796               	.LBB313:
 797               	.LBB314:
 798               	.LBB315:
 799               		.loc 3 440 0
 800               	/* #APP */
 801               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 802 0030 7894      		sei
 803               	 ;  0 "" 2
 804               	/* #NOAPP */
 805 0032 0895      		ret
 806               	.LBE315:
 807               	.LBE314:
 808               	.LBE313:
 809               	.LBE312:
 810               	.LBE309:
 811               	.LBE308:
 812               		.cfi_endproc
 813               	.LFE201:
 815               		.section	.text.chThdExitS,"ax",@progbits
 816               	.global	chThdExitS
 818               	chThdExitS:
 819               	.LFB203:
 441:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 442:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 443:../../../os/rt/src/chthreads.c **** 
 444:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 445:../../../os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 446:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 447:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 448:../../../os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 449:../../../os/rt/src/chthreads.c ****       break;
 450:../../../os/rt/src/chthreads.c **** #endif
 451:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 452:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 453:../../../os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 454:../../../os/rt/src/chthreads.c ****       break;
 455:../../../os/rt/src/chthreads.c **** #endif
 456:../../../os/rt/src/chthreads.c ****     default:
 457:../../../os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 458:../../../os/rt/src/chthreads.c ****       break;
 459:../../../os/rt/src/chthreads.c ****     }
 460:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 461:../../../os/rt/src/chthreads.c ****     return;
 462:../../../os/rt/src/chthreads.c ****   }
 463:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 464:../../../os/rt/src/chthreads.c **** }
 465:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 466:../../../os/rt/src/chthreads.c **** 
 467:../../../os/rt/src/chthreads.c **** /**
 468:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 469:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 470:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 471:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 472:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 473:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 474:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 475:../../../os/rt/src/chthreads.c ****  *          the dead code.
 476:../../../os/rt/src/chthreads.c ****  *
 477:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 478:../../../os/rt/src/chthreads.c ****  *
 479:../../../os/rt/src/chthreads.c ****  * @api
 480:../../../os/rt/src/chthreads.c ****  */
 481:../../../os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 482:../../../os/rt/src/chthreads.c **** 
 483:../../../os/rt/src/chthreads.c ****   chSysLock();
 484:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 485:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 486:../../../os/rt/src/chthreads.c **** }
 487:../../../os/rt/src/chthreads.c **** 
 488:../../../os/rt/src/chthreads.c **** /**
 489:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 490:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 491:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 492:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 493:../../../os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 494:../../../os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 495:../../../os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 496:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 497:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 498:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 499:../../../os/rt/src/chthreads.c ****  *          the dead code.
 500:../../../os/rt/src/chthreads.c ****  *
 501:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 502:../../../os/rt/src/chthreads.c ****  *
 503:../../../os/rt/src/chthreads.c ****  * @sclass
 504:../../../os/rt/src/chthreads.c ****  */
 505:../../../os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 820               		.loc 1 505 0
 821               		.cfi_startproc
 822               	.LVL60:
 823 0000 0F93      		push r16
 824               	.LCFI12:
 825               		.cfi_def_cfa_offset 3
 826               		.cfi_offset 16, -2
 827 0002 1F93      		push r17
 828               	.LCFI13:
 829               		.cfi_def_cfa_offset 4
 830               		.cfi_offset 17, -3
 831 0004 CF93      		push r28
 832               	.LCFI14:
 833               		.cfi_def_cfa_offset 5
 834               		.cfi_offset 28, -4
 835 0006 DF93      		push r29
 836               	.LCFI15:
 837               		.cfi_def_cfa_offset 6
 838               		.cfi_offset 29, -5
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 4 */
 842               	.L__stack_usage = 4
 843               	.LBB316:
 844               	.LBB317:
 845               		.file 4 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 846               		.loc 4 375 0
 847 0008 C091 0000 		lds r28,ch0+5
 848 000c D091 0000 		lds r29,ch0+5+1
 849               	.LBE317:
 850               	.LBE316:
 506:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 507:../../../os/rt/src/chthreads.c **** 
 508:../../../os/rt/src/chthreads.c ****   /* Storing exit message.*/
 509:../../../os/rt/src/chthreads.c ****   currtp->u.exitcode = msg;
 851               		.loc 1 509 0
 852 0010 9B8B      		std Y+19,r25
 853 0012 8A8B      		std Y+18,r24
 510:../../../os/rt/src/chthreads.c **** 
 511:../../../os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 512:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(currtp);
 513:../../../os/rt/src/chthreads.c **** 
 514:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 515:../../../os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 516:../../../os/rt/src/chthreads.c ****   while (unlikely(ch_list_notempty(&currtp->waiting))) {
 854               		.loc 1 516 0
 855 0014 8E01      		movw r16,r28
 856 0016 0C5E      		subi r16,-20
 857 0018 1F4F      		sbci r17,-1
 858               	.LVL61:
 859               	.LBB318:
 860               	.LBB319:
 241:../../../os/rt/include/chlists.h **** }
 861               		.loc 2 241 0
 862 001a 8C89      		ldd r24,Y+20
 863 001c 9D89      		ldd r25,Y+21
 864               	.LVL62:
 865               	.LBE319:
 866               	.LBE318:
 867               		.loc 1 516 0
 868 001e 0817      		cp r16,r24
 869 0020 1907      		cpc r17,r25
 870 0022 01F0      		breq .L19
 871               	.LVL63:
 872               	.L20:
 873               	.LBB321:
 874               	.LBB322:
 270:../../../os/rt/include/chlists.h **** 
 875               		.loc 2 270 0
 876 0024 FC01      		movw r30,r24
 877 0026 2081      		ld r18,Z
 878 0028 3181      		ldd r19,Z+1
 879 002a 3D8B      		std Y+21,r19
 880 002c 2C8B      		std Y+20,r18
 881               	.LVL64:
 882               	.LBE322:
 883               	.LBE321:
 517:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 884               		.loc 1 517 0
 885 002e 0E94 0000 		call chSchReadyI
 886               	.LVL65:
 887               	.LBB323:
 888               	.LBB320:
 241:../../../os/rt/include/chlists.h **** }
 889               		.loc 2 241 0
 890 0032 8C89      		ldd r24,Y+20
 891 0034 9D89      		ldd r25,Y+21
 892               	.LVL66:
 893               	.LBE320:
 894               	.LBE323:
 516:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 895               		.loc 1 516 0
 896 0036 8017      		cp r24,r16
 897 0038 9107      		cpc r25,r17
 898 003a 01F4      		brne .L20
 899               	.L19:
 518:../../../os/rt/src/chthreads.c ****   }
 519:../../../os/rt/src/chthreads.c **** #endif
 520:../../../os/rt/src/chthreads.c **** 
 521:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 522:../../../os/rt/src/chthreads.c ****   if (unlikely(currtp->refs == (trefs_t)0)) {
 900               		.loc 1 522 0
 901 003c 8989      		ldd r24,Y+17
 902 003e 8111      		cpse r24,__zero_reg__
 903 0040 00C0      		rjmp .L17
 904               	.LVL67:
 905               	.LBB324:
 906               	.LBB325:
 380:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 907               		.loc 2 380 0
 908 0042 E985      		ldd r30,Y+9
 909 0044 FA85      		ldd r31,Y+10
 910 0046 8F81      		ldd r24,Y+7
 911 0048 9885      		ldd r25,Y+8
 912 004a 9183      		std Z+1,r25
 913 004c 8083      		st Z,r24
 914               		.loc 2 381 0
 915 004e AF81      		ldd r26,Y+7
 916 0050 B885      		ldd r27,Y+8
 917 0052 1396      		adiw r26,2+1
 918 0054 FC93      		st X,r31
 919 0056 EE93      		st -X,r30
 920 0058 1297      		sbiw r26,2
 921               	.LVL68:
 922               	.L17:
 923               	.LBE325:
 924               	.LBE324:
 523:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 524:../../../os/rt/src/chthreads.c ****     /* Static threads are immediately removed from the registry because there
 525:../../../os/rt/src/chthreads.c ****        is no memory to recover.*/
 526:../../../os/rt/src/chthreads.c ****     if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 527:../../../os/rt/src/chthreads.c ****       REG_REMOVE(currtp);
 528:../../../os/rt/src/chthreads.c ****     }
 529:../../../os/rt/src/chthreads.c **** #else
 530:../../../os/rt/src/chthreads.c ****     REG_REMOVE(currtp);
 531:../../../os/rt/src/chthreads.c **** #endif
 532:../../../os/rt/src/chthreads.c ****   }
 533:../../../os/rt/src/chthreads.c **** #endif
 534:../../../os/rt/src/chthreads.c **** 
 535:../../../os/rt/src/chthreads.c ****   /* Going into final state.*/
 536:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 925               		.loc 1 536 0
 926 005a 8FE0      		ldi r24,lo8(15)
 927               	/* epilogue start */
 537:../../../os/rt/src/chthreads.c **** 
 538:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 539:../../../os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 540:../../../os/rt/src/chthreads.c **** }
 928               		.loc 1 540 0
 929 005c DF91      		pop r29
 930 005e CF91      		pop r28
 931 0060 1F91      		pop r17
 932 0062 0F91      		pop r16
 536:../../../os/rt/src/chthreads.c **** 
 933               		.loc 1 536 0
 934 0064 0C94 0000 		jmp chSchGoSleepS
 935               	.LVL69:
 936               		.cfi_endproc
 937               	.LFE203:
 939               		.section	.text.chThdExit,"ax",@progbits
 940               	.global	chThdExit
 942               	chThdExit:
 943               	.LFB202:
 481:../../../os/rt/src/chthreads.c **** 
 944               		.loc 1 481 0
 945               		.cfi_startproc
 946               	.LVL70:
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 0 */
 950               	.L__stack_usage = 0
 951               	.LBB326:
 952               	.LBB327:
 953               	.LBB328:
 430:../../../os/common/ports/AVR/chcore.h **** }
 954               		.loc 3 430 0
 955               	/* #APP */
 956               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 957 0000 F894      		cli
 958               	 ;  0 "" 2
 959               	/* #NOAPP */
 960               	.LBE328:
 961               	.LBE327:
 962               	.LBE326:
 484:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 963               		.loc 1 484 0
 964 0002 0C94 0000 		jmp chThdExitS
 965               	.LVL71:
 966               		.cfi_endproc
 967               	.LFE202:
 969               		.section	.text.chThdWait,"ax",@progbits
 970               	.global	chThdWait
 972               	chThdWait:
 973               	.LFB204:
 541:../../../os/rt/src/chthreads.c **** 
 542:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 543:../../../os/rt/src/chthreads.c **** /**
 544:../../../os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 545:../../../os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 546:../../../os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 547:../../../os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 548:../../../os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 549:../../../os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 550:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 551:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 552:../../../os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 553:../../../os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 554:../../../os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 555:../../../os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 556:../../../os/rt/src/chthreads.c ****  *
 557:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 558:../../../os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 559:../../../os/rt/src/chthreads.c ****  *
 560:../../../os/rt/src/chthreads.c ****  * @api
 561:../../../os/rt/src/chthreads.c ****  */
 562:../../../os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 974               		.loc 1 562 0
 975               		.cfi_startproc
 976               	.LVL72:
 977 0000 0F93      		push r16
 978               	.LCFI16:
 979               		.cfi_def_cfa_offset 3
 980               		.cfi_offset 16, -2
 981 0002 1F93      		push r17
 982               	.LCFI17:
 983               		.cfi_def_cfa_offset 4
 984               		.cfi_offset 17, -3
 985 0004 CF93      		push r28
 986               	.LCFI18:
 987               		.cfi_def_cfa_offset 5
 988               		.cfi_offset 28, -4
 989 0006 DF93      		push r29
 990               	.LCFI19:
 991               		.cfi_def_cfa_offset 6
 992               		.cfi_offset 29, -5
 993               	/* prologue: function */
 994               	/* frame size = 0 */
 995               	/* stack size = 4 */
 996               	.L__stack_usage = 4
 997 0008 EC01      		movw r28,r24
 998               	.LBB329:
 999               	.LBB330:
 1000               		.loc 4 375 0
 1001 000a E091 0000 		lds r30,ch0+5
 1002 000e F091 0000 		lds r31,ch0+5+1
 1003               	.LBE330:
 1004               	.LBE329:
 1005               	.LBB331:
 1006               	.LBB332:
 1007               	.LBB333:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1008               		.loc 3 430 0
 1009               	/* #APP */
 1010               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1011 0012 F894      		cli
 1012               	 ;  0 "" 2
 1013               	/* #NOAPP */
 1014               	.LBE333:
 1015               	.LBE332:
 1016               	.LBE331:
 563:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 564:../../../os/rt/src/chthreads.c ****   msg_t msg;
 565:../../../os/rt/src/chthreads.c **** 
 566:../../../os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 567:../../../os/rt/src/chthreads.c **** 
 568:../../../os/rt/src/chthreads.c ****   chSysLock();
 569:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp != currtp, "waiting self");
 570:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 571:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 572:../../../os/rt/src/chthreads.c **** #endif
 573:../../../os/rt/src/chthreads.c **** 
 574:../../../os/rt/src/chthreads.c ****   if (likely(tp->state != CH_STATE_FINAL)) {
 1017               		.loc 1 574 0
 1018 0014 8F85      		ldd r24,Y+15
 1019               	.LVL73:
 1020 0016 8F30      		cpi r24,lo8(15)
 1021 0018 01F0      		breq .L24
 1022               	.LVL74:
 1023               	.LBB334:
 1024               	.LBB335:
 254:../../../os/rt/include/chlists.h ****   lp->next = p;
 1025               		.loc 2 254 0
 1026 001a 8C89      		ldd r24,Y+20
 1027 001c 9D89      		ldd r25,Y+21
 1028 001e 9183      		std Z+1,r25
 1029 0020 8083      		st Z,r24
 255:../../../os/rt/include/chlists.h **** }
 1030               		.loc 2 255 0
 1031 0022 FD8B      		std Y+21,r31
 1032 0024 EC8B      		std Y+20,r30
 1033               	.LVL75:
 1034               	.LBE335:
 1035               	.LBE334:
 575:../../../os/rt/src/chthreads.c ****     ch_list_link(&tp->waiting, &currtp->hdr.list);
 576:../../../os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 1036               		.loc 1 576 0
 1037 0026 89E0      		ldi r24,lo8(9)
 1038 0028 0E94 0000 		call chSchGoSleepS
 1039               	.LVL76:
 1040               	.L24:
 577:../../../os/rt/src/chthreads.c ****   }
 578:../../../os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 1041               		.loc 1 578 0
 1042 002c 0A89      		ldd r16,Y+18
 1043 002e 1B89      		ldd r17,Y+19
 1044               	.LVL77:
 1045               	.LBB336:
 1046               	.LBB337:
 1047               	.LBB338:
 1048               	.LBB339:
 1049               		.loc 3 440 0
 1050               	/* #APP */
 1051               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1052 0030 7894      		sei
 1053               	 ;  0 "" 2
 1054               	/* #NOAPP */
 1055               	.LBE339:
 1056               	.LBE338:
 1057               	.LBE337:
 1058               	.LBE336:
 579:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 580:../../../os/rt/src/chthreads.c **** 
 581:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 582:../../../os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 583:../../../os/rt/src/chthreads.c ****   chThdRelease(tp);
 1059               		.loc 1 583 0
 1060 0032 CE01      		movw r24,r28
 1061 0034 0E94 0000 		call chThdRelease
 1062               	.LVL78:
 584:../../../os/rt/src/chthreads.c **** #endif
 585:../../../os/rt/src/chthreads.c **** 
 586:../../../os/rt/src/chthreads.c ****   return msg;
 587:../../../os/rt/src/chthreads.c **** }
 1063               		.loc 1 587 0
 1064 0038 C801      		movw r24,r16
 1065               	/* epilogue start */
 1066 003a DF91      		pop r29
 1067 003c CF91      		pop r28
 1068               	.LVL79:
 1069 003e 1F91      		pop r17
 1070 0040 0F91      		pop r16
 1071               	.LVL80:
 1072 0042 0895      		ret
 1073               		.cfi_endproc
 1074               	.LFE204:
 1076               		.section	.text.chThdSetPriority,"ax",@progbits
 1077               	.global	chThdSetPriority
 1079               	chThdSetPriority:
 1080               	.LFB205:
 588:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 589:../../../os/rt/src/chthreads.c **** 
 590:../../../os/rt/src/chthreads.c **** /**
 591:../../../os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 592:../../../os/rt/src/chthreads.c ****  *          necessary.
 593:../../../os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 594:../../../os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 595:../../../os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 596:../../../os/rt/src/chthreads.c ****  *
 597:../../../os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 598:../../../os/rt/src/chthreads.c ****  * @return              The old priority level.
 599:../../../os/rt/src/chthreads.c ****  *
 600:../../../os/rt/src/chthreads.c ****  * @api
 601:../../../os/rt/src/chthreads.c ****  */
 602:../../../os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 1081               		.loc 1 602 0
 1082               		.cfi_startproc
 1083               	.LVL81:
 1084 0000 CF93      		push r28
 1085               	.LCFI20:
 1086               		.cfi_def_cfa_offset 3
 1087               		.cfi_offset 28, -2
 1088               	/* prologue: function */
 1089               	/* frame size = 0 */
 1090               	/* stack size = 1 */
 1091               	.L__stack_usage = 1
 1092               	.LBB340:
 1093               	.LBB341:
 1094               		.loc 4 375 0
 1095 0002 E091 0000 		lds r30,ch0+5
 1096 0006 F091 0000 		lds r31,ch0+5+1
 1097               	.LBE341:
 1098               	.LBE340:
 1099               	.LBB342:
 1100               	.LBB343:
 1101               	.LBB344:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1102               		.loc 3 430 0
 1103               	/* #APP */
 1104               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1105 000a F894      		cli
 1106               	 ;  0 "" 2
 1107               	/* #NOAPP */
 1108               	.LBE344:
 1109               	.LBE343:
 1110               	.LBE342:
 603:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 604:../../../os/rt/src/chthreads.c ****   tprio_t oldprio;
 605:../../../os/rt/src/chthreads.c **** 
 606:../../../os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 607:../../../os/rt/src/chthreads.c **** 
 608:../../../os/rt/src/chthreads.c ****   chSysLock();
 609:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 610:../../../os/rt/src/chthreads.c ****   oldprio = currtp->realprio;
 1111               		.loc 1 610 0
 1112 000c C58D      		ldd r28,Z+29
 1113               	.LVL82:
 611:../../../os/rt/src/chthreads.c ****   if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 1114               		.loc 1 611 0
 1115 000e 9481      		ldd r25,Z+4
 1116 0010 C917      		cp r28,r25
 1117 0012 01F0      		breq .L29
 1118               		.loc 1 611 0 is_stmt 0 discriminator 1
 1119 0014 9817      		cp r25,r24
 1120 0016 00F4      		brsh .L30
 1121               	.L29:
 612:../../../os/rt/src/chthreads.c ****       (newprio > currtp->hdr.pqueue.prio)) {
 613:../../../os/rt/src/chthreads.c ****     currtp->hdr.pqueue.prio = newprio;
 1122               		.loc 1 613 0 is_stmt 1
 1123 0018 8483      		std Z+4,r24
 1124               	.L30:
 614:../../../os/rt/src/chthreads.c ****   }
 615:../../../os/rt/src/chthreads.c ****   currtp->realprio = newprio;
 1125               		.loc 1 615 0
 1126 001a 858F      		std Z+29,r24
 616:../../../os/rt/src/chthreads.c **** #else
 617:../../../os/rt/src/chthreads.c ****   oldprio = currtp->hdr.pqueue.prio;
 618:../../../os/rt/src/chthreads.c ****   currtp->hdr.pqueue.prio = newprio;
 619:../../../os/rt/src/chthreads.c **** #endif
 620:../../../os/rt/src/chthreads.c ****   chSchRescheduleS();
 1127               		.loc 1 620 0
 1128 001c 0E94 0000 		call chSchRescheduleS
 1129               	.LVL83:
 1130               	.LBB345:
 1131               	.LBB346:
 1132               	.LBB347:
 1133               	.LBB348:
 1134               		.loc 3 440 0
 1135               	/* #APP */
 1136               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1137 0020 7894      		sei
 1138               	 ;  0 "" 2
 1139               	/* #NOAPP */
 1140               	.LBE348:
 1141               	.LBE347:
 1142               	.LBE346:
 1143               	.LBE345:
 621:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 622:../../../os/rt/src/chthreads.c **** 
 623:../../../os/rt/src/chthreads.c ****   return oldprio;
 624:../../../os/rt/src/chthreads.c **** }
 1144               		.loc 1 624 0
 1145 0022 8C2F      		mov r24,r28
 1146               	/* epilogue start */
 1147 0024 CF91      		pop r28
 1148               	.LVL84:
 1149 0026 0895      		ret
 1150               		.cfi_endproc
 1151               	.LFE205:
 1153               		.section	.text.chThdTerminate,"ax",@progbits
 1154               	.global	chThdTerminate
 1156               	chThdTerminate:
 1157               	.LFB206:
 625:../../../os/rt/src/chthreads.c **** 
 626:../../../os/rt/src/chthreads.c **** /**
 627:../../../os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 628:../../../os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 629:../../../os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 630:../../../os/rt/src/chthreads.c ****  *          @p true.
 631:../../../os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 632:../../../os/rt/src/chthreads.c ****  *          condition.
 633:../../../os/rt/src/chthreads.c ****  *
 634:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 635:../../../os/rt/src/chthreads.c ****  *
 636:../../../os/rt/src/chthreads.c ****  * @api
 637:../../../os/rt/src/chthreads.c ****  */
 638:../../../os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1158               		.loc 1 638 0
 1159               		.cfi_startproc
 1160               	.LVL85:
 1161               	/* prologue: function */
 1162               	/* frame size = 0 */
 1163               	/* stack size = 0 */
 1164               	.L__stack_usage = 0
 1165 0000 FC01      		movw r30,r24
 1166               	.LBB349:
 1167               	.LBB350:
 1168               	.LBB351:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1169               		.loc 3 430 0
 1170               	/* #APP */
 1171               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1172 0002 F894      		cli
 1173               	 ;  0 "" 2
 1174               	/* #NOAPP */
 1175               	.LBE351:
 1176               	.LBE350:
 1177               	.LBE349:
 639:../../../os/rt/src/chthreads.c **** 
 640:../../../os/rt/src/chthreads.c ****   chSysLock();
 641:../../../os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1178               		.loc 1 641 0
 1179 0004 9089      		ldd r25,Z+16
 1180 0006 9460      		ori r25,lo8(4)
 1181 0008 908B      		std Z+16,r25
 1182               	.LBB352:
 1183               	.LBB353:
 1184               	.LBB354:
 1185               	.LBB355:
 1186               		.loc 3 440 0
 1187               	/* #APP */
 1188               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1189 000a 7894      		sei
 1190               	 ;  0 "" 2
 1191               	/* #NOAPP */
 1192 000c 0895      		ret
 1193               	.LBE355:
 1194               	.LBE354:
 1195               	.LBE353:
 1196               	.LBE352:
 1197               		.cfi_endproc
 1198               	.LFE206:
 1200               		.section	.text.chThdSleep,"ax",@progbits
 1201               	.global	chThdSleep
 1203               	chThdSleep:
 1204               	.LFB207:
 642:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 643:../../../os/rt/src/chthreads.c **** }
 644:../../../os/rt/src/chthreads.c **** 
 645:../../../os/rt/src/chthreads.c **** /**
 646:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 647:../../../os/rt/src/chthreads.c ****  *
 648:../../../os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 649:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 650:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 651:../../../os/rt/src/chthreads.c ****  *                        state.
 652:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 653:../../../os/rt/src/chthreads.c ****  *
 654:../../../os/rt/src/chthreads.c ****  * @api
 655:../../../os/rt/src/chthreads.c ****  */
 656:../../../os/rt/src/chthreads.c **** void chThdSleep(sysinterval_t time) {
 1205               		.loc 1 656 0
 1206               		.cfi_startproc
 1207               	.LVL86:
 1208               	/* prologue: function */
 1209               	/* frame size = 0 */
 1210               	/* stack size = 0 */
 1211               	.L__stack_usage = 0
 1212               	.LBB356:
 1213               	.LBB357:
 1214               	.LBB358:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1215               		.loc 3 430 0
 1216               	/* #APP */
 1217               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1218 0000 F894      		cli
 1219               	 ;  0 "" 2
 1220               	.LVL87:
 1221               	/* #NOAPP */
 1222               	.LBE358:
 1223               	.LBE357:
 1224               	.LBE356:
 1225               	.LBB359:
 1226               	.LBB360:
 376:../../../os/rt/include/chthreads.h **** }
 377:../../../os/rt/include/chthreads.h **** 
 378:../../../os/rt/include/chthreads.h **** /**
 379:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 380:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 381:../../../os/rt/include/chthreads.h ****  *
 382:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 383:../../../os/rt/include/chthreads.h ****  *
 384:../../../os/rt/include/chthreads.h ****  * @xclass
 385:../../../os/rt/include/chthreads.h ****  */
 386:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 387:../../../os/rt/include/chthreads.h **** 
 388:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->hdr.pqueue.prio;
 389:../../../os/rt/include/chthreads.h **** }
 390:../../../os/rt/include/chthreads.h **** 
 391:../../../os/rt/include/chthreads.h **** /**
 392:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 393:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 394:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 395:../../../os/rt/include/chthreads.h ****  *
 396:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 397:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 398:../../../os/rt/include/chthreads.h ****  *
 399:../../../os/rt/include/chthreads.h ****  * @xclass
 400:../../../os/rt/include/chthreads.h ****  */
 401:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 402:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 403:../../../os/rt/include/chthreads.h **** 
 404:../../../os/rt/include/chthreads.h ****   return tp->time;
 405:../../../os/rt/include/chthreads.h **** }
 406:../../../os/rt/include/chthreads.h **** #endif
 407:../../../os/rt/include/chthreads.h **** 
 408:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 409:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 410:../../../os/rt/include/chthreads.h **** /**
 411:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 412:../../../os/rt/include/chthreads.h ****  *
 413:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 414:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 415:../../../os/rt/include/chthreads.h ****  *
 416:../../../os/rt/include/chthreads.h ****  * @xclass
 417:../../../os/rt/include/chthreads.h ****  */
 418:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 419:../../../os/rt/include/chthreads.h **** 
 420:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 421:../../../os/rt/include/chthreads.h **** }
 422:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 423:../../../os/rt/include/chthreads.h **** 
 424:../../../os/rt/include/chthreads.h **** /**
 425:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 426:../../../os/rt/include/chthreads.h ****  *
 427:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 428:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 429:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 430:../../../os/rt/include/chthreads.h ****  *
 431:../../../os/rt/include/chthreads.h ****  * @xclass
 432:../../../os/rt/include/chthreads.h ****  */
 433:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 434:../../../os/rt/include/chthreads.h **** 
 435:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 436:../../../os/rt/include/chthreads.h **** }
 437:../../../os/rt/include/chthreads.h **** 
 438:../../../os/rt/include/chthreads.h **** /**
 439:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 440:../../../os/rt/include/chthreads.h ****  *
 441:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 442:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 443:../../../os/rt/include/chthreads.h ****  *
 444:../../../os/rt/include/chthreads.h ****  * @xclass
 445:../../../os/rt/include/chthreads.h ****  */
 446:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 447:../../../os/rt/include/chthreads.h **** 
 448:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 449:../../../os/rt/include/chthreads.h **** }
 450:../../../os/rt/include/chthreads.h **** 
 451:../../../os/rt/include/chthreads.h **** /**
 452:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 453:../../../os/rt/include/chthreads.h ****  *
 454:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 455:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 456:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 457:../../../os/rt/include/chthreads.h ****  *
 458:../../../os/rt/include/chthreads.h ****  * @iclass
 459:../../../os/rt/include/chthreads.h ****  */
 460:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 461:../../../os/rt/include/chthreads.h **** 
 462:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 463:../../../os/rt/include/chthreads.h **** 
 464:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 465:../../../os/rt/include/chthreads.h **** }
 466:../../../os/rt/include/chthreads.h **** 
 467:../../../os/rt/include/chthreads.h **** /**
 468:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 469:../../../os/rt/include/chthreads.h ****  *
 470:../../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 471:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 472:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 473:../../../os/rt/include/chthreads.h ****  *                        state.
 474:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 475:../../../os/rt/include/chthreads.h ****  *
 476:../../../os/rt/include/chthreads.h ****  * @sclass
 477:../../../os/rt/include/chthreads.h ****  */
 478:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 479:../../../os/rt/include/chthreads.h **** 
 480:../../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 481:../../../os/rt/include/chthreads.h **** 
 482:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 1227               		.loc 4 482 0
 1228 0002 BC01      		movw r22,r24
 1229 0004 88E0      		ldi r24,lo8(8)
 1230               	.LVL88:
 1231 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1232               	.LVL89:
 1233               	.LBE360:
 1234               	.LBE359:
 1235               	.LBB361:
 1236               	.LBB362:
 1237               	.LBB363:
 1238               	.LBB364:
 1239               		.loc 3 440 0
 1240               	/* #APP */
 1241               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1242 000a 7894      		sei
 1243               	 ;  0 "" 2
 1244               	/* #NOAPP */
 1245 000c 0895      		ret
 1246               	.LBE364:
 1247               	.LBE363:
 1248               	.LBE362:
 1249               	.LBE361:
 1250               		.cfi_endproc
 1251               	.LFE207:
 1253               		.section	.text.chThdSleepUntil,"ax",@progbits
 1254               	.global	chThdSleepUntil
 1256               	chThdSleepUntil:
 1257               	.LFB208:
 657:../../../os/rt/src/chthreads.c **** 
 658:../../../os/rt/src/chthreads.c ****   chSysLock();
 659:../../../os/rt/src/chthreads.c ****   chThdSleepS(time);
 660:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 661:../../../os/rt/src/chthreads.c **** }
 662:../../../os/rt/src/chthreads.c **** 
 663:../../../os/rt/src/chthreads.c **** /**
 664:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 665:../../../os/rt/src/chthreads.c ****  *          specified value.
 666:../../../os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 667:../../../os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 668:../../../os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 669:../../../os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 670:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 671:../../../os/rt/src/chthreads.c ****  *
 672:../../../os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 673:../../../os/rt/src/chthreads.c ****  *
 674:../../../os/rt/src/chthreads.c ****  * @api
 675:../../../os/rt/src/chthreads.c ****  */
 676:../../../os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1258               		.loc 1 676 0
 1259               		.cfi_startproc
 1260               	.LVL90:
 1261               	/* prologue: function */
 1262               	/* frame size = 0 */
 1263               	/* stack size = 0 */
 1264               	.L__stack_usage = 0
 1265               	.LBB365:
 1266               	.LBB366:
 1267               	.LBB367:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1268               		.loc 3 430 0
 1269               	/* #APP */
 1270               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1271 0000 F894      		cli
 1272               	 ;  0 "" 2
 1273               	/* #NOAPP */
 1274               	.LBE367:
 1275               	.LBE366:
 1276               	.LBE365:
 1277               	.LBB368:
 1278               	.LBB369:
 1279               		.file 5 "../../../os/rt/include/chvt.h"
   1:../../../os/rt/include/chvt.h **** /*
   2:../../../os/rt/include/chvt.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chvt.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chvt.h **** 
   5:../../../os/rt/include/chvt.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chvt.h **** 
   7:../../../os/rt/include/chvt.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chvt.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chvt.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chvt.h **** 
  11:../../../os/rt/include/chvt.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chvt.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chvt.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chvt.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chvt.h **** 
  16:../../../os/rt/include/chvt.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chvt.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chvt.h **** */
  19:../../../os/rt/include/chvt.h **** 
  20:../../../os/rt/include/chvt.h **** /**
  21:../../../os/rt/include/chvt.h ****  * @file    rt/include/chvt.h
  22:../../../os/rt/include/chvt.h ****  * @brief   Time and Virtual Timers module macros and structures.
  23:../../../os/rt/include/chvt.h ****  *
  24:../../../os/rt/include/chvt.h ****  * @addtogroup time
  25:../../../os/rt/include/chvt.h ****  * @{
  26:../../../os/rt/include/chvt.h ****  */
  27:../../../os/rt/include/chvt.h **** 
  28:../../../os/rt/include/chvt.h **** #ifndef CHVT_H
  29:../../../os/rt/include/chvt.h **** #define CHVT_H
  30:../../../os/rt/include/chvt.h **** 
  31:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  32:../../../os/rt/include/chvt.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  34:../../../os/rt/include/chvt.h **** 
  35:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  36:../../../os/rt/include/chvt.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  38:../../../os/rt/include/chvt.h **** 
  39:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  40:../../../os/rt/include/chvt.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  42:../../../os/rt/include/chvt.h **** 
  43:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA < 0) || (CH_CFG_ST_TIMEDELTA == 1)
  44:../../../os/rt/include/chvt.h **** #error "invalid CH_CFG_ST_TIMEDELTA specified, must "                       \
  45:../../../os/rt/include/chvt.h ****        "be zero or greater than one"
  46:../../../os/rt/include/chvt.h **** #endif
  47:../../../os/rt/include/chvt.h **** 
  48:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_CFG_TIME_QUANTUM > 0)
  49:../../../os/rt/include/chvt.h **** #error "CH_CFG_TIME_QUANTUM not supported in tickless mode"
  50:../../../os/rt/include/chvt.h **** #endif
  51:../../../os/rt/include/chvt.h **** 
  52:../../../os/rt/include/chvt.h **** #if (CH_CFG_ST_TIMEDELTA > 0) && (CH_DBG_THREADS_PROFILING == TRUE)
  53:../../../os/rt/include/chvt.h **** #error "CH_DBG_THREADS_PROFILING not supported in tickless mode"
  54:../../../os/rt/include/chvt.h **** #endif
  55:../../../os/rt/include/chvt.h **** 
  56:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  57:../../../os/rt/include/chvt.h **** /* Module data structures and types.                                         */
  58:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  59:../../../os/rt/include/chvt.h **** 
  60:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  61:../../../os/rt/include/chvt.h **** /* Module macros.                                                            */
  62:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  63:../../../os/rt/include/chvt.h **** 
  64:../../../os/rt/include/chvt.h **** /**
  65:../../../os/rt/include/chvt.h ****  * @brief   Data part of a static virtual timer initializer.
  66:../../../os/rt/include/chvt.h ****  * @details This macro should be used when statically initializing a virtual
  67:../../../os/rt/include/chvt.h ****  *          timer that is part of a bigger structure.
  68:../../../os/rt/include/chvt.h ****  *
  69:../../../os/rt/include/chvt.h ****  */
  70:../../../os/rt/include/chvt.h **** #define __VIRTUAL_TIMER_DATA() {                                            \
  71:../../../os/rt/include/chvt.h ****   .dlist = {                                                                \
  72:../../../os/rt/include/chvt.h ****     .next   = NULL,                                                         \
  73:../../../os/rt/include/chvt.h ****     .prev   = NULL,                                                         \
  74:../../../os/rt/include/chvt.h ****     .delta  = (sysinterval_t)0                                              \
  75:../../../os/rt/include/chvt.h ****   },                                                                        \
  76:../../../os/rt/include/chvt.h ****   .func     = NULL,                                                         \
  77:../../../os/rt/include/chvt.h ****   .par      = NULL,                                                         \
  78:../../../os/rt/include/chvt.h ****   .reload   = (sysinterval_t)0                                              \
  79:../../../os/rt/include/chvt.h **** }
  80:../../../os/rt/include/chvt.h **** 
  81:../../../os/rt/include/chvt.h **** /**
  82:../../../os/rt/include/chvt.h ****  * @brief   Static virtual timer initializer.
  83:../../../os/rt/include/chvt.h ****  * @details Statically initialized virtual timers require no explicit
  84:../../../os/rt/include/chvt.h ****  *          initialization using @p chVTObjectInit().
  85:../../../os/rt/include/chvt.h ****  *
  86:../../../os/rt/include/chvt.h ****  * @param[in] name      the name of the virtual timer variable
  87:../../../os/rt/include/chvt.h ****  */
  88:../../../os/rt/include/chvt.h **** #define VIRTUAL_TIMER_DECL(name)                                            \
  89:../../../os/rt/include/chvt.h ****   virtual_timer_t name = __VIRTUAL_TIMER_DATA()
  90:../../../os/rt/include/chvt.h **** 
  91:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  92:../../../os/rt/include/chvt.h **** /* External declarations.                                                    */
  93:../../../os/rt/include/chvt.h **** /*===========================================================================*/
  94:../../../os/rt/include/chvt.h **** 
  95:../../../os/rt/include/chvt.h **** /*
  96:../../../os/rt/include/chvt.h ****  * Virtual Timers APIs.
  97:../../../os/rt/include/chvt.h ****  */
  98:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
  99:../../../os/rt/include/chvt.h **** extern "C" {
 100:../../../os/rt/include/chvt.h **** #endif
 101:../../../os/rt/include/chvt.h ****   void chVTObjectInit(virtual_timer_t *vtp);
 102:../../../os/rt/include/chvt.h ****   void chVTObjectDispose(virtual_timer_t *vtp);
 103:../../../os/rt/include/chvt.h ****   void chVTDoSetI(virtual_timer_t *vtp, sysinterval_t delay,
 104:../../../os/rt/include/chvt.h ****                   vtfunc_t vtfunc, void *par);
 105:../../../os/rt/include/chvt.h ****   void chVTDoSetContinuousI(virtual_timer_t *vtp, sysinterval_t delay,
 106:../../../os/rt/include/chvt.h ****                             vtfunc_t vtfunc, void *par);
 107:../../../os/rt/include/chvt.h ****   void chVTDoResetI(virtual_timer_t *vtp);
 108:../../../os/rt/include/chvt.h ****   sysinterval_t chVTGetRemainingIntervalI(virtual_timer_t *vtp);
 109:../../../os/rt/include/chvt.h ****   void chVTDoTickI(void);
 110:../../../os/rt/include/chvt.h **** #if CH_CFG_USE_TIMESTAMP == TRUE
 111:../../../os/rt/include/chvt.h ****   systimestamp_t chVTGetTimeStampI(void);
 112:../../../os/rt/include/chvt.h ****   void chVTResetTimeStampI(void);
 113:../../../os/rt/include/chvt.h **** #endif
 114:../../../os/rt/include/chvt.h **** #ifdef __cplusplus
 115:../../../os/rt/include/chvt.h **** }
 116:../../../os/rt/include/chvt.h **** #endif
 117:../../../os/rt/include/chvt.h **** 
 118:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 119:../../../os/rt/include/chvt.h **** /* Module inline functions.                                                  */
 120:../../../os/rt/include/chvt.h **** /*===========================================================================*/
 121:../../../os/rt/include/chvt.h **** 
 122:../../../os/rt/include/chvt.h **** /**
 123:../../../os/rt/include/chvt.h ****  * @brief   Current system time.
 124:../../../os/rt/include/chvt.h ****  * @details Returns the number of system ticks since the @p chSysInit()
 125:../../../os/rt/include/chvt.h ****  *          invocation.
 126:../../../os/rt/include/chvt.h ****  * @note    The counter can reach its maximum and then restart from zero.
 127:../../../os/rt/include/chvt.h ****  * @note    This function can be called from any context but its atomicity
 128:../../../os/rt/include/chvt.h ****  *          is not guaranteed on architectures whose word size is less than
 129:../../../os/rt/include/chvt.h ****  *          @p systime_t size.
 130:../../../os/rt/include/chvt.h ****  *
 131:../../../os/rt/include/chvt.h ****  * @return              The system time in ticks.
 132:../../../os/rt/include/chvt.h ****  *
 133:../../../os/rt/include/chvt.h ****  * @xclass
 134:../../../os/rt/include/chvt.h ****  */
 135:../../../os/rt/include/chvt.h **** static inline systime_t chVTGetSystemTimeX(void) {
 136:../../../os/rt/include/chvt.h **** 
 137:../../../os/rt/include/chvt.h **** #if CH_CFG_ST_TIMEDELTA == 0
 138:../../../os/rt/include/chvt.h ****   return currcore->vtlist.systime;
 1280               		.loc 5 138 0
 1281 0002 2091 0000 		lds r18,ch0+13
 1282 0006 3091 0000 		lds r19,ch0+13+1
 1283               	.LVL91:
 1284               	.LBE369:
 1285               	.LBE368:
 1286               	.LBB370:
 1287               	.LBB371:
 1288               		.file 6 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chtime.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chtime.h **** 
   5:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chtime.h **** 
   7:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chtime.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:../../../os/rt/include/chtime.h ****  *          intervals.
  27:../../../os/rt/include/chtime.h ****  * @{
  28:../../../os/rt/include/chtime.h ****  */
  29:../../../os/rt/include/chtime.h **** 
  30:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:../../../os/rt/include/chtime.h **** #define CHTIME_H
  32:../../../os/rt/include/chtime.h **** 
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  36:../../../os/rt/include/chtime.h **** 
  37:../../../os/rt/include/chtime.h **** /**
  38:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  39:../../../os/rt/include/chtime.h ****  * @{
  40:../../../os/rt/include/chtime.h ****  */
  41:../../../os/rt/include/chtime.h **** /**
  42:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:../../../os/rt/include/chtime.h ****  *          specification.
  44:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:../../../os/rt/include/chtime.h ****  */
  47:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:../../../os/rt/include/chtime.h **** 
  49:../../../os/rt/include/chtime.h **** /**
  50:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:../../../os/rt/include/chtime.h ****  *          specification.
  52:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:../../../os/rt/include/chtime.h ****  */
  55:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:../../../os/rt/include/chtime.h **** 
  57:../../../os/rt/include/chtime.h **** /**
  58:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:../../../os/rt/include/chtime.h ****  */
  60:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:../../../os/rt/include/chtime.h **** 
  62:../../../os/rt/include/chtime.h **** /**
  63:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:../../../os/rt/include/chtime.h ****  */
  65:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:../../../os/rt/include/chtime.h **** /** @} */
  67:../../../os/rt/include/chtime.h **** 
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  71:../../../os/rt/include/chtime.h **** 
  72:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  73:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  75:../../../os/rt/include/chtime.h **** 
  76:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:../../../os/rt/include/chtime.h **** #endif
  80:../../../os/rt/include/chtime.h **** 
  81:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:../../../os/rt/include/chtime.h **** #endif
  84:../../../os/rt/include/chtime.h **** 
  85:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:../../../os/rt/include/chtime.h **** #endif
  89:../../../os/rt/include/chtime.h **** 
  90:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:../../../os/rt/include/chtime.h **** #endif
  93:../../../os/rt/include/chtime.h **** 
  94:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:../../../os/rt/include/chtime.h **** #endif
  97:../../../os/rt/include/chtime.h **** 
  98:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  99:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 101:../../../os/rt/include/chtime.h **** 
 102:../../../os/rt/include/chtime.h **** /**
 103:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:../../../os/rt/include/chtime.h ****  */
 106:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:../../../os/rt/include/chtime.h **** #endif
 113:../../../os/rt/include/chtime.h **** 
 114:../../../os/rt/include/chtime.h **** /**
 115:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:../../../os/rt/include/chtime.h ****  */
 118:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:../../../os/rt/include/chtime.h **** #endif
 125:../../../os/rt/include/chtime.h **** 
 126:../../../os/rt/include/chtime.h **** /**
 127:../../../os/rt/include/chtime.h ****  * @brief   Type of a time stamp.
 128:../../../os/rt/include/chtime.h ****  */
 129:../../../os/rt/include/chtime.h **** typedef uint64_t systimestamp_t;
 130:../../../os/rt/include/chtime.h **** 
 131:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 132:../../../os/rt/include/chtime.h **** /**
 133:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 134:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 135:../../../os/rt/include/chtime.h ****  */
 136:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 137:../../../os/rt/include/chtime.h **** 
 138:../../../os/rt/include/chtime.h **** /**
 139:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 140:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 141:../../../os/rt/include/chtime.h ****  */
 142:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 143:../../../os/rt/include/chtime.h **** 
 144:../../../os/rt/include/chtime.h **** /**
 145:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 146:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 147:../../../os/rt/include/chtime.h ****  */
 148:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 149:../../../os/rt/include/chtime.h **** 
 150:../../../os/rt/include/chtime.h **** /**
 151:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 152:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 153:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 154:../../../os/rt/include/chtime.h ****  */
 155:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #else
 158:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 159:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 160:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 161:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 162:../../../os/rt/include/chtime.h **** #endif
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 165:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 166:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 167:../../../os/rt/include/chtime.h **** 
 168:../../../os/rt/include/chtime.h **** /**
 169:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 170:../../../os/rt/include/chtime.h ****  * @{
 171:../../../os/rt/include/chtime.h ****  */
 172:../../../os/rt/include/chtime.h **** /**
 173:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 174:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 175:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 176:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 177:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 178:../../../os/rt/include/chtime.h ****  *          converted.
 179:../../../os/rt/include/chtime.h ****  *
 180:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 181:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 182:../../../os/rt/include/chtime.h ****  *
 183:../../../os/rt/include/chtime.h ****  * @api
 184:../../../os/rt/include/chtime.h ****  */
 185:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 186:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 187:../../../os/rt/include/chtime.h **** 
 188:../../../os/rt/include/chtime.h **** /**
 189:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 190:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 191:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 192:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 193:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 194:../../../os/rt/include/chtime.h ****  *          converted.
 195:../../../os/rt/include/chtime.h ****  *
 196:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 197:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 198:../../../os/rt/include/chtime.h ****  *
 199:../../../os/rt/include/chtime.h ****  * @api
 200:../../../os/rt/include/chtime.h ****  */
 201:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 202:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 203:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 204:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 205:../../../os/rt/include/chtime.h **** 
 206:../../../os/rt/include/chtime.h **** /**
 207:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 208:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 209:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 210:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 211:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 212:../../../os/rt/include/chtime.h ****  *          converted.
 213:../../../os/rt/include/chtime.h ****  *
 214:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 215:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 216:../../../os/rt/include/chtime.h ****  *
 217:../../../os/rt/include/chtime.h ****  * @api
 218:../../../os/rt/include/chtime.h ****  */
 219:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 220:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 221:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 222:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 223:../../../os/rt/include/chtime.h **** 
 224:../../../os/rt/include/chtime.h **** /**
 225:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 226:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 227:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 228:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 229:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 230:../../../os/rt/include/chtime.h ****  *          converted.
 231:../../../os/rt/include/chtime.h ****  *
 232:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 233:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 234:../../../os/rt/include/chtime.h ****  *
 235:../../../os/rt/include/chtime.h ****  * @api
 236:../../../os/rt/include/chtime.h ****  */
 237:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 238:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 239:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 240:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 241:../../../os/rt/include/chtime.h **** 
 242:../../../os/rt/include/chtime.h **** /**
 243:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 244:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 245:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 246:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 247:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 248:../../../os/rt/include/chtime.h ****  *          converted.
 249:../../../os/rt/include/chtime.h ****  *
 250:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 251:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 252:../../../os/rt/include/chtime.h ****  *
 253:../../../os/rt/include/chtime.h ****  * @api
 254:../../../os/rt/include/chtime.h ****  */
 255:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 256:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 257:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 258:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 259:../../../os/rt/include/chtime.h **** 
 260:../../../os/rt/include/chtime.h **** /**
 261:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 262:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 263:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 264:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 265:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 266:../../../os/rt/include/chtime.h ****  *          converted.
 267:../../../os/rt/include/chtime.h ****  *
 268:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 269:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 270:../../../os/rt/include/chtime.h ****  *
 271:../../../os/rt/include/chtime.h ****  * @api
 272:../../../os/rt/include/chtime.h ****  */
 273:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 274:../../../os/rt/include/chtime.h ****   (time_usecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 275:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 276:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 277:../../../os/rt/include/chtime.h **** /** @} */
 278:../../../os/rt/include/chtime.h **** 
 279:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 280:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 281:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 282:../../../os/rt/include/chtime.h **** 
 283:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 284:../../../os/rt/include/chtime.h **** extern "C" {
 285:../../../os/rt/include/chtime.h **** #endif
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 288:../../../os/rt/include/chtime.h **** }
 289:../../../os/rt/include/chtime.h **** #endif
 290:../../../os/rt/include/chtime.h **** 
 291:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 292:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 293:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 294:../../../os/rt/include/chtime.h **** 
 295:../../../os/rt/include/chtime.h **** /**
 296:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 297:../../../os/rt/include/chtime.h ****  * @{
 298:../../../os/rt/include/chtime.h ****  */
 299:../../../os/rt/include/chtime.h **** /**
 300:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 301:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 302:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 303:../../../os/rt/include/chtime.h ****  *
 304:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 305:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 306:../../../os/rt/include/chtime.h ****  *
 307:../../../os/rt/include/chtime.h ****  * @special
 308:../../../os/rt/include/chtime.h ****  */
 309:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 310:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 311:../../../os/rt/include/chtime.h **** 
 312:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 313:../../../os/rt/include/chtime.h **** 
 314:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 315:../../../os/rt/include/chtime.h ****               "conversion overflow");
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** 
 320:../../../os/rt/include/chtime.h **** /**
 321:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 322:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 323:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/rt/include/chtime.h ****  *
 325:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 326:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 327:../../../os/rt/include/chtime.h ****  *
 328:../../../os/rt/include/chtime.h ****  * @special
 329:../../../os/rt/include/chtime.h ****  */
 330:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 331:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 332:../../../os/rt/include/chtime.h **** 
 333:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 334:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 335:../../../os/rt/include/chtime.h **** 
 336:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 337:../../../os/rt/include/chtime.h ****               "conversion overflow");
 338:../../../os/rt/include/chtime.h **** 
 339:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 340:../../../os/rt/include/chtime.h **** }
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h **** /**
 343:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 344:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 345:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 346:../../../os/rt/include/chtime.h ****  *
 347:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 348:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 349:../../../os/rt/include/chtime.h ****  *
 350:../../../os/rt/include/chtime.h ****  * @special
 351:../../../os/rt/include/chtime.h ****  */
 352:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 353:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 354:../../../os/rt/include/chtime.h **** 
 355:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 356:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 357:../../../os/rt/include/chtime.h **** 
 358:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 359:../../../os/rt/include/chtime.h ****               "conversion overflow");
 360:../../../os/rt/include/chtime.h **** 
 361:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 362:../../../os/rt/include/chtime.h **** }
 363:../../../os/rt/include/chtime.h **** 
 364:../../../os/rt/include/chtime.h **** /**
 365:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 366:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 367:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 368:../../../os/rt/include/chtime.h ****  *
 369:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 370:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 371:../../../os/rt/include/chtime.h ****  *
 372:../../../os/rt/include/chtime.h ****  * @special
 373:../../../os/rt/include/chtime.h ****  */
 374:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 375:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 376:../../../os/rt/include/chtime.h **** 
 377:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 378:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 379:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 380:../../../os/rt/include/chtime.h **** 
 381:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 382:../../../os/rt/include/chtime.h ****               "conversion overflow");
 383:../../../os/rt/include/chtime.h **** 
 384:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 385:../../../os/rt/include/chtime.h **** }
 386:../../../os/rt/include/chtime.h **** 
 387:../../../os/rt/include/chtime.h **** /**
 388:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 389:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 390:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 391:../../../os/rt/include/chtime.h ****  *
 392:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 393:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 394:../../../os/rt/include/chtime.h ****  *
 395:../../../os/rt/include/chtime.h ****  * @special
 396:../../../os/rt/include/chtime.h ****  */
 397:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 398:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 399:../../../os/rt/include/chtime.h **** 
 400:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 401:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 402:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 403:../../../os/rt/include/chtime.h **** 
 404:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 405:../../../os/rt/include/chtime.h ****               "conversion overflow");
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 408:../../../os/rt/include/chtime.h **** }
 409:../../../os/rt/include/chtime.h **** 
 410:../../../os/rt/include/chtime.h **** /**
 411:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 412:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 413:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 414:../../../os/rt/include/chtime.h ****  *
 415:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 416:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 417:../../../os/rt/include/chtime.h ****  *
 418:../../../os/rt/include/chtime.h ****  * @special
 419:../../../os/rt/include/chtime.h ****  */
 420:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 421:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 422:../../../os/rt/include/chtime.h **** 
 423:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 424:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 425:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 426:../../../os/rt/include/chtime.h **** 
 427:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 428:../../../os/rt/include/chtime.h ****               "conversion overflow");
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 431:../../../os/rt/include/chtime.h **** }
 432:../../../os/rt/include/chtime.h **** 
 433:../../../os/rt/include/chtime.h **** /**
 434:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 435:../../../os/rt/include/chtime.h ****  *
 436:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 437:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 438:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 439:../../../os/rt/include/chtime.h ****  *
 440:../../../os/rt/include/chtime.h ****  * @xclass
 441:../../../os/rt/include/chtime.h ****  */
 442:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 443:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 444:../../../os/rt/include/chtime.h **** 
 445:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 446:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 447:../../../os/rt/include/chtime.h **** #endif
 448:../../../os/rt/include/chtime.h **** 
 449:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 450:../../../os/rt/include/chtime.h **** }
 451:../../../os/rt/include/chtime.h **** 
 452:../../../os/rt/include/chtime.h **** /**
 453:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 454:../../../os/rt/include/chtime.h ****  *
 455:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 456:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 457:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 458:../../../os/rt/include/chtime.h ****  *
 459:../../../os/rt/include/chtime.h ****  * @xclass
 460:../../../os/rt/include/chtime.h ****  */
 461:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 464:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 465:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1289               		.loc 6 465 0
 1290 000a BC01      		movw r22,r24
 1291 000c 621B      		sub r22,r18
 1292 000e 730B      		sbc r23,r19
 1293               	.LVL92:
 1294               	.LBE371:
 1295               	.LBE370:
 677:../../../os/rt/src/chthreads.c ****   sysinterval_t interval;
 678:../../../os/rt/src/chthreads.c **** 
 679:../../../os/rt/src/chthreads.c ****   chSysLock();
 680:../../../os/rt/src/chthreads.c ****   interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 681:../../../os/rt/src/chthreads.c ****   if (likely(interval > (sysinterval_t)0)) {
 1296               		.loc 1 681 0
 1297 0010 01F0      		breq .L34
 1298               	.LVL93:
 1299               	.LBB372:
 1300               	.LBB373:
 1301               		.loc 4 482 0
 1302 0012 88E0      		ldi r24,lo8(8)
 1303               	.LVL94:
 1304 0014 0E94 0000 		call chSchGoSleepTimeoutS
 1305               	.LVL95:
 1306               	.L34:
 1307               	.LBE373:
 1308               	.LBE372:
 1309               	.LBB374:
 1310               	.LBB375:
 1311               	.LBB376:
 1312               	.LBB377:
 1313               		.loc 3 440 0
 1314               	/* #APP */
 1315               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1316 0018 7894      		sei
 1317               	 ;  0 "" 2
 1318               	/* #NOAPP */
 1319 001a 0895      		ret
 1320               	.LBE377:
 1321               	.LBE376:
 1322               	.LBE375:
 1323               	.LBE374:
 1324               		.cfi_endproc
 1325               	.LFE208:
 1327               		.section	.text.chThdSleepUntilWindowed,"ax",@progbits
 1328               	.global	chThdSleepUntilWindowed
 1330               	chThdSleepUntilWindowed:
 1331               	.LFB209:
 682:../../../os/rt/src/chthreads.c ****     chThdSleepS(interval);
 683:../../../os/rt/src/chthreads.c ****   }
 684:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 685:../../../os/rt/src/chthreads.c **** }
 686:../../../os/rt/src/chthreads.c **** 
 687:../../../os/rt/src/chthreads.c **** /**
 688:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 689:../../../os/rt/src/chthreads.c ****  *          specified value.
 690:../../../os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p next
 691:../../../os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 692:../../../os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 693:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 694:../../../os/rt/src/chthreads.c ****  *
 695:../../../os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 696:../../../os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 697:../../../os/rt/src/chthreads.c ****  * @return              the @p next parameter
 698:../../../os/rt/src/chthreads.c ****  *
 699:../../../os/rt/src/chthreads.c ****  * @api
 700:../../../os/rt/src/chthreads.c ****  */
 701:../../../os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1332               		.loc 1 701 0
 1333               		.cfi_startproc
 1334               	.LVL96:
 1335 0000 CF93      		push r28
 1336               	.LCFI21:
 1337               		.cfi_def_cfa_offset 3
 1338               		.cfi_offset 28, -2
 1339 0002 DF93      		push r29
 1340               	.LCFI22:
 1341               		.cfi_def_cfa_offset 4
 1342               		.cfi_offset 29, -3
 1343               	/* prologue: function */
 1344               	/* frame size = 0 */
 1345               	/* stack size = 2 */
 1346               	.L__stack_usage = 2
 1347 0004 EB01      		movw r28,r22
 1348               	.LBB378:
 1349               	.LBB379:
 1350               	.LBB380:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1351               		.loc 3 430 0
 1352               	/* #APP */
 1353               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1354 0006 F894      		cli
 1355               	 ;  0 "" 2
 1356               	/* #NOAPP */
 1357               	.LBE380:
 1358               	.LBE379:
 1359               	.LBE378:
 1360               	.LBB381:
 1361               	.LBB382:
 1362               		.loc 5 138 0
 1363 0008 2091 0000 		lds r18,ch0+13
 1364 000c 3091 0000 		lds r19,ch0+13+1
 1365               	.LBE382:
 1366               	.LBE381:
 702:../../../os/rt/src/chthreads.c ****   systime_t time;
 703:../../../os/rt/src/chthreads.c **** 
 704:../../../os/rt/src/chthreads.c ****   chSysLock();
 705:../../../os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 706:../../../os/rt/src/chthreads.c ****   if (likely(chTimeIsInRangeX(time, prev, next))) {
 1367               		.loc 1 706 0
 1368 0010 AB01      		movw r20,r22
 1369 0012 481B      		sub r20,r24
 1370 0014 590B      		sbc r21,r25
 1371 0016 B901      		movw r22,r18
 1372               	.LVL97:
 1373 0018 681B      		sub r22,r24
 1374 001a 790B      		sbc r23,r25
 1375 001c 6417      		cp r22,r20
 1376 001e 7507      		cpc r23,r21
 1377 0020 00F4      		brsh .L39
 1378               	.LBB383:
 1379               	.LBB384:
 1380               		.loc 4 482 0
 1381 0022 BE01      		movw r22,r28
 1382 0024 621B      		sub r22,r18
 1383 0026 730B      		sbc r23,r19
 1384 0028 88E0      		ldi r24,lo8(8)
 1385               	.LVL98:
 1386 002a 0E94 0000 		call chSchGoSleepTimeoutS
 1387               	.LVL99:
 1388               	.L39:
 1389               	.LBE384:
 1390               	.LBE383:
 1391               	.LBB385:
 1392               	.LBB386:
 1393               	.LBB387:
 1394               	.LBB388:
 1395               		.loc 3 440 0
 1396               	/* #APP */
 1397               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1398 002e 7894      		sei
 1399               	 ;  0 "" 2
 1400               	/* #NOAPP */
 1401               	.LBE388:
 1402               	.LBE387:
 1403               	.LBE386:
 1404               	.LBE385:
 707:../../../os/rt/src/chthreads.c ****     chThdSleepS(chTimeDiffX(time, next));
 708:../../../os/rt/src/chthreads.c ****   }
 709:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 710:../../../os/rt/src/chthreads.c **** 
 711:../../../os/rt/src/chthreads.c ****   return next;
 712:../../../os/rt/src/chthreads.c **** }
 1405               		.loc 1 712 0
 1406 0030 CE01      		movw r24,r28
 1407               	/* epilogue start */
 1408 0032 DF91      		pop r29
 1409 0034 CF91      		pop r28
 1410               	.LVL100:
 1411 0036 0895      		ret
 1412               		.cfi_endproc
 1413               	.LFE209:
 1415               		.section	.text.chThdYield,"ax",@progbits
 1416               	.global	chThdYield
 1418               	chThdYield:
 1419               	.LFB210:
 713:../../../os/rt/src/chthreads.c **** 
 714:../../../os/rt/src/chthreads.c **** /**
 715:../../../os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 716:../../../os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 717:../../../os/rt/src/chthreads.c ****  *          equal priority, if any.
 718:../../../os/rt/src/chthreads.c ****  *
 719:../../../os/rt/src/chthreads.c ****  * @api
 720:../../../os/rt/src/chthreads.c ****  */
 721:../../../os/rt/src/chthreads.c **** void chThdYield(void) {
 1420               		.loc 1 721 0
 1421               		.cfi_startproc
 1422               	/* prologue: function */
 1423               	/* frame size = 0 */
 1424               	/* stack size = 0 */
 1425               	.L__stack_usage = 0
 1426               	.LBB389:
 1427               	.LBB390:
 1428               	.LBB391:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1429               		.loc 3 430 0
 1430               	/* #APP */
 1431               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1432 0000 F894      		cli
 1433               	 ;  0 "" 2
 1434               	/* #NOAPP */
 1435               	.LBE391:
 1436               	.LBE390:
 1437               	.LBE389:
 722:../../../os/rt/src/chthreads.c **** 
 723:../../../os/rt/src/chthreads.c ****   chSysLock();
 724:../../../os/rt/src/chthreads.c ****   chSchDoYieldS();
 1438               		.loc 1 724 0
 1439 0002 0E94 0000 		call chSchDoYieldS
 1440               	.LVL101:
 1441               	.LBB392:
 1442               	.LBB393:
 1443               	.LBB394:
 1444               	.LBB395:
 1445               		.loc 3 440 0
 1446               	/* #APP */
 1447               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1448 0006 7894      		sei
 1449               	 ;  0 "" 2
 1450               	/* #NOAPP */
 1451 0008 0895      		ret
 1452               	.LBE395:
 1453               	.LBE394:
 1454               	.LBE393:
 1455               	.LBE392:
 1456               		.cfi_endproc
 1457               	.LFE210:
 1459               		.section	.text.chThdSuspendS,"ax",@progbits
 1460               	.global	chThdSuspendS
 1462               	chThdSuspendS:
 1463               	.LFB211:
 725:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 726:../../../os/rt/src/chthreads.c **** }
 727:../../../os/rt/src/chthreads.c **** 
 728:../../../os/rt/src/chthreads.c **** /**
 729:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 730:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 731:../../../os/rt/src/chthreads.c ****  *          context.
 732:../../../os/rt/src/chthreads.c ****  *
 733:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 734:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 735:../../../os/rt/src/chthreads.c ****  *
 736:../../../os/rt/src/chthreads.c ****  * @sclass
 737:../../../os/rt/src/chthreads.c ****  */
 738:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1464               		.loc 1 738 0
 1465               		.cfi_startproc
 1466               	.LVL102:
 1467 0000 CF93      		push r28
 1468               	.LCFI23:
 1469               		.cfi_def_cfa_offset 3
 1470               		.cfi_offset 28, -2
 1471 0002 DF93      		push r29
 1472               	.LCFI24:
 1473               		.cfi_def_cfa_offset 4
 1474               		.cfi_offset 29, -3
 1475               	/* prologue: function */
 1476               	/* frame size = 0 */
 1477               	/* stack size = 2 */
 1478               	.L__stack_usage = 2
 1479               	.LBB396:
 1480               	.LBB397:
 375:../../../os/rt/include/chthreads.h **** }
 1481               		.loc 4 375 0
 1482 0004 C0E0      		ldi r28,lo8(ch0)
 1483 0006 D0E0      		ldi r29,hi8(ch0)
 1484 0008 ED81      		ldd r30,Y+5
 1485 000a FE81      		ldd r31,Y+6
 1486               	.LBE397:
 1487               	.LBE396:
 739:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 740:../../../os/rt/src/chthreads.c **** 
 741:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 742:../../../os/rt/src/chthreads.c **** 
 743:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1488               		.loc 1 743 0
 1489 000c DC01      		movw r26,r24
 1490 000e ED93      		st X+,r30
 1491 0010 FC93      		st X,r31
 744:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1492               		.loc 1 744 0
 1493 0012 938B      		std Z+19,r25
 1494 0014 828B      		std Z+18,r24
 745:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1495               		.loc 1 745 0
 1496 0016 83E0      		ldi r24,lo8(3)
 1497               	.LVL103:
 1498 0018 0E94 0000 		call chSchGoSleepS
 1499               	.LVL104:
 746:../../../os/rt/src/chthreads.c **** 
 747:../../../os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1500               		.loc 1 747 0
 1501 001c ED81      		ldd r30,Y+5
 1502 001e FE81      		ldd r31,Y+6
 748:../../../os/rt/src/chthreads.c **** }
 1503               		.loc 1 748 0
 1504 0020 8289      		ldd r24,Z+18
 1505 0022 9389      		ldd r25,Z+19
 1506               	/* epilogue start */
 1507 0024 DF91      		pop r29
 1508 0026 CF91      		pop r28
 1509 0028 0895      		ret
 1510               		.cfi_endproc
 1511               	.LFE211:
 1513               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 1514               	.global	chThdSuspendTimeoutS
 1516               	chThdSuspendTimeoutS:
 1517               	.LFB212:
 749:../../../os/rt/src/chthreads.c **** 
 750:../../../os/rt/src/chthreads.c **** /**
 751:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 752:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 753:../../../os/rt/src/chthreads.c ****  *          context.
 754:../../../os/rt/src/chthreads.c ****  *
 755:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 756:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 757:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 758:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 759:../../../os/rt/src/chthreads.c ****  *                        state.
 760:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not suspended and
 761:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 762:../../../os/rt/src/chthreads.c ****  *                        occurred.
 763:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 764:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 765:../../../os/rt/src/chthreads.c ****  *
 766:../../../os/rt/src/chthreads.c ****  * @sclass
 767:../../../os/rt/src/chthreads.c ****  */
 768:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 1518               		.loc 1 768 0
 1519               		.cfi_startproc
 1520               	.LVL105:
 1521               	/* prologue: function */
 1522               	/* frame size = 0 */
 1523               	/* stack size = 0 */
 1524               	.L__stack_usage = 0
 1525               	.LBB398:
 1526               	.LBB399:
 375:../../../os/rt/include/chthreads.h **** }
 1527               		.loc 4 375 0
 1528 0000 E091 0000 		lds r30,ch0+5
 1529 0004 F091 0000 		lds r31,ch0+5+1
 1530               	.LBE399:
 1531               	.LBE398:
 769:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 770:../../../os/rt/src/chthreads.c **** 
 771:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 772:../../../os/rt/src/chthreads.c **** 
 773:../../../os/rt/src/chthreads.c ****   if (unlikely(TIME_IMMEDIATE == timeout)) {
 1532               		.loc 1 773 0
 1533 0008 6115      		cp r22,__zero_reg__
 1534 000a 7105      		cpc r23,__zero_reg__
 1535 000c 01F0      		breq .L43
 774:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 775:../../../os/rt/src/chthreads.c ****   }
 776:../../../os/rt/src/chthreads.c **** 
 777:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1536               		.loc 1 777 0
 1537 000e DC01      		movw r26,r24
 1538 0010 ED93      		st X+,r30
 1539 0012 FC93      		st X,r31
 778:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1540               		.loc 1 778 0
 1541 0014 938B      		std Z+19,r25
 1542 0016 828B      		std Z+18,r24
 779:../../../os/rt/src/chthreads.c **** 
 780:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1543               		.loc 1 780 0
 1544 0018 83E0      		ldi r24,lo8(3)
 1545               	.LVL106:
 1546 001a 0C94 0000 		jmp chSchGoSleepTimeoutS
 1547               	.LVL107:
 1548               	.L43:
 781:../../../os/rt/src/chthreads.c **** }
 1549               		.loc 1 781 0
 1550 001e 8FEF      		ldi r24,lo8(-1)
 1551 0020 9FEF      		ldi r25,lo8(-1)
 1552               	.LVL108:
 1553 0022 0895      		ret
 1554               		.cfi_endproc
 1555               	.LFE212:
 1557               		.section	.text.chThdResumeI,"ax",@progbits
 1558               	.global	chThdResumeI
 1560               	chThdResumeI:
 1561               	.LFB213:
 782:../../../os/rt/src/chthreads.c **** 
 783:../../../os/rt/src/chthreads.c **** /**
 784:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 785:../../../os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 786:../../../os/rt/src/chthreads.c ****  *          ISR context.
 787:../../../os/rt/src/chthreads.c ****  *
 788:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 789:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 790:../../../os/rt/src/chthreads.c ****  *
 791:../../../os/rt/src/chthreads.c ****  * @iclass
 792:../../../os/rt/src/chthreads.c ****  */
 793:../../../os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1562               		.loc 1 793 0
 1563               		.cfi_startproc
 1564               	.LVL109:
 1565               	/* prologue: function */
 1566               	/* frame size = 0 */
 1567               	/* stack size = 0 */
 1568               	.L__stack_usage = 0
 794:../../../os/rt/src/chthreads.c **** 
 795:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1569               		.loc 1 795 0
 1570 0000 DC01      		movw r26,r24
 1571 0002 ED91      		ld r30,X+
 1572 0004 FC91      		ld r31,X
 1573 0006 1197      		sbiw r26,1
 1574 0008 3097      		sbiw r30,0
 1575 000a 01F0      		breq .L44
 1576               	.LVL110:
 1577               	.LBB400:
 796:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 797:../../../os/rt/src/chthreads.c **** 
 798:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 799:../../../os/rt/src/chthreads.c **** 
 800:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1578               		.loc 1 800 0
 1579 000c 1D92      		st X+,__zero_reg__
 1580 000e 1C92      		st X,__zero_reg__
 801:../../../os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1581               		.loc 1 801 0
 1582 0010 738B      		std Z+19,r23
 1583 0012 628B      		std Z+18,r22
 802:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1584               		.loc 1 802 0
 1585 0014 CF01      		movw r24,r30
 1586               	.LVL111:
 1587 0016 0C94 0000 		jmp chSchReadyI
 1588               	.LVL112:
 1589               	.L44:
 1590 001a 0895      		ret
 1591               	.LBE400:
 1592               		.cfi_endproc
 1593               	.LFE213:
 1595               		.section	.text.chThdResumeS,"ax",@progbits
 1596               	.global	chThdResumeS
 1598               	chThdResumeS:
 1599               	.LFB214:
 803:../../../os/rt/src/chthreads.c ****   }
 804:../../../os/rt/src/chthreads.c **** }
 805:../../../os/rt/src/chthreads.c **** 
 806:../../../os/rt/src/chthreads.c **** /**
 807:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 808:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 809:../../../os/rt/src/chthreads.c ****  *          context.
 810:../../../os/rt/src/chthreads.c ****  *
 811:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 812:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 813:../../../os/rt/src/chthreads.c ****  *
 814:../../../os/rt/src/chthreads.c ****  * @iclass
 815:../../../os/rt/src/chthreads.c ****  */
 816:../../../os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1600               		.loc 1 816 0
 1601               		.cfi_startproc
 1602               	.LVL113:
 1603               	/* prologue: function */
 1604               	/* frame size = 0 */
 1605               	/* stack size = 0 */
 1606               	.L__stack_usage = 0
 817:../../../os/rt/src/chthreads.c **** 
 818:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1607               		.loc 1 818 0
 1608 0000 FC01      		movw r30,r24
 1609 0002 2081      		ld r18,Z
 1610 0004 3181      		ldd r19,Z+1
 1611 0006 2115      		cp r18,__zero_reg__
 1612 0008 3105      		cpc r19,__zero_reg__
 1613 000a 01F0      		breq .L46
 1614               	.LVL114:
 1615               	.LBB401:
 819:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 820:../../../os/rt/src/chthreads.c **** 
 821:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 822:../../../os/rt/src/chthreads.c **** 
 823:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1616               		.loc 1 823 0
 1617 000c 1182      		std Z+1,__zero_reg__
 1618 000e 1082      		st Z,__zero_reg__
 824:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1619               		.loc 1 824 0
 1620 0010 C901      		movw r24,r18
 1621               	.LVL115:
 1622 0012 0C94 0000 		jmp chSchWakeupS
 1623               	.LVL116:
 1624               	.L46:
 1625 0016 0895      		ret
 1626               	.LBE401:
 1627               		.cfi_endproc
 1628               	.LFE214:
 1630               		.section	.text.chThdResume,"ax",@progbits
 1631               	.global	chThdResume
 1633               	chThdResume:
 1634               	.LFB215:
 825:../../../os/rt/src/chthreads.c ****   }
 826:../../../os/rt/src/chthreads.c **** }
 827:../../../os/rt/src/chthreads.c **** 
 828:../../../os/rt/src/chthreads.c **** /**
 829:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 830:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 831:../../../os/rt/src/chthreads.c ****  *          context.
 832:../../../os/rt/src/chthreads.c ****  *
 833:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 834:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 835:../../../os/rt/src/chthreads.c ****  *
 836:../../../os/rt/src/chthreads.c ****  * @api
 837:../../../os/rt/src/chthreads.c ****  */
 838:../../../os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1635               		.loc 1 838 0
 1636               		.cfi_startproc
 1637               	.LVL117:
 1638               	/* prologue: function */
 1639               	/* frame size = 0 */
 1640               	/* stack size = 0 */
 1641               	.L__stack_usage = 0
 1642 0000 FC01      		movw r30,r24
 1643               	.LBB402:
 1644               	.LBB403:
 1645               	.LBB404:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1646               		.loc 3 430 0
 1647               	/* #APP */
 1648               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1649 0002 F894      		cli
 1650               	 ;  0 "" 2
 1651               	.LVL118:
 1652               	/* #NOAPP */
 1653               	.LBE404:
 1654               	.LBE403:
 1655               	.LBE402:
 1656               	.LBB405:
 1657               	.LBB406:
 818:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1658               		.loc 1 818 0
 1659 0004 8081      		ld r24,Z
 1660 0006 9181      		ldd r25,Z+1
 1661               	.LVL119:
 1662 0008 0097      		sbiw r24,0
 1663 000a 01F0      		breq .L49
 1664               	.LVL120:
 1665               	.LBB407:
 823:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1666               		.loc 1 823 0
 1667 000c 1182      		std Z+1,__zero_reg__
 1668 000e 1082      		st Z,__zero_reg__
 824:../../../os/rt/src/chthreads.c ****   }
 1669               		.loc 1 824 0
 1670 0010 0E94 0000 		call chSchWakeupS
 1671               	.LVL121:
 1672               	.L49:
 1673               	.LBE407:
 1674               	.LBE406:
 1675               	.LBE405:
 1676               	.LBB408:
 1677               	.LBB409:
 1678               	.LBB410:
 1679               	.LBB411:
 1680               		.loc 3 440 0
 1681               	/* #APP */
 1682               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1683 0014 7894      		sei
 1684               	 ;  0 "" 2
 1685               	/* #NOAPP */
 1686 0016 0895      		ret
 1687               	.LBE411:
 1688               	.LBE410:
 1689               	.LBE409:
 1690               	.LBE408:
 1691               		.cfi_endproc
 1692               	.LFE215:
 1694               		.section	.text.chThdQueueObjectInit,"ax",@progbits
 1695               	.global	chThdQueueObjectInit
 1697               	chThdQueueObjectInit:
 1698               	.LFB216:
 839:../../../os/rt/src/chthreads.c **** 
 840:../../../os/rt/src/chthreads.c ****   chSysLock();
 841:../../../os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 842:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 843:../../../os/rt/src/chthreads.c **** }
 844:../../../os/rt/src/chthreads.c **** 
 845:../../../os/rt/src/chthreads.c **** /**
 846:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a threads queue object.
 847:../../../os/rt/src/chthreads.c ****  *
 848:../../../os/rt/src/chthreads.c ****  * @param[out] tqp      pointer to a @p threads_queue_t object
 849:../../../os/rt/src/chthreads.c ****  *
 850:../../../os/rt/src/chthreads.c ****  * @init
 851:../../../os/rt/src/chthreads.c ****  */
 852:../../../os/rt/src/chthreads.c **** void chThdQueueObjectInit(threads_queue_t *tqp) {
 1699               		.loc 1 852 0
 1700               		.cfi_startproc
 1701               	.LVL122:
 1702               	/* prologue: function */
 1703               	/* frame size = 0 */
 1704               	/* stack size = 0 */
 1705               	.L__stack_usage = 0
 1706               	.LBB412:
 1707               	.LBB413:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 1708               		.loc 2 284 0
 1709 0000 FC01      		movw r30,r24
 1710 0002 9183      		std Z+1,r25
 1711 0004 8083      		st Z,r24
 285:../../../os/rt/include/chlists.h **** }
 1712               		.loc 2 285 0
 1713 0006 9383      		std Z+3,r25
 1714 0008 8283      		std Z+2,r24
 1715               	.LVL123:
 1716 000a 0895      		ret
 1717               	.LBE413:
 1718               	.LBE412:
 1719               		.cfi_endproc
 1720               	.LFE216:
 1722               		.section	.text.chThdQueueObjectDispose,"ax",@progbits
 1723               	.global	chThdQueueObjectDispose
 1725               	chThdQueueObjectDispose:
 1726               	.LFB217:
 853:../../../os/rt/src/chthreads.c **** 
 854:../../../os/rt/src/chthreads.c ****   chDbgCheck(tqp);
 855:../../../os/rt/src/chthreads.c **** 
 856:../../../os/rt/src/chthreads.c ****   ch_queue_init(&tqp->queue);
 857:../../../os/rt/src/chthreads.c **** }
 858:../../../os/rt/src/chthreads.c **** 
 859:../../../os/rt/src/chthreads.c **** /**
 860:../../../os/rt/src/chthreads.c ****  * @brief   Disposes a threads queue.
 861:../../../os/rt/src/chthreads.c ****  * @note    Objects disposing does not involve freeing memory but just
 862:../../../os/rt/src/chthreads.c ****  *          performing checks that make sure that the object is in a
 863:../../../os/rt/src/chthreads.c ****  *          state compatible with operations stop.
 864:../../../os/rt/src/chthreads.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 865:../../../os/rt/src/chthreads.c ****  *          the object is also cleared, attempts to use the object would likely
 866:../../../os/rt/src/chthreads.c ****  *          result in a clean memory access violation because dereferencing
 867:../../../os/rt/src/chthreads.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 868:../../../os/rt/src/chthreads.c ****  *          pointers.
 869:../../../os/rt/src/chthreads.c ****  *
 870:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 871:../../../os/rt/src/chthreads.c ****  *
 872:../../../os/rt/src/chthreads.c ****  * @dispose
 873:../../../os/rt/src/chthreads.c ****  */
 874:../../../os/rt/src/chthreads.c **** void chThdQueueObjectDispose(threads_queue_t *tqp) {
 1727               		.loc 1 874 0
 1728               		.cfi_startproc
 1729               	.LVL124:
 1730               	/* prologue: function */
 1731               	/* frame size = 0 */
 1732               	/* stack size = 0 */
 1733               	.L__stack_usage = 0
 1734 0000 0895      		ret
 1735               		.cfi_endproc
 1736               	.LFE217:
 1738               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 1739               	.global	chThdEnqueueTimeoutS
 1741               	chThdEnqueueTimeoutS:
 1742               	.LFB218:
 875:../../../os/rt/src/chthreads.c **** 
 876:../../../os/rt/src/chthreads.c ****   chDbgCheck(tqp != NULL);
 877:../../../os/rt/src/chthreads.c ****   chDbgAssert(ch_queue_isempty(&tqp->queue),
 878:../../../os/rt/src/chthreads.c ****               "object in use");
 879:../../../os/rt/src/chthreads.c **** 
 880:../../../os/rt/src/chthreads.c **** #if CH_CFG_HARDENING_LEVEL > 0
 881:../../../os/rt/src/chthreads.c ****   memset((void *)tqp, 0, sizeof (threads_queue_t));
 882:../../../os/rt/src/chthreads.c **** #endif
 883:../../../os/rt/src/chthreads.c **** }
 884:../../../os/rt/src/chthreads.c **** 
 885:../../../os/rt/src/chthreads.c **** /**
 886:../../../os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 887:../../../os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 888:../../../os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 889:../../../os/rt/src/chthreads.c ****  *
 890:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 891:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 892:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 893:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 894:../../../os/rt/src/chthreads.c ****  *                        state.
 895:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 896:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 897:../../../os/rt/src/chthreads.c ****  *                        occurred.
 898:../../../os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 899:../../../os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 900:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 901:../../../os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 902:../../../os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 903:../../../os/rt/src/chthreads.c ****  *                      specification.
 904:../../../os/rt/src/chthreads.c ****  *
 905:../../../os/rt/src/chthreads.c ****  * @sclass
 906:../../../os/rt/src/chthreads.c ****  */
 907:../../../os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 1743               		.loc 1 907 0
 1744               		.cfi_startproc
 1745               	.LVL125:
 1746               		.loc 1 907 0
 1747 0000 CF93      		push r28
 1748               	.LCFI25:
 1749               		.cfi_def_cfa_offset 3
 1750               		.cfi_offset 28, -2
 1751 0002 DF93      		push r29
 1752               	.LCFI26:
 1753               		.cfi_def_cfa_offset 4
 1754               		.cfi_offset 29, -3
 1755               	/* prologue: function */
 1756               	/* frame size = 0 */
 1757               	/* stack size = 2 */
 1758               	.L__stack_usage = 2
 1759               	.LBB414:
 1760               	.LBB415:
 375:../../../os/rt/include/chthreads.h **** }
 1761               		.loc 4 375 0
 1762 0004 E091 0000 		lds r30,ch0+5
 1763 0008 F091 0000 		lds r31,ch0+5+1
 1764               	.LBE415:
 1765               	.LBE414:
 908:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 909:../../../os/rt/src/chthreads.c **** 
 910:../../../os/rt/src/chthreads.c ****   if (unlikely(TIME_IMMEDIATE == timeout)) {
 1766               		.loc 1 910 0
 1767 000c 6115      		cp r22,__zero_reg__
 1768 000e 7105      		cpc r23,__zero_reg__
 1769 0010 01F0      		breq .L56
 1770               	.LVL126:
 1771               	.LBB416:
 1772               	.LBB417:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 1773               		.loc 2 324 0
 1774 0012 9183      		std Z+1,r25
 1775 0014 8083      		st Z,r24
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 1776               		.loc 2 325 0
 1777 0016 EC01      		movw r28,r24
 1778 0018 AA81      		ldd r26,Y+2
 1779 001a BB81      		ldd r27,Y+3
 1780 001c B383      		std Z+3,r27
 1781 001e A283      		std Z+2,r26
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 1782               		.loc 2 326 0
 1783 0020 ED93      		st X+,r30
 1784 0022 FC93      		st X,r31
 327:../../../os/rt/include/chlists.h **** }
 1785               		.loc 2 327 0
 1786 0024 FB83      		std Y+3,r31
 1787 0026 EA83      		std Y+2,r30
 1788               	.LVL127:
 1789               	.LBE417:
 1790               	.LBE416:
 911:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 912:../../../os/rt/src/chthreads.c ****   }
 913:../../../os/rt/src/chthreads.c **** 
 914:../../../os/rt/src/chthreads.c ****   ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 915:../../../os/rt/src/chthreads.c **** 
 916:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 1791               		.loc 1 916 0
 1792 0028 84E0      		ldi r24,lo8(4)
 1793               	.LVL128:
 1794               	/* epilogue start */
 917:../../../os/rt/src/chthreads.c **** }
 1795               		.loc 1 917 0
 1796 002a DF91      		pop r29
 1797 002c CF91      		pop r28
 1798               	.LVL129:
 916:../../../os/rt/src/chthreads.c **** }
 1799               		.loc 1 916 0
 1800 002e 0C94 0000 		jmp chSchGoSleepTimeoutS
 1801               	.LVL130:
 1802               	.L56:
 1803               		.loc 1 917 0
 1804 0032 8FEF      		ldi r24,lo8(-1)
 1805 0034 9FEF      		ldi r25,lo8(-1)
 1806               	.LVL131:
 1807               	/* epilogue start */
 1808 0036 DF91      		pop r29
 1809 0038 CF91      		pop r28
 1810 003a 0895      		ret
 1811               		.cfi_endproc
 1812               	.LFE218:
 1814               		.section	.text.chThdDequeueNextI,"ax",@progbits
 1815               	.global	chThdDequeueNextI
 1817               	chThdDequeueNextI:
 1818               	.LFB219:
 918:../../../os/rt/src/chthreads.c **** 
 919:../../../os/rt/src/chthreads.c **** /**
 920:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 921:../../../os/rt/src/chthreads.c ****  *          if any.
 922:../../../os/rt/src/chthreads.c ****  *
 923:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 924:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 925:../../../os/rt/src/chthreads.c ****  *
 926:../../../os/rt/src/chthreads.c ****  * @iclass
 927:../../../os/rt/src/chthreads.c ****  */
 928:../../../os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1819               		.loc 1 928 0
 1820               		.cfi_startproc
 1821               	.LVL132:
 1822 0000 CF93      		push r28
 1823               	.LCFI27:
 1824               		.cfi_def_cfa_offset 3
 1825               		.cfi_offset 28, -2
 1826 0002 DF93      		push r29
 1827               	.LCFI28:
 1828               		.cfi_def_cfa_offset 4
 1829               		.cfi_offset 29, -3
 1830               	/* prologue: function */
 1831               	/* frame size = 0 */
 1832               	/* stack size = 2 */
 1833               	.L__stack_usage = 2
 1834 0004 FC01      		movw r30,r24
 1835               	.LVL133:
 1836               	.LBB418:
 1837               	.LBB419:
 311:../../../os/rt/include/chlists.h **** }
 1838               		.loc 2 311 0
 1839 0006 8081      		ld r24,Z
 1840 0008 9181      		ldd r25,Z+1
 1841               	.LVL134:
 1842               	.LBE419:
 1843               	.LBE418:
 929:../../../os/rt/src/chthreads.c **** 
 930:../../../os/rt/src/chthreads.c ****   if (ch_queue_notempty(&tqp->queue)) {
 1844               		.loc 1 930 0
 1845 000a E817      		cp r30,r24
 1846 000c F907      		cpc r31,r25
 1847 000e 01F0      		breq .L57
 1848               	.LVL135:
 1849               	.LBB420:
 1850               	.LBB421:
 1851               	.LBB422:
 1852               	.LBB423:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1853               		.loc 2 343 0
 1854 0010 EC01      		movw r28,r24
 1855 0012 A881      		ld r26,Y
 1856 0014 B981      		ldd r27,Y+1
 1857 0016 B183      		std Z+1,r27
 1858 0018 A083      		st Z,r26
 344:../../../os/rt/include/chlists.h **** 
 1859               		.loc 2 344 0
 1860 001a 1396      		adiw r26,2+1
 1861 001c FC93      		st X,r31
 1862 001e EE93      		st -X,r30
 1863 0020 1297      		sbiw r26,2
 1864               	.LVL136:
 1865               	.LBE423:
 1866               	.LBE422:
 483:../../../os/rt/include/chthreads.h **** }
 484:../../../os/rt/include/chthreads.h **** 
 485:../../../os/rt/include/chthreads.h **** /**
 486:../../../os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 487:../../../os/rt/include/chthreads.h ****  *
 488:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to a @p threads_queue_t object
 489:../../../os/rt/include/chthreads.h ****  * @return              The queue status.
 490:../../../os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 491:../../../os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 492:../../../os/rt/include/chthreads.h ****  *
 493:../../../os/rt/include/chthreads.h ****  * @iclass
 494:../../../os/rt/include/chthreads.h ****  */
 495:../../../os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 496:../../../os/rt/include/chthreads.h **** 
 497:../../../os/rt/include/chthreads.h ****   chDbgCheckClassI();
 498:../../../os/rt/include/chthreads.h **** 
 499:../../../os/rt/include/chthreads.h ****   return ch_queue_isempty(&tqp->queue);
 500:../../../os/rt/include/chthreads.h **** }
 501:../../../os/rt/include/chthreads.h **** 
 502:../../../os/rt/include/chthreads.h **** /**
 503:../../../os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 504:../../../os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 505:../../../os/rt/include/chthreads.h ****  *          is empty.
 506:../../../os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 507:../../../os/rt/include/chthreads.h ****  *
 508:../../../os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 509:../../../os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 510:../../../os/rt/include/chthreads.h ****  *
 511:../../../os/rt/include/chthreads.h ****  * @iclass
 512:../../../os/rt/include/chthreads.h ****  */
 513:../../../os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 514:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 515:../../../os/rt/include/chthreads.h **** 
 516:../../../os/rt/include/chthreads.h ****   chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");
 517:../../../os/rt/include/chthreads.h **** 
 518:../../../os/rt/include/chthreads.h ****   tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 519:../../../os/rt/include/chthreads.h **** 
 520:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 521:../../../os/rt/include/chthreads.h **** 
 522:../../../os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 1867               		.loc 4 522 0
 1868 0022 7B8B      		std Y+19,r23
 1869 0024 6A8B      		std Y+18,r22
 1870               	/* epilogue start */
 1871               	.LBE421:
 1872               	.LBE420:
 931:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 932:../../../os/rt/src/chthreads.c ****   }
 933:../../../os/rt/src/chthreads.c **** }
 1873               		.loc 1 933 0
 1874 0026 DF91      		pop r29
 1875 0028 CF91      		pop r28
 1876               	.LBB425:
 1877               	.LBB424:
 523:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1878               		.loc 4 523 0
 1879 002a 0C94 0000 		jmp chSchReadyI
 1880               	.LVL137:
 1881               	.L57:
 1882               	/* epilogue start */
 1883               	.LBE424:
 1884               	.LBE425:
 1885               		.loc 1 933 0
 1886 002e DF91      		pop r29
 1887 0030 CF91      		pop r28
 1888 0032 0895      		ret
 1889               		.cfi_endproc
 1890               	.LFE219:
 1892               		.section	.text.chThdDequeueAllI,"ax",@progbits
 1893               	.global	chThdDequeueAllI
 1895               	chThdDequeueAllI:
 1896               	.LFB220:
 934:../../../os/rt/src/chthreads.c **** 
 935:../../../os/rt/src/chthreads.c **** /**
 936:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 937:../../../os/rt/src/chthreads.c ****  *
 938:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 939:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 940:../../../os/rt/src/chthreads.c ****  *
 941:../../../os/rt/src/chthreads.c ****  * @iclass
 942:../../../os/rt/src/chthreads.c ****  */
 943:../../../os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1897               		.loc 1 943 0
 1898               		.cfi_startproc
 1899               	.LVL138:
 1900 0000 0F93      		push r16
 1901               	.LCFI29:
 1902               		.cfi_def_cfa_offset 3
 1903               		.cfi_offset 16, -2
 1904 0002 1F93      		push r17
 1905               	.LCFI30:
 1906               		.cfi_def_cfa_offset 4
 1907               		.cfi_offset 17, -3
 1908 0004 CF93      		push r28
 1909               	.LCFI31:
 1910               		.cfi_def_cfa_offset 5
 1911               		.cfi_offset 28, -4
 1912 0006 DF93      		push r29
 1913               	.LCFI32:
 1914               		.cfi_def_cfa_offset 6
 1915               		.cfi_offset 29, -5
 1916               	/* prologue: function */
 1917               	/* frame size = 0 */
 1918               	/* stack size = 4 */
 1919               	.L__stack_usage = 4
 1920 0008 EC01      		movw r28,r24
 1921 000a 8B01      		movw r16,r22
 1922               	.LVL139:
 1923               	.LBB426:
 1924               	.LBB427:
 311:../../../os/rt/include/chlists.h **** }
 1925               		.loc 2 311 0
 1926 000c 8881      		ld r24,Y
 1927 000e 9981      		ldd r25,Y+1
 1928               	.LVL140:
 1929               	.LBE427:
 1930               	.LBE426:
 944:../../../os/rt/src/chthreads.c **** 
 945:../../../os/rt/src/chthreads.c ****   while (ch_queue_notempty(&tqp->queue)) {
 1931               		.loc 1 945 0
 1932 0010 C817      		cp r28,r24
 1933 0012 D907      		cpc r29,r25
 1934 0014 01F0      		breq .L59
 1935               	.LVL141:
 1936               	.L63:
 1937               	.LBB429:
 1938               	.LBB430:
 1939               	.LBB431:
 1940               	.LBB432:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1941               		.loc 2 343 0
 1942 0016 DC01      		movw r26,r24
 1943 0018 ED91      		ld r30,X+
 1944 001a FC91      		ld r31,X
 1945 001c 1197      		sbiw r26,1
 1946 001e F983      		std Y+1,r31
 1947 0020 E883      		st Y,r30
 344:../../../os/rt/include/chlists.h **** 
 1948               		.loc 2 344 0
 1949 0022 D383      		std Z+3,r29
 1950 0024 C283      		std Z+2,r28
 1951               	.LVL142:
 1952               	.LBE432:
 1953               	.LBE431:
 522:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1954               		.loc 4 522 0
 1955 0026 5396      		adiw r26,18+1
 1956 0028 1C93      		st X,r17
 1957 002a 0E93      		st -X,r16
 1958 002c 5297      		sbiw r26,18
 1959               		.loc 4 523 0
 1960 002e 0E94 0000 		call chSchReadyI
 1961               	.LVL143:
 1962               	.LBE430:
 1963               	.LBE429:
 1964               	.LBB433:
 1965               	.LBB428:
 311:../../../os/rt/include/chlists.h **** }
 1966               		.loc 2 311 0
 1967 0032 8881      		ld r24,Y
 1968 0034 9981      		ldd r25,Y+1
 1969               	.LVL144:
 1970               	.LBE428:
 1971               	.LBE433:
 1972               		.loc 1 945 0
 1973 0036 8C17      		cp r24,r28
 1974 0038 9D07      		cpc r25,r29
 1975 003a 01F4      		brne .L63
 1976               	.LVL145:
 1977               	.L59:
 1978               	/* epilogue start */
 946:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 947:../../../os/rt/src/chthreads.c ****   }
 948:../../../os/rt/src/chthreads.c **** }
 1979               		.loc 1 948 0
 1980 003c DF91      		pop r29
 1981 003e CF91      		pop r28
 1982               	.LVL146:
 1983 0040 1F91      		pop r17
 1984 0042 0F91      		pop r16
 1985               	.LVL147:
 1986 0044 0895      		ret
 1987               		.cfi_endproc
 1988               	.LFE220:
 1990               		.text
 1991               	.Letext0:
 1992               		.file 7 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1993               		.file 8 "/usr/lib/avr/include/stdint.h"
 1994               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1995               		.file 10 "../../../os/rt/include/chearly.h"
 1996               		.file 11 "../../../os/rt/include/chobjects.h"
 1997               		.file 12 "../../../os/rt/include/chrfcu.h"
 1998               		.file 13 "../../../os/rt/include/chdebug.h"
 1999               		.file 14 "../../../os/rt/include/chsem.h"
 2000               		.file 15 "../../../os/rt/include/chmtx.h"
 2001               		.file 16 "../../../os/rt/include/chsys.h"
 2002               		.file 17 "../../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
     /tmp/ccrJkEjj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccrJkEjj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccrJkEjj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccrJkEjj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccrJkEjj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccrJkEjj.s:13     .text.__thd_object_init:0000000000000000 __thd_object_init
     /tmp/ccrJkEjj.s:128    .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
     /tmp/ccrJkEjj.s:298    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
     /tmp/ccrJkEjj.s:345    .text.chThdCreateI:0000000000000000 chThdCreateI
     /tmp/ccrJkEjj.s:365    .text.chThdCreate:0000000000000000 chThdCreate
     /tmp/ccrJkEjj.s:434    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
     /tmp/ccrJkEjj.s:611    .text.chThdStart:0000000000000000 chThdStart
     /tmp/ccrJkEjj.s:673    .text.chThdAddRef:0000000000000000 chThdAddRef
     /tmp/ccrJkEjj.s:721    .text.chThdRelease:0000000000000000 chThdRelease
     /tmp/ccrJkEjj.s:818    .text.chThdExitS:0000000000000000 chThdExitS
     /tmp/ccrJkEjj.s:942    .text.chThdExit:0000000000000000 chThdExit
     /tmp/ccrJkEjj.s:972    .text.chThdWait:0000000000000000 chThdWait
     /tmp/ccrJkEjj.s:1079   .text.chThdSetPriority:0000000000000000 chThdSetPriority
     /tmp/ccrJkEjj.s:1156   .text.chThdTerminate:0000000000000000 chThdTerminate
     /tmp/ccrJkEjj.s:1203   .text.chThdSleep:0000000000000000 chThdSleep
     /tmp/ccrJkEjj.s:1256   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
     /tmp/ccrJkEjj.s:1330   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
     /tmp/ccrJkEjj.s:1418   .text.chThdYield:0000000000000000 chThdYield
     /tmp/ccrJkEjj.s:1462   .text.chThdSuspendS:0000000000000000 chThdSuspendS
     /tmp/ccrJkEjj.s:1516   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
     /tmp/ccrJkEjj.s:1560   .text.chThdResumeI:0000000000000000 chThdResumeI
     /tmp/ccrJkEjj.s:1598   .text.chThdResumeS:0000000000000000 chThdResumeS
     /tmp/ccrJkEjj.s:1633   .text.chThdResume:0000000000000000 chThdResume
     /tmp/ccrJkEjj.s:1697   .text.chThdQueueObjectInit:0000000000000000 chThdQueueObjectInit
     /tmp/ccrJkEjj.s:1725   .text.chThdQueueObjectDispose:0000000000000000 chThdQueueObjectDispose
     /tmp/ccrJkEjj.s:1741   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
     /tmp/ccrJkEjj.s:1817   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
     /tmp/ccrJkEjj.s:1895   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
_port_thread_start
ch0
chSchReadyI
chSchWakeupS
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
chSchDoYieldS
__do_copy_data
