   1               		.file	"hal_queues.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.iq_read,"ax",@progbits
  12               	iq_read:
  13               	.LFB241:
  14               		.file 1 "../../../os/hal/src/hal_queues.c"
   1:../../../os/hal/src/hal_queues.c **** /*
   2:../../../os/hal/src/hal_queues.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_queues.c **** 
   4:../../../os/hal/src/hal_queues.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_queues.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_queues.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_queues.c **** 
   8:../../../os/hal/src/hal_queues.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_queues.c **** 
  10:../../../os/hal/src/hal_queues.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_queues.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_queues.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_queues.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_queues.c ****     limitations under the License.
  15:../../../os/hal/src/hal_queues.c **** */
  16:../../../os/hal/src/hal_queues.c **** 
  17:../../../os/hal/src/hal_queues.c **** /**
  18:../../../os/hal/src/hal_queues.c ****  * @file    hal_queues.c
  19:../../../os/hal/src/hal_queues.c ****  * @brief   I/O Queues code.
  20:../../../os/hal/src/hal_queues.c ****  *
  21:../../../os/hal/src/hal_queues.c ****  * @addtogroup HAL_QUEUES
  22:../../../os/hal/src/hal_queues.c ****  * @details Queues are mostly used in serial-like device drivers.
  23:../../../os/hal/src/hal_queues.c ****  *          Serial device drivers are usually designed to have a lower side
  24:../../../os/hal/src/hal_queues.c ****  *          (lower driver, it is usually an interrupt service routine) and an
  25:../../../os/hal/src/hal_queues.c ****  *          upper side (upper driver, accessed by the application threads).<br>
  26:../../../os/hal/src/hal_queues.c ****  *          There are several kind of queues:<br>
  27:../../../os/hal/src/hal_queues.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  28:../../../os/hal/src/hal_queues.c ****  *            lower side and the reader is the upper side.
  29:../../../os/hal/src/hal_queues.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  30:../../../os/hal/src/hal_queues.c ****  *            upper side and the reader is the lower side.
  31:../../../os/hal/src/hal_queues.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  32:../../../os/hal/src/hal_queues.c ****  *            are implemented by pairing an input queue and an output queue
  33:../../../os/hal/src/hal_queues.c ****  *            together.
  34:../../../os/hal/src/hal_queues.c ****  *          .
  35:../../../os/hal/src/hal_queues.c ****  * @{
  36:../../../os/hal/src/hal_queues.c ****  */
  37:../../../os/hal/src/hal_queues.c **** 
  38:../../../os/hal/src/hal_queues.c **** #include <string.h>
  39:../../../os/hal/src/hal_queues.c **** 
  40:../../../os/hal/src/hal_queues.c **** #include "hal.h"
  41:../../../os/hal/src/hal_queues.c **** 
  42:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  43:../../../os/hal/src/hal_queues.c **** /* Driver local definitions.                                                 */
  44:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
  45:../../../os/hal/src/hal_queues.c **** 
  46:../../../os/hal/src/hal_queues.c **** /**
  47:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking input queue read.
  48:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
  49:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  50:../../../os/hal/src/hal_queues.c ****  *          transferred or when the input queue has been emptied.
  51:../../../os/hal/src/hal_queues.c ****  *
  52:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
  53:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
  54:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
  55:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
  56:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
  57:../../../os/hal/src/hal_queues.c ****  *
  58:../../../os/hal/src/hal_queues.c ****  * @notapi
  59:../../../os/hal/src/hal_queues.c ****  */
  60:../../../os/hal/src/hal_queues.c **** static size_t iq_read(input_queue_t *iqp, uint8_t *bp, size_t n) {
  15               		.loc 1 60 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 AF92      		push r10
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 10, -2
  22 0002 BF92      		push r11
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 11, -3
  26 0004 CF92      		push r12
  27               	.LCFI2:
  28               		.cfi_def_cfa_offset 5
  29               		.cfi_offset 12, -4
  30 0006 DF92      		push r13
  31               	.LCFI3:
  32               		.cfi_def_cfa_offset 6
  33               		.cfi_offset 13, -5
  34 0008 EF92      		push r14
  35               	.LCFI4:
  36               		.cfi_def_cfa_offset 7
  37               		.cfi_offset 14, -6
  38 000a FF92      		push r15
  39               	.LCFI5:
  40               		.cfi_def_cfa_offset 8
  41               		.cfi_offset 15, -7
  42 000c 0F93      		push r16
  43               	.LCFI6:
  44               		.cfi_def_cfa_offset 9
  45               		.cfi_offset 16, -8
  46 000e 1F93      		push r17
  47               	.LCFI7:
  48               		.cfi_def_cfa_offset 10
  49               		.cfi_offset 17, -9
  50 0010 CF93      		push r28
  51               	.LCFI8:
  52               		.cfi_def_cfa_offset 11
  53               		.cfi_offset 28, -10
  54 0012 DF93      		push r29
  55               	.LCFI9:
  56               		.cfi_def_cfa_offset 12
  57               		.cfi_offset 29, -11
  58               	/* prologue: function */
  59               	/* frame size = 0 */
  60               	/* stack size = 10 */
  61               	.L__stack_usage = 10
  62 0014 EC01      		movw r28,r24
  63 0016 6B01      		movw r12,r22
  64 0018 8A01      		movw r16,r20
  61:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
  62:../../../os/hal/src/hal_queues.c **** 
  63:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
  64:../../../os/hal/src/hal_queues.c **** 
  65:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be read in a single atomic operation.*/
  66:../../../os/hal/src/hal_queues.c ****   if (n > iqGetFullI(iqp)) {
  65               		.loc 1 66 0
  66 001a 8C81      		ldd r24,Y+4
  67 001c 9D81      		ldd r25,Y+5
  68               	.LVL1:
  69 001e 8417      		cp r24,r20
  70 0020 9507      		cpc r25,r21
  71 0022 00F4      		brsh .L2
  67:../../../os/hal/src/hal_queues.c ****     n = iqGetFullI(iqp);
  72               		.loc 1 67 0
  73 0024 0C81      		ldd r16,Y+4
  74 0026 1D81      		ldd r17,Y+5
  75               	.LVL2:
  76               	.L2:
  68:../../../os/hal/src/hal_queues.c ****   }
  69:../../../os/hal/src/hal_queues.c **** 
  70:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
  71:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
  72:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(iqp->q_top - iqp->q_rdptr);
  77               		.loc 1 72 0
  78 0028 6C85      		ldd r22,Y+12
  79 002a 7D85      		ldd r23,Y+13
  80               	.LVL3:
  81 002c E884      		ldd r14,Y+8
  82 002e F984      		ldd r15,Y+9
  83 0030 E61A      		sub r14,r22
  84 0032 F70A      		sbc r15,r23
  85               	.LVL4:
  73:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
  74:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
  86               		.loc 1 74 0
  87 0034 0E15      		cp r16,r14
  88 0036 1F05      		cpc r17,r15
  89 0038 00F0      		brlo .L7
  75:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  76:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
  77:../../../os/hal/src/hal_queues.c ****   }
  78:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
  90               		.loc 1 78 0
  91 003a E016      		cp r14,r16
  92 003c F106      		cpc r15,r17
  93 003e 00F0      		brlo .L8
  79:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, s1);
  80:../../../os/hal/src/hal_queues.c ****     bp += s1;
  81:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
  82:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
  83:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
  84:../../../os/hal/src/hal_queues.c ****   }
  85:../../../os/hal/src/hal_queues.c ****   else {
  86:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_rdptr, n);
  94               		.loc 1 86 0
  95 0040 A801      		movw r20,r16
  96 0042 C601      		movw r24,r12
  97 0044 0E94 0000 		call memcpy
  98               	.LVL5:
  87:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
  99               		.loc 1 87 0
 100 0048 8E81      		ldd r24,Y+6
 101 004a 9F81      		ldd r25,Y+7
 102 004c 9D87      		std Y+13,r25
 103 004e 8C87      		std Y+12,r24
 104               	.LVL6:
 105               	.L4:
  88:../../../os/hal/src/hal_queues.c ****   }
  89:../../../os/hal/src/hal_queues.c **** 
  90:../../../os/hal/src/hal_queues.c ****   iqp->q_counter -= n;
 106               		.loc 1 90 0
 107 0050 8C81      		ldd r24,Y+4
 108 0052 9D81      		ldd r25,Y+5
 109 0054 801B      		sub r24,r16
 110 0056 910B      		sbc r25,r17
 111 0058 9D83      		std Y+5,r25
 112 005a 8C83      		std Y+4,r24
  91:../../../os/hal/src/hal_queues.c ****   return n;
  92:../../../os/hal/src/hal_queues.c **** }
 113               		.loc 1 92 0
 114 005c C801      		movw r24,r16
 115               	/* epilogue start */
 116 005e DF91      		pop r29
 117 0060 CF91      		pop r28
 118               	.LVL7:
 119 0062 1F91      		pop r17
 120 0064 0F91      		pop r16
 121               	.LVL8:
 122 0066 FF90      		pop r15
 123 0068 EF90      		pop r14
 124               	.LVL9:
 125 006a DF90      		pop r13
 126 006c CF90      		pop r12
 127 006e BF90      		pop r11
 128 0070 AF90      		pop r10
 129 0072 0895      		ret
 130               	.LVL10:
 131               	.L8:
  79:../../../os/hal/src/hal_queues.c ****     bp += s1;
 132               		.loc 1 79 0
 133 0074 A701      		movw r20,r14
 134 0076 C601      		movw r24,r12
 135 0078 0E94 0000 		call memcpy
 136               	.LVL11:
  81:../../../os/hal/src/hal_queues.c ****     memcpy((void *)bp, (void *)iqp->q_buffer, s2);
 137               		.loc 1 81 0
 138 007c 5801      		movw r10,r16
 139 007e AE18      		sub r10,r14
 140 0080 BF08      		sbc r11,r15
 141               	.LVL12:
  82:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer + s2;
 142               		.loc 1 82 0
 143 0082 6E81      		ldd r22,Y+6
 144 0084 7F81      		ldd r23,Y+7
 145 0086 A501      		movw r20,r10
 146 0088 C601      		movw r24,r12
 147 008a 8E0D      		add r24,r14
 148 008c 9F1D      		adc r25,r15
 149               	.LVL13:
 150 008e 0E94 0000 		call memcpy
 151               	.LVL14:
  83:../../../os/hal/src/hal_queues.c ****   }
 152               		.loc 1 83 0
 153 0092 8E81      		ldd r24,Y+6
 154 0094 9F81      		ldd r25,Y+7
 155 0096 A80E      		add r10,r24
 156 0098 B91E      		adc r11,r25
 157               	.LVL15:
 158 009a BD86      		std Y+13,r11
 159 009c AC86      		std Y+12,r10
 160 009e 00C0      		rjmp .L4
 161               	.LVL16:
 162               	.L7:
  75:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr += n;
 163               		.loc 1 75 0
 164 00a0 A801      		movw r20,r16
 165 00a2 C601      		movw r24,r12
 166 00a4 0E94 0000 		call memcpy
 167               	.LVL17:
  76:../../../os/hal/src/hal_queues.c ****   }
 168               		.loc 1 76 0
 169 00a8 8C85      		ldd r24,Y+12
 170 00aa 9D85      		ldd r25,Y+13
 171 00ac 800F      		add r24,r16
 172 00ae 911F      		adc r25,r17
 173 00b0 9D87      		std Y+13,r25
 174 00b2 8C87      		std Y+12,r24
 175 00b4 00C0      		rjmp .L4
 176               		.cfi_endproc
 177               	.LFE241:
 179               		.section	.text.oq_write,"ax",@progbits
 181               	oq_write:
 182               	.LFB242:
  93:../../../os/hal/src/hal_queues.c **** 
  94:../../../os/hal/src/hal_queues.c **** /**
  95:../../../os/hal/src/hal_queues.c ****  * @brief   Non-blocking output queue write.
  96:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
  97:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
  98:../../../os/hal/src/hal_queues.c ****  *          transferred or when the output queue has been filled.
  99:../../../os/hal/src/hal_queues.c ****  *
 100:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 101:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 102:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 103:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 104:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 105:../../../os/hal/src/hal_queues.c ****  *
 106:../../../os/hal/src/hal_queues.c ****  * @notapi
 107:../../../os/hal/src/hal_queues.c ****  */
 108:../../../os/hal/src/hal_queues.c **** static size_t oq_write(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 183               		.loc 1 108 0
 184               		.cfi_startproc
 185               	.LVL18:
 186 0000 AF92      		push r10
 187               	.LCFI10:
 188               		.cfi_def_cfa_offset 3
 189               		.cfi_offset 10, -2
 190 0002 BF92      		push r11
 191               	.LCFI11:
 192               		.cfi_def_cfa_offset 4
 193               		.cfi_offset 11, -3
 194 0004 CF92      		push r12
 195               	.LCFI12:
 196               		.cfi_def_cfa_offset 5
 197               		.cfi_offset 12, -4
 198 0006 DF92      		push r13
 199               	.LCFI13:
 200               		.cfi_def_cfa_offset 6
 201               		.cfi_offset 13, -5
 202 0008 EF92      		push r14
 203               	.LCFI14:
 204               		.cfi_def_cfa_offset 7
 205               		.cfi_offset 14, -6
 206 000a FF92      		push r15
 207               	.LCFI15:
 208               		.cfi_def_cfa_offset 8
 209               		.cfi_offset 15, -7
 210 000c 0F93      		push r16
 211               	.LCFI16:
 212               		.cfi_def_cfa_offset 9
 213               		.cfi_offset 16, -8
 214 000e 1F93      		push r17
 215               	.LCFI17:
 216               		.cfi_def_cfa_offset 10
 217               		.cfi_offset 17, -9
 218 0010 CF93      		push r28
 219               	.LCFI18:
 220               		.cfi_def_cfa_offset 11
 221               		.cfi_offset 28, -10
 222 0012 DF93      		push r29
 223               	.LCFI19:
 224               		.cfi_def_cfa_offset 12
 225               		.cfi_offset 29, -11
 226               	/* prologue: function */
 227               	/* frame size = 0 */
 228               	/* stack size = 10 */
 229               	.L__stack_usage = 10
 230 0014 EC01      		movw r28,r24
 231 0016 6B01      		movw r12,r22
 232 0018 8A01      		movw r16,r20
 109:../../../os/hal/src/hal_queues.c ****   size_t s1, s2;
 110:../../../os/hal/src/hal_queues.c **** 
 111:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 112:../../../os/hal/src/hal_queues.c **** 
 113:../../../os/hal/src/hal_queues.c ****   /* Number of bytes that can be written in a single atomic operation.*/
 114:../../../os/hal/src/hal_queues.c ****   if (n > oqGetEmptyI(oqp)) {
 233               		.loc 1 114 0
 234 001a 8C81      		ldd r24,Y+4
 235 001c 9D81      		ldd r25,Y+5
 236               	.LVL19:
 237 001e 8417      		cp r24,r20
 238 0020 9507      		cpc r25,r21
 239 0022 00F4      		brsh .L10
 115:../../../os/hal/src/hal_queues.c ****     n = oqGetEmptyI(oqp);
 240               		.loc 1 115 0
 241 0024 0C81      		ldd r16,Y+4
 242 0026 1D81      		ldd r17,Y+5
 243               	.LVL20:
 244               	.L10:
 116:../../../os/hal/src/hal_queues.c ****   }
 117:../../../os/hal/src/hal_queues.c **** 
 118:../../../os/hal/src/hal_queues.c ****   /* Number of bytes before buffer limit.*/
 119:../../../os/hal/src/hal_queues.c ****   /*lint -save -e9033 [10.8] Checked to be safe.*/
 120:../../../os/hal/src/hal_queues.c ****   s1 = (size_t)(oqp->q_top - oqp->q_wrptr);
 245               		.loc 1 120 0
 246 0028 8A85      		ldd r24,Y+10
 247 002a 9B85      		ldd r25,Y+11
 248 002c E884      		ldd r14,Y+8
 249 002e F984      		ldd r15,Y+9
 250 0030 E81A      		sub r14,r24
 251 0032 F90A      		sbc r15,r25
 252               	.LVL21:
 121:../../../os/hal/src/hal_queues.c ****   /*lint -restore*/
 122:../../../os/hal/src/hal_queues.c ****   if (n < s1) {
 253               		.loc 1 122 0
 254 0034 0E15      		cp r16,r14
 255 0036 1F05      		cpc r17,r15
 256 0038 00F0      		brlo .L14
 123:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 124:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 125:../../../os/hal/src/hal_queues.c ****   }
 126:../../../os/hal/src/hal_queues.c ****   else if (n > s1) {
 257               		.loc 1 126 0
 258 003a E016      		cp r14,r16
 259 003c F106      		cpc r15,r17
 260 003e 00F0      		brlo .L15
 127:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, s1);
 128:../../../os/hal/src/hal_queues.c ****     bp += s1;
 129:../../../os/hal/src/hal_queues.c ****     s2 = n - s1;
 130:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 131:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 132:../../../os/hal/src/hal_queues.c ****   }
 133:../../../os/hal/src/hal_queues.c ****   else {
 134:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_wrptr, (const void *)bp, n);
 261               		.loc 1 134 0
 262 0040 A801      		movw r20,r16
 263 0042 B601      		movw r22,r12
 264               	.LVL22:
 265 0044 0E94 0000 		call memcpy
 266               	.LVL23:
 135:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 267               		.loc 1 135 0
 268 0048 8E81      		ldd r24,Y+6
 269 004a 9F81      		ldd r25,Y+7
 270 004c 9B87      		std Y+11,r25
 271 004e 8A87      		std Y+10,r24
 272               	.LVL24:
 273               	.L12:
 136:../../../os/hal/src/hal_queues.c ****   }
 137:../../../os/hal/src/hal_queues.c **** 
 138:../../../os/hal/src/hal_queues.c ****   oqp->q_counter -= n;
 274               		.loc 1 138 0
 275 0050 8C81      		ldd r24,Y+4
 276 0052 9D81      		ldd r25,Y+5
 277 0054 801B      		sub r24,r16
 278 0056 910B      		sbc r25,r17
 279 0058 9D83      		std Y+5,r25
 280 005a 8C83      		std Y+4,r24
 139:../../../os/hal/src/hal_queues.c ****   return n;
 140:../../../os/hal/src/hal_queues.c **** }
 281               		.loc 1 140 0
 282 005c C801      		movw r24,r16
 283               	/* epilogue start */
 284 005e DF91      		pop r29
 285 0060 CF91      		pop r28
 286               	.LVL25:
 287 0062 1F91      		pop r17
 288 0064 0F91      		pop r16
 289               	.LVL26:
 290 0066 FF90      		pop r15
 291 0068 EF90      		pop r14
 292               	.LVL27:
 293 006a DF90      		pop r13
 294 006c CF90      		pop r12
 295 006e BF90      		pop r11
 296 0070 AF90      		pop r10
 297 0072 0895      		ret
 298               	.LVL28:
 299               	.L15:
 127:../../../os/hal/src/hal_queues.c ****     bp += s1;
 300               		.loc 1 127 0
 301 0074 A701      		movw r20,r14
 302 0076 B601      		movw r22,r12
 303 0078 0E94 0000 		call memcpy
 304               	.LVL29:
 129:../../../os/hal/src/hal_queues.c ****     memcpy((void *)oqp->q_buffer, (const void *)bp, s2);
 305               		.loc 1 129 0
 306 007c 5801      		movw r10,r16
 307 007e AE18      		sub r10,r14
 308 0080 BF08      		sbc r11,r15
 309               	.LVL30:
 130:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer + s2;
 310               		.loc 1 130 0
 311 0082 B601      		movw r22,r12
 312 0084 6E0D      		add r22,r14
 313 0086 7F1D      		adc r23,r15
 314               	.LVL31:
 315 0088 A501      		movw r20,r10
 316 008a 8E81      		ldd r24,Y+6
 317 008c 9F81      		ldd r25,Y+7
 318 008e 0E94 0000 		call memcpy
 319               	.LVL32:
 131:../../../os/hal/src/hal_queues.c ****   }
 320               		.loc 1 131 0
 321 0092 8E81      		ldd r24,Y+6
 322 0094 9F81      		ldd r25,Y+7
 323 0096 A80E      		add r10,r24
 324 0098 B91E      		adc r11,r25
 325               	.LVL33:
 326 009a BB86      		std Y+11,r11
 327 009c AA86      		std Y+10,r10
 328 009e 00C0      		rjmp .L12
 329               	.LVL34:
 330               	.L14:
 123:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr += n;
 331               		.loc 1 123 0
 332 00a0 A801      		movw r20,r16
 333 00a2 B601      		movw r22,r12
 334 00a4 0E94 0000 		call memcpy
 335               	.LVL35:
 124:../../../os/hal/src/hal_queues.c ****   }
 336               		.loc 1 124 0
 337 00a8 8A85      		ldd r24,Y+10
 338 00aa 9B85      		ldd r25,Y+11
 339 00ac 800F      		add r24,r16
 340 00ae 911F      		adc r25,r17
 341 00b0 9B87      		std Y+11,r25
 342 00b2 8A87      		std Y+10,r24
 343 00b4 00C0      		rjmp .L12
 344               		.cfi_endproc
 345               	.LFE242:
 347               		.section	.text.iqObjectInit,"ax",@progbits
 348               	.global	iqObjectInit
 350               	iqObjectInit:
 351               	.LFB243:
 141:../../../os/hal/src/hal_queues.c **** 
 142:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 143:../../../os/hal/src/hal_queues.c **** /* Driver exported variables.                                                */
 144:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 145:../../../os/hal/src/hal_queues.c **** 
 146:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 147:../../../os/hal/src/hal_queues.c **** /* Driver local variables and types.                                         */
 148:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 149:../../../os/hal/src/hal_queues.c **** 
 150:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 151:../../../os/hal/src/hal_queues.c **** /* Driver local functions.                                                   */
 152:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 153:../../../os/hal/src/hal_queues.c **** 
 154:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 155:../../../os/hal/src/hal_queues.c **** /* Driver interrupt handlers.                                                */
 156:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 157:../../../os/hal/src/hal_queues.c **** 
 158:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 159:../../../os/hal/src/hal_queues.c **** /* Driver exported functions.                                                */
 160:../../../os/hal/src/hal_queues.c **** /*===========================================================================*/
 161:../../../os/hal/src/hal_queues.c **** 
 162:../../../os/hal/src/hal_queues.c **** /**
 163:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an input queue.
 164:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 165:../../../os/hal/src/hal_queues.c ****  *          the bytes contained in the queue.
 166:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 167:../../../os/hal/src/hal_queues.c ****  *
 168:../../../os/hal/src/hal_queues.c ****  * @param[out] iqp      pointer to an @p input_queue_t structure
 169:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 170:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 171:../../../os/hal/src/hal_queues.c ****  * @param[in] infy      pointer to a callback function that is invoked when
 172:../../../os/hal/src/hal_queues.c ****  *                      data is read from the queue. The value can be @p NULL.
 173:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 174:../../../os/hal/src/hal_queues.c ****  *
 175:../../../os/hal/src/hal_queues.c ****  * @init
 176:../../../os/hal/src/hal_queues.c ****  */
 177:../../../os/hal/src/hal_queues.c **** void iqObjectInit(input_queue_t *iqp, uint8_t *bp, size_t size,
 178:../../../os/hal/src/hal_queues.c ****                   qnotify_t infy, void *link) {
 352               		.loc 1 178 0
 353               		.cfi_startproc
 354               	.LVL36:
 355 0000 AF92      		push r10
 356               	.LCFI20:
 357               		.cfi_def_cfa_offset 3
 358               		.cfi_offset 10, -2
 359 0002 BF92      		push r11
 360               	.LCFI21:
 361               		.cfi_def_cfa_offset 4
 362               		.cfi_offset 11, -3
 363 0004 CF92      		push r12
 364               	.LCFI22:
 365               		.cfi_def_cfa_offset 5
 366               		.cfi_offset 12, -4
 367 0006 DF92      		push r13
 368               	.LCFI23:
 369               		.cfi_def_cfa_offset 6
 370               		.cfi_offset 13, -5
 371 0008 EF92      		push r14
 372               	.LCFI24:
 373               		.cfi_def_cfa_offset 7
 374               		.cfi_offset 14, -6
 375 000a FF92      		push r15
 376               	.LCFI25:
 377               		.cfi_def_cfa_offset 8
 378               		.cfi_offset 15, -7
 379 000c 0F93      		push r16
 380               	.LCFI26:
 381               		.cfi_def_cfa_offset 9
 382               		.cfi_offset 16, -8
 383 000e 1F93      		push r17
 384               	.LCFI27:
 385               		.cfi_def_cfa_offset 10
 386               		.cfi_offset 17, -9
 387 0010 CF93      		push r28
 388               	.LCFI28:
 389               		.cfi_def_cfa_offset 11
 390               		.cfi_offset 28, -10
 391 0012 DF93      		push r29
 392               	.LCFI29:
 393               		.cfi_def_cfa_offset 12
 394               		.cfi_offset 29, -11
 395               	/* prologue: function */
 396               	/* frame size = 0 */
 397               	/* stack size = 10 */
 398               	.L__stack_usage = 10
 399 0014 EC01      		movw r28,r24
 400 0016 7B01      		movw r14,r22
 401 0018 6A01      		movw r12,r20
 402 001a 5901      		movw r10,r18
 403               	.LVL37:
 404               	.LBB119:
 405               	.LBB120:
 406               		.file 2 "../../../os/hal/osal/rt-nil/osal.h"
   1:../../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/osal.h **** 
   4:../../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/osal.h **** 
   8:../../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/osal.h **** 
  10:../../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/osal.h **** */
  16:../../../os/hal/osal/rt-nil/osal.h **** 
  17:../../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../../os/hal/osal/rt-nil/osal.h **** 
  25:../../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt-nil/osal.h **** 
  28:../../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt-nil/osal.h **** 
  32:../../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt-nil/osal.h **** 
  34:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/osal.h **** 
  38:../../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../../os/hal/osal/rt-nil/osal.h **** 
  46:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../../os/hal/osal/rt-nil/osal.h **** 
  50:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../../os/hal/osal/rt-nil/osal.h **** 
  54:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../../os/hal/osal/rt-nil/osal.h **** 
  65:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../../os/hal/osal/rt-nil/osal.h **** 
  75:../../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../../os/hal/osal/rt-nil/osal.h **** 
  84:../../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt-nil/osal.h **** 
  93:../../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt-nil/osal.h **** 
  98:../../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../../os/hal/osal/rt-nil/osal.h **** 
 108:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt-nil/osal.h **** 
 112:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt-nil/osal.h **** 
 116:../../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../../os/hal/osal/rt-nil/osal.h **** 
 122:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../../os/hal/osal/rt-nil/osal.h **** 
 127:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../../os/hal/osal/rt-nil/osal.h **** 
 131:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../../os/hal/osal/rt-nil/osal.h **** 
 138:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../../os/hal/osal/rt-nil/osal.h **** 
 145:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../../os/hal/osal/rt-nil/osal.h **** 
 152:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../../os/hal/osal/rt-nil/osal.h **** 
 159:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../../os/hal/osal/rt-nil/osal.h **** 
 168:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../../os/hal/osal/rt-nil/osal.h **** 
 175:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../../os/hal/osal/rt-nil/osal.h **** 
 182:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../../os/hal/osal/rt-nil/osal.h **** 
 189:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../../os/hal/osal/rt-nil/osal.h **** 
 200:../../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../../os/hal/osal/rt-nil/osal.h **** 
 207:../../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../../os/hal/osal/rt-nil/osal.h **** };
 220:../../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../../os/hal/osal/rt-nil/osal.h **** 
 222:../../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../../os/hal/osal/rt-nil/osal.h **** 
 234:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../../os/hal/osal/rt-nil/osal.h **** 
 247:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../../os/hal/osal/rt-nil/osal.h **** 
 251:../../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../../os/hal/osal/rt-nil/osal.h **** 
 271:../../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../../os/hal/osal/rt-nil/osal.h **** 
 283:../../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../../os/hal/osal/rt-nil/osal.h **** 
 289:../../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../../os/hal/osal/rt-nil/osal.h **** 
 296:../../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../../os/hal/osal/rt-nil/osal.h **** 
 305:../../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../../os/hal/osal/rt-nil/osal.h **** 
 311:../../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../../os/hal/osal/rt-nil/osal.h **** 
 317:../../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../../os/hal/osal/rt-nil/osal.h **** 
 326:../../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../../os/hal/osal/rt-nil/osal.h **** 
 345:../../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../../os/hal/osal/rt-nil/osal.h **** 
 360:../../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../../os/hal/osal/rt-nil/osal.h **** 
 375:../../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../../os/hal/osal/rt-nil/osal.h **** 
 390:../../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../../os/hal/osal/rt-nil/osal.h **** 
 405:../../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../../os/hal/osal/rt-nil/osal.h **** 
 421:../../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../../os/hal/osal/rt-nil/osal.h **** 
 438:../../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../../os/hal/osal/rt-nil/osal.h **** 
 452:../../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../../os/hal/osal/rt-nil/osal.h **** 
 467:../../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../../os/hal/osal/rt-nil/osal.h **** 
 483:../../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../../os/hal/osal/rt-nil/osal.h **** 
 496:../../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../../os/hal/osal/rt-nil/osal.h **** 
 510:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../../os/hal/osal/rt-nil/osal.h **** 
 514:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../../os/hal/osal/rt-nil/osal.h **** 
 518:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../../os/hal/osal/rt-nil/osal.h **** }
 520:../../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../../os/hal/osal/rt-nil/osal.h **** 
 522:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../../os/hal/osal/rt-nil/osal.h **** 
 526:../../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../../os/hal/osal/rt-nil/osal.h **** 
 533:../../../os/hal/osal/rt-nil/osal.h **** }
 534:../../../os/hal/osal/rt-nil/osal.h **** 
 535:../../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../../os/hal/osal/rt-nil/osal.h **** 
 544:../../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../../os/hal/osal/rt-nil/osal.h **** }
 546:../../../os/hal/osal/rt-nil/osal.h **** 
 547:../../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../../os/hal/osal/rt-nil/osal.h **** 
 554:../../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../../os/hal/osal/rt-nil/osal.h **** }
 556:../../../os/hal/osal/rt-nil/osal.h **** 
 557:../../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../../os/hal/osal/rt-nil/osal.h **** 
 564:../../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../../os/hal/osal/rt-nil/osal.h **** }
 566:../../../os/hal/osal/rt-nil/osal.h **** 
 567:../../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../../os/hal/osal/rt-nil/osal.h **** 
 575:../../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../../os/hal/osal/rt-nil/osal.h **** }
 577:../../../os/hal/osal/rt-nil/osal.h **** 
 578:../../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../../os/hal/osal/rt-nil/osal.h **** 
 586:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../../os/hal/osal/rt-nil/osal.h **** }
 588:../../../os/hal/osal/rt-nil/osal.h **** 
 589:../../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../../os/hal/osal/rt-nil/osal.h **** 
 597:../../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../../os/hal/osal/rt-nil/osal.h **** }
 599:../../../os/hal/osal/rt-nil/osal.h **** 
 600:../../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../../os/hal/osal/rt-nil/osal.h **** 
 608:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../../os/hal/osal/rt-nil/osal.h **** }
 610:../../../os/hal/osal/rt-nil/osal.h **** 
 611:../../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../../os/hal/osal/rt-nil/osal.h **** 
 626:../../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../../os/hal/osal/rt-nil/osal.h **** }
 628:../../../os/hal/osal/rt-nil/osal.h **** 
 629:../../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../../os/hal/osal/rt-nil/osal.h **** 
 640:../../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../../os/hal/osal/rt-nil/osal.h **** }
 642:../../../os/hal/osal/rt-nil/osal.h **** 
 643:../../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../../os/hal/osal/rt-nil/osal.h **** 
 655:../../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../../os/hal/osal/rt-nil/osal.h **** }
 657:../../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../../os/hal/osal/rt-nil/osal.h **** 
 659:../../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../../os/hal/osal/rt-nil/osal.h **** 
 667:../../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../../os/hal/osal/rt-nil/osal.h **** }
 669:../../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../../os/hal/osal/rt-nil/osal.h **** 
 671:../../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../../os/hal/osal/rt-nil/osal.h **** 
 682:../../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../../os/hal/osal/rt-nil/osal.h **** }
 684:../../../os/hal/osal/rt-nil/osal.h **** 
 685:../../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../../os/hal/osal/rt-nil/osal.h **** 
 700:../../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../../os/hal/osal/rt-nil/osal.h **** }
 702:../../../os/hal/osal/rt-nil/osal.h **** 
 703:../../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../../os/hal/osal/rt-nil/osal.h **** 
 715:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../../os/hal/osal/rt-nil/osal.h **** }
 717:../../../os/hal/osal/rt-nil/osal.h **** 
 718:../../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../../os/hal/osal/rt-nil/osal.h **** 
 729:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../../os/hal/osal/rt-nil/osal.h **** }
 731:../../../os/hal/osal/rt-nil/osal.h **** 
 732:../../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../../os/hal/osal/rt-nil/osal.h **** 
 750:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../../os/hal/osal/rt-nil/osal.h **** }
 752:../../../os/hal/osal/rt-nil/osal.h **** 
 753:../../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../../os/hal/osal/rt-nil/osal.h **** 
 767:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../../os/hal/osal/rt-nil/osal.h **** }
 769:../../../os/hal/osal/rt-nil/osal.h **** 
 770:../../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../../os/hal/osal/rt-nil/osal.h **** 
 784:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../../os/hal/osal/rt-nil/osal.h **** }
 786:../../../os/hal/osal/rt-nil/osal.h **** 
 787:../../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../../os/hal/osal/rt-nil/osal.h **** 
 799:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../../os/hal/osal/rt-nil/osal.h **** }
 801:../../../os/hal/osal/rt-nil/osal.h **** 
 802:../../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../../os/hal/osal/rt-nil/osal.h **** 
 824:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../../os/hal/osal/rt-nil/osal.h **** }
 826:../../../os/hal/osal/rt-nil/osal.h **** 
 827:../../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../../os/hal/osal/rt-nil/osal.h **** 
 839:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../../os/hal/osal/rt-nil/osal.h **** }
 841:../../../os/hal/osal/rt-nil/osal.h **** 
 842:../../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../../os/hal/osal/rt-nil/osal.h **** 
 854:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../../os/hal/osal/rt-nil/osal.h **** }
 856:../../../os/hal/osal/rt-nil/osal.h **** 
 857:../../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../../os/hal/osal/rt-nil/osal.h **** 
 866:../../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
 407               		.loc 2 866 0
 408 001c 0E94 0000 		call chThdQueueObjectInit
 409               	.LVL38:
 410               	.LBE120:
 411               	.LBE119:
 179:../../../os/hal/src/hal_queues.c **** 
 180:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&iqp->q_waiting);
 181:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 412               		.loc 1 181 0
 413 0020 1D82      		std Y+5,__zero_reg__
 414 0022 1C82      		std Y+4,__zero_reg__
 182:../../../os/hal/src/hal_queues.c ****   iqp->q_buffer  = bp;
 415               		.loc 1 182 0
 416 0024 FF82      		std Y+7,r15
 417 0026 EE82      		std Y+6,r14
 183:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr   = bp;
 418               		.loc 1 183 0
 419 0028 FD86      		std Y+13,r15
 420 002a EC86      		std Y+12,r14
 184:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr   = bp;
 421               		.loc 1 184 0
 422 002c FB86      		std Y+11,r15
 423 002e EA86      		std Y+10,r14
 185:../../../os/hal/src/hal_queues.c ****   iqp->q_top     = bp + size;
 424               		.loc 1 185 0
 425 0030 EC0C      		add r14,r12
 426 0032 FD1C      		adc r15,r13
 427               	.LVL39:
 428 0034 F986      		std Y+9,r15
 429 0036 E886      		std Y+8,r14
 186:../../../os/hal/src/hal_queues.c ****   iqp->q_notify  = infy;
 430               		.loc 1 186 0
 431 0038 BF86      		std Y+15,r11
 432 003a AE86      		std Y+14,r10
 187:../../../os/hal/src/hal_queues.c ****   iqp->q_link    = link;
 433               		.loc 1 187 0
 434 003c 198B      		std Y+17,r17
 435 003e 088B      		std Y+16,r16
 436               	/* epilogue start */
 188:../../../os/hal/src/hal_queues.c **** }
 437               		.loc 1 188 0
 438 0040 DF91      		pop r29
 439 0042 CF91      		pop r28
 440               	.LVL40:
 441 0044 1F91      		pop r17
 442 0046 0F91      		pop r16
 443               	.LVL41:
 444 0048 FF90      		pop r15
 445 004a EF90      		pop r14
 446 004c DF90      		pop r13
 447 004e CF90      		pop r12
 448               	.LVL42:
 449 0050 BF90      		pop r11
 450 0052 AF90      		pop r10
 451               	.LVL43:
 452 0054 0895      		ret
 453               		.cfi_endproc
 454               	.LFE243:
 456               		.section	.text.iqResetI,"ax",@progbits
 457               	.global	iqResetI
 459               	iqResetI:
 460               	.LFB244:
 189:../../../os/hal/src/hal_queues.c **** 
 190:../../../os/hal/src/hal_queues.c **** /**
 191:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an input queue.
 192:../../../os/hal/src/hal_queues.c ****  * @details All the data in the input queue is erased and lost, any waiting
 193:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 194:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 195:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 196:../../../os/hal/src/hal_queues.c ****  *
 197:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 198:../../../os/hal/src/hal_queues.c ****  *
 199:../../../os/hal/src/hal_queues.c ****  * @iclass
 200:../../../os/hal/src/hal_queues.c ****  */
 201:../../../os/hal/src/hal_queues.c **** void iqResetI(input_queue_t *iqp) {
 461               		.loc 1 201 0
 462               		.cfi_startproc
 463               	.LVL44:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 202:../../../os/hal/src/hal_queues.c **** 
 203:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 204:../../../os/hal/src/hal_queues.c **** 
 205:../../../os/hal/src/hal_queues.c ****   iqp->q_rdptr = iqp->q_buffer;
 468               		.loc 1 205 0
 469 0000 FC01      		movw r30,r24
 470 0002 2681      		ldd r18,Z+6
 471 0004 3781      		ldd r19,Z+7
 472 0006 3587      		std Z+13,r19
 473 0008 2487      		std Z+12,r18
 206:../../../os/hal/src/hal_queues.c ****   iqp->q_wrptr = iqp->q_buffer;
 474               		.loc 1 206 0
 475 000a 3387      		std Z+11,r19
 476 000c 2287      		std Z+10,r18
 207:../../../os/hal/src/hal_queues.c ****   iqp->q_counter = 0;
 477               		.loc 1 207 0
 478 000e 1582      		std Z+5,__zero_reg__
 479 0010 1482      		std Z+4,__zero_reg__
 480               	.LVL45:
 481               	.LBB121:
 482               	.LBB122:
 867:../../../os/hal/osal/rt-nil/osal.h **** }
 868:../../../os/hal/osal/rt-nil/osal.h **** 
 869:../../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../../os/hal/osal/rt-nil/osal.h **** 
 895:../../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../../os/hal/osal/rt-nil/osal.h **** }
 897:../../../os/hal/osal/rt-nil/osal.h **** 
 898:../../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../../os/hal/osal/rt-nil/osal.h **** 
 908:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../../os/hal/osal/rt-nil/osal.h **** }
 910:../../../os/hal/osal/rt-nil/osal.h **** 
 911:../../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../../os/hal/osal/rt-nil/osal.h **** 
 921:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 483               		.loc 2 921 0
 484 0012 6EEF      		ldi r22,lo8(-2)
 485 0014 7FEF      		ldi r23,lo8(-1)
 486 0016 0C94 0000 		jmp chThdDequeueAllI
 487               	.LVL46:
 488               	.LBE122:
 489               	.LBE121:
 490               		.cfi_endproc
 491               	.LFE244:
 493               		.section	.text.iqPutI,"ax",@progbits
 494               	.global	iqPutI
 496               	iqPutI:
 497               	.LFB245:
 208:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&iqp->q_waiting, MSG_RESET);
 209:../../../os/hal/src/hal_queues.c **** }
 210:../../../os/hal/src/hal_queues.c **** 
 211:../../../os/hal/src/hal_queues.c **** /**
 212:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue write.
 213:../../../os/hal/src/hal_queues.c ****  * @details A byte value is written into the low end of an input queue. The
 214:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 215:../../../os/hal/src/hal_queues.c ****  *
 216:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 217:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 218:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 219:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation has been completed with success.
 220:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 221:../../../os/hal/src/hal_queues.c ****  *
 222:../../../os/hal/src/hal_queues.c ****  * @iclass
 223:../../../os/hal/src/hal_queues.c ****  */
 224:../../../os/hal/src/hal_queues.c **** msg_t iqPutI(input_queue_t *iqp, uint8_t b) {
 498               		.loc 1 224 0
 499               		.cfi_startproc
 500               	.LVL47:
 501               	/* prologue: function */
 502               	/* frame size = 0 */
 503               	/* stack size = 0 */
 504               	.L__stack_usage = 0
 505 0000 FC01      		movw r30,r24
 225:../../../os/hal/src/hal_queues.c **** 
 226:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 227:../../../os/hal/src/hal_queues.c **** 
 228:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 229:../../../os/hal/src/hal_queues.c ****   if (!iqIsFullI(iqp)) {
 506               		.loc 1 229 0
 507 0002 A285      		ldd r26,Z+10
 508 0004 B385      		ldd r27,Z+11
 509 0006 8485      		ldd r24,Z+12
 510 0008 9585      		ldd r25,Z+13
 511               	.LVL48:
 512 000a A817      		cp r26,r24
 513 000c B907      		cpc r27,r25
 514 000e 01F0      		breq .L25
 515               	.L19:
 230:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 516               		.loc 1 230 0
 517 0010 8481      		ldd r24,Z+4
 518 0012 9581      		ldd r25,Z+5
 519 0014 0196      		adiw r24,1
 520 0016 9583      		std Z+5,r25
 521 0018 8483      		std Z+4,r24
 231:../../../os/hal/src/hal_queues.c ****     *iqp->q_wrptr++ = b;
 522               		.loc 1 231 0
 523 001a CD01      		movw r24,r26
 524 001c 0196      		adiw r24,1
 525 001e 9387      		std Z+11,r25
 526 0020 8287      		std Z+10,r24
 527 0022 6C93      		st X,r22
 232:../../../os/hal/src/hal_queues.c ****     if (iqp->q_wrptr >= iqp->q_top) {
 528               		.loc 1 232 0
 529 0024 2285      		ldd r18,Z+10
 530 0026 3385      		ldd r19,Z+11
 531 0028 8085      		ldd r24,Z+8
 532 002a 9185      		ldd r25,Z+9
 533 002c 2817      		cp r18,r24
 534 002e 3907      		cpc r19,r25
 535 0030 00F0      		brlo .L22
 233:../../../os/hal/src/hal_queues.c ****       iqp->q_wrptr = iqp->q_buffer;
 536               		.loc 1 233 0
 537 0032 8681      		ldd r24,Z+6
 538 0034 9781      		ldd r25,Z+7
 539 0036 9387      		std Z+11,r25
 540 0038 8287      		std Z+10,r24
 541               	.L22:
 542 003a CF01      		movw r24,r30
 543               	.LVL49:
 544               	.LBB123:
 545               	.LBB124:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 546               		.loc 2 908 0
 547 003c 60E0      		ldi r22,0
 548 003e 70E0      		ldi r23,0
 549               	.LVL50:
 550 0040 0E94 0000 		call chThdDequeueNextI
 551               	.LVL51:
 552               	.LBE124:
 553               	.LBE123:
 234:../../../os/hal/src/hal_queues.c ****     }
 235:../../../os/hal/src/hal_queues.c **** 
 236:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&iqp->q_waiting, MSG_OK);
 237:../../../os/hal/src/hal_queues.c **** 
 238:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 554               		.loc 1 238 0
 555 0044 80E0      		ldi r24,0
 556 0046 90E0      		ldi r25,0
 557 0048 0895      		ret
 558               	.LVL52:
 559               	.L25:
 229:../../../os/hal/src/hal_queues.c ****     iqp->q_counter++;
 560               		.loc 1 229 0 discriminator 1
 561 004a 8481      		ldd r24,Z+4
 562 004c 9581      		ldd r25,Z+5
 563 004e 892B      		or r24,r25
 564 0050 01F0      		breq .L19
 239:../../../os/hal/src/hal_queues.c ****   }
 240:../../../os/hal/src/hal_queues.c **** 
 241:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 565               		.loc 1 241 0
 566 0052 8FEF      		ldi r24,lo8(-1)
 567 0054 9FEF      		ldi r25,lo8(-1)
 568 0056 0895      		ret
 569               		.cfi_endproc
 570               	.LFE245:
 572               		.section	.text.iqGetI,"ax",@progbits
 573               	.global	iqGetI
 575               	iqGetI:
 576               	.LFB246:
 242:../../../os/hal/src/hal_queues.c **** }
 243:../../../os/hal/src/hal_queues.c **** 
 244:../../../os/hal/src/hal_queues.c **** /**
 245:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 246:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. The
 247:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 248:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 249:../../../os/hal/src/hal_queues.c ****  *          queue.
 250:../../../os/hal/src/hal_queues.c ****  *
 251:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 252:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 253:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 254:../../../os/hal/src/hal_queues.c ****  *
 255:../../../os/hal/src/hal_queues.c ****  * @iclass
 256:../../../os/hal/src/hal_queues.c ****  */
 257:../../../os/hal/src/hal_queues.c **** msg_t iqGetI(input_queue_t *iqp) {
 577               		.loc 1 257 0
 578               		.cfi_startproc
 579               	.LVL53:
 580 0000 CF93      		push r28
 581               	.LCFI30:
 582               		.cfi_def_cfa_offset 3
 583               		.cfi_offset 28, -2
 584               	/* prologue: function */
 585               	/* frame size = 0 */
 586               	/* stack size = 1 */
 587               	.L__stack_usage = 1
 588 0002 DC01      		movw r26,r24
 258:../../../os/hal/src/hal_queues.c **** 
 259:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 260:../../../os/hal/src/hal_queues.c **** 
 261:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 262:../../../os/hal/src/hal_queues.c ****   if (!iqIsEmptyI(iqp)) {
 589               		.loc 1 262 0
 590 0004 1496      		adiw r26,4
 591 0006 8D91      		ld r24,X+
 592 0008 9C91      		ld r25,X
 593 000a 1597      		sbiw r26,4+1
 594               	.LVL54:
 595 000c 892B      		or r24,r25
 596 000e 01F0      		breq .L30
 597               	.LBB125:
 263:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 264:../../../os/hal/src/hal_queues.c **** 
 265:../../../os/hal/src/hal_queues.c ****     /* Getting the character from the queue.*/
 266:../../../os/hal/src/hal_queues.c ****     iqp->q_counter--;
 598               		.loc 1 266 0
 599 0010 1496      		adiw r26,4
 600 0012 8D91      		ld r24,X+
 601 0014 9C91      		ld r25,X
 602 0016 1597      		sbiw r26,4+1
 603 0018 0197      		sbiw r24,1
 604 001a 1596      		adiw r26,4+1
 605 001c 9C93      		st X,r25
 606 001e 8E93      		st -X,r24
 607 0020 1497      		sbiw r26,4
 267:../../../os/hal/src/hal_queues.c ****     b = *iqp->q_rdptr++;
 608               		.loc 1 267 0
 609 0022 1C96      		adiw r26,12
 610 0024 ED91      		ld r30,X+
 611 0026 FC91      		ld r31,X
 612 0028 1D97      		sbiw r26,12+1
 613 002a CF01      		movw r24,r30
 614 002c 0196      		adiw r24,1
 615 002e 1D96      		adiw r26,12+1
 616 0030 9C93      		st X,r25
 617 0032 8E93      		st -X,r24
 618 0034 1C97      		sbiw r26,12
 619 0036 C081      		ld r28,Z
 620               	.LVL55:
 268:../../../os/hal/src/hal_queues.c ****     if (iqp->q_rdptr >= iqp->q_top) {
 621               		.loc 1 268 0
 622 0038 1896      		adiw r26,8
 623 003a 2D91      		ld r18,X+
 624 003c 3C91      		ld r19,X
 625 003e 1997      		sbiw r26,8+1
 626 0040 8217      		cp r24,r18
 627 0042 9307      		cpc r25,r19
 628 0044 00F4      		brsh .L34
 629               	.L28:
 269:../../../os/hal/src/hal_queues.c ****       iqp->q_rdptr = iqp->q_buffer;
 270:../../../os/hal/src/hal_queues.c ****     }
 271:../../../os/hal/src/hal_queues.c **** 
 272:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one slot available.*/
 273:../../../os/hal/src/hal_queues.c ****     if (iqp->q_notify != NULL) {
 630               		.loc 1 273 0
 631 0046 1E96      		adiw r26,14
 632 0048 ED91      		ld r30,X+
 633 004a FC91      		ld r31,X
 634 004c 1F97      		sbiw r26,14+1
 635 004e 3097      		sbiw r30,0
 636 0050 01F0      		breq .L29
 637 0052 CD01      		movw r24,r26
 274:../../../os/hal/src/hal_queues.c ****       iqp->q_notify(iqp);
 638               		.loc 1 274 0
 639 0054 0995      		icall
 640               	.LVL56:
 641               	.L29:
 275:../../../os/hal/src/hal_queues.c ****     }
 276:../../../os/hal/src/hal_queues.c **** 
 277:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 642               		.loc 1 277 0
 643 0056 8C2F      		mov r24,r28
 644 0058 90E0      		ldi r25,0
 645               	.LVL57:
 646               	.L27:
 647               	/* epilogue start */
 648               	.LBE125:
 278:../../../os/hal/src/hal_queues.c ****   }
 279:../../../os/hal/src/hal_queues.c **** 
 280:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 281:../../../os/hal/src/hal_queues.c **** }
 649               		.loc 1 281 0
 650 005a CF91      		pop r28
 651 005c 0895      		ret
 652               	.LVL58:
 653               	.L34:
 654               	.LBB126:
 269:../../../os/hal/src/hal_queues.c ****     }
 655               		.loc 1 269 0
 656 005e 1696      		adiw r26,6
 657 0060 8D91      		ld r24,X+
 658 0062 9C91      		ld r25,X
 659 0064 1797      		sbiw r26,6+1
 660 0066 1D96      		adiw r26,12+1
 661 0068 9C93      		st X,r25
 662 006a 8E93      		st -X,r24
 663 006c 1C97      		sbiw r26,12
 664 006e 00C0      		rjmp .L28
 665               	.LVL59:
 666               	.L30:
 667               	.LBE126:
 280:../../../os/hal/src/hal_queues.c **** }
 668               		.loc 1 280 0
 669 0070 8FEF      		ldi r24,lo8(-1)
 670 0072 9FEF      		ldi r25,lo8(-1)
 671 0074 00C0      		rjmp .L27
 672               		.cfi_endproc
 673               	.LFE246:
 675               		.section	.text.iqGetTimeout,"ax",@progbits
 676               	.global	iqGetTimeout
 678               	iqGetTimeout:
 679               	.LFB247:
 282:../../../os/hal/src/hal_queues.c **** 
 283:../../../os/hal/src/hal_queues.c **** /**
 284:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 285:../../../os/hal/src/hal_queues.c ****  * @details This function reads a byte value from an input queue. If the queue
 286:../../../os/hal/src/hal_queues.c ****  *          is empty then the calling thread is suspended until a byte arrives
 287:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 288:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing a character from the
 289:../../../os/hal/src/hal_queues.c ****  *          queue.
 290:../../../os/hal/src/hal_queues.c ****  *
 291:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 292:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 293:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 294:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 295:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 296:../../../os/hal/src/hal_queues.c ****  * @return              A byte value from the queue.
 297:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 298:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 299:../../../os/hal/src/hal_queues.c ****  *
 300:../../../os/hal/src/hal_queues.c ****  * @api
 301:../../../os/hal/src/hal_queues.c ****  */
 302:../../../os/hal/src/hal_queues.c **** msg_t iqGetTimeout(input_queue_t *iqp, sysinterval_t timeout) {
 680               		.loc 1 302 0
 681               		.cfi_startproc
 682               	.LVL60:
 683 0000 0F93      		push r16
 684               	.LCFI31:
 685               		.cfi_def_cfa_offset 3
 686               		.cfi_offset 16, -2
 687 0002 1F93      		push r17
 688               	.LCFI32:
 689               		.cfi_def_cfa_offset 4
 690               		.cfi_offset 17, -3
 691 0004 CF93      		push r28
 692               	.LCFI33:
 693               		.cfi_def_cfa_offset 5
 694               		.cfi_offset 28, -4
 695 0006 DF93      		push r29
 696               	.LCFI34:
 697               		.cfi_def_cfa_offset 6
 698               		.cfi_offset 29, -5
 699               	/* prologue: function */
 700               	/* frame size = 0 */
 701               	/* stack size = 4 */
 702               	.L__stack_usage = 4
 703 0008 EC01      		movw r28,r24
 704 000a 8B01      		movw r16,r22
 705               	.LBB127:
 706               	.LBB128:
 707               	.LBB129:
 708               	.LBB130:
 709               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 710               		.loc 3 430 0
 711               	/* #APP */
 712               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 713 000c F894      		cli
 714               	 ;  0 "" 2
 715               	/* #NOAPP */
 716 000e 00C0      		rjmp .L36
 717               	.LVL61:
 718               	.L38:
 719               	.LBE130:
 720               	.LBE129:
 721               	.LBE128:
 722               	.LBE127:
 723               	.LBB131:
 724               	.LBB132:
 725               	.LBB133:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 726               		.loc 2 895 0
 727 0010 B801      		movw r22,r16
 728 0012 CE01      		movw r24,r28
 729 0014 0E94 0000 		call chThdEnqueueTimeoutS
 730               	.LVL62:
 731               	.LBE133:
 732               	.LBE132:
 303:../../../os/hal/src/hal_queues.c ****   uint8_t b;
 304:../../../os/hal/src/hal_queues.c **** 
 305:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 306:../../../os/hal/src/hal_queues.c **** 
 307:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a character available or a timeout occurs.*/
 308:../../../os/hal/src/hal_queues.c ****   while (iqIsEmptyI(iqp)) {
 309:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 310:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 733               		.loc 1 310 0
 734 0018 97FD      		sbrc r25,7
 735 001a 00C0      		rjmp .L45
 736               	.L36:
 737               	.LBE131:
 308:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 738               		.loc 1 308 0
 739 001c 8C81      		ldd r24,Y+4
 740 001e 9D81      		ldd r25,Y+5
 741 0020 892B      		or r24,r25
 742 0022 01F0      		breq .L38
 311:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 312:../../../os/hal/src/hal_queues.c ****       return msg;
 313:../../../os/hal/src/hal_queues.c ****     }
 314:../../../os/hal/src/hal_queues.c ****   }
 315:../../../os/hal/src/hal_queues.c **** 
 316:../../../os/hal/src/hal_queues.c ****   /* Getting the character from the queue.*/
 317:../../../os/hal/src/hal_queues.c ****   iqp->q_counter--;
 743               		.loc 1 317 0
 744 0024 8C81      		ldd r24,Y+4
 745 0026 9D81      		ldd r25,Y+5
 746 0028 0197      		sbiw r24,1
 747 002a 9D83      		std Y+5,r25
 748 002c 8C83      		std Y+4,r24
 318:../../../os/hal/src/hal_queues.c ****   b = *iqp->q_rdptr++;
 749               		.loc 1 318 0
 750 002e EC85      		ldd r30,Y+12
 751 0030 FD85      		ldd r31,Y+13
 752 0032 CF01      		movw r24,r30
 753 0034 0196      		adiw r24,1
 754 0036 9D87      		std Y+13,r25
 755 0038 8C87      		std Y+12,r24
 756 003a 1081      		ld r17,Z
 757               	.LVL63:
 319:../../../os/hal/src/hal_queues.c ****   if (iqp->q_rdptr >= iqp->q_top) {
 758               		.loc 1 319 0
 759 003c 2885      		ldd r18,Y+8
 760 003e 3985      		ldd r19,Y+9
 761 0040 8217      		cp r24,r18
 762 0042 9307      		cpc r25,r19
 763 0044 00F0      		brlo .L39
 320:../../../os/hal/src/hal_queues.c ****     iqp->q_rdptr = iqp->q_buffer;
 764               		.loc 1 320 0
 765 0046 8E81      		ldd r24,Y+6
 766 0048 9F81      		ldd r25,Y+7
 767 004a 9D87      		std Y+13,r25
 768 004c 8C87      		std Y+12,r24
 769               	.L39:
 321:../../../os/hal/src/hal_queues.c ****   }
 322:../../../os/hal/src/hal_queues.c **** 
 323:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one slot available.*/
 324:../../../os/hal/src/hal_queues.c ****   if (iqp->q_notify != NULL) {
 770               		.loc 1 324 0
 771 004e EE85      		ldd r30,Y+14
 772 0050 FF85      		ldd r31,Y+15
 773 0052 3097      		sbiw r30,0
 774 0054 01F0      		breq .L40
 325:../../../os/hal/src/hal_queues.c ****     iqp->q_notify(iqp);
 775               		.loc 1 325 0
 776 0056 CE01      		movw r24,r28
 777 0058 0995      		icall
 778               	.LVL64:
 779               	.L40:
 780               	.LBB139:
 781               	.LBB140:
 782               	.LBB141:
 783               	.LBB142:
 784               	.LBB143:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 785               		.loc 3 440 0
 786               	/* #APP */
 787               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 788 005a 7894      		sei
 789               	 ;  0 "" 2
 790               	/* #NOAPP */
 791               	.LBE143:
 792               	.LBE142:
 793               	.LBE141:
 794               	.LBE140:
 795               	.LBE139:
 326:../../../os/hal/src/hal_queues.c ****   }
 327:../../../os/hal/src/hal_queues.c **** 
 328:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 329:../../../os/hal/src/hal_queues.c **** 
 330:../../../os/hal/src/hal_queues.c ****   return (msg_t)b;
 796               		.loc 1 330 0
 797 005c 812F      		mov r24,r17
 798 005e 90E0      		ldi r25,0
 799               	/* epilogue start */
 331:../../../os/hal/src/hal_queues.c **** }
 800               		.loc 1 331 0
 801 0060 DF91      		pop r29
 802 0062 CF91      		pop r28
 803               	.LVL65:
 804 0064 1F91      		pop r17
 805               	.LVL66:
 806 0066 0F91      		pop r16
 807               	.LVL67:
 808 0068 0895      		ret
 809               	.LVL68:
 810               	.L45:
 811               	.LBB144:
 812               	.LBB134:
 813               	.LBB135:
 814               	.LBB136:
 815               	.LBB137:
 816               	.LBB138:
 817               		.loc 3 440 0
 818               	/* #APP */
 819               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 820 006a 7894      		sei
 821               	 ;  0 "" 2
 822               	/* epilogue start */
 823               	/* #NOAPP */
 824               	.LBE138:
 825               	.LBE137:
 826               	.LBE136:
 827               	.LBE135:
 828               	.LBE134:
 829               	.LBE144:
 830               		.loc 1 331 0
 831 006c DF91      		pop r29
 832 006e CF91      		pop r28
 833               	.LVL69:
 834 0070 1F91      		pop r17
 835 0072 0F91      		pop r16
 836               	.LVL70:
 837 0074 0895      		ret
 838               		.cfi_endproc
 839               	.LFE247:
 841               		.section	.text.iqReadI,"ax",@progbits
 842               	.global	iqReadI
 844               	iqReadI:
 845               	.LFB248:
 332:../../../os/hal/src/hal_queues.c **** 
 333:../../../os/hal/src/hal_queues.c **** /**
 334:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue non-blocking read.
 335:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 336:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 337:../../../os/hal/src/hal_queues.c ****  *
 338:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 339:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 340:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 341:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 342:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 343:../../../os/hal/src/hal_queues.c ****  *
 344:../../../os/hal/src/hal_queues.c ****  * @iclass
 345:../../../os/hal/src/hal_queues.c ****  */
 346:../../../os/hal/src/hal_queues.c **** size_t iqReadI(input_queue_t *iqp, uint8_t *bp, size_t n) {
 846               		.loc 1 346 0
 847               		.cfi_startproc
 848               	.LVL71:
 849 0000 EF92      		push r14
 850               	.LCFI35:
 851               		.cfi_def_cfa_offset 3
 852               		.cfi_offset 14, -2
 853 0002 FF92      		push r15
 854               	.LCFI36:
 855               		.cfi_def_cfa_offset 4
 856               		.cfi_offset 15, -3
 857 0004 0F93      		push r16
 858               	.LCFI37:
 859               		.cfi_def_cfa_offset 5
 860               		.cfi_offset 16, -4
 861 0006 1F93      		push r17
 862               	.LCFI38:
 863               		.cfi_def_cfa_offset 6
 864               		.cfi_offset 17, -5
 865 0008 CF93      		push r28
 866               	.LCFI39:
 867               		.cfi_def_cfa_offset 7
 868               		.cfi_offset 28, -6
 869 000a DF93      		push r29
 870               	.LCFI40:
 871               		.cfi_def_cfa_offset 8
 872               		.cfi_offset 29, -7
 873               	/* prologue: function */
 874               	/* frame size = 0 */
 875               	/* stack size = 6 */
 876               	.L__stack_usage = 6
 877 000c EC01      		movw r28,r24
 347:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 878               		.loc 1 347 0
 879 000e EE84      		ldd r14,Y+14
 880 0010 FF84      		ldd r15,Y+15
 881               	.LVL72:
 348:../../../os/hal/src/hal_queues.c ****   size_t rd;
 349:../../../os/hal/src/hal_queues.c **** 
 350:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 351:../../../os/hal/src/hal_queues.c **** 
 352:../../../os/hal/src/hal_queues.c ****   rd = iq_read(iqp, bp, n);
 882               		.loc 1 352 0
 883 0012 0E94 0000 		call iq_read
 884               	.LVL73:
 885 0016 8C01      		movw r16,r24
 886               	.LVL74:
 353:../../../os/hal/src/hal_queues.c **** 
 354:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 355:../../../os/hal/src/hal_queues.c ****      available.*/
 356:../../../os/hal/src/hal_queues.c ****   if ((rd > (size_t)0) && (nfy != NULL)) {
 887               		.loc 1 356 0
 888 0018 892B      		or r24,r25
 889 001a 01F0      		breq .L47
 890               		.loc 1 356 0 is_stmt 0 discriminator 1
 891 001c E114      		cp r14,__zero_reg__
 892 001e F104      		cpc r15,__zero_reg__
 893 0020 01F0      		breq .L47
 357:../../../os/hal/src/hal_queues.c ****     nfy(iqp);
 894               		.loc 1 357 0 is_stmt 1
 895 0022 CE01      		movw r24,r28
 896 0024 F701      		movw r30,r14
 897 0026 0995      		icall
 898               	.LVL75:
 899               	.L47:
 358:../../../os/hal/src/hal_queues.c ****   }
 359:../../../os/hal/src/hal_queues.c **** 
 360:../../../os/hal/src/hal_queues.c ****   return rd;
 361:../../../os/hal/src/hal_queues.c **** }
 900               		.loc 1 361 0
 901 0028 C801      		movw r24,r16
 902               	/* epilogue start */
 903 002a DF91      		pop r29
 904 002c CF91      		pop r28
 905               	.LVL76:
 906 002e 1F91      		pop r17
 907 0030 0F91      		pop r16
 908               	.LVL77:
 909 0032 FF90      		pop r15
 910 0034 EF90      		pop r14
 911               	.LVL78:
 912 0036 0895      		ret
 913               		.cfi_endproc
 914               	.LFE248:
 916               		.section	.text.iqReadTimeout,"ax",@progbits
 917               	.global	iqReadTimeout
 919               	iqReadTimeout:
 920               	.LFB249:
 362:../../../os/hal/src/hal_queues.c **** 
 363:../../../os/hal/src/hal_queues.c **** /**
 364:../../../os/hal/src/hal_queues.c ****  * @brief   Input queue read with timeout.
 365:../../../os/hal/src/hal_queues.c ****  * @details The function reads data from an input queue into a buffer. The
 366:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 367:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 368:../../../os/hal/src/hal_queues.c ****  *          been reset.
 369:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 370:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 371:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after removing each character from the
 372:../../../os/hal/src/hal_queues.c ****  *          queue.
 373:../../../os/hal/src/hal_queues.c ****  *
 374:../../../os/hal/src/hal_queues.c ****  * @param[in] iqp       pointer to an @p input_queue_t structure
 375:../../../os/hal/src/hal_queues.c ****  * @param[out] bp       pointer to the data buffer
 376:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 377:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 378:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 379:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 380:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 381:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 382:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 383:../../../os/hal/src/hal_queues.c ****  *
 384:../../../os/hal/src/hal_queues.c ****  * @api
 385:../../../os/hal/src/hal_queues.c ****  */
 386:../../../os/hal/src/hal_queues.c **** size_t iqReadTimeout(input_queue_t *iqp, uint8_t *bp,
 387:../../../os/hal/src/hal_queues.c ****                      size_t n, sysinterval_t timeout) {
 921               		.loc 1 387 0
 922               		.cfi_startproc
 923               	.LVL79:
 924 0000 6F92      		push r6
 925               	.LCFI41:
 926               		.cfi_def_cfa_offset 3
 927               		.cfi_offset 6, -2
 928 0002 7F92      		push r7
 929               	.LCFI42:
 930               		.cfi_def_cfa_offset 4
 931               		.cfi_offset 7, -3
 932 0004 8F92      		push r8
 933               	.LCFI43:
 934               		.cfi_def_cfa_offset 5
 935               		.cfi_offset 8, -4
 936 0006 9F92      		push r9
 937               	.LCFI44:
 938               		.cfi_def_cfa_offset 6
 939               		.cfi_offset 9, -5
 940 0008 AF92      		push r10
 941               	.LCFI45:
 942               		.cfi_def_cfa_offset 7
 943               		.cfi_offset 10, -6
 944 000a BF92      		push r11
 945               	.LCFI46:
 946               		.cfi_def_cfa_offset 8
 947               		.cfi_offset 11, -7
 948 000c CF92      		push r12
 949               	.LCFI47:
 950               		.cfi_def_cfa_offset 9
 951               		.cfi_offset 12, -8
 952 000e DF92      		push r13
 953               	.LCFI48:
 954               		.cfi_def_cfa_offset 10
 955               		.cfi_offset 13, -9
 956 0010 EF92      		push r14
 957               	.LCFI49:
 958               		.cfi_def_cfa_offset 11
 959               		.cfi_offset 14, -10
 960 0012 FF92      		push r15
 961               	.LCFI50:
 962               		.cfi_def_cfa_offset 12
 963               		.cfi_offset 15, -11
 964 0014 0F93      		push r16
 965               	.LCFI51:
 966               		.cfi_def_cfa_offset 13
 967               		.cfi_offset 16, -12
 968 0016 1F93      		push r17
 969               	.LCFI52:
 970               		.cfi_def_cfa_offset 14
 971               		.cfi_offset 17, -13
 972 0018 CF93      		push r28
 973               	.LCFI53:
 974               		.cfi_def_cfa_offset 15
 975               		.cfi_offset 28, -14
 976 001a DF93      		push r29
 977               	.LCFI54:
 978               		.cfi_def_cfa_offset 16
 979               		.cfi_offset 29, -15
 980               	/* prologue: function */
 981               	/* frame size = 0 */
 982               	/* stack size = 14 */
 983               	.L__stack_usage = 14
 984 001c 6C01      		movw r12,r24
 985 001e 7B01      		movw r14,r22
 986 0020 3A01      		movw r6,r20
 987 0022 4901      		movw r8,r18
 388:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = iqp->q_notify;
 988               		.loc 1 388 0
 989 0024 FC01      		movw r30,r24
 990 0026 A684      		ldd r10,Z+14
 991 0028 B784      		ldd r11,Z+15
 992               	.LVL80:
 993               	.LBB145:
 994               	.LBB146:
 995               	.LBB147:
 996               	.LBB148:
 430:../../../os/common/ports/AVR/chcore.h **** }
 997               		.loc 3 430 0
 998               	/* #APP */
 999               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1000 002a F894      		cli
 1001               	 ;  0 "" 2
 1002               	/* #NOAPP */
 1003               	.LBE148:
 1004               	.LBE147:
 1005               	.LBE146:
 1006               	.LBE145:
 389:../../../os/hal/src/hal_queues.c ****   size_t max = n;
 390:../../../os/hal/src/hal_queues.c **** 
 391:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 392:../../../os/hal/src/hal_queues.c **** 
 393:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 394:../../../os/hal/src/hal_queues.c **** 
 395:../../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 1007               		.loc 1 395 0
 1008 002c 4115      		cp r20,__zero_reg__
 1009 002e 5105      		cpc r21,__zero_reg__
 1010 0030 01F0      		breq .L55
 1011 0032 8A01      		movw r16,r20
 1012               	.LVL81:
 1013               	.L56:
 1014               	.LBB149:
 396:../../../os/hal/src/hal_queues.c ****     size_t done;
 397:../../../os/hal/src/hal_queues.c **** 
 398:../../../os/hal/src/hal_queues.c ****     done = iq_read(iqp, bp, n);
 1015               		.loc 1 398 0
 1016 0034 A801      		movw r20,r16
 1017 0036 B701      		movw r22,r14
 1018 0038 C601      		movw r24,r12
 1019 003a 0E94 0000 		call iq_read
 1020               	.LVL82:
 1021 003e EC01      		movw r28,r24
 1022               	.LVL83:
 399:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1023               		.loc 1 399 0
 1024 0040 892B      		or r24,r25
 1025 0042 01F0      		breq .L68
 400:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&iqp->q_waiting, timeout);
 401:../../../os/hal/src/hal_queues.c **** 
 402:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 403:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 404:../../../os/hal/src/hal_queues.c ****         break;
 405:../../../os/hal/src/hal_queues.c ****       }
 406:../../../os/hal/src/hal_queues.c ****     }
 407:../../../os/hal/src/hal_queues.c ****     else {
 408:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one empty slot
 409:../../../os/hal/src/hal_queues.c ****          available.*/
 410:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1026               		.loc 1 410 0
 1027 0044 A114      		cp r10,__zero_reg__
 1028 0046 B104      		cpc r11,__zero_reg__
 1029 0048 01F0      		breq .L60
 411:../../../os/hal/src/hal_queues.c ****         nfy(iqp);
 1030               		.loc 1 411 0
 1031 004a C601      		movw r24,r12
 1032               	.LVL84:
 1033 004c F501      		movw r30,r10
 1034 004e 0995      		icall
 1035               	.LVL85:
 1036               	.L60:
 1037               	.LBB150:
 1038               	.LBB151:
 1039               	.LBB152:
 1040               	.LBB153:
 1041               	.LBB154:
 1042               		.loc 3 440 0
 1043               	/* #APP */
 1044               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1045 0050 7894      		sei
 1046               	 ;  0 "" 2
 1047               	/* #NOAPP */
 1048               	.LBE154:
 1049               	.LBE153:
 1050               	.LBE152:
 1051               	.LBE151:
 1052               	.LBE150:
 412:../../../os/hal/src/hal_queues.c ****       }
 413:../../../os/hal/src/hal_queues.c **** 
 414:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 415:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 416:../../../os/hal/src/hal_queues.c **** 
 417:../../../os/hal/src/hal_queues.c ****       n  -= done;
 1053               		.loc 1 417 0
 1054 0052 0C1B      		sub r16,r28
 1055 0054 1D0B      		sbc r17,r29
 1056               	.LVL86:
 418:../../../os/hal/src/hal_queues.c ****       bp += done;
 1057               		.loc 1 418 0
 1058 0056 EC0E      		add r14,r28
 1059 0058 FD1E      		adc r15,r29
 1060               	.LVL87:
 1061               	.LBB155:
 1062               	.LBB156:
 1063               	.LBB157:
 1064               	.LBB158:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1065               		.loc 3 430 0
 1066               	/* #APP */
 1067               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1068 005a F894      		cli
 1069               	 ;  0 "" 2
 1070               	/* #NOAPP */
 1071               	.LBE158:
 1072               	.LBE157:
 1073               	.LBE156:
 1074               	.LBE155:
 1075               	.LBE149:
 395:../../../os/hal/src/hal_queues.c ****     size_t done;
 1076               		.loc 1 395 0
 1077 005c 0115      		cp r16,__zero_reg__
 1078 005e 1105      		cpc r17,__zero_reg__
 1079 0060 01F4      		brne .L56
 1080               	.LVL88:
 1081               	.L55:
 1082 0062 00E0      		ldi r16,0
 1083 0064 10E0      		ldi r17,0
 1084               	.L57:
 1085               	.LBB162:
 1086               	.LBB163:
 1087               	.LBB164:
 1088               	.LBB165:
 1089               	.LBB166:
 1090               		.loc 3 440 0
 1091               	/* #APP */
 1092               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1093 0066 7894      		sei
 1094               	 ;  0 "" 2
 1095               	/* #NOAPP */
 1096               	.LBE166:
 1097               	.LBE165:
 1098               	.LBE164:
 1099               	.LBE163:
 1100               	.LBE162:
 419:../../../os/hal/src/hal_queues.c **** 
 420:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 421:../../../os/hal/src/hal_queues.c ****     }
 422:../../../os/hal/src/hal_queues.c ****   }
 423:../../../os/hal/src/hal_queues.c **** 
 424:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 425:../../../os/hal/src/hal_queues.c ****   return max - n;
 426:../../../os/hal/src/hal_queues.c **** }
 1101               		.loc 1 426 0
 1102 0068 C301      		movw r24,r6
 1103 006a 801B      		sub r24,r16
 1104 006c 910B      		sbc r25,r17
 1105               	/* epilogue start */
 1106 006e DF91      		pop r29
 1107 0070 CF91      		pop r28
 1108 0072 1F91      		pop r17
 1109 0074 0F91      		pop r16
 1110 0076 FF90      		pop r15
 1111 0078 EF90      		pop r14
 1112               	.LVL89:
 1113 007a DF90      		pop r13
 1114 007c CF90      		pop r12
 1115               	.LVL90:
 1116 007e BF90      		pop r11
 1117 0080 AF90      		pop r10
 1118               	.LVL91:
 1119 0082 9F90      		pop r9
 1120 0084 8F90      		pop r8
 1121               	.LVL92:
 1122 0086 7F90      		pop r7
 1123 0088 6F90      		pop r6
 1124               	.LVL93:
 1125 008a 0895      		ret
 1126               	.LVL94:
 1127               	.L68:
 1128               	.LBB167:
 1129               	.LBB159:
 1130               	.LBB160:
 1131               	.LBB161:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1132               		.loc 2 895 0
 1133 008c B401      		movw r22,r8
 1134 008e C601      		movw r24,r12
 1135               	.LVL95:
 1136 0090 0E94 0000 		call chThdEnqueueTimeoutS
 1137               	.LVL96:
 1138               	.LBE161:
 1139               	.LBE160:
 403:../../../os/hal/src/hal_queues.c ****         break;
 1140               		.loc 1 403 0
 1141 0094 892B      		or r24,r25
 1142 0096 01F0      		breq .L56
 1143 0098 00C0      		rjmp .L57
 1144               	.LBE159:
 1145               	.LBE167:
 1146               		.cfi_endproc
 1147               	.LFE249:
 1149               		.section	.text.oqObjectInit,"ax",@progbits
 1150               	.global	oqObjectInit
 1152               	oqObjectInit:
 1153               	.LFB250:
 427:../../../os/hal/src/hal_queues.c **** 
 428:../../../os/hal/src/hal_queues.c **** /**
 429:../../../os/hal/src/hal_queues.c ****  * @brief   Initializes an output queue.
 430:../../../os/hal/src/hal_queues.c ****  * @details A Semaphore is internally initialized and works as a counter of
 431:../../../os/hal/src/hal_queues.c ****  *          the free bytes in the queue.
 432:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked from within the S-Locked system state.
 433:../../../os/hal/src/hal_queues.c ****  *
 434:../../../os/hal/src/hal_queues.c ****  * @param[out] oqp      pointer to an @p output_queue_t structure
 435:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to a memory area allocated as queue buffer
 436:../../../os/hal/src/hal_queues.c ****  * @param[in] size      size of the queue buffer
 437:../../../os/hal/src/hal_queues.c ****  * @param[in] onfy      pointer to a callback function that is invoked when
 438:../../../os/hal/src/hal_queues.c ****  *                      data is written to the queue. The value can be @p NULL.
 439:../../../os/hal/src/hal_queues.c ****  * @param[in] link      application defined pointer
 440:../../../os/hal/src/hal_queues.c ****  *
 441:../../../os/hal/src/hal_queues.c ****  * @init
 442:../../../os/hal/src/hal_queues.c ****  */
 443:../../../os/hal/src/hal_queues.c **** void oqObjectInit(output_queue_t *oqp, uint8_t *bp, size_t size,
 444:../../../os/hal/src/hal_queues.c ****                   qnotify_t onfy, void *link) {
 1154               		.loc 1 444 0
 1155               		.cfi_startproc
 1156               	.LVL97:
 1157 0000 AF92      		push r10
 1158               	.LCFI55:
 1159               		.cfi_def_cfa_offset 3
 1160               		.cfi_offset 10, -2
 1161 0002 BF92      		push r11
 1162               	.LCFI56:
 1163               		.cfi_def_cfa_offset 4
 1164               		.cfi_offset 11, -3
 1165 0004 CF92      		push r12
 1166               	.LCFI57:
 1167               		.cfi_def_cfa_offset 5
 1168               		.cfi_offset 12, -4
 1169 0006 DF92      		push r13
 1170               	.LCFI58:
 1171               		.cfi_def_cfa_offset 6
 1172               		.cfi_offset 13, -5
 1173 0008 EF92      		push r14
 1174               	.LCFI59:
 1175               		.cfi_def_cfa_offset 7
 1176               		.cfi_offset 14, -6
 1177 000a FF92      		push r15
 1178               	.LCFI60:
 1179               		.cfi_def_cfa_offset 8
 1180               		.cfi_offset 15, -7
 1181 000c 0F93      		push r16
 1182               	.LCFI61:
 1183               		.cfi_def_cfa_offset 9
 1184               		.cfi_offset 16, -8
 1185 000e 1F93      		push r17
 1186               	.LCFI62:
 1187               		.cfi_def_cfa_offset 10
 1188               		.cfi_offset 17, -9
 1189 0010 CF93      		push r28
 1190               	.LCFI63:
 1191               		.cfi_def_cfa_offset 11
 1192               		.cfi_offset 28, -10
 1193 0012 DF93      		push r29
 1194               	.LCFI64:
 1195               		.cfi_def_cfa_offset 12
 1196               		.cfi_offset 29, -11
 1197               	/* prologue: function */
 1198               	/* frame size = 0 */
 1199               	/* stack size = 10 */
 1200               	.L__stack_usage = 10
 1201 0014 EC01      		movw r28,r24
 1202 0016 5B01      		movw r10,r22
 1203 0018 7A01      		movw r14,r20
 1204 001a 6901      		movw r12,r18
 1205               	.LVL98:
 1206               	.LBB168:
 1207               	.LBB169:
 866:../../../os/hal/osal/rt-nil/osal.h **** }
 1208               		.loc 2 866 0
 1209 001c 0E94 0000 		call chThdQueueObjectInit
 1210               	.LVL99:
 1211               	.LBE169:
 1212               	.LBE168:
 445:../../../os/hal/src/hal_queues.c **** 
 446:../../../os/hal/src/hal_queues.c ****   osalThreadQueueObjectInit(&oqp->q_waiting);
 447:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = size;
 1213               		.loc 1 447 0
 1214 0020 FD82      		std Y+5,r15
 1215 0022 EC82      		std Y+4,r14
 448:../../../os/hal/src/hal_queues.c ****   oqp->q_buffer  = bp;
 1216               		.loc 1 448 0
 1217 0024 BF82      		std Y+7,r11
 1218 0026 AE82      		std Y+6,r10
 449:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr   = bp;
 1219               		.loc 1 449 0
 1220 0028 BD86      		std Y+13,r11
 1221 002a AC86      		std Y+12,r10
 450:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr   = bp;
 1222               		.loc 1 450 0
 1223 002c BB86      		std Y+11,r11
 1224 002e AA86      		std Y+10,r10
 451:../../../os/hal/src/hal_queues.c ****   oqp->q_top     = bp + size;
 1225               		.loc 1 451 0
 1226 0030 EA0C      		add r14,r10
 1227 0032 FB1C      		adc r15,r11
 1228               	.LVL100:
 1229 0034 F986      		std Y+9,r15
 1230 0036 E886      		std Y+8,r14
 452:../../../os/hal/src/hal_queues.c ****   oqp->q_notify  = onfy;
 1231               		.loc 1 452 0
 1232 0038 DF86      		std Y+15,r13
 1233 003a CE86      		std Y+14,r12
 453:../../../os/hal/src/hal_queues.c ****   oqp->q_link    = link;
 1234               		.loc 1 453 0
 1235 003c 198B      		std Y+17,r17
 1236 003e 088B      		std Y+16,r16
 1237               	/* epilogue start */
 454:../../../os/hal/src/hal_queues.c **** }
 1238               		.loc 1 454 0
 1239 0040 DF91      		pop r29
 1240 0042 CF91      		pop r28
 1241               	.LVL101:
 1242 0044 1F91      		pop r17
 1243 0046 0F91      		pop r16
 1244               	.LVL102:
 1245 0048 FF90      		pop r15
 1246 004a EF90      		pop r14
 1247 004c DF90      		pop r13
 1248 004e CF90      		pop r12
 1249               	.LVL103:
 1250 0050 BF90      		pop r11
 1251 0052 AF90      		pop r10
 1252               	.LVL104:
 1253 0054 0895      		ret
 1254               		.cfi_endproc
 1255               	.LFE250:
 1257               		.section	.text.oqResetI,"ax",@progbits
 1258               	.global	oqResetI
 1260               	oqResetI:
 1261               	.LFB251:
 455:../../../os/hal/src/hal_queues.c **** 
 456:../../../os/hal/src/hal_queues.c **** /**
 457:../../../os/hal/src/hal_queues.c ****  * @brief   Resets an output queue.
 458:../../../os/hal/src/hal_queues.c ****  * @details All the data in the output queue is erased and lost, any waiting
 459:../../../os/hal/src/hal_queues.c ****  *          thread is resumed with status @p MSG_RESET.
 460:../../../os/hal/src/hal_queues.c ****  * @note    A reset operation can be used by a low level driver in order to
 461:../../../os/hal/src/hal_queues.c ****  *          obtain immediate attention from the high level layers.
 462:../../../os/hal/src/hal_queues.c ****  *
 463:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 464:../../../os/hal/src/hal_queues.c ****  *
 465:../../../os/hal/src/hal_queues.c ****  * @iclass
 466:../../../os/hal/src/hal_queues.c ****  */
 467:../../../os/hal/src/hal_queues.c **** void oqResetI(output_queue_t *oqp) {
 1262               		.loc 1 467 0
 1263               		.cfi_startproc
 1264               	.LVL105:
 1265               	/* prologue: function */
 1266               	/* frame size = 0 */
 1267               	/* stack size = 0 */
 1268               	.L__stack_usage = 0
 1269 0000 FC01      		movw r30,r24
 468:../../../os/hal/src/hal_queues.c **** 
 469:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 470:../../../os/hal/src/hal_queues.c **** 
 471:../../../os/hal/src/hal_queues.c ****   oqp->q_rdptr = oqp->q_buffer;
 1270               		.loc 1 471 0
 1271 0002 2681      		ldd r18,Z+6
 1272 0004 3781      		ldd r19,Z+7
 1273 0006 3587      		std Z+13,r19
 1274 0008 2487      		std Z+12,r18
 472:../../../os/hal/src/hal_queues.c ****   oqp->q_wrptr = oqp->q_buffer;
 1275               		.loc 1 472 0
 1276 000a 3387      		std Z+11,r19
 1277 000c 2287      		std Z+10,r18
 473:../../../os/hal/src/hal_queues.c ****   oqp->q_counter = qSizeX(oqp);
 1278               		.loc 1 473 0
 1279 000e 8085      		ldd r24,Z+8
 1280 0010 9185      		ldd r25,Z+9
 1281               	.LVL106:
 1282 0012 821B      		sub r24,r18
 1283 0014 930B      		sbc r25,r19
 1284 0016 9583      		std Z+5,r25
 1285 0018 8483      		std Z+4,r24
 1286               	.LVL107:
 1287               	.LBB170:
 1288               	.LBB171:
 1289               		.loc 2 921 0
 1290 001a 6EEF      		ldi r22,lo8(-2)
 1291 001c 7FEF      		ldi r23,lo8(-1)
 1292 001e CF01      		movw r24,r30
 1293 0020 0C94 0000 		jmp chThdDequeueAllI
 1294               	.LVL108:
 1295               	.LBE171:
 1296               	.LBE170:
 1297               		.cfi_endproc
 1298               	.LFE251:
 1300               		.section	.text.oqPutI,"ax",@progbits
 1301               	.global	oqPutI
 1303               	oqPutI:
 1304               	.LFB252:
 474:../../../os/hal/src/hal_queues.c ****   osalThreadDequeueAllI(&oqp->q_waiting, MSG_RESET);
 475:../../../os/hal/src/hal_queues.c **** }
 476:../../../os/hal/src/hal_queues.c **** 
 477:../../../os/hal/src/hal_queues.c **** /**
 478:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 479:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. The
 480:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 481:../../../os/hal/src/hal_queues.c ****  *
 482:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 483:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 484:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 485:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 486:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is full.
 487:../../../os/hal/src/hal_queues.c ****  *
 488:../../../os/hal/src/hal_queues.c ****  * @iclass
 489:../../../os/hal/src/hal_queues.c ****  */
 490:../../../os/hal/src/hal_queues.c **** msg_t oqPutI(output_queue_t *oqp, uint8_t b) {
 1305               		.loc 1 490 0
 1306               		.cfi_startproc
 1307               	.LVL109:
 1308               	/* prologue: function */
 1309               	/* frame size = 0 */
 1310               	/* stack size = 0 */
 1311               	.L__stack_usage = 0
 1312 0000 DC01      		movw r26,r24
 491:../../../os/hal/src/hal_queues.c **** 
 492:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 493:../../../os/hal/src/hal_queues.c **** 
 494:../../../os/hal/src/hal_queues.c ****   /* Queue space check.*/
 495:../../../os/hal/src/hal_queues.c ****   while (!oqIsFullI(oqp)) {
 1313               		.loc 1 495 0
 1314 0002 1496      		adiw r26,4
 1315 0004 8D91      		ld r24,X+
 1316 0006 9C91      		ld r25,X
 1317 0008 1597      		sbiw r26,4+1
 1318               	.LVL110:
 1319 000a 892B      		or r24,r25
 1320 000c 01F0      		breq .L74
 496:../../../os/hal/src/hal_queues.c ****     /* Putting the character into the queue.*/
 497:../../../os/hal/src/hal_queues.c ****     oqp->q_counter--;
 1321               		.loc 1 497 0
 1322 000e 1496      		adiw r26,4
 1323 0010 8D91      		ld r24,X+
 1324 0012 9C91      		ld r25,X
 1325 0014 1597      		sbiw r26,4+1
 1326 0016 0197      		sbiw r24,1
 1327 0018 1596      		adiw r26,4+1
 1328 001a 9C93      		st X,r25
 1329 001c 8E93      		st -X,r24
 1330 001e 1497      		sbiw r26,4
 498:../../../os/hal/src/hal_queues.c ****     *oqp->q_wrptr++ = b;
 1331               		.loc 1 498 0
 1332 0020 1A96      		adiw r26,10
 1333 0022 ED91      		ld r30,X+
 1334 0024 FC91      		ld r31,X
 1335 0026 1B97      		sbiw r26,10+1
 1336 0028 CF01      		movw r24,r30
 1337 002a 0196      		adiw r24,1
 1338 002c 1B96      		adiw r26,10+1
 1339 002e 9C93      		st X,r25
 1340 0030 8E93      		st -X,r24
 1341 0032 1A97      		sbiw r26,10
 1342 0034 6083      		st Z,r22
 499:../../../os/hal/src/hal_queues.c ****     if (oqp->q_wrptr >= oqp->q_top) {
 1343               		.loc 1 499 0
 1344 0036 1A96      		adiw r26,10
 1345 0038 2D91      		ld r18,X+
 1346 003a 3C91      		ld r19,X
 1347 003c 1B97      		sbiw r26,10+1
 1348 003e 1896      		adiw r26,8
 1349 0040 8D91      		ld r24,X+
 1350 0042 9C91      		ld r25,X
 1351 0044 1997      		sbiw r26,8+1
 1352 0046 2817      		cp r18,r24
 1353 0048 3907      		cpc r19,r25
 1354 004a 00F4      		brsh .L76
 500:../../../os/hal/src/hal_queues.c ****       oqp->q_wrptr = oqp->q_buffer;
 501:../../../os/hal/src/hal_queues.c ****     }
 502:../../../os/hal/src/hal_queues.c **** 
 503:../../../os/hal/src/hal_queues.c ****     /* Inform the low side that the queue has at least one character available.*/
 504:../../../os/hal/src/hal_queues.c ****     if (oqp->q_notify != NULL) {
 1355               		.loc 1 504 0
 1356 004c 1E96      		adiw r26,14
 1357 004e ED91      		ld r30,X+
 1358 0050 FC91      		ld r31,X
 1359 0052 1F97      		sbiw r26,14+1
 1360 0054 3097      		sbiw r30,0
 1361 0056 01F0      		breq .L75
 1362               	.L77:
 1363 0058 CD01      		movw r24,r26
 505:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1364               		.loc 1 505 0
 1365 005a 0995      		icall
 1366               	.LVL111:
 506:../../../os/hal/src/hal_queues.c ****     }
 507:../../../os/hal/src/hal_queues.c **** 
 508:../../../os/hal/src/hal_queues.c ****     return MSG_OK;
 1367               		.loc 1 508 0
 1368 005c 80E0      		ldi r24,0
 1369 005e 90E0      		ldi r25,0
 1370 0060 0895      		ret
 1371               	.LVL112:
 1372               	.L76:
 500:../../../os/hal/src/hal_queues.c ****     }
 1373               		.loc 1 500 0
 1374 0062 1696      		adiw r26,6
 1375 0064 8D91      		ld r24,X+
 1376 0066 9C91      		ld r25,X
 1377 0068 1797      		sbiw r26,6+1
 1378 006a 1B96      		adiw r26,10+1
 1379 006c 9C93      		st X,r25
 1380 006e 8E93      		st -X,r24
 1381 0070 1A97      		sbiw r26,10
 504:../../../os/hal/src/hal_queues.c ****       oqp->q_notify(oqp);
 1382               		.loc 1 504 0
 1383 0072 1E96      		adiw r26,14
 1384 0074 ED91      		ld r30,X+
 1385 0076 FC91      		ld r31,X
 1386 0078 1F97      		sbiw r26,14+1
 1387 007a 3097      		sbiw r30,0
 1388 007c 01F4      		brne .L77
 1389               	.L75:
 1390               		.loc 1 508 0
 1391 007e 80E0      		ldi r24,0
 1392 0080 90E0      		ldi r25,0
 509:../../../os/hal/src/hal_queues.c ****   }
 510:../../../os/hal/src/hal_queues.c **** 
 511:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 512:../../../os/hal/src/hal_queues.c **** }
 1393               		.loc 1 512 0
 1394 0082 0895      		ret
 1395               	.L74:
 511:../../../os/hal/src/hal_queues.c **** }
 1396               		.loc 1 511 0
 1397 0084 8FEF      		ldi r24,lo8(-1)
 1398 0086 9FEF      		ldi r25,lo8(-1)
 1399 0088 0895      		ret
 1400               		.cfi_endproc
 1401               	.LFE252:
 1403               		.section	.text.oqPutTimeout,"ax",@progbits
 1404               	.global	oqPutTimeout
 1406               	oqPutTimeout:
 1407               	.LFB253:
 513:../../../os/hal/src/hal_queues.c **** 
 514:../../../os/hal/src/hal_queues.c **** /**
 515:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 516:../../../os/hal/src/hal_queues.c ****  * @details This function writes a byte value to an output queue. If the queue
 517:../../../os/hal/src/hal_queues.c ****  *          is full then the calling thread is suspended until there is space
 518:../../../os/hal/src/hal_queues.c ****  *          in the queue or a timeout occurs.
 519:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting the character into the
 520:../../../os/hal/src/hal_queues.c ****  *          queue.
 521:../../../os/hal/src/hal_queues.c ****  *
 522:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 523:../../../os/hal/src/hal_queues.c ****  * @param[in] b         the byte value to be written in the queue
 524:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 525:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 526:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 527:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 528:../../../os/hal/src/hal_queues.c ****  * @return              The operation status.
 529:../../../os/hal/src/hal_queues.c ****  * @retval MSG_OK       if the operation succeeded.
 530:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 531:../../../os/hal/src/hal_queues.c ****  * @retval MSG_RESET    if the queue has been reset.
 532:../../../os/hal/src/hal_queues.c ****  *
 533:../../../os/hal/src/hal_queues.c ****  * @api
 534:../../../os/hal/src/hal_queues.c ****  */
 535:../../../os/hal/src/hal_queues.c **** msg_t oqPutTimeout(output_queue_t *oqp, uint8_t b, sysinterval_t timeout) {
 1408               		.loc 1 535 0
 1409               		.cfi_startproc
 1410               	.LVL113:
 1411 0000 FF92      		push r15
 1412               	.LCFI65:
 1413               		.cfi_def_cfa_offset 3
 1414               		.cfi_offset 15, -2
 1415 0002 0F93      		push r16
 1416               	.LCFI66:
 1417               		.cfi_def_cfa_offset 4
 1418               		.cfi_offset 16, -3
 1419 0004 1F93      		push r17
 1420               	.LCFI67:
 1421               		.cfi_def_cfa_offset 5
 1422               		.cfi_offset 17, -4
 1423 0006 CF93      		push r28
 1424               	.LCFI68:
 1425               		.cfi_def_cfa_offset 6
 1426               		.cfi_offset 28, -5
 1427 0008 DF93      		push r29
 1428               	.LCFI69:
 1429               		.cfi_def_cfa_offset 7
 1430               		.cfi_offset 29, -6
 1431               	/* prologue: function */
 1432               	/* frame size = 0 */
 1433               	/* stack size = 5 */
 1434               	.L__stack_usage = 5
 1435 000a EC01      		movw r28,r24
 1436 000c F62E      		mov r15,r22
 1437 000e 8A01      		movw r16,r20
 1438               	.LBB172:
 1439               	.LBB173:
 1440               	.LBB174:
 1441               	.LBB175:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1442               		.loc 3 430 0
 1443               	/* #APP */
 1444               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1445 0010 F894      		cli
 1446               	 ;  0 "" 2
 1447               	/* #NOAPP */
 1448 0012 00C0      		rjmp .L79
 1449               	.LVL114:
 1450               	.L81:
 1451               	.LBE175:
 1452               	.LBE174:
 1453               	.LBE173:
 1454               	.LBE172:
 1455               	.LBB176:
 1456               	.LBB177:
 1457               	.LBB178:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1458               		.loc 2 895 0
 1459 0014 B801      		movw r22,r16
 1460 0016 CE01      		movw r24,r28
 1461 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1462               	.LVL115:
 1463               	.LBE178:
 1464               	.LBE177:
 536:../../../os/hal/src/hal_queues.c **** 
 537:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 538:../../../os/hal/src/hal_queues.c **** 
 539:../../../os/hal/src/hal_queues.c ****   /* Waiting until there is a slot available or a timeout occurs.*/
 540:../../../os/hal/src/hal_queues.c ****   while (oqIsFullI(oqp)) {
 541:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 542:../../../os/hal/src/hal_queues.c ****     if (msg < MSG_OK) {
 1465               		.loc 1 542 0
 1466 001c 97FD      		sbrc r25,7
 1467 001e 00C0      		rjmp .L88
 1468               	.L79:
 1469               	.LBE176:
 540:../../../os/hal/src/hal_queues.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 1470               		.loc 1 540 0
 1471 0020 8C81      		ldd r24,Y+4
 1472 0022 9D81      		ldd r25,Y+5
 1473 0024 892B      		or r24,r25
 1474 0026 01F0      		breq .L81
 543:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 544:../../../os/hal/src/hal_queues.c ****       return msg;
 545:../../../os/hal/src/hal_queues.c ****     }
 546:../../../os/hal/src/hal_queues.c ****   }
 547:../../../os/hal/src/hal_queues.c **** 
 548:../../../os/hal/src/hal_queues.c ****   /* Putting the character into the queue.*/
 549:../../../os/hal/src/hal_queues.c ****   oqp->q_counter--;
 1475               		.loc 1 549 0
 1476 0028 8C81      		ldd r24,Y+4
 1477 002a 9D81      		ldd r25,Y+5
 1478 002c 0197      		sbiw r24,1
 1479 002e 9D83      		std Y+5,r25
 1480 0030 8C83      		std Y+4,r24
 550:../../../os/hal/src/hal_queues.c ****   *oqp->q_wrptr++ = b;
 1481               		.loc 1 550 0
 1482 0032 EA85      		ldd r30,Y+10
 1483 0034 FB85      		ldd r31,Y+11
 1484 0036 CF01      		movw r24,r30
 1485 0038 0196      		adiw r24,1
 1486 003a 9B87      		std Y+11,r25
 1487 003c 8A87      		std Y+10,r24
 1488 003e F082      		st Z,r15
 551:../../../os/hal/src/hal_queues.c ****   if (oqp->q_wrptr >= oqp->q_top) {
 1489               		.loc 1 551 0
 1490 0040 2A85      		ldd r18,Y+10
 1491 0042 3B85      		ldd r19,Y+11
 1492 0044 8885      		ldd r24,Y+8
 1493 0046 9985      		ldd r25,Y+9
 1494 0048 2817      		cp r18,r24
 1495 004a 3907      		cpc r19,r25
 1496 004c 00F0      		brlo .L82
 552:../../../os/hal/src/hal_queues.c ****     oqp->q_wrptr = oqp->q_buffer;
 1497               		.loc 1 552 0
 1498 004e 8E81      		ldd r24,Y+6
 1499 0050 9F81      		ldd r25,Y+7
 1500 0052 9B87      		std Y+11,r25
 1501 0054 8A87      		std Y+10,r24
 1502               	.L82:
 553:../../../os/hal/src/hal_queues.c ****   }
 554:../../../os/hal/src/hal_queues.c **** 
 555:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character available.*/
 556:../../../os/hal/src/hal_queues.c ****   if (oqp->q_notify != NULL) {
 1503               		.loc 1 556 0
 1504 0056 EE85      		ldd r30,Y+14
 1505 0058 FF85      		ldd r31,Y+15
 1506 005a 3097      		sbiw r30,0
 1507 005c 01F0      		breq .L83
 557:../../../os/hal/src/hal_queues.c ****     oqp->q_notify(oqp);
 1508               		.loc 1 557 0
 1509 005e CE01      		movw r24,r28
 1510 0060 0995      		icall
 1511               	.LVL116:
 1512               	.L83:
 1513               	.LBB184:
 1514               	.LBB185:
 1515               	.LBB186:
 1516               	.LBB187:
 1517               	.LBB188:
 1518               		.loc 3 440 0
 1519               	/* #APP */
 1520               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1521 0062 7894      		sei
 1522               	 ;  0 "" 2
 1523               	/* #NOAPP */
 1524               	.LBE188:
 1525               	.LBE187:
 1526               	.LBE186:
 1527               	.LBE185:
 1528               	.LBE184:
 558:../../../os/hal/src/hal_queues.c ****   }
 559:../../../os/hal/src/hal_queues.c **** 
 560:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 561:../../../os/hal/src/hal_queues.c **** 
 562:../../../os/hal/src/hal_queues.c ****   return MSG_OK;
 1529               		.loc 1 562 0
 1530 0064 80E0      		ldi r24,0
 1531 0066 90E0      		ldi r25,0
 1532               	/* epilogue start */
 563:../../../os/hal/src/hal_queues.c **** }
 1533               		.loc 1 563 0
 1534 0068 DF91      		pop r29
 1535 006a CF91      		pop r28
 1536               	.LVL117:
 1537 006c 1F91      		pop r17
 1538 006e 0F91      		pop r16
 1539               	.LVL118:
 1540 0070 FF90      		pop r15
 1541               	.LVL119:
 1542 0072 0895      		ret
 1543               	.LVL120:
 1544               	.L88:
 1545               	.LBB189:
 1546               	.LBB179:
 1547               	.LBB180:
 1548               	.LBB181:
 1549               	.LBB182:
 1550               	.LBB183:
 1551               		.loc 3 440 0
 1552               	/* #APP */
 1553               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1554 0074 7894      		sei
 1555               	 ;  0 "" 2
 1556               	/* epilogue start */
 1557               	/* #NOAPP */
 1558               	.LBE183:
 1559               	.LBE182:
 1560               	.LBE181:
 1561               	.LBE180:
 1562               	.LBE179:
 1563               	.LBE189:
 1564               		.loc 1 563 0
 1565 0076 DF91      		pop r29
 1566 0078 CF91      		pop r28
 1567               	.LVL121:
 1568 007a 1F91      		pop r17
 1569 007c 0F91      		pop r16
 1570               	.LVL122:
 1571 007e FF90      		pop r15
 1572               	.LVL123:
 1573 0080 0895      		ret
 1574               		.cfi_endproc
 1575               	.LFE253:
 1577               		.section	.text.oqGetI,"ax",@progbits
 1578               	.global	oqGetI
 1580               	oqGetI:
 1581               	.LFB254:
 564:../../../os/hal/src/hal_queues.c **** 
 565:../../../os/hal/src/hal_queues.c **** /**
 566:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue read.
 567:../../../os/hal/src/hal_queues.c ****  * @details A byte value is read from the low end of an output queue. The
 568:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 569:../../../os/hal/src/hal_queues.c ****  *
 570:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 571:../../../os/hal/src/hal_queues.c ****  * @return              The byte value from the queue.
 572:../../../os/hal/src/hal_queues.c ****  * @retval MSG_TIMEOUT  if the queue is empty.
 573:../../../os/hal/src/hal_queues.c ****  *
 574:../../../os/hal/src/hal_queues.c ****  * @iclass
 575:../../../os/hal/src/hal_queues.c ****  */
 576:../../../os/hal/src/hal_queues.c **** msg_t oqGetI(output_queue_t *oqp) {
 1582               		.loc 1 576 0
 1583               		.cfi_startproc
 1584               	.LVL124:
 1585 0000 CF93      		push r28
 1586               	.LCFI70:
 1587               		.cfi_def_cfa_offset 3
 1588               		.cfi_offset 28, -2
 1589               	/* prologue: function */
 1590               	/* frame size = 0 */
 1591               	/* stack size = 1 */
 1592               	.L__stack_usage = 1
 1593 0002 FC01      		movw r30,r24
 577:../../../os/hal/src/hal_queues.c **** 
 578:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 579:../../../os/hal/src/hal_queues.c **** 
 580:../../../os/hal/src/hal_queues.c ****   /* Queue data check.*/
 581:../../../os/hal/src/hal_queues.c ****   if (!oqIsEmptyI(oqp)) {
 1594               		.loc 1 581 0
 1595 0004 A485      		ldd r26,Z+12
 1596 0006 B585      		ldd r27,Z+13
 1597 0008 8285      		ldd r24,Z+10
 1598 000a 9385      		ldd r25,Z+11
 1599               	.LVL125:
 1600 000c 8A17      		cp r24,r26
 1601 000e 9B07      		cpc r25,r27
 1602 0010 01F0      		breq .L96
 1603               	.L90:
 1604               	.LBB190:
 582:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 583:../../../os/hal/src/hal_queues.c **** 
 584:../../../os/hal/src/hal_queues.c ****     oqp->q_counter++;
 1605               		.loc 1 584 0
 1606 0012 8481      		ldd r24,Z+4
 1607 0014 9581      		ldd r25,Z+5
 1608 0016 0196      		adiw r24,1
 1609 0018 9583      		std Z+5,r25
 1610 001a 8483      		std Z+4,r24
 585:../../../os/hal/src/hal_queues.c ****     b = *oqp->q_rdptr++;
 1611               		.loc 1 585 0
 1612 001c CD01      		movw r24,r26
 1613 001e 0196      		adiw r24,1
 1614 0020 9587      		std Z+13,r25
 1615 0022 8487      		std Z+12,r24
 1616 0024 CC91      		ld r28,X
 1617               	.LVL126:
 586:../../../os/hal/src/hal_queues.c ****     if (oqp->q_rdptr >= oqp->q_top) {
 1618               		.loc 1 586 0
 1619 0026 2085      		ldd r18,Z+8
 1620 0028 3185      		ldd r19,Z+9
 1621 002a 8217      		cp r24,r18
 1622 002c 9307      		cpc r25,r19
 1623 002e 00F4      		brsh .L92
 1624               	.L93:
 1625 0030 CF01      		movw r24,r30
 1626               	.LVL127:
 1627               	.LBB191:
 1628               	.LBB192:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 1629               		.loc 2 908 0
 1630 0032 60E0      		ldi r22,0
 1631 0034 70E0      		ldi r23,0
 1632 0036 0E94 0000 		call chThdDequeueNextI
 1633               	.LVL128:
 1634               	.LBE192:
 1635               	.LBE191:
 587:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 588:../../../os/hal/src/hal_queues.c ****     }
 589:../../../os/hal/src/hal_queues.c **** 
 590:../../../os/hal/src/hal_queues.c ****     osalThreadDequeueNextI(&oqp->q_waiting, MSG_OK);
 591:../../../os/hal/src/hal_queues.c **** 
 592:../../../os/hal/src/hal_queues.c ****     return (msg_t)b;
 1636               		.loc 1 592 0
 1637 003a 8C2F      		mov r24,r28
 1638 003c 90E0      		ldi r25,0
 1639               	.LVL129:
 1640               	.L95:
 1641               	/* epilogue start */
 1642               	.LBE190:
 593:../../../os/hal/src/hal_queues.c ****   }
 594:../../../os/hal/src/hal_queues.c **** 
 595:../../../os/hal/src/hal_queues.c ****   return MSG_TIMEOUT;
 596:../../../os/hal/src/hal_queues.c **** }
 1643               		.loc 1 596 0
 1644 003e CF91      		pop r28
 1645 0040 0895      		ret
 1646               	.LVL130:
 1647               	.L92:
 1648               	.LBB193:
 587:../../../os/hal/src/hal_queues.c ****       oqp->q_rdptr = oqp->q_buffer;
 1649               		.loc 1 587 0
 1650 0042 8681      		ldd r24,Z+6
 1651 0044 9781      		ldd r25,Z+7
 1652 0046 9587      		std Z+13,r25
 1653 0048 8487      		std Z+12,r24
 1654 004a 00C0      		rjmp .L93
 1655               	.LVL131:
 1656               	.L96:
 1657               	.LBE193:
 581:../../../os/hal/src/hal_queues.c ****     uint8_t b;
 1658               		.loc 1 581 0 discriminator 1
 1659 004c 8481      		ldd r24,Z+4
 1660 004e 9581      		ldd r25,Z+5
 1661 0050 892B      		or r24,r25
 1662 0052 01F0      		breq .L90
 595:../../../os/hal/src/hal_queues.c **** }
 1663               		.loc 1 595 0
 1664 0054 8FEF      		ldi r24,lo8(-1)
 1665 0056 9FEF      		ldi r25,lo8(-1)
 1666 0058 00C0      		rjmp .L95
 1667               		.cfi_endproc
 1668               	.LFE254:
 1670               		.section	.text.oqWriteI,"ax",@progbits
 1671               	.global	oqWriteI
 1673               	oqWriteI:
 1674               	.LFB255:
 597:../../../os/hal/src/hal_queues.c **** 
 598:../../../os/hal/src/hal_queues.c **** /**
 599:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue non-blocking write.
 600:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 601:../../../os/hal/src/hal_queues.c ****  *          operation completes immediately.
 602:../../../os/hal/src/hal_queues.c ****  *
 603:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 604:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 605:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 606:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 607:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 608:../../../os/hal/src/hal_queues.c ****  *
 609:../../../os/hal/src/hal_queues.c ****  * @iclass
 610:../../../os/hal/src/hal_queues.c ****  */
 611:../../../os/hal/src/hal_queues.c **** size_t oqWriteI(output_queue_t *oqp, const uint8_t *bp, size_t n) {
 1675               		.loc 1 611 0
 1676               		.cfi_startproc
 1677               	.LVL132:
 1678 0000 EF92      		push r14
 1679               	.LCFI71:
 1680               		.cfi_def_cfa_offset 3
 1681               		.cfi_offset 14, -2
 1682 0002 FF92      		push r15
 1683               	.LCFI72:
 1684               		.cfi_def_cfa_offset 4
 1685               		.cfi_offset 15, -3
 1686 0004 0F93      		push r16
 1687               	.LCFI73:
 1688               		.cfi_def_cfa_offset 5
 1689               		.cfi_offset 16, -4
 1690 0006 1F93      		push r17
 1691               	.LCFI74:
 1692               		.cfi_def_cfa_offset 6
 1693               		.cfi_offset 17, -5
 1694 0008 CF93      		push r28
 1695               	.LCFI75:
 1696               		.cfi_def_cfa_offset 7
 1697               		.cfi_offset 28, -6
 1698 000a DF93      		push r29
 1699               	.LCFI76:
 1700               		.cfi_def_cfa_offset 8
 1701               		.cfi_offset 29, -7
 1702               	/* prologue: function */
 1703               	/* frame size = 0 */
 1704               	/* stack size = 6 */
 1705               	.L__stack_usage = 6
 1706 000c EC01      		movw r28,r24
 612:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1707               		.loc 1 612 0
 1708 000e EE84      		ldd r14,Y+14
 1709 0010 FF84      		ldd r15,Y+15
 1710               	.LVL133:
 613:../../../os/hal/src/hal_queues.c ****   size_t wr;
 614:../../../os/hal/src/hal_queues.c **** 
 615:../../../os/hal/src/hal_queues.c ****   osalDbgCheckClassI();
 616:../../../os/hal/src/hal_queues.c **** 
 617:../../../os/hal/src/hal_queues.c ****   wr = oq_write(oqp, bp, n);
 1711               		.loc 1 617 0
 1712 0012 0E94 0000 		call oq_write
 1713               	.LVL134:
 1714 0016 8C01      		movw r16,r24
 1715               	.LVL135:
 618:../../../os/hal/src/hal_queues.c **** 
 619:../../../os/hal/src/hal_queues.c ****   /* Inform the low side that the queue has at least one character
 620:../../../os/hal/src/hal_queues.c ****      available.*/
 621:../../../os/hal/src/hal_queues.c ****   if ((wr > (size_t)0) && (nfy != NULL)) {
 1716               		.loc 1 621 0
 1717 0018 892B      		or r24,r25
 1718 001a 01F0      		breq .L98
 1719               		.loc 1 621 0 is_stmt 0 discriminator 1
 1720 001c E114      		cp r14,__zero_reg__
 1721 001e F104      		cpc r15,__zero_reg__
 1722 0020 01F0      		breq .L98
 622:../../../os/hal/src/hal_queues.c ****     nfy(oqp);
 1723               		.loc 1 622 0 is_stmt 1
 1724 0022 CE01      		movw r24,r28
 1725 0024 F701      		movw r30,r14
 1726 0026 0995      		icall
 1727               	.LVL136:
 1728               	.L98:
 623:../../../os/hal/src/hal_queues.c ****   }
 624:../../../os/hal/src/hal_queues.c **** 
 625:../../../os/hal/src/hal_queues.c ****   return wr;
 626:../../../os/hal/src/hal_queues.c **** }
 1729               		.loc 1 626 0
 1730 0028 C801      		movw r24,r16
 1731               	/* epilogue start */
 1732 002a DF91      		pop r29
 1733 002c CF91      		pop r28
 1734               	.LVL137:
 1735 002e 1F91      		pop r17
 1736 0030 0F91      		pop r16
 1737               	.LVL138:
 1738 0032 FF90      		pop r15
 1739 0034 EF90      		pop r14
 1740               	.LVL139:
 1741 0036 0895      		ret
 1742               		.cfi_endproc
 1743               	.LFE255:
 1745               		.section	.text.oqWriteTimeout,"ax",@progbits
 1746               	.global	oqWriteTimeout
 1748               	oqWriteTimeout:
 1749               	.LFB256:
 627:../../../os/hal/src/hal_queues.c **** 
 628:../../../os/hal/src/hal_queues.c **** /**
 629:../../../os/hal/src/hal_queues.c ****  * @brief   Output queue write with timeout.
 630:../../../os/hal/src/hal_queues.c ****  * @details The function writes data from a buffer to an output queue. The
 631:../../../os/hal/src/hal_queues.c ****  *          operation completes when the specified amount of data has been
 632:../../../os/hal/src/hal_queues.c ****  *          transferred or after the specified timeout or if the queue has
 633:../../../os/hal/src/hal_queues.c ****  *          been reset.
 634:../../../os/hal/src/hal_queues.c ****  * @note    The function is not atomic, if you need atomicity it is suggested
 635:../../../os/hal/src/hal_queues.c ****  *          to use a semaphore or a mutex for mutual exclusion.
 636:../../../os/hal/src/hal_queues.c ****  * @note    The callback is invoked after putting each character into the
 637:../../../os/hal/src/hal_queues.c ****  *          queue.
 638:../../../os/hal/src/hal_queues.c ****  *
 639:../../../os/hal/src/hal_queues.c ****  * @param[in] oqp       pointer to an @p output_queue_t structure
 640:../../../os/hal/src/hal_queues.c ****  * @param[in] bp        pointer to the data buffer
 641:../../../os/hal/src/hal_queues.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 642:../../../os/hal/src/hal_queues.c ****  *                      value 0 is reserved
 643:../../../os/hal/src/hal_queues.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 644:../../../os/hal/src/hal_queues.c ****  *                      the following special values are allowed:
 645:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 646:../../../os/hal/src/hal_queues.c ****  *                      - @a TIME_INFINITE no timeout.
 647:../../../os/hal/src/hal_queues.c ****  * @return              The number of bytes effectively transferred.
 648:../../../os/hal/src/hal_queues.c ****  *
 649:../../../os/hal/src/hal_queues.c ****  * @api
 650:../../../os/hal/src/hal_queues.c ****  */
 651:../../../os/hal/src/hal_queues.c **** size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
 652:../../../os/hal/src/hal_queues.c ****                       size_t n, sysinterval_t timeout) {
 1750               		.loc 1 652 0
 1751               		.cfi_startproc
 1752               	.LVL140:
 1753 0000 6F92      		push r6
 1754               	.LCFI77:
 1755               		.cfi_def_cfa_offset 3
 1756               		.cfi_offset 6, -2
 1757 0002 7F92      		push r7
 1758               	.LCFI78:
 1759               		.cfi_def_cfa_offset 4
 1760               		.cfi_offset 7, -3
 1761 0004 8F92      		push r8
 1762               	.LCFI79:
 1763               		.cfi_def_cfa_offset 5
 1764               		.cfi_offset 8, -4
 1765 0006 9F92      		push r9
 1766               	.LCFI80:
 1767               		.cfi_def_cfa_offset 6
 1768               		.cfi_offset 9, -5
 1769 0008 AF92      		push r10
 1770               	.LCFI81:
 1771               		.cfi_def_cfa_offset 7
 1772               		.cfi_offset 10, -6
 1773 000a BF92      		push r11
 1774               	.LCFI82:
 1775               		.cfi_def_cfa_offset 8
 1776               		.cfi_offset 11, -7
 1777 000c CF92      		push r12
 1778               	.LCFI83:
 1779               		.cfi_def_cfa_offset 9
 1780               		.cfi_offset 12, -8
 1781 000e DF92      		push r13
 1782               	.LCFI84:
 1783               		.cfi_def_cfa_offset 10
 1784               		.cfi_offset 13, -9
 1785 0010 EF92      		push r14
 1786               	.LCFI85:
 1787               		.cfi_def_cfa_offset 11
 1788               		.cfi_offset 14, -10
 1789 0012 FF92      		push r15
 1790               	.LCFI86:
 1791               		.cfi_def_cfa_offset 12
 1792               		.cfi_offset 15, -11
 1793 0014 0F93      		push r16
 1794               	.LCFI87:
 1795               		.cfi_def_cfa_offset 13
 1796               		.cfi_offset 16, -12
 1797 0016 1F93      		push r17
 1798               	.LCFI88:
 1799               		.cfi_def_cfa_offset 14
 1800               		.cfi_offset 17, -13
 1801 0018 CF93      		push r28
 1802               	.LCFI89:
 1803               		.cfi_def_cfa_offset 15
 1804               		.cfi_offset 28, -14
 1805 001a DF93      		push r29
 1806               	.LCFI90:
 1807               		.cfi_def_cfa_offset 16
 1808               		.cfi_offset 29, -15
 1809               	/* prologue: function */
 1810               	/* frame size = 0 */
 1811               	/* stack size = 14 */
 1812               	.L__stack_usage = 14
 1813 001c 6C01      		movw r12,r24
 1814 001e 7B01      		movw r14,r22
 1815 0020 3A01      		movw r6,r20
 1816 0022 4901      		movw r8,r18
 653:../../../os/hal/src/hal_queues.c ****   qnotify_t nfy = oqp->q_notify;
 1817               		.loc 1 653 0
 1818 0024 FC01      		movw r30,r24
 1819 0026 A684      		ldd r10,Z+14
 1820 0028 B784      		ldd r11,Z+15
 1821               	.LVL141:
 1822               	.LBB194:
 1823               	.LBB195:
 1824               	.LBB196:
 1825               	.LBB197:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1826               		.loc 3 430 0
 1827               	/* #APP */
 1828               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1829 002a F894      		cli
 1830               	 ;  0 "" 2
 1831               	/* #NOAPP */
 1832               	.LBE197:
 1833               	.LBE196:
 1834               	.LBE195:
 1835               	.LBE194:
 654:../../../os/hal/src/hal_queues.c ****   size_t max = n;
 655:../../../os/hal/src/hal_queues.c **** 
 656:../../../os/hal/src/hal_queues.c ****   osalDbgCheck(n > 0U);
 657:../../../os/hal/src/hal_queues.c **** 
 658:../../../os/hal/src/hal_queues.c ****   osalSysLock();
 659:../../../os/hal/src/hal_queues.c **** 
 660:../../../os/hal/src/hal_queues.c ****   while (n > 0U) {
 1836               		.loc 1 660 0
 1837 002c 4115      		cp r20,__zero_reg__
 1838 002e 5105      		cpc r21,__zero_reg__
 1839 0030 01F0      		breq .L106
 1840 0032 8A01      		movw r16,r20
 1841               	.LVL142:
 1842               	.L107:
 1843               	.LBB198:
 661:../../../os/hal/src/hal_queues.c ****     size_t done;
 662:../../../os/hal/src/hal_queues.c **** 
 663:../../../os/hal/src/hal_queues.c ****     done = oq_write(oqp, bp, n);
 1844               		.loc 1 663 0
 1845 0034 A801      		movw r20,r16
 1846 0036 B701      		movw r22,r14
 1847 0038 C601      		movw r24,r12
 1848 003a 0E94 0000 		call oq_write
 1849               	.LVL143:
 1850 003e EC01      		movw r28,r24
 1851               	.LVL144:
 664:../../../os/hal/src/hal_queues.c ****     if (done == (size_t)0) {
 1852               		.loc 1 664 0
 1853 0040 892B      		or r24,r25
 1854 0042 01F0      		breq .L119
 665:../../../os/hal/src/hal_queues.c ****       msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);
 666:../../../os/hal/src/hal_queues.c **** 
 667:../../../os/hal/src/hal_queues.c ****       /* Anything except MSG_OK causes the operation to stop.*/
 668:../../../os/hal/src/hal_queues.c ****       if (msg != MSG_OK) {
 669:../../../os/hal/src/hal_queues.c ****         break;
 670:../../../os/hal/src/hal_queues.c ****       }
 671:../../../os/hal/src/hal_queues.c ****     }
 672:../../../os/hal/src/hal_queues.c ****     else {
 673:../../../os/hal/src/hal_queues.c ****       /* Inform the low side that the queue has at least one character
 674:../../../os/hal/src/hal_queues.c ****          available.*/
 675:../../../os/hal/src/hal_queues.c ****       if (nfy != NULL) {
 1855               		.loc 1 675 0
 1856 0044 A114      		cp r10,__zero_reg__
 1857 0046 B104      		cpc r11,__zero_reg__
 1858 0048 01F0      		breq .L111
 676:../../../os/hal/src/hal_queues.c ****         nfy(oqp);
 1859               		.loc 1 676 0
 1860 004a C601      		movw r24,r12
 1861               	.LVL145:
 1862 004c F501      		movw r30,r10
 1863 004e 0995      		icall
 1864               	.LVL146:
 1865               	.L111:
 1866               	.LBB199:
 1867               	.LBB200:
 1868               	.LBB201:
 1869               	.LBB202:
 1870               	.LBB203:
 1871               		.loc 3 440 0
 1872               	/* #APP */
 1873               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1874 0050 7894      		sei
 1875               	 ;  0 "" 2
 1876               	/* #NOAPP */
 1877               	.LBE203:
 1878               	.LBE202:
 1879               	.LBE201:
 1880               	.LBE200:
 1881               	.LBE199:
 677:../../../os/hal/src/hal_queues.c ****       }
 678:../../../os/hal/src/hal_queues.c **** 
 679:../../../os/hal/src/hal_queues.c ****       /* Giving a preemption chance in a controlled point.*/
 680:../../../os/hal/src/hal_queues.c ****       osalSysUnlock();
 681:../../../os/hal/src/hal_queues.c **** 
 682:../../../os/hal/src/hal_queues.c ****       n  -= done;
 1882               		.loc 1 682 0
 1883 0052 0C1B      		sub r16,r28
 1884 0054 1D0B      		sbc r17,r29
 1885               	.LVL147:
 683:../../../os/hal/src/hal_queues.c ****       bp += done;
 1886               		.loc 1 683 0
 1887 0056 EC0E      		add r14,r28
 1888 0058 FD1E      		adc r15,r29
 1889               	.LVL148:
 1890               	.LBB204:
 1891               	.LBB205:
 1892               	.LBB206:
 1893               	.LBB207:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1894               		.loc 3 430 0
 1895               	/* #APP */
 1896               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1897 005a F894      		cli
 1898               	 ;  0 "" 2
 1899               	/* #NOAPP */
 1900               	.LBE207:
 1901               	.LBE206:
 1902               	.LBE205:
 1903               	.LBE204:
 1904               	.LBE198:
 660:../../../os/hal/src/hal_queues.c ****     size_t done;
 1905               		.loc 1 660 0
 1906 005c 0115      		cp r16,__zero_reg__
 1907 005e 1105      		cpc r17,__zero_reg__
 1908 0060 01F4      		brne .L107
 1909               	.LVL149:
 1910               	.L106:
 1911 0062 00E0      		ldi r16,0
 1912 0064 10E0      		ldi r17,0
 1913               	.L108:
 1914               	.LBB211:
 1915               	.LBB212:
 1916               	.LBB213:
 1917               	.LBB214:
 1918               	.LBB215:
 1919               		.loc 3 440 0
 1920               	/* #APP */
 1921               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1922 0066 7894      		sei
 1923               	 ;  0 "" 2
 1924               	/* #NOAPP */
 1925               	.LBE215:
 1926               	.LBE214:
 1927               	.LBE213:
 1928               	.LBE212:
 1929               	.LBE211:
 684:../../../os/hal/src/hal_queues.c **** 
 685:../../../os/hal/src/hal_queues.c ****       osalSysLock();
 686:../../../os/hal/src/hal_queues.c ****     }
 687:../../../os/hal/src/hal_queues.c ****   }
 688:../../../os/hal/src/hal_queues.c **** 
 689:../../../os/hal/src/hal_queues.c ****   osalSysUnlock();
 690:../../../os/hal/src/hal_queues.c ****   return max - n;
 691:../../../os/hal/src/hal_queues.c **** }
 1930               		.loc 1 691 0
 1931 0068 C301      		movw r24,r6
 1932 006a 801B      		sub r24,r16
 1933 006c 910B      		sbc r25,r17
 1934               	/* epilogue start */
 1935 006e DF91      		pop r29
 1936 0070 CF91      		pop r28
 1937 0072 1F91      		pop r17
 1938 0074 0F91      		pop r16
 1939 0076 FF90      		pop r15
 1940 0078 EF90      		pop r14
 1941               	.LVL150:
 1942 007a DF90      		pop r13
 1943 007c CF90      		pop r12
 1944               	.LVL151:
 1945 007e BF90      		pop r11
 1946 0080 AF90      		pop r10
 1947               	.LVL152:
 1948 0082 9F90      		pop r9
 1949 0084 8F90      		pop r8
 1950               	.LVL153:
 1951 0086 7F90      		pop r7
 1952 0088 6F90      		pop r6
 1953               	.LVL154:
 1954 008a 0895      		ret
 1955               	.LVL155:
 1956               	.L119:
 1957               	.LBB216:
 1958               	.LBB208:
 1959               	.LBB209:
 1960               	.LBB210:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1961               		.loc 2 895 0
 1962 008c B401      		movw r22,r8
 1963 008e C601      		movw r24,r12
 1964               	.LVL156:
 1965 0090 0E94 0000 		call chThdEnqueueTimeoutS
 1966               	.LVL157:
 1967               	.LBE210:
 1968               	.LBE209:
 668:../../../os/hal/src/hal_queues.c ****         break;
 1969               		.loc 1 668 0
 1970 0094 892B      		or r24,r25
 1971 0096 01F0      		breq .L107
 1972 0098 00C0      		rjmp .L108
 1973               	.LBE208:
 1974               	.LBE216:
 1975               		.cfi_endproc
 1976               	.LFE256:
 1978               		.text
 1979               	.Letext0:
 1980               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1981               		.file 5 "/usr/lib/avr/include/stdint.h"
 1982               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1983               		.file 7 "../../../os/rt/include/chearly.h"
 1984               		.file 8 "../../../os/rt/include/chobjects.h"
 1985               		.file 9 "../../../os/rt/include/chrfcu.h"
 1986               		.file 10 "../../../os/rt/include/chdebug.h"
 1987               		.file 11 "../../../os/rt/include/chtime.h"
 1988               		.file 12 "../../../os/rt/include/chlists.h"
 1989               		.file 13 "../../../os/rt/include/chsem.h"
 1990               		.file 14 "../../../os/rt/include/chmtx.h"
 1991               		.file 15 "../../../os/hal/include/hal_queues.h"
 1992               		.file 16 "../../../os/rt/include/chsys.h"
 1993               		.file 17 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_queues.c
     /tmp/ccG2hm3J.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccG2hm3J.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccG2hm3J.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccG2hm3J.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccG2hm3J.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccG2hm3J.s:12     .text.iq_read:0000000000000000 iq_read
     /tmp/ccG2hm3J.s:181    .text.oq_write:0000000000000000 oq_write
     /tmp/ccG2hm3J.s:350    .text.iqObjectInit:0000000000000000 iqObjectInit
     /tmp/ccG2hm3J.s:459    .text.iqResetI:0000000000000000 iqResetI
     /tmp/ccG2hm3J.s:496    .text.iqPutI:0000000000000000 iqPutI
     /tmp/ccG2hm3J.s:575    .text.iqGetI:0000000000000000 iqGetI
     /tmp/ccG2hm3J.s:678    .text.iqGetTimeout:0000000000000000 iqGetTimeout
     /tmp/ccG2hm3J.s:844    .text.iqReadI:0000000000000000 iqReadI
     /tmp/ccG2hm3J.s:919    .text.iqReadTimeout:0000000000000000 iqReadTimeout
     /tmp/ccG2hm3J.s:1152   .text.oqObjectInit:0000000000000000 oqObjectInit
     /tmp/ccG2hm3J.s:1260   .text.oqResetI:0000000000000000 oqResetI
     /tmp/ccG2hm3J.s:1303   .text.oqPutI:0000000000000000 oqPutI
     /tmp/ccG2hm3J.s:1406   .text.oqPutTimeout:0000000000000000 oqPutTimeout
     /tmp/ccG2hm3J.s:1580   .text.oqGetI:0000000000000000 oqGetI
     /tmp/ccG2hm3J.s:1673   .text.oqWriteI:0000000000000000 oqWriteI
     /tmp/ccG2hm3J.s:1748   .text.oqWriteTimeout:0000000000000000 oqWriteTimeout

UNDEFINED SYMBOLS
memcpy
chThdQueueObjectInit
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
