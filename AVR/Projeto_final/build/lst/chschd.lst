   1               		.file	"chschd.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__sch_wakeup,"ax",@progbits
  12               	__sch_wakeup:
  13               	.LFB197:
  14               		.file 1 "../../../os/rt/src/chschd.c"
   1:../../../os/rt/src/chschd.c **** /*
   2:../../../os/rt/src/chschd.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chschd.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chschd.c **** 
   5:../../../os/rt/src/chschd.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chschd.c **** 
   7:../../../os/rt/src/chschd.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chschd.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chschd.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chschd.c **** 
  11:../../../os/rt/src/chschd.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chschd.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chschd.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chschd.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chschd.c **** 
  16:../../../os/rt/src/chschd.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chschd.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chschd.c **** */
  19:../../../os/rt/src/chschd.c **** 
  20:../../../os/rt/src/chschd.c **** /**
  21:../../../os/rt/src/chschd.c ****  * @file    rt/src/chschd.c
  22:../../../os/rt/src/chschd.c ****  * @brief   Scheduler code.
  23:../../../os/rt/src/chschd.c ****  *
  24:../../../os/rt/src/chschd.c ****  * @addtogroup scheduler
  25:../../../os/rt/src/chschd.c ****  * @details This module provides the default portable scheduler code.
  26:../../../os/rt/src/chschd.c ****  * @{
  27:../../../os/rt/src/chschd.c ****  */
  28:../../../os/rt/src/chschd.c **** 
  29:../../../os/rt/src/chschd.c **** #include "ch.h"
  30:../../../os/rt/src/chschd.c **** 
  31:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  32:../../../os/rt/src/chschd.c **** /* Module local definitions.                                                 */
  33:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  34:../../../os/rt/src/chschd.c **** 
  35:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  36:../../../os/rt/src/chschd.c **** /* Module exported variables.                                                */
  37:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  38:../../../os/rt/src/chschd.c **** 
  39:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  40:../../../os/rt/src/chschd.c **** /* Module local types.                                                       */
  41:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  42:../../../os/rt/src/chschd.c **** 
  43:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  44:../../../os/rt/src/chschd.c **** /* Module local variables.                                                   */
  45:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  46:../../../os/rt/src/chschd.c **** 
  47:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  48:../../../os/rt/src/chschd.c **** /* Module local functions.                                                   */
  49:../../../os/rt/src/chschd.c **** /*===========================================================================*/
  50:../../../os/rt/src/chschd.c **** 
  51:../../../os/rt/src/chschd.c **** /**
  52:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
  53:../../../os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
  54:../../../os/rt/src/chschd.c ****  *          priority.
  55:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
  56:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
  57:../../../os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
  58:../../../os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
  59:../../../os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
  60:../../../os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
  61:../../../os/rt/src/chschd.c ****  *
  62:../../../os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
  63:../../../os/rt/src/chschd.c ****  * @return              The thread pointer.
  64:../../../os/rt/src/chschd.c ****  *
  65:../../../os/rt/src/chschd.c ****  * @notapi
  66:../../../os/rt/src/chschd.c ****  */
  67:../../../os/rt/src/chschd.c **** static thread_t *__sch_ready_behind(thread_t *tp) {
  68:../../../os/rt/src/chschd.c **** 
  69:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
  70:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
  71:../../../os/rt/src/chschd.c ****               "invalid state");
  72:../../../os/rt/src/chschd.c **** 
  73:../../../os/rt/src/chschd.c ****   /* Tracing the event.*/
  74:../../../os/rt/src/chschd.c ****   __trace_ready(tp, tp->u.rdymsg);
  75:../../../os/rt/src/chschd.c **** 
  76:../../../os/rt/src/chschd.c ****   /* The thread is marked ready.*/
  77:../../../os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
  78:../../../os/rt/src/chschd.c **** 
  79:../../../os/rt/src/chschd.c ****   /* Insertion in the priority queue.*/
  80:../../../os/rt/src/chschd.c ****   return threadref(ch_pqueue_insert_behind(&tp->owner->rlist.pqueue,
  81:../../../os/rt/src/chschd.c ****                                            &tp->hdr.pqueue));
  82:../../../os/rt/src/chschd.c **** }
  83:../../../os/rt/src/chschd.c **** 
  84:../../../os/rt/src/chschd.c **** /**
  85:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it ahead its peers.
  86:../../../os/rt/src/chschd.c ****  * @details The thread is positioned ahead all threads with higher or equal
  87:../../../os/rt/src/chschd.c ****  *          priority.
  88:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
  89:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
  90:../../../os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
  91:../../../os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
  92:../../../os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
  93:../../../os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
  94:../../../os/rt/src/chschd.c ****  *
  95:../../../os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
  96:../../../os/rt/src/chschd.c ****  * @return              The thread pointer.
  97:../../../os/rt/src/chschd.c ****  *
  98:../../../os/rt/src/chschd.c ****  * @notapi
  99:../../../os/rt/src/chschd.c ****  */
 100:../../../os/rt/src/chschd.c **** static thread_t *__sch_ready_ahead(thread_t *tp) {
 101:../../../os/rt/src/chschd.c **** 
 102:../../../os/rt/src/chschd.c ****   chDbgAssert((tp->state != CH_STATE_READY) &&
 103:../../../os/rt/src/chschd.c ****               (tp->state != CH_STATE_FINAL),
 104:../../../os/rt/src/chschd.c ****               "invalid state");
 105:../../../os/rt/src/chschd.c **** 
 106:../../../os/rt/src/chschd.c ****   /* Tracing the event.*/
 107:../../../os/rt/src/chschd.c ****   __trace_ready(tp, tp->u.rdymsg);
 108:../../../os/rt/src/chschd.c **** 
 109:../../../os/rt/src/chschd.c ****   /* The thread is marked ready.*/
 110:../../../os/rt/src/chschd.c ****   tp->state = CH_STATE_READY;
 111:../../../os/rt/src/chschd.c **** 
 112:../../../os/rt/src/chschd.c ****   /* Insertion in the priority queue.*/
 113:../../../os/rt/src/chschd.c ****   return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
 114:../../../os/rt/src/chschd.c ****                                           &tp->hdr.pqueue));
 115:../../../os/rt/src/chschd.c **** }
 116:../../../os/rt/src/chschd.c **** 
 117:../../../os/rt/src/chschd.c **** /**
 118:../../../os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 119:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind all
 120:../../../os/rt/src/chschd.c ****  *          threads having the same priority. The thread regains its time
 121:../../../os/rt/src/chschd.c ****  *          quantum.
 122:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 123:../../../os/rt/src/chschd.c ****  *          itself.
 124:../../../os/rt/src/chschd.c ****  *
 125:../../../os/rt/src/chschd.c ****  * @notapi
 126:../../../os/rt/src/chschd.c ****  */
 127:../../../os/rt/src/chschd.c **** static void __sch_reschedule_behind(void) {
 128:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 129:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 130:../../../os/rt/src/chschd.c ****   thread_t *ntp;
 131:../../../os/rt/src/chschd.c **** 
 132:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 133:../../../os/rt/src/chschd.c ****   ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 134:../../../os/rt/src/chschd.c ****   ntp->state = CH_STATE_CURRENT;
 135:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 136:../../../os/rt/src/chschd.c **** 
 137:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 138:../../../os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 139:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 140:../../../os/rt/src/chschd.c ****   }
 141:../../../os/rt/src/chschd.c **** 
 142:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 143:../../../os/rt/src/chschd.c ****   /* It went behind peers so it gets a new time quantum.*/
 144:../../../os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 145:../../../os/rt/src/chschd.c **** #endif
 146:../../../os/rt/src/chschd.c **** 
 147:../../../os/rt/src/chschd.c ****   /* Placing in ready list behind peers.*/
 148:../../../os/rt/src/chschd.c ****   otp = __sch_ready_behind(otp);
 149:../../../os/rt/src/chschd.c **** 
 150:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 151:../../../os/rt/src/chschd.c ****   chSysSwitch(ntp, otp);
 152:../../../os/rt/src/chschd.c **** }
 153:../../../os/rt/src/chschd.c **** 
 154:../../../os/rt/src/chschd.c **** /**
 155:../../../os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 156:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 157:../../../os/rt/src/chschd.c ****  *          threads having the same priority.
 158:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 159:../../../os/rt/src/chschd.c ****  *          itself.
 160:../../../os/rt/src/chschd.c ****  *
 161:../../../os/rt/src/chschd.c ****  * @notapi
 162:../../../os/rt/src/chschd.c ****  */
 163:../../../os/rt/src/chschd.c **** static void __sch_reschedule_ahead(void) {
 164:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 165:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 166:../../../os/rt/src/chschd.c ****   thread_t *ntp;
 167:../../../os/rt/src/chschd.c **** 
 168:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 169:../../../os/rt/src/chschd.c ****   ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 170:../../../os/rt/src/chschd.c ****   ntp->state = CH_STATE_CURRENT;
 171:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 172:../../../os/rt/src/chschd.c **** 
 173:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 174:../../../os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 175:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 176:../../../os/rt/src/chschd.c ****   }
 177:../../../os/rt/src/chschd.c **** 
 178:../../../os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 179:../../../os/rt/src/chschd.c ****   otp = __sch_ready_ahead(otp);
 180:../../../os/rt/src/chschd.c **** 
 181:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 182:../../../os/rt/src/chschd.c ****   chSysSwitch(ntp, otp);
 183:../../../os/rt/src/chschd.c **** }
 184:../../../os/rt/src/chschd.c **** 
 185:../../../os/rt/src/chschd.c **** /*
 186:../../../os/rt/src/chschd.c ****  * Timeout wakeup callback.
 187:../../../os/rt/src/chschd.c ****  */
 188:../../../os/rt/src/chschd.c **** static void __sch_wakeup(virtual_timer_t *vtp, void *p) {
  15               		.loc 1 188 0
  16               		.cfi_startproc
  17               	.LVL0:
  18 0000 CF93      		push r28
  19               	.LCFI0:
  20               		.cfi_def_cfa_offset 3
  21               		.cfi_offset 28, -2
  22 0002 DF93      		push r29
  23               	.LCFI1:
  24               		.cfi_def_cfa_offset 4
  25               		.cfi_offset 29, -3
  26               	/* prologue: function */
  27               	/* frame size = 0 */
  28               	/* stack size = 2 */
  29               	.L__stack_usage = 2
  30 0004 DB01      		movw r26,r22
  31               	.LVL1:
 189:../../../os/rt/src/chschd.c ****   thread_t *tp = threadref(p);
 190:../../../os/rt/src/chschd.c **** 
 191:../../../os/rt/src/chschd.c ****   (void)vtp;
 192:../../../os/rt/src/chschd.c **** 
 193:../../../os/rt/src/chschd.c ****   chSysLockFromISR();
 194:../../../os/rt/src/chschd.c ****   switch (tp->state) {
  32               		.loc 1 194 0
  33 0006 1F96      		adiw r26,15
  34 0008 8C91      		ld r24,X
  35 000a 1F97      		sbiw r26,15
  36               	.LVL2:
  37 000c 8430      		cpi r24,lo8(4)
  38 000e 01F0      		breq .L3
  39 0010 00F4      		brsh .L4
  40 0012 8823      		tst r24
  41 0014 01F0      		breq .L1
  42 0016 8330      		cpi r24,lo8(3)
  43 0018 01F4      		brne .L2
 195:../../../os/rt/src/chschd.c ****   case CH_STATE_READY:
 196:../../../os/rt/src/chschd.c ****     /* Handling the special case where the thread has been made ready by
 197:../../../os/rt/src/chschd.c ****        another thread with higher priority.*/
 198:../../../os/rt/src/chschd.c ****     chSysUnlockFromISR();
 199:../../../os/rt/src/chschd.c ****     return;
 200:../../../os/rt/src/chschd.c ****   case CH_STATE_SUSPENDED:
 201:../../../os/rt/src/chschd.c ****     *tp->u.wttrp = NULL;
  44               		.loc 1 201 0
  45 001a 5296      		adiw r26,18
  46 001c ED91      		ld r30,X+
  47 001e FC91      		ld r31,X
  48 0020 5397      		sbiw r26,18+1
  49 0022 1182      		std Z+1,__zero_reg__
  50 0024 1082      		st Z,__zero_reg__
  51               	.L2:
 202:../../../os/rt/src/chschd.c ****     break;
 203:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_SEMAPHORES == TRUE
 204:../../../os/rt/src/chschd.c ****   case CH_STATE_WTSEM:
 205:../../../os/rt/src/chschd.c ****     chSemFastSignalI(tp->u.wtsemp);
 206:../../../os/rt/src/chschd.c **** #endif
 207:../../../os/rt/src/chschd.c ****     /* Falls through.*/
 208:../../../os/rt/src/chschd.c ****   case CH_STATE_QUEUED:
 209:../../../os/rt/src/chschd.c ****     /* Falls through.*/
 210:../../../os/rt/src/chschd.c **** #if CH_CFG_USE_MESSAGES == TRUE
 211:../../../os/rt/src/chschd.c ****   case CH_STATE_SNDMSGQ:
 212:../../../os/rt/src/chschd.c ****     /* Falls through.*/
 213:../../../os/rt/src/chschd.c **** #endif
 214:../../../os/rt/src/chschd.c **** #if (CH_CFG_USE_CONDVARS == TRUE) && (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE)
 215:../../../os/rt/src/chschd.c ****   case CH_STATE_WTCOND:
 216:../../../os/rt/src/chschd.c **** #endif
 217:../../../os/rt/src/chschd.c ****     /* States requiring dequeuing.*/
 218:../../../os/rt/src/chschd.c ****     (void) ch_queue_dequeue(&tp->hdr.queue);
 219:../../../os/rt/src/chschd.c ****     break;
 220:../../../os/rt/src/chschd.c ****   default:
 221:../../../os/rt/src/chschd.c ****     /* Any other state, nothing to do.*/
 222:../../../os/rt/src/chschd.c ****     break;
 223:../../../os/rt/src/chschd.c ****   }
 224:../../../os/rt/src/chschd.c **** 
 225:../../../os/rt/src/chschd.c ****   /* Standard message for timeout conditions.*/
 226:../../../os/rt/src/chschd.c ****   tp->u.rdymsg = MSG_TIMEOUT;
  52               		.loc 1 226 0
  53 0026 8FEF      		ldi r24,lo8(-1)
  54 0028 9FEF      		ldi r25,lo8(-1)
  55 002a 5396      		adiw r26,18+1
  56 002c 9C93      		st X,r25
  57 002e 8E93      		st -X,r24
  58 0030 5297      		sbiw r26,18
  59               	.LVL3:
  60               	.LBB65:
  61               	.LBB66:
  77:../../../os/rt/src/chschd.c **** 
  62               		.loc 1 77 0
  63 0032 1F96      		adiw r26,15
  64 0034 1C92      		st X,__zero_reg__
  65 0036 1F97      		sbiw r26,15
  80:../../../os/rt/src/chschd.c ****                                            &tp->hdr.pqueue));
  66               		.loc 1 80 0
  67 0038 1B96      		adiw r26,11
  68 003a ED91      		ld r30,X+
  69 003c FC91      		ld r31,X
  70 003e 1C97      		sbiw r26,11+1
  71               	.LVL4:
  72 0040 1496      		adiw r26,4
  73 0042 9C91      		ld r25,X
  74 0044 1497      		sbiw r26,4
  75               	.L8:
  76               	.LBB67:
  77               	.LBB68:
  78               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 345:../../../os/rt/include/chlists.h **** 
 346:../../../os/rt/include/chlists.h ****   return p;
 347:../../../os/rt/include/chlists.h **** }
 348:../../../os/rt/include/chlists.h **** 
 349:../../../os/rt/include/chlists.h **** /**
 350:../../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 351:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 352:../../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 353:../../../os/rt/include/chlists.h ****  *
 354:../../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 355:../../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 356:../../../os/rt/include/chlists.h ****  *
 357:../../../os/rt/include/chlists.h ****  * @notapi
 358:../../../os/rt/include/chlists.h ****  */
 359:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 360:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 361:../../../os/rt/include/chlists.h **** 
 362:../../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 363:../../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 364:../../../os/rt/include/chlists.h **** 
 365:../../../os/rt/include/chlists.h ****   return p;
 366:../../../os/rt/include/chlists.h **** }
 367:../../../os/rt/include/chlists.h **** 
 368:../../../os/rt/include/chlists.h **** /**
 369:../../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 370:../../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 371:../../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 372:../../../os/rt/include/chlists.h ****  *
 373:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 374:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 375:../../../os/rt/include/chlists.h ****  *
 376:../../../os/rt/include/chlists.h ****  * @notapi
 377:../../../os/rt/include/chlists.h ****  */
 378:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 379:../../../os/rt/include/chlists.h **** 
 380:../../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 381:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 382:../../../os/rt/include/chlists.h **** 
 383:../../../os/rt/include/chlists.h ****   return p;
 384:../../../os/rt/include/chlists.h **** }
 385:../../../os/rt/include/chlists.h **** 
 386:../../../os/rt/include/chlists.h **** /**
 387:../../../os/rt/include/chlists.h ****  * @brief   Priority queue initialization.
 388:../../../os/rt/include/chlists.h ****  * @note    The queue header priority is initialized to zero, all other
 389:../../../os/rt/include/chlists.h ****  *          elements in the queue are assumed to have priority greater
 390:../../../os/rt/include/chlists.h ****  *          than zero.
 391:../../../os/rt/include/chlists.h ****  *
 392:../../../os/rt/include/chlists.h ****  * @param[out] pqp      pointer to the priority queue header
 393:../../../os/rt/include/chlists.h ****  *
 394:../../../os/rt/include/chlists.h ****  * @notapi
 395:../../../os/rt/include/chlists.h ****  */
 396:../../../os/rt/include/chlists.h **** static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {
 397:../../../os/rt/include/chlists.h **** 
 398:../../../os/rt/include/chlists.h ****   pqp->next = pqp;
 399:../../../os/rt/include/chlists.h ****   pqp->prev = pqp;
 400:../../../os/rt/include/chlists.h ****   pqp->prio = (tprio_t)0;
 401:../../../os/rt/include/chlists.h **** }
 402:../../../os/rt/include/chlists.h **** 
 403:../../../os/rt/include/chlists.h **** /**
 404:../../../os/rt/include/chlists.h ****  * @brief   Removes the highest priority element from a priority queue and
 405:../../../os/rt/include/chlists.h ****  *          returns it.
 406:../../../os/rt/include/chlists.h ****  *
 407:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 408:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 409:../../../os/rt/include/chlists.h ****  *
 410:../../../os/rt/include/chlists.h ****  * @notapi
 411:../../../os/rt/include/chlists.h ****  */
 412:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
 413:../../../os/rt/include/chlists.h ****   ch_priority_queue_t *p = pqp->next;
 414:../../../os/rt/include/chlists.h **** 
 415:../../../os/rt/include/chlists.h ****   pqp->next       = p->next;
 416:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 417:../../../os/rt/include/chlists.h **** 
 418:../../../os/rt/include/chlists.h ****   return p;
 419:../../../os/rt/include/chlists.h **** }
 420:../../../os/rt/include/chlists.h **** 
 421:../../../os/rt/include/chlists.h **** /**
 422:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it behind
 423:../../../os/rt/include/chlists.h ****  *          its peers.
 424:../../../os/rt/include/chlists.h ****  * @details The element is positioned behind all elements with higher or
 425:../../../os/rt/include/chlists.h ****  *          equal priority.
 426:../../../os/rt/include/chlists.h ****  *
 427:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 428:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 429:../../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 430:../../../os/rt/include/chlists.h ****  *
 431:../../../os/rt/include/chlists.h ****  * @notapi
 432:../../../os/rt/include/chlists.h ****  */
 433:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_behind(ch_priority_queue_t *pqp,
 434:../../../os/rt/include/chlists.h ****                                                            ch_priority_queue_t *p) {
 435:../../../os/rt/include/chlists.h **** 
 436:../../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 437:../../../os/rt/include/chlists.h ****   do {
 438:../../../os/rt/include/chlists.h ****     pqp = pqp->next;
  79               		.loc 2 438 0
  80 0046 0190      		ld __tmp_reg__,Z+
  81 0048 F081      		ld r31,Z
  82 004a E02D      		mov r30,__tmp_reg__
  83               	.LVL5:
 439:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
  84               		.loc 2 439 0
  85 004c 8481      		ldd r24,Z+4
  86 004e 8917      		cp r24,r25
  87 0050 00F4      		brsh .L8
 440:../../../os/rt/include/chlists.h **** 
 441:../../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 442:../../../os/rt/include/chlists.h ****   p->next       = pqp;
  88               		.loc 2 442 0
  89 0052 1196      		adiw r26,1
  90 0054 FC93      		st X,r31
  91 0056 EE93      		st -X,r30
 443:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
  92               		.loc 2 443 0
  93 0058 C281      		ldd r28,Z+2
  94 005a D381      		ldd r29,Z+3
  95 005c 1396      		adiw r26,2+1
  96 005e DC93      		st X,r29
  97 0060 CE93      		st -X,r28
  98 0062 1297      		sbiw r26,2
 444:../../../os/rt/include/chlists.h ****   p->prev->next = p;
  99               		.loc 2 444 0
 100 0064 B983      		std Y+1,r27
 101 0066 A883      		st Y,r26
 445:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 102               		.loc 2 445 0
 103 0068 B383      		std Z+3,r27
 104 006a A283      		std Z+2,r26
 105               	.LVL6:
 106               	.L1:
 107               	/* epilogue start */
 108               	.LBE68:
 109               	.LBE67:
 110               	.LBE66:
 111               	.LBE65:
 227:../../../os/rt/src/chschd.c **** 
 228:../../../os/rt/src/chschd.c ****   /* Goes behind peers because it went to sleep voluntarily.*/
 229:../../../os/rt/src/chschd.c ****   (void) __sch_ready_behind(tp);
 230:../../../os/rt/src/chschd.c ****   chSysUnlockFromISR();
 231:../../../os/rt/src/chschd.c **** 
 232:../../../os/rt/src/chschd.c ****   return;
 233:../../../os/rt/src/chschd.c **** }
 112               		.loc 1 233 0
 113 006c DF91      		pop r29
 114 006e CF91      		pop r28
 115 0070 0895      		ret
 116               	.L4:
 194:../../../os/rt/src/chschd.c ****   case CH_STATE_READY:
 117               		.loc 1 194 0
 118 0072 8730      		cpi r24,lo8(7)
 119 0074 01F0      		breq .L3
 120 0076 8C30      		cpi r24,lo8(12)
 121 0078 01F0      		breq .L3
 122 007a 8530      		cpi r24,lo8(5)
 123 007c 01F4      		brne .L2
 205:../../../os/rt/src/chschd.c **** #endif
 124               		.loc 1 205 0
 125 007e 5296      		adiw r26,18
 126 0080 ED91      		ld r30,X+
 127 0082 FC91      		ld r31,X
 128 0084 5397      		sbiw r26,18+1
 129               	.LVL7:
 130               	.LBB69:
 131               	.LBB70:
 132               		.file 3 "../../../os/rt/include/chsem.h"
   1:../../../os/rt/include/chsem.h **** /*
   2:../../../os/rt/include/chsem.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chsem.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chsem.h **** 
   5:../../../os/rt/include/chsem.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chsem.h **** 
   7:../../../os/rt/include/chsem.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chsem.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chsem.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chsem.h **** 
  11:../../../os/rt/include/chsem.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chsem.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chsem.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chsem.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chsem.h **** 
  16:../../../os/rt/include/chsem.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chsem.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chsem.h **** */
  19:../../../os/rt/include/chsem.h **** 
  20:../../../os/rt/include/chsem.h **** /**
  21:../../../os/rt/include/chsem.h ****  * @file    rt/include/chsem.h
  22:../../../os/rt/include/chsem.h ****  * @brief   Semaphores macros and structures.
  23:../../../os/rt/include/chsem.h ****  *
  24:../../../os/rt/include/chsem.h ****  * @addtogroup semaphores
  25:../../../os/rt/include/chsem.h ****  * @{
  26:../../../os/rt/include/chsem.h ****  */
  27:../../../os/rt/include/chsem.h **** 
  28:../../../os/rt/include/chsem.h **** #ifndef CHSEM_H
  29:../../../os/rt/include/chsem.h **** #define CHSEM_H
  30:../../../os/rt/include/chsem.h **** 
  31:../../../os/rt/include/chsem.h **** #if (CH_CFG_USE_SEMAPHORES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chsem.h **** 
  33:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  34:../../../os/rt/include/chsem.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  36:../../../os/rt/include/chsem.h **** 
  37:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  38:../../../os/rt/include/chsem.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  40:../../../os/rt/include/chsem.h **** 
  41:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  42:../../../os/rt/include/chsem.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  44:../../../os/rt/include/chsem.h **** 
  45:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  46:../../../os/rt/include/chsem.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  48:../../../os/rt/include/chsem.h **** 
  49:../../../os/rt/include/chsem.h **** /**
  50:../../../os/rt/include/chsem.h ****  * @brief   Type of a Semaphore object.
  51:../../../os/rt/include/chsem.h ****  */
  52:../../../os/rt/include/chsem.h **** typedef struct ch_semaphore {
  53:../../../os/rt/include/chsem.h ****   ch_queue_t            queue;      /**< @brief Queue of the threads sleeping
  54:../../../os/rt/include/chsem.h ****                                                 on this semaphore.          */
  55:../../../os/rt/include/chsem.h ****   cnt_t                 cnt;        /**< @brief The semaphore counter.      */
  56:../../../os/rt/include/chsem.h **** } semaphore_t;
  57:../../../os/rt/include/chsem.h **** 
  58:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  59:../../../os/rt/include/chsem.h **** /* Module macros.                                                            */
  60:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  61:../../../os/rt/include/chsem.h **** 
  62:../../../os/rt/include/chsem.h **** /**
  63:../../../os/rt/include/chsem.h ****  * @brief   Data part of a static semaphore initializer.
  64:../../../os/rt/include/chsem.h ****  * @details This macro should be used when statically initializing a semaphore
  65:../../../os/rt/include/chsem.h ****  *          that is part of a bigger structure.
  66:../../../os/rt/include/chsem.h ****  *
  67:../../../os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  68:../../../os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  69:../../../os/rt/include/chsem.h ****  *                      non-negative
  70:../../../os/rt/include/chsem.h ****  */
  71:../../../os/rt/include/chsem.h **** #define __SEMAPHORE_DATA(name, n) {__CH_QUEUE_DATA(name.queue), n}
  72:../../../os/rt/include/chsem.h **** 
  73:../../../os/rt/include/chsem.h **** /**
  74:../../../os/rt/include/chsem.h ****  * @brief   Static semaphore initializer.
  75:../../../os/rt/include/chsem.h ****  * @details Statically initialized semaphores require no explicit
  76:../../../os/rt/include/chsem.h ****  *          initialization using @p chSemInit().
  77:../../../os/rt/include/chsem.h ****  *
  78:../../../os/rt/include/chsem.h ****  * @param[in] name      the name of the semaphore variable
  79:../../../os/rt/include/chsem.h ****  * @param[in] n         the counter initial value, this value must be
  80:../../../os/rt/include/chsem.h ****  *                      non-negative
  81:../../../os/rt/include/chsem.h ****  */
  82:../../../os/rt/include/chsem.h **** #define SEMAPHORE_DECL(name, n) semaphore_t name = __SEMAPHORE_DATA(name, n)
  83:../../../os/rt/include/chsem.h **** 
  84:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  85:../../../os/rt/include/chsem.h **** /* External declarations.                                                    */
  86:../../../os/rt/include/chsem.h **** /*===========================================================================*/
  87:../../../os/rt/include/chsem.h **** 
  88:../../../os/rt/include/chsem.h **** #ifdef __cplusplus
  89:../../../os/rt/include/chsem.h **** extern "C" {
  90:../../../os/rt/include/chsem.h **** #endif
  91:../../../os/rt/include/chsem.h ****   void chSemObjectInit(semaphore_t *sp, cnt_t n);
  92:../../../os/rt/include/chsem.h ****   void chSemObjectDispose(semaphore_t *sp);
  93:../../../os/rt/include/chsem.h ****   void chSemResetWithMessage(semaphore_t *sp, cnt_t n, msg_t msg);
  94:../../../os/rt/include/chsem.h ****   void chSemResetWithMessageI(semaphore_t *sp, cnt_t n, msg_t msg);
  95:../../../os/rt/include/chsem.h ****   msg_t chSemWait(semaphore_t *sp);
  96:../../../os/rt/include/chsem.h ****   msg_t chSemWaitS(semaphore_t *sp);
  97:../../../os/rt/include/chsem.h ****   msg_t chSemWaitTimeout(semaphore_t *sp, sysinterval_t timeout);
  98:../../../os/rt/include/chsem.h ****   msg_t chSemWaitTimeoutS(semaphore_t *sp, sysinterval_t timeout);
  99:../../../os/rt/include/chsem.h ****   void chSemSignal(semaphore_t *sp);
 100:../../../os/rt/include/chsem.h ****   void chSemSignalI(semaphore_t *sp);
 101:../../../os/rt/include/chsem.h ****   void chSemAddCounterI(semaphore_t *sp, cnt_t n);
 102:../../../os/rt/include/chsem.h ****   msg_t chSemSignalWait(semaphore_t *sps, semaphore_t *spw);
 103:../../../os/rt/include/chsem.h **** #ifdef __cplusplus
 104:../../../os/rt/include/chsem.h **** }
 105:../../../os/rt/include/chsem.h **** #endif
 106:../../../os/rt/include/chsem.h **** 
 107:../../../os/rt/include/chsem.h **** /*===========================================================================*/
 108:../../../os/rt/include/chsem.h **** /* Module inline functions.                                                  */
 109:../../../os/rt/include/chsem.h **** /*===========================================================================*/
 110:../../../os/rt/include/chsem.h **** 
 111:../../../os/rt/include/chsem.h **** /**
 112:../../../os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 113:../../../os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 114:../../../os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 115:../../../os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 116:../../../os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 117:../../../os/rt/include/chsem.h ****  *
 118:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t object
 119:../../../os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 120:../../../os/rt/include/chsem.h ****  *                      be non-negative.
 121:../../../os/rt/include/chsem.h ****  *
 122:../../../os/rt/include/chsem.h ****  * @api
 123:../../../os/rt/include/chsem.h ****  */
 124:../../../os/rt/include/chsem.h **** static inline void chSemReset(semaphore_t *sp, cnt_t n) {
 125:../../../os/rt/include/chsem.h **** 
 126:../../../os/rt/include/chsem.h ****   chSemResetWithMessage(sp, n, MSG_RESET);
 127:../../../os/rt/include/chsem.h **** }
 128:../../../os/rt/include/chsem.h **** 
 129:../../../os/rt/include/chsem.h **** /**
 130:../../../os/rt/include/chsem.h ****  * @brief   Performs a reset operation on the semaphore.
 131:../../../os/rt/include/chsem.h ****  * @post    After invoking this function all the threads waiting on the
 132:../../../os/rt/include/chsem.h ****  *          semaphore, if any, are released and the semaphore counter is set
 133:../../../os/rt/include/chsem.h ****  *          to the specified, non negative, value.
 134:../../../os/rt/include/chsem.h ****  * @post    This function does not reschedule so a call to a rescheduling
 135:../../../os/rt/include/chsem.h ****  *          function must be performed before unlocking the kernel. Note that
 136:../../../os/rt/include/chsem.h ****  *          interrupt handlers always reschedule on exit so an explicit
 137:../../../os/rt/include/chsem.h ****  *          reschedule must not be performed in ISRs.
 138:../../../os/rt/include/chsem.h ****  * @note    This function implicitly sends @p MSG_RESET as message.
 139:../../../os/rt/include/chsem.h ****  *
 140:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t object
 141:../../../os/rt/include/chsem.h ****  * @param[in] n         the new value of the semaphore counter. The value must
 142:../../../os/rt/include/chsem.h ****  *                      be non-negative.
 143:../../../os/rt/include/chsem.h ****  *
 144:../../../os/rt/include/chsem.h ****  * @iclass
 145:../../../os/rt/include/chsem.h ****  */
 146:../../../os/rt/include/chsem.h **** static inline void chSemResetI(semaphore_t *sp, cnt_t n) {
 147:../../../os/rt/include/chsem.h **** 
 148:../../../os/rt/include/chsem.h ****   chSemResetWithMessageI(sp, n, MSG_RESET);
 149:../../../os/rt/include/chsem.h **** }
 150:../../../os/rt/include/chsem.h **** 
 151:../../../os/rt/include/chsem.h **** /**
 152:../../../os/rt/include/chsem.h ****  * @brief   Decreases the semaphore counter.
 153:../../../os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be positive.
 154:../../../os/rt/include/chsem.h ****  *
 155:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t object
 156:../../../os/rt/include/chsem.h ****  *
 157:../../../os/rt/include/chsem.h ****  * @iclass
 158:../../../os/rt/include/chsem.h ****  */
 159:../../../os/rt/include/chsem.h **** static inline void chSemFastWaitI(semaphore_t *sp) {
 160:../../../os/rt/include/chsem.h **** 
 161:../../../os/rt/include/chsem.h ****   chDbgCheckClassI();
 162:../../../os/rt/include/chsem.h **** 
 163:../../../os/rt/include/chsem.h ****   sp->cnt--;
 164:../../../os/rt/include/chsem.h **** }
 165:../../../os/rt/include/chsem.h **** 
 166:../../../os/rt/include/chsem.h **** /**
 167:../../../os/rt/include/chsem.h ****  * @brief   Increases the semaphore counter.
 168:../../../os/rt/include/chsem.h ****  * @details This macro can be used when the counter is known to be not
 169:../../../os/rt/include/chsem.h ****  *          negative.
 170:../../../os/rt/include/chsem.h ****  *
 171:../../../os/rt/include/chsem.h ****  * @param[in] sp        pointer to a @p semaphore_t object
 172:../../../os/rt/include/chsem.h ****  *
 173:../../../os/rt/include/chsem.h ****  * @iclass
 174:../../../os/rt/include/chsem.h ****  */
 175:../../../os/rt/include/chsem.h **** static inline void chSemFastSignalI(semaphore_t *sp) {
 176:../../../os/rt/include/chsem.h **** 
 177:../../../os/rt/include/chsem.h ****   chDbgCheckClassI();
 178:../../../os/rt/include/chsem.h **** 
 179:../../../os/rt/include/chsem.h ****   sp->cnt++;
 133               		.loc 3 179 0
 134 0086 8481      		ldd r24,Z+4
 135 0088 8F5F      		subi r24,lo8(-(1))
 136 008a 8483      		std Z+4,r24
 137               	.LVL8:
 138               	.L3:
 139               	.LBE70:
 140               	.LBE69:
 141               	.LBB71:
 142               	.LBB72:
 380:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 143               		.loc 2 380 0
 144 008c 1296      		adiw r26,2
 145 008e ED91      		ld r30,X+
 146 0090 FC91      		ld r31,X
 147 0092 1397      		sbiw r26,2+1
 148 0094 8D91      		ld r24,X+
 149 0096 9C91      		ld r25,X
 150 0098 1197      		sbiw r26,1
 151 009a 9183      		std Z+1,r25
 152 009c 8083      		st Z,r24
 381:../../../os/rt/include/chlists.h **** 
 153               		.loc 2 381 0
 154 009e CD91      		ld r28,X+
 155 00a0 DC91      		ld r29,X
 156 00a2 1197      		sbiw r26,1
 157 00a4 FB83      		std Y+3,r31
 158 00a6 EA83      		std Y+2,r30
 159 00a8 00C0      		rjmp .L2
 160               	.LBE72:
 161               	.LBE71:
 162               		.cfi_endproc
 163               	.LFE197:
 165               		.section	.text.chSchReadyI,"ax",@progbits
 166               	.global	chSchReadyI
 168               	chSchReadyI:
 169               	.LFB198:
 234:../../../os/rt/src/chschd.c **** 
 235:../../../os/rt/src/chschd.c **** /*===========================================================================*/
 236:../../../os/rt/src/chschd.c **** /* Module exported functions.                                                */
 237:../../../os/rt/src/chschd.c **** /*===========================================================================*/
 238:../../../os/rt/src/chschd.c **** 
 239:../../../os/rt/src/chschd.c **** #if (CH_CFG_OPTIMIZE_SPEED == FALSE) || defined(__DOXYGEN__)
 240:../../../os/rt/src/chschd.c **** /**
 241:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread into a priority ordered queue.
 242:../../../os/rt/src/chschd.c ****  * @note    The insertion is done by scanning the list from the highest
 243:../../../os/rt/src/chschd.c ****  *          priority toward the lowest.
 244:../../../os/rt/src/chschd.c ****  *
 245:../../../os/rt/src/chschd.c ****  * @param[in] qp        the pointer to the threads list header
 246:../../../os/rt/src/chschd.c ****  * @param[in] tp        the pointer to the thread to be inserted in the list
 247:../../../os/rt/src/chschd.c ****  *
 248:../../../os/rt/src/chschd.c ****  * @notapi
 249:../../../os/rt/src/chschd.c ****  */
 250:../../../os/rt/src/chschd.c **** void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 251:../../../os/rt/src/chschd.c **** 
 252:../../../os/rt/src/chschd.c ****   ch_queue_t *cp = qp;
 253:../../../os/rt/src/chschd.c ****   do {
 254:../../../os/rt/src/chschd.c ****     cp = cp->next;
 255:../../../os/rt/src/chschd.c ****   } while ((cp != qp) &&
 256:../../../os/rt/src/chschd.c ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 257:../../../os/rt/src/chschd.c ****   tp->next       = cp;
 258:../../../os/rt/src/chschd.c ****   tp->prev       = cp->prev;
 259:../../../os/rt/src/chschd.c ****   tp->prev->next = tp;
 260:../../../os/rt/src/chschd.c ****   cp->prev       = tp;
 261:../../../os/rt/src/chschd.c **** }
 262:../../../os/rt/src/chschd.c **** #endif /* CH_CFG_OPTIMIZE_SPEED */
 263:../../../os/rt/src/chschd.c **** 
 264:../../../os/rt/src/chschd.c **** /**
 265:../../../os/rt/src/chschd.c ****  * @brief   Inserts a thread in the Ready List placing it behind its peers.
 266:../../../os/rt/src/chschd.c ****  * @details The thread is positioned behind all threads with higher or equal
 267:../../../os/rt/src/chschd.c ****  *          priority.
 268:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 269:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 270:../../../os/rt/src/chschd.c ****  * @post    This function does not reschedule so a call to a rescheduling
 271:../../../os/rt/src/chschd.c ****  *          function must be performed before unlocking the kernel. Note that
 272:../../../os/rt/src/chschd.c ****  *          interrupt handlers always reschedule on exit so an explicit
 273:../../../os/rt/src/chschd.c ****  *          reschedule must not be performed in ISRs.
 274:../../../os/rt/src/chschd.c ****  *
 275:../../../os/rt/src/chschd.c ****  * @param[in] tp        the thread to be made ready
 276:../../../os/rt/src/chschd.c ****  * @return              The thread pointer.
 277:../../../os/rt/src/chschd.c ****  *
 278:../../../os/rt/src/chschd.c ****  * @iclass
 279:../../../os/rt/src/chschd.c ****  */
 280:../../../os/rt/src/chschd.c **** thread_t *chSchReadyI(thread_t *tp) {
 170               		.loc 1 280 0
 171               		.cfi_startproc
 172               	.LVL9:
 173 0000 CF93      		push r28
 174               	.LCFI2:
 175               		.cfi_def_cfa_offset 3
 176               		.cfi_offset 28, -2
 177 0002 DF93      		push r29
 178               	.LCFI3:
 179               		.cfi_def_cfa_offset 4
 180               		.cfi_offset 29, -3
 181               	/* prologue: function */
 182               	/* frame size = 0 */
 183               	/* stack size = 2 */
 184               	.L__stack_usage = 2
 185 0004 DC01      		movw r26,r24
 186               	.LVL10:
 187               	.LBB73:
 188               	.LBB74:
  77:../../../os/rt/src/chschd.c **** 
 189               		.loc 1 77 0
 190 0006 1F96      		adiw r26,15
 191 0008 1C92      		st X,__zero_reg__
 192 000a 1F97      		sbiw r26,15
  80:../../../os/rt/src/chschd.c ****                                            &tp->hdr.pqueue));
 193               		.loc 1 80 0
 194 000c 1B96      		adiw r26,11
 195 000e ED91      		ld r30,X+
 196 0010 FC91      		ld r31,X
 197 0012 1C97      		sbiw r26,11+1
 198               	.LVL11:
 199 0014 1496      		adiw r26,4
 200 0016 2C91      		ld r18,X
 201 0018 1497      		sbiw r26,4
 202               	.L24:
 203               	.LBB75:
 204               	.LBB76:
 438:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 205               		.loc 2 438 0
 206 001a 0190      		ld __tmp_reg__,Z+
 207 001c F081      		ld r31,Z
 208 001e E02D      		mov r30,__tmp_reg__
 209               	.LVL12:
 439:../../../os/rt/include/chlists.h **** 
 210               		.loc 2 439 0
 211 0020 9481      		ldd r25,Z+4
 212 0022 9217      		cp r25,r18
 213 0024 00F4      		brsh .L24
 442:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 214               		.loc 2 442 0
 215 0026 1196      		adiw r26,1
 216 0028 FC93      		st X,r31
 217 002a EE93      		st -X,r30
 443:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 218               		.loc 2 443 0
 219 002c C281      		ldd r28,Z+2
 220 002e D381      		ldd r29,Z+3
 221 0030 1396      		adiw r26,2+1
 222 0032 DC93      		st X,r29
 223 0034 CE93      		st -X,r28
 224 0036 1297      		sbiw r26,2
 444:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 225               		.loc 2 444 0
 226 0038 B983      		std Y+1,r27
 227 003a A883      		st Y,r26
 228               		.loc 2 445 0
 229 003c B383      		std Z+3,r27
 230 003e A283      		std Z+2,r26
 231               	.LVL13:
 232               	.LBE76:
 233               	.LBE75:
 234               	.LBE74:
 235               	.LBE73:
 281:../../../os/rt/src/chschd.c **** 
 282:../../../os/rt/src/chschd.c ****   chDbgCheckClassI();
 283:../../../os/rt/src/chschd.c ****   chDbgCheck(tp != NULL);
 284:../../../os/rt/src/chschd.c **** 
 285:../../../os/rt/src/chschd.c **** #if CH_CFG_SMP_MODE == TRUE
 286:../../../os/rt/src/chschd.c ****   if (tp->owner != currcore) {
 287:../../../os/rt/src/chschd.c ****     /* Readying up the remote thread and triggering a reschedule on
 288:../../../os/rt/src/chschd.c ****        the other core.*/
 289:../../../os/rt/src/chschd.c ****     chSysNotifyInstance(tp->owner);
 290:../../../os/rt/src/chschd.c ****   }
 291:../../../os/rt/src/chschd.c **** #endif
 292:../../../os/rt/src/chschd.c **** 
 293:../../../os/rt/src/chschd.c ****   return __sch_ready_behind(tp);
 294:../../../os/rt/src/chschd.c **** }
 236               		.loc 1 294 0
 237 0040 CD01      		movw r24,r26
 238               	.LVL14:
 239               	/* epilogue start */
 240 0042 DF91      		pop r29
 241 0044 CF91      		pop r28
 242 0046 0895      		ret
 243               		.cfi_endproc
 244               	.LFE198:
 246               		.section	.text.chSchGoSleepS,"ax",@progbits
 247               	.global	chSchGoSleepS
 249               	chSchGoSleepS:
 250               	.LFB199:
 295:../../../os/rt/src/chschd.c **** 
 296:../../../os/rt/src/chschd.c **** /**
 297:../../../os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state.
 298:../../../os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state. The possible
 299:../../../os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 300:../../../os/rt/src/chschd.c ****  *
 301:../../../os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 302:../../../os/rt/src/chschd.c ****  *
 303:../../../os/rt/src/chschd.c ****  * @sclass
 304:../../../os/rt/src/chschd.c ****  */
 305:../../../os/rt/src/chschd.c **** void chSchGoSleepS(tstate_t newstate) {
 251               		.loc 1 305 0
 252               		.cfi_startproc
 253               	.LVL15:
 254 0000 CF93      		push r28
 255               	.LCFI4:
 256               		.cfi_def_cfa_offset 3
 257               		.cfi_offset 28, -2
 258 0002 DF93      		push r29
 259               	.LCFI5:
 260               		.cfi_def_cfa_offset 4
 261               		.cfi_offset 29, -3
 262               	/* prologue: function */
 263               	/* frame size = 0 */
 264               	/* stack size = 2 */
 265               	.L__stack_usage = 2
 266               	.LVL16:
 306:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 307:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 267               		.loc 1 307 0
 268 0004 E0E0      		ldi r30,lo8(ch0)
 269 0006 F0E0      		ldi r31,hi8(ch0)
 270 0008 6581      		ldd r22,Z+5
 271 000a 7681      		ldd r23,Z+6
 272               	.LVL17:
 308:../../../os/rt/src/chschd.c ****   thread_t *ntp;
 309:../../../os/rt/src/chschd.c **** 
 310:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 311:../../../os/rt/src/chschd.c **** 
 312:../../../os/rt/src/chschd.c ****   chDbgAssert(otp != chSysGetIdleThreadX(), "sleeping in idle thread");
 313:../../../os/rt/src/chschd.c ****   chDbgAssert(otp->owner == oip, "invalid core");
 314:../../../os/rt/src/chschd.c **** 
 315:../../../os/rt/src/chschd.c ****   /* New state.*/
 316:../../../os/rt/src/chschd.c ****   otp->state = newstate;
 273               		.loc 1 316 0
 274 000c DB01      		movw r26,r22
 275 000e 1F96      		adiw r26,15
 276 0010 8C93      		st X,r24
 277               	.LVL18:
 278               	.LBB77:
 279               	.LBB78:
 413:../../../os/rt/include/chlists.h **** 
 280               		.loc 2 413 0
 281 0012 8081      		ld r24,Z
 282 0014 9181      		ldd r25,Z+1
 283               	.LVL19:
 415:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 284               		.loc 2 415 0
 285 0016 EC01      		movw r28,r24
 286 0018 A881      		ld r26,Y
 287 001a B981      		ldd r27,Y+1
 288 001c B183      		std Z+1,r27
 289 001e A083      		st Z,r26
 416:../../../os/rt/include/chlists.h **** 
 290               		.loc 2 416 0
 291 0020 1396      		adiw r26,2+1
 292 0022 FC93      		st X,r31
 293 0024 EE93      		st -X,r30
 294 0026 1297      		sbiw r26,2
 295               	.LVL20:
 296               	.LBE78:
 297               	.LBE77:
 317:../../../os/rt/src/chschd.c **** 
 318:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 319:../../../os/rt/src/chschd.c ****   /* The thread is renouncing its remaining time slices so it will have a new
 320:../../../os/rt/src/chschd.c ****      time quantum when it will wakeup.*/
 321:../../../os/rt/src/chschd.c ****   otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 322:../../../os/rt/src/chschd.c **** #endif
 323:../../../os/rt/src/chschd.c **** 
 324:../../../os/rt/src/chschd.c ****   /* Next thread in ready list becomes current.*/
 325:../../../os/rt/src/chschd.c ****   ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 326:../../../os/rt/src/chschd.c ****   ntp->state = CH_STATE_CURRENT;
 298               		.loc 1 326 0
 299 0028 21E0      		ldi r18,lo8(1)
 300 002a 2F87      		std Y+15,r18
 327:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 301               		.loc 1 327 0
 302 002c 9683      		std Z+6,r25
 303 002e 8583      		std Z+5,r24
 328:../../../os/rt/src/chschd.c **** 
 329:../../../os/rt/src/chschd.c ****   /* Handling idle-enter hook.*/
 330:../../../os/rt/src/chschd.c ****   if (ntp->hdr.pqueue.prio == IDLEPRIO) {
 331:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_ENTER_HOOK();
 332:../../../os/rt/src/chschd.c ****   }
 333:../../../os/rt/src/chschd.c **** 
 334:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 335:../../../os/rt/src/chschd.c ****   chSysSwitch(ntp, otp);
 304               		.loc 1 335 0
 305 0030 0E94 0000 		call _port_switch
 306               	.LVL21:
 307               	/* epilogue start */
 336:../../../os/rt/src/chschd.c **** }
 308               		.loc 1 336 0
 309 0034 DF91      		pop r29
 310 0036 CF91      		pop r28
 311 0038 0895      		ret
 312               		.cfi_endproc
 313               	.LFE199:
 315               		.section	.text.chSchGoSleepTimeoutS,"ax",@progbits
 316               	.global	chSchGoSleepTimeoutS
 318               	chSchGoSleepTimeoutS:
 319               	.LFB200:
 337:../../../os/rt/src/chschd.c **** 
 338:../../../os/rt/src/chschd.c **** /**
 339:../../../os/rt/src/chschd.c ****  * @brief   Puts the current thread to sleep into the specified state with
 340:../../../os/rt/src/chschd.c ****  *          timeout specification.
 341:../../../os/rt/src/chschd.c ****  * @details The thread goes into a sleeping state, if it is not awakened
 342:../../../os/rt/src/chschd.c ****  *          explicitly within the specified timeout then it is forcibly
 343:../../../os/rt/src/chschd.c ****  *          awakened with a @p MSG_TIMEOUT low level message. The possible
 344:../../../os/rt/src/chschd.c ****  *          @ref thread_states are defined into @p threads.h.
 345:../../../os/rt/src/chschd.c ****  *
 346:../../../os/rt/src/chschd.c ****  * @param[in] newstate  the new thread state
 347:../../../os/rt/src/chschd.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 348:../../../os/rt/src/chschd.c ****  *                      special values are handled as follow:
 349:../../../os/rt/src/chschd.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 350:../../../os/rt/src/chschd.c ****  *                        state, this is equivalent to invoking
 351:../../../os/rt/src/chschd.c ****  *                        @p chSchGoSleepS() but, of course, less efficient.
 352:../../../os/rt/src/chschd.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 353:../../../os/rt/src/chschd.c ****  * @return              The wakeup message.
 354:../../../os/rt/src/chschd.c ****  * @retval MSG_TIMEOUT  if a timeout occurs.
 355:../../../os/rt/src/chschd.c ****  *
 356:../../../os/rt/src/chschd.c ****  * @sclass
 357:../../../os/rt/src/chschd.c ****  */
 358:../../../os/rt/src/chschd.c **** msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout) {
 320               		.loc 1 358 0
 321               		.cfi_startproc
 322               	.LVL22:
 323 0000 FF92      		push r15
 324               	.LCFI6:
 325               		.cfi_def_cfa_offset 3
 326               		.cfi_offset 15, -2
 327 0002 0F93      		push r16
 328               	.LCFI7:
 329               		.cfi_def_cfa_offset 4
 330               		.cfi_offset 16, -3
 331 0004 1F93      		push r17
 332               	.LCFI8:
 333               		.cfi_def_cfa_offset 5
 334               		.cfi_offset 17, -4
 335 0006 CF93      		push r28
 336               	.LCFI9:
 337               		.cfi_def_cfa_offset 6
 338               		.cfi_offset 28, -5
 339 0008 DF93      		push r29
 340               	.LCFI10:
 341               		.cfi_def_cfa_offset 7
 342               		.cfi_offset 29, -6
 343 000a CDB7      		in r28,__SP_L__
 344 000c DEB7      		in r29,__SP_H__
 345               	.LCFI11:
 346               		.cfi_def_cfa_register 28
 347 000e 2C97      		sbiw r28,12
 348               	.LCFI12:
 349               		.cfi_def_cfa_offset 19
 350 0010 0FB6      		in __tmp_reg__,__SREG__
 351 0012 F894      		cli
 352 0014 DEBF      		out __SP_H__,r29
 353 0016 0FBE      		out __SREG__,__tmp_reg__
 354 0018 CDBF      		out __SP_L__,r28
 355               	/* prologue: function */
 356               	/* frame size = 12 */
 357               	/* stack size = 17 */
 358               	.L__stack_usage = 17
 359 001a F82E      		mov r15,r24
 359:../../../os/rt/src/chschd.c ****   thread_t *tp = __instance_get_currthread(currcore);
 360               		.loc 1 359 0
 361 001c 0091 0000 		lds r16,ch0+5
 362 0020 1091 0000 		lds r17,ch0+5+1
 363               	.LVL23:
 360:../../../os/rt/src/chschd.c **** 
 361:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 362:../../../os/rt/src/chschd.c **** 
 363:../../../os/rt/src/chschd.c ****   if (TIME_INFINITE != timeout) {
 364               		.loc 1 363 0
 365 0024 6F3F      		cpi r22,-1
 366 0026 8FEF      		ldi r24,-1
 367 0028 7807      		cpc r23,r24
 368               	.LVL24:
 369 002a 01F0      		breq .L28
 370               	.LBB79:
 364:../../../os/rt/src/chschd.c ****     virtual_timer_t vt;
 365:../../../os/rt/src/chschd.c **** 
 366:../../../os/rt/src/chschd.c ****     chVTDoSetI(&vt, timeout, __sch_wakeup, (void *)tp);
 371               		.loc 1 366 0
 372 002c 9801      		movw r18,r16
 373 002e 40E0      		ldi r20,lo8(gs(__sch_wakeup))
 374 0030 50E0      		ldi r21,hi8(gs(__sch_wakeup))
 375 0032 CE01      		movw r24,r28
 376 0034 0196      		adiw r24,1
 377 0036 0E94 0000 		call chVTDoSetI
 378               	.LVL25:
 367:../../../os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 379               		.loc 1 367 0
 380 003a 8F2D      		mov r24,r15
 381 003c 0E94 0000 		call chSchGoSleepS
 382               	.LVL26:
 368:../../../os/rt/src/chschd.c ****     if (chVTIsArmedI(&vt)) {
 383               		.loc 1 368 0
 384 0040 8981      		ldd r24,Y+1
 385 0042 9A81      		ldd r25,Y+2
 386 0044 892B      		or r24,r25
 387 0046 01F0      		breq .L30
 369:../../../os/rt/src/chschd.c ****       chVTDoResetI(&vt);
 388               		.loc 1 369 0
 389 0048 CE01      		movw r24,r28
 390 004a 0196      		adiw r24,1
 391 004c 0E94 0000 		call chVTDoResetI
 392               	.LVL27:
 393               	.L30:
 394               	.LBE79:
 370:../../../os/rt/src/chschd.c ****     }
 371:../../../os/rt/src/chschd.c ****   }
 372:../../../os/rt/src/chschd.c ****   else {
 373:../../../os/rt/src/chschd.c ****     chSchGoSleepS(newstate);
 374:../../../os/rt/src/chschd.c ****   }
 375:../../../os/rt/src/chschd.c **** 
 376:../../../os/rt/src/chschd.c ****   return tp->u.rdymsg;
 377:../../../os/rt/src/chschd.c **** }
 395               		.loc 1 377 0
 396 0050 F801      		movw r30,r16
 397 0052 8289      		ldd r24,Z+18
 398 0054 9389      		ldd r25,Z+19
 399               	/* epilogue start */
 400 0056 2C96      		adiw r28,12
 401 0058 0FB6      		in __tmp_reg__,__SREG__
 402 005a F894      		cli
 403 005c DEBF      		out __SP_H__,r29
 404 005e 0FBE      		out __SREG__,__tmp_reg__
 405 0060 CDBF      		out __SP_L__,r28
 406 0062 DF91      		pop r29
 407 0064 CF91      		pop r28
 408 0066 1F91      		pop r17
 409 0068 0F91      		pop r16
 410               	.LVL28:
 411 006a FF90      		pop r15
 412               	.LVL29:
 413 006c 0895      		ret
 414               	.LVL30:
 415               	.L28:
 373:../../../os/rt/src/chschd.c ****   }
 416               		.loc 1 373 0
 417 006e 8F2D      		mov r24,r15
 418 0070 0E94 0000 		call chSchGoSleepS
 419               	.LVL31:
 420 0074 00C0      		rjmp .L30
 421               		.cfi_endproc
 422               	.LFE200:
 424               		.section	.text.chSchWakeupS,"ax",@progbits
 425               	.global	chSchWakeupS
 427               	chSchWakeupS:
 428               	.LFB201:
 378:../../../os/rt/src/chschd.c **** 
 379:../../../os/rt/src/chschd.c **** /**
 380:../../../os/rt/src/chschd.c ****  * @brief   Wakes up a thread.
 381:../../../os/rt/src/chschd.c ****  * @details The thread is inserted into the ready list or immediately made
 382:../../../os/rt/src/chschd.c ****  *          running depending on its relative priority compared to the current
 383:../../../os/rt/src/chschd.c ****  *          thread.
 384:../../../os/rt/src/chschd.c ****  * @pre     The thread must not be already inserted in any list through its
 385:../../../os/rt/src/chschd.c ****  *          @p next and @p prev or list corruption would occur.
 386:../../../os/rt/src/chschd.c ****  * @note    It is equivalent to a @p chSchReadyI() followed by a
 387:../../../os/rt/src/chschd.c ****  *          @p chSchRescheduleS() but much more efficient.
 388:../../../os/rt/src/chschd.c ****  * @note    The function assumes that the current thread has the highest
 389:../../../os/rt/src/chschd.c ****  *          priority.
 390:../../../os/rt/src/chschd.c ****  *
 391:../../../os/rt/src/chschd.c ****  * @param[in] ntp       the thread to be made ready
 392:../../../os/rt/src/chschd.c ****  * @param[in] msg       the wakeup message
 393:../../../os/rt/src/chschd.c ****  *
 394:../../../os/rt/src/chschd.c ****  * @sclass
 395:../../../os/rt/src/chschd.c ****  */
 396:../../../os/rt/src/chschd.c **** void chSchWakeupS(thread_t *ntp, msg_t msg) {
 429               		.loc 1 396 0
 430               		.cfi_startproc
 431               	.LVL32:
 432 0000 CF93      		push r28
 433               	.LCFI13:
 434               		.cfi_def_cfa_offset 3
 435               		.cfi_offset 28, -2
 436 0002 DF93      		push r29
 437               	.LCFI14:
 438               		.cfi_def_cfa_offset 4
 439               		.cfi_offset 29, -3
 440               	/* prologue: function */
 441               	/* frame size = 0 */
 442               	/* stack size = 2 */
 443               	.L__stack_usage = 2
 444 0004 DC01      		movw r26,r24
 445               	.LVL33:
 397:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 398:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 446               		.loc 1 398 0
 447 0006 C091 0000 		lds r28,ch0+5
 448 000a D091 0000 		lds r29,ch0+5+1
 449               	.LVL34:
 399:../../../os/rt/src/chschd.c **** 
 400:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 401:../../../os/rt/src/chschd.c **** 
 402:../../../os/rt/src/chschd.c ****   chDbgAssert((oip->rlist.pqueue.next == &oip->rlist.pqueue) ||
 403:../../../os/rt/src/chschd.c ****               (oip->rlist.current->hdr.pqueue.prio >= oip->rlist.pqueue.next->prio),
 404:../../../os/rt/src/chschd.c ****               "priority order violation");
 405:../../../os/rt/src/chschd.c **** 
 406:../../../os/rt/src/chschd.c ****   /* Storing the message to be retrieved by the target thread when it will
 407:../../../os/rt/src/chschd.c ****      restart execution.*/
 408:../../../os/rt/src/chschd.c ****   ntp->u.rdymsg = msg;
 450               		.loc 1 408 0
 451 000e 5396      		adiw r26,18+1
 452 0010 7C93      		st X,r23
 453 0012 6E93      		st -X,r22
 454 0014 5297      		sbiw r26,18
 409:../../../os/rt/src/chschd.c **** 
 410:../../../os/rt/src/chschd.c **** #if CH_CFG_SMP_MODE == TRUE
 411:../../../os/rt/src/chschd.c ****   if (ntp->owner != oip) {
 412:../../../os/rt/src/chschd.c ****     /* Readying up the remote thread and triggering a reschedule on
 413:../../../os/rt/src/chschd.c ****        the other core.*/
 414:../../../os/rt/src/chschd.c ****     chSysNotifyInstance(ntp->owner);
 415:../../../os/rt/src/chschd.c ****     (void) __sch_ready_behind(ntp);
 416:../../../os/rt/src/chschd.c ****     return;
 417:../../../os/rt/src/chschd.c ****   }
 418:../../../os/rt/src/chschd.c **** #endif
 419:../../../os/rt/src/chschd.c **** 
 420:../../../os/rt/src/chschd.c ****   /* If the woken thread has a not-greater priority than the current
 421:../../../os/rt/src/chschd.c ****      one then it is just inserted in the ready list else it made
 422:../../../os/rt/src/chschd.c ****      running immediately and the invoking thread goes in the ready
 423:../../../os/rt/src/chschd.c ****      list instead.
 424:../../../os/rt/src/chschd.c ****      Note, we are favoring the path where the woken thread has higher
 425:../../../os/rt/src/chschd.c ****      priority.*/
 426:../../../os/rt/src/chschd.c ****   if (unlikely(ntp->hdr.pqueue.prio <= otp->hdr.pqueue.prio)) {
 455               		.loc 1 426 0
 456 0016 1496      		adiw r26,4
 457 0018 2C91      		ld r18,X
 458 001a 1497      		sbiw r26,4
 459 001c 8C81      		ldd r24,Y+4
 460               	.LVL35:
 461 001e 8217      		cp r24,r18
 462 0020 00F0      		brlo .L35
 463               	.LVL36:
 464               	.LBB80:
 465               	.LBB81:
  77:../../../os/rt/src/chschd.c **** 
 466               		.loc 1 77 0
 467 0022 1F96      		adiw r26,15
 468 0024 1C92      		st X,__zero_reg__
 469 0026 1F97      		sbiw r26,15
  80:../../../os/rt/src/chschd.c ****                                            &tp->hdr.pqueue));
 470               		.loc 1 80 0
 471 0028 1B96      		adiw r26,11
 472 002a ED91      		ld r30,X+
 473 002c FC91      		ld r31,X
 474 002e 1C97      		sbiw r26,11+1
 475               	.LVL37:
 476               	.L36:
 477               	.LBB82:
 478               	.LBB83:
 438:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 479               		.loc 2 438 0
 480 0030 0190      		ld __tmp_reg__,Z+
 481 0032 F081      		ld r31,Z
 482 0034 E02D      		mov r30,__tmp_reg__
 483               	.LVL38:
 439:../../../os/rt/include/chlists.h **** 
 484               		.loc 2 439 0
 485 0036 9481      		ldd r25,Z+4
 486 0038 9217      		cp r25,r18
 487 003a 00F4      		brsh .L36
 442:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 488               		.loc 2 442 0
 489 003c 1196      		adiw r26,1
 490 003e FC93      		st X,r31
 491 0040 EE93      		st -X,r30
 443:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 492               		.loc 2 443 0
 493 0042 C281      		ldd r28,Z+2
 494 0044 D381      		ldd r29,Z+3
 495               	.LVL39:
 496 0046 1396      		adiw r26,2+1
 497 0048 DC93      		st X,r29
 498 004a CE93      		st -X,r28
 499 004c 1297      		sbiw r26,2
 444:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 500               		.loc 2 444 0
 501 004e B983      		std Y+1,r27
 502 0050 A883      		st Y,r26
 503               		.loc 2 445 0
 504 0052 B383      		std Z+3,r27
 505 0054 A283      		std Z+2,r26
 506               	.LVL40:
 507               	/* epilogue start */
 508               	.LBE83:
 509               	.LBE82:
 510               	.LBE81:
 511               	.LBE80:
 427:../../../os/rt/src/chschd.c ****     (void) __sch_ready_behind(ntp);
 428:../../../os/rt/src/chschd.c ****   }
 429:../../../os/rt/src/chschd.c ****   else {
 430:../../../os/rt/src/chschd.c ****     /* The old thread goes back in the ready list ahead of its peers
 431:../../../os/rt/src/chschd.c ****        because it has not exhausted its time slice.*/
 432:../../../os/rt/src/chschd.c ****     otp = __sch_ready_ahead(otp);
 433:../../../os/rt/src/chschd.c **** 
 434:../../../os/rt/src/chschd.c ****     /* Handling idle-leave hook.*/
 435:../../../os/rt/src/chschd.c ****     if (otp->hdr.pqueue.prio == IDLEPRIO) {
 436:../../../os/rt/src/chschd.c ****       CH_CFG_IDLE_LEAVE_HOOK();
 437:../../../os/rt/src/chschd.c ****     }
 438:../../../os/rt/src/chschd.c **** 
 439:../../../os/rt/src/chschd.c ****     /* The extracted thread is marked as current.*/
 440:../../../os/rt/src/chschd.c ****     ntp->state = CH_STATE_CURRENT;
 441:../../../os/rt/src/chschd.c ****     __instance_set_currthread(oip, ntp);
 442:../../../os/rt/src/chschd.c **** 
 443:../../../os/rt/src/chschd.c ****     /* Swap operation as tail call.*/
 444:../../../os/rt/src/chschd.c ****     chSysSwitch(ntp, otp);
 445:../../../os/rt/src/chschd.c ****   }
 446:../../../os/rt/src/chschd.c **** }
 512               		.loc 1 446 0
 513 0056 DF91      		pop r29
 514 0058 CF91      		pop r28
 515 005a 0895      		ret
 516               	.LVL41:
 517               	.L35:
 518               	.LBB84:
 519               	.LBB85:
 110:../../../os/rt/src/chschd.c **** 
 520               		.loc 1 110 0
 521 005c 1F86      		std Y+15,__zero_reg__
 113:../../../os/rt/src/chschd.c ****                                           &tp->hdr.pqueue));
 522               		.loc 1 113 0
 523 005e EB85      		ldd r30,Y+11
 524 0060 FC85      		ldd r31,Y+12
 525               	.LVL42:
 526               	.L38:
 527               	.LBB86:
 528               	.LBB87:
 446:../../../os/rt/include/chlists.h **** 
 447:../../../os/rt/include/chlists.h ****   return p;
 448:../../../os/rt/include/chlists.h **** }
 449:../../../os/rt/include/chlists.h **** 
 450:../../../os/rt/include/chlists.h **** /**
 451:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element in the priority queue placing it ahead of
 452:../../../os/rt/include/chlists.h ****  *          its peers.
 453:../../../os/rt/include/chlists.h ****  * @details The element is positioned ahead of all elements with higher or
 454:../../../os/rt/include/chlists.h ****  *          equal priority.
 455:../../../os/rt/include/chlists.h ****  *
 456:../../../os/rt/include/chlists.h ****  * @param[in] pqp       the pointer to the priority queue list header
 457:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 458:../../../os/rt/include/chlists.h ****  * @return              The inserted element pointer.
 459:../../../os/rt/include/chlists.h ****  *
 460:../../../os/rt/include/chlists.h ****  * @notapi
 461:../../../os/rt/include/chlists.h ****  */
 462:../../../os/rt/include/chlists.h **** static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
 463:../../../os/rt/include/chlists.h ****                                                           ch_priority_queue_t *p) {
 464:../../../os/rt/include/chlists.h **** 
 465:../../../os/rt/include/chlists.h ****   /* Scanning priority queue, the list is assumed to be mostly empty.*/
 466:../../../os/rt/include/chlists.h ****   do {
 467:../../../os/rt/include/chlists.h ****     pqp = pqp->next;
 529               		.loc 2 467 0
 530 0062 0190      		ld __tmp_reg__,Z+
 531 0064 F081      		ld r31,Z
 532 0066 E02D      		mov r30,__tmp_reg__
 533               	.LVL43:
 468:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 534               		.loc 2 468 0
 535 0068 9481      		ldd r25,Z+4
 536 006a 8917      		cp r24,r25
 537 006c 00F0      		brlo .L38
 538 006e CD01      		movw r24,r26
 469:../../../os/rt/include/chlists.h **** 
 470:../../../os/rt/include/chlists.h ****   /* Insertion on prev.*/
 471:../../../os/rt/include/chlists.h ****   p->next       = pqp;
 539               		.loc 2 471 0
 540 0070 F983      		std Y+1,r31
 541 0072 E883      		st Y,r30
 472:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 542               		.loc 2 472 0
 543 0074 A281      		ldd r26,Z+2
 544 0076 B381      		ldd r27,Z+3
 545               	.LVL44:
 546 0078 BB83      		std Y+3,r27
 547 007a AA83      		std Y+2,r26
 473:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 548               		.loc 2 473 0
 549 007c CD93      		st X+,r28
 550 007e DC93      		st X,r29
 474:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 551               		.loc 2 474 0
 552 0080 D383      		std Z+3,r29
 553 0082 C283      		std Z+2,r28
 554               	.LVL45:
 555               	.LBE87:
 556               	.LBE86:
 557               	.LBE85:
 558               	.LBE84:
 440:../../../os/rt/src/chschd.c ****     __instance_set_currthread(oip, ntp);
 559               		.loc 1 440 0
 560 0084 21E0      		ldi r18,lo8(1)
 561 0086 FC01      		movw r30,r24
 562 0088 2787      		std Z+15,r18
 441:../../../os/rt/src/chschd.c **** 
 563               		.loc 1 441 0
 564 008a 9093 0000 		sts ch0+5+1,r25
 565 008e 8093 0000 		sts ch0+5,r24
 444:../../../os/rt/src/chschd.c ****   }
 566               		.loc 1 444 0
 567 0092 BE01      		movw r22,r28
 568               	.LVL46:
 569 0094 0E94 0000 		call _port_switch
 570               	.LVL47:
 571               	/* epilogue start */
 572               		.loc 1 446 0
 573 0098 DF91      		pop r29
 574 009a CF91      		pop r28
 575 009c 0895      		ret
 576               		.cfi_endproc
 577               	.LFE201:
 579               		.section	.text.chSchIsPreemptionRequired,"ax",@progbits
 580               	.global	chSchIsPreemptionRequired
 582               	chSchIsPreemptionRequired:
 583               	.LFB203:
 447:../../../os/rt/src/chschd.c **** 
 448:../../../os/rt/src/chschd.c **** /**
 449:../../../os/rt/src/chschd.c ****  * @brief   Performs a reschedule if a higher priority thread is runnable.
 450:../../../os/rt/src/chschd.c ****  * @details If a thread with a higher priority than the current thread is in
 451:../../../os/rt/src/chschd.c ****  *          the ready list then make the higher priority thread running.
 452:../../../os/rt/src/chschd.c ****  * @note    Only local threads are considered, other cores are signaled
 453:../../../os/rt/src/chschd.c ****  *          and perform a reschedule locally.
 454:../../../os/rt/src/chschd.c ****  *
 455:../../../os/rt/src/chschd.c ****  * @sclass
 456:../../../os/rt/src/chschd.c ****  */
 457:../../../os/rt/src/chschd.c **** void chSchRescheduleS(void) {
 458:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 459:../../../os/rt/src/chschd.c ****   thread_t *tp = __instance_get_currthread(oip);
 460:../../../os/rt/src/chschd.c **** 
 461:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 462:../../../os/rt/src/chschd.c **** 
 463:../../../os/rt/src/chschd.c ****   /* Note, we are favoring the path where the reschedule is necessary
 464:../../../os/rt/src/chschd.c ****      because higher priority threads are ready.*/
 465:../../../os/rt/src/chschd.c ****   if (likely(firstprio(&oip->rlist.pqueue) > tp->hdr.pqueue.prio)) {
 466:../../../os/rt/src/chschd.c ****     __sch_reschedule_ahead();
 467:../../../os/rt/src/chschd.c ****   }
 468:../../../os/rt/src/chschd.c **** }
 469:../../../os/rt/src/chschd.c **** 
 470:../../../os/rt/src/chschd.c **** #if !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED)
 471:../../../os/rt/src/chschd.c **** /**
 472:../../../os/rt/src/chschd.c ****  * @brief   Evaluates if preemption is required.
 473:../../../os/rt/src/chschd.c ****  * @details The decision is taken by comparing the relative priorities and
 474:../../../os/rt/src/chschd.c ****  *          depending on the state of the round robin timeout counter.
 475:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked from within
 476:../../../os/rt/src/chschd.c ****  *          the port layer in the IRQ-related preemption code.
 477:../../../os/rt/src/chschd.c ****  *
 478:../../../os/rt/src/chschd.c ****  * @retval true         if there is a thread that must go in running state
 479:../../../os/rt/src/chschd.c ****  *                      immediately.
 480:../../../os/rt/src/chschd.c ****  * @retval false        if preemption is not required.
 481:../../../os/rt/src/chschd.c ****  *
 482:../../../os/rt/src/chschd.c ****  * @special
 483:../../../os/rt/src/chschd.c ****  */
 484:../../../os/rt/src/chschd.c **** bool chSchIsPreemptionRequired(void) {
 584               		.loc 1 484 0
 585               		.cfi_startproc
 586               	/* prologue: function */
 587               	/* frame size = 0 */
 588               	/* stack size = 0 */
 589               	.L__stack_usage = 0
 590               	.LVL48:
 485:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 486:../../../os/rt/src/chschd.c ****   thread_t *tp = __instance_get_currthread(oip);
 487:../../../os/rt/src/chschd.c **** 
 488:../../../os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&oip->rlist.pqueue);
 591               		.loc 1 488 0
 592 0000 A091 0000 		lds r26,ch0
 593 0004 B091 0000 		lds r27,ch0+1
 489:../../../os/rt/src/chschd.c ****   tprio_t p2 = tp->hdr.pqueue.prio;
 594               		.loc 1 489 0
 595 0008 E091 0000 		lds r30,ch0+5
 596 000c F091 0000 		lds r31,ch0+5+1
 490:../../../os/rt/src/chschd.c **** 
 491:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 492:../../../os/rt/src/chschd.c ****   /* If the running thread has not reached its time quantum, reschedule only
 493:../../../os/rt/src/chschd.c ****      if the first thread on the ready queue has a higher priority.
 494:../../../os/rt/src/chschd.c ****      Otherwise, if the running thread has used up its time quantum, reschedule
 495:../../../os/rt/src/chschd.c ****      if the first thread on the ready queue has equal or higher priority.*/
 496:../../../os/rt/src/chschd.c ****   return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
 497:../../../os/rt/src/chschd.c **** #else
 498:../../../os/rt/src/chschd.c ****   /* If the round robin preemption feature is not enabled then performs a
 499:../../../os/rt/src/chschd.c ****      simpler comparison.*/
 500:../../../os/rt/src/chschd.c ****   return p1 > p2;
 597               		.loc 1 500 0
 598 0010 81E0      		ldi r24,lo8(1)
 599 0012 1496      		adiw r26,4
 600 0014 2C91      		ld r18,X
 601 0016 9481      		ldd r25,Z+4
 602 0018 9217      		cp r25,r18
 603 001a 00F0      		brlo .L42
 604 001c 80E0      		ldi r24,0
 605               	.L42:
 501:../../../os/rt/src/chschd.c **** #endif
 502:../../../os/rt/src/chschd.c **** }
 606               		.loc 1 502 0
 607 001e 0895      		ret
 608               		.cfi_endproc
 609               	.LFE203:
 611               		.section	.text.chSchDoPreemption,"ax",@progbits
 612               	.global	chSchDoPreemption
 614               	chSchDoPreemption:
 615               	.LFB204:
 503:../../../os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_IS_PREEMPTION_REQUIRED_HOOKED) */
 504:../../../os/rt/src/chschd.c **** 
 505:../../../os/rt/src/chschd.c **** #if !defined(CH_SCH_DO_PREEMPTION_HOOKED)
 506:../../../os/rt/src/chschd.c **** /**
 507:../../../os/rt/src/chschd.c ****  * @brief   Switches to the first thread on the runnable queue.
 508:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list behind or
 509:../../../os/rt/src/chschd.c ****  *          ahead of all threads having the same priority depending on
 510:../../../os/rt/src/chschd.c ****  *          if it used its whole time slice.
 511:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked from within
 512:../../../os/rt/src/chschd.c ****  *          the port layer in the IRQ-related preemption code.
 513:../../../os/rt/src/chschd.c ****  *
 514:../../../os/rt/src/chschd.c ****  * @special
 515:../../../os/rt/src/chschd.c ****  */
 516:../../../os/rt/src/chschd.c **** void chSchDoPreemption(void) {
 616               		.loc 1 516 0
 617               		.cfi_startproc
 618 0000 CF93      		push r28
 619               	.LCFI15:
 620               		.cfi_def_cfa_offset 3
 621               		.cfi_offset 28, -2
 622 0002 DF93      		push r29
 623               	.LCFI16:
 624               		.cfi_def_cfa_offset 4
 625               		.cfi_offset 29, -3
 626               	/* prologue: function */
 627               	/* frame size = 0 */
 628               	/* stack size = 2 */
 629               	.L__stack_usage = 2
 630               	.LVL49:
 517:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 518:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 631               		.loc 1 518 0
 632 0004 A091 0000 		lds r26,ch0+5
 633 0008 B091 0000 		lds r27,ch0+5+1
 634               	.LVL50:
 635               	.LBB88:
 636               	.LBB89:
 413:../../../os/rt/include/chlists.h **** 
 637               		.loc 2 413 0
 638 000c 4091 0000 		lds r20,ch0
 639 0010 5091 0000 		lds r21,ch0+1
 640               	.LVL51:
 415:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 641               		.loc 2 415 0
 642 0014 EA01      		movw r28,r20
 643 0016 E881      		ld r30,Y
 644 0018 F981      		ldd r31,Y+1
 645 001a F093 0000 		sts ch0+1,r31
 646 001e E093 0000 		sts ch0,r30
 416:../../../os/rt/include/chlists.h **** 
 647               		.loc 2 416 0
 648 0022 80E0      		ldi r24,lo8(ch0)
 649 0024 90E0      		ldi r25,hi8(ch0)
 650 0026 9383      		std Z+3,r25
 651 0028 8283      		std Z+2,r24
 652               	.LVL52:
 653               	.LBE89:
 654               	.LBE88:
 519:../../../os/rt/src/chschd.c ****   thread_t *ntp;
 520:../../../os/rt/src/chschd.c **** 
 521:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 522:../../../os/rt/src/chschd.c ****   ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 523:../../../os/rt/src/chschd.c ****   ntp->state = CH_STATE_CURRENT;
 655               		.loc 1 523 0
 656 002a 81E0      		ldi r24,lo8(1)
 657 002c 8F87      		std Y+15,r24
 524:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 658               		.loc 1 524 0
 659 002e 5093 0000 		sts ch0+5+1,r21
 660 0032 4093 0000 		sts ch0+5,r20
 661               	.LVL53:
 662               	.LBB90:
 663               	.LBB91:
 110:../../../os/rt/src/chschd.c **** 
 664               		.loc 1 110 0
 665 0036 1F96      		adiw r26,15
 666 0038 1C92      		st X,__zero_reg__
 667 003a 1F97      		sbiw r26,15
 113:../../../os/rt/src/chschd.c ****                                           &tp->hdr.pqueue));
 668               		.loc 1 113 0
 669 003c 1B96      		adiw r26,11
 670 003e ED91      		ld r30,X+
 671 0040 FC91      		ld r31,X
 672 0042 1C97      		sbiw r26,11+1
 673               	.LVL54:
 674 0044 1496      		adiw r26,4
 675 0046 2C91      		ld r18,X
 676 0048 1497      		sbiw r26,4
 677               	.L44:
 678               	.LBB92:
 679               	.LBB93:
 467:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 680               		.loc 2 467 0
 681 004a 0190      		ld __tmp_reg__,Z+
 682 004c F081      		ld r31,Z
 683 004e E02D      		mov r30,__tmp_reg__
 684               	.LVL55:
 468:../../../os/rt/include/chlists.h **** 
 685               		.loc 2 468 0
 686 0050 9481      		ldd r25,Z+4
 687 0052 2917      		cp r18,r25
 688 0054 00F0      		brlo .L44
 471:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 689               		.loc 2 471 0
 690 0056 1196      		adiw r26,1
 691 0058 FC93      		st X,r31
 692 005a EE93      		st -X,r30
 472:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 693               		.loc 2 472 0
 694 005c 8281      		ldd r24,Z+2
 695 005e 9381      		ldd r25,Z+3
 696 0060 1396      		adiw r26,2+1
 697 0062 9C93      		st X,r25
 698 0064 8E93      		st -X,r24
 699 0066 1297      		sbiw r26,2
 473:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 700               		.loc 2 473 0
 701 0068 EC01      		movw r28,r24
 702 006a B983      		std Y+1,r27
 703 006c A883      		st Y,r26
 704               		.loc 2 474 0
 705 006e B383      		std Z+3,r27
 706 0070 A283      		std Z+2,r26
 707               	.LVL56:
 708               	.LBE93:
 709               	.LBE92:
 710               	.LBE91:
 711               	.LBE90:
 525:../../../os/rt/src/chschd.c **** 
 526:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 527:../../../os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 528:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 529:../../../os/rt/src/chschd.c ****   }
 530:../../../os/rt/src/chschd.c **** 
 531:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 532:../../../os/rt/src/chschd.c ****   /* If CH_CFG_TIME_QUANTUM is enabled then there are two different scenarios
 533:../../../os/rt/src/chschd.c ****      to handle on preemption: time quantum elapsed or not.*/
 534:../../../os/rt/src/chschd.c ****   if (otp->ticks == (tslices_t)0) {
 535:../../../os/rt/src/chschd.c **** 
 536:../../../os/rt/src/chschd.c ****     /* The thread consumed its time quantum so it is enqueued behind threads
 537:../../../os/rt/src/chschd.c ****        with same priority level, however, it acquires a new time quantum.*/
 538:../../../os/rt/src/chschd.c ****     otp = __sch_ready_behind(otp);
 539:../../../os/rt/src/chschd.c **** 
 540:../../../os/rt/src/chschd.c ****     /* The thread being swapped out receives a new time quantum.*/
 541:../../../os/rt/src/chschd.c ****     otp->ticks = (tslices_t)CH_CFG_TIME_QUANTUM;
 542:../../../os/rt/src/chschd.c ****   }
 543:../../../os/rt/src/chschd.c ****   else {
 544:../../../os/rt/src/chschd.c ****     /* The thread didn't consume all its time quantum so it is put ahead of
 545:../../../os/rt/src/chschd.c ****        threads with equal priority and does not acquire a new time quantum.*/
 546:../../../os/rt/src/chschd.c ****     otp = __sch_ready_ahead(otp);
 547:../../../os/rt/src/chschd.c ****   }
 548:../../../os/rt/src/chschd.c **** #else /* !(CH_CFG_TIME_QUANTUM > 0) */
 549:../../../os/rt/src/chschd.c ****   /* If the round-robin mechanism is disabled then the thread goes always
 550:../../../os/rt/src/chschd.c ****      ahead of its peers.*/
 551:../../../os/rt/src/chschd.c ****   otp = __sch_ready_ahead(otp);
 552:../../../os/rt/src/chschd.c **** #endif /* !(CH_CFG_TIME_QUANTUM > 0) */
 553:../../../os/rt/src/chschd.c **** 
 554:../../../os/rt/src/chschd.c ****   /* Swap operation as tail call.*/
 555:../../../os/rt/src/chschd.c ****   chSysSwitch(ntp, otp);
 712               		.loc 1 555 0
 713 0072 BD01      		movw r22,r26
 714 0074 CA01      		movw r24,r20
 715 0076 0E94 0000 		call _port_switch
 716               	.LVL57:
 717               	/* epilogue start */
 556:../../../os/rt/src/chschd.c **** }
 718               		.loc 1 556 0
 719 007a DF91      		pop r29
 720 007c CF91      		pop r28
 721 007e 0895      		ret
 722               		.cfi_endproc
 723               	.LFE204:
 725               		.set	__sch_reschedule_ahead,chSchDoPreemption
 726               		.section	.text.chSchPreemption,"ax",@progbits
 727               	.global	chSchPreemption
 729               	chSchPreemption:
 730               	.LFB205:
 557:../../../os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_DO_PREEMPTION_HOOKED) */
 558:../../../os/rt/src/chschd.c **** 
 559:../../../os/rt/src/chschd.c **** #if !defined(CH_SCH_PREEMPTION_HOOKED)
 560:../../../os/rt/src/chschd.c **** /**
 561:../../../os/rt/src/chschd.c ****  * @brief   All-in-one preemption code.
 562:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked from within
 563:../../../os/rt/src/chschd.c ****  *          the port layer in the IRQ-related preemption code.
 564:../../../os/rt/src/chschd.c ****  *
 565:../../../os/rt/src/chschd.c ****  * @special
 566:../../../os/rt/src/chschd.c ****  */
 567:../../../os/rt/src/chschd.c **** void chSchPreemption(void) {
 731               		.loc 1 567 0
 732               		.cfi_startproc
 733               	/* prologue: function */
 734               	/* frame size = 0 */
 735               	/* stack size = 0 */
 736               	.L__stack_usage = 0
 737               	.LVL58:
 568:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 569:../../../os/rt/src/chschd.c ****   thread_t *tp = __instance_get_currthread(oip);
 570:../../../os/rt/src/chschd.c ****   tprio_t p1 = firstprio(&oip->rlist.pqueue);
 738               		.loc 1 570 0
 739 0000 A091 0000 		lds r26,ch0
 740 0004 B091 0000 		lds r27,ch0+1
 571:../../../os/rt/src/chschd.c ****   tprio_t p2 = tp->hdr.pqueue.prio;
 741               		.loc 1 571 0
 742 0008 E091 0000 		lds r30,ch0+5
 743 000c F091 0000 		lds r31,ch0+5+1
 572:../../../os/rt/src/chschd.c **** 
 573:../../../os/rt/src/chschd.c ****   /* Note, we are favoring the path where preemption is necessary
 574:../../../os/rt/src/chschd.c ****      because higher priority threads are ready.*/
 575:../../../os/rt/src/chschd.c **** #if CH_CFG_TIME_QUANTUM > 0
 576:../../../os/rt/src/chschd.c ****   if (tp->ticks > (tslices_t)0) {
 577:../../../os/rt/src/chschd.c ****     if (likely(p1 > p2)) {
 578:../../../os/rt/src/chschd.c ****       __sch_reschedule_ahead();
 579:../../../os/rt/src/chschd.c ****     }
 580:../../../os/rt/src/chschd.c ****   }
 581:../../../os/rt/src/chschd.c ****   else {
 582:../../../os/rt/src/chschd.c ****     if (likely(p1 >= p2)) {
 583:../../../os/rt/src/chschd.c ****       __sch_reschedule_behind();
 584:../../../os/rt/src/chschd.c ****     }
 585:../../../os/rt/src/chschd.c ****   }
 586:../../../os/rt/src/chschd.c **** #else /* CH_CFG_TIME_QUANTUM == 0 */
 587:../../../os/rt/src/chschd.c ****   if (likely(p1 > p2)) {
 744               		.loc 1 587 0
 745 0010 1496      		adiw r26,4
 746 0012 9C91      		ld r25,X
 747 0014 8481      		ldd r24,Z+4
 748 0016 8917      		cp r24,r25
 749 0018 00F0      		brlo .L48
 750 001a 0895      		ret
 751               	.L48:
 588:../../../os/rt/src/chschd.c ****     __sch_reschedule_ahead();
 752               		.loc 1 588 0
 753 001c 0C94 0000 		jmp __sch_reschedule_ahead
 754               	.LVL59:
 755               		.cfi_endproc
 756               	.LFE205:
 758               		.section	.text.chSchRescheduleS,"ax",@progbits
 759               	.global	chSchRescheduleS
 761               	chSchRescheduleS:
 762               	.LFB211:
 763               		.cfi_startproc
 764               	/* prologue: function */
 765               	/* frame size = 0 */
 766               	/* stack size = 0 */
 767               	.L__stack_usage = 0
 768 0000 0C94 0000 		jmp chSchPreemption
 769               		.cfi_endproc
 770               	.LFE211:
 772               		.section	.text.chSchDoYieldS,"ax",@progbits
 773               	.global	chSchDoYieldS
 775               	chSchDoYieldS:
 776               	.LFB206:
 589:../../../os/rt/src/chschd.c ****   }
 590:../../../os/rt/src/chschd.c **** #endif /* CH_CFG_TIME_QUANTUM == 0 */
 591:../../../os/rt/src/chschd.c **** }
 592:../../../os/rt/src/chschd.c **** #endif /* !defined(CH_SCH_PREEMPTION_HOOKED) */
 593:../../../os/rt/src/chschd.c **** 
 594:../../../os/rt/src/chschd.c **** /**
 595:../../../os/rt/src/chschd.c ****  * @brief   Yields the time slot.
 596:../../../os/rt/src/chschd.c ****  * @details Yields the CPU control to the next thread in the ready list with
 597:../../../os/rt/src/chschd.c ****  *          equal or higher priority, if any.
 598:../../../os/rt/src/chschd.c ****  *
 599:../../../os/rt/src/chschd.c ****  * @sclass
 600:../../../os/rt/src/chschd.c ****  */
 601:../../../os/rt/src/chschd.c **** void chSchDoYieldS(void) {
 777               		.loc 1 601 0
 778               		.cfi_startproc
 779               		.loc 1 601 0
 780 0000 CF93      		push r28
 781               	.LCFI17:
 782               		.cfi_def_cfa_offset 3
 783               		.cfi_offset 28, -2
 784 0002 DF93      		push r29
 785               	.LCFI18:
 786               		.cfi_def_cfa_offset 4
 787               		.cfi_offset 29, -3
 788               	/* prologue: function */
 789               	/* frame size = 0 */
 790               	/* stack size = 2 */
 791               	.L__stack_usage = 2
 792               	.LVL60:
 602:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 603:../../../os/rt/src/chschd.c ****   thread_t *tp = __instance_get_currthread(oip);
 793               		.loc 1 603 0
 794 0004 A091 0000 		lds r26,ch0+5
 795 0008 B091 0000 		lds r27,ch0+5+1
 796               	.LVL61:
 604:../../../os/rt/src/chschd.c **** 
 605:../../../os/rt/src/chschd.c ****   chDbgCheckClassS();
 606:../../../os/rt/src/chschd.c **** 
 607:../../../os/rt/src/chschd.c ****   /* If this function has been called then it is likely there are threads
 608:../../../os/rt/src/chschd.c ****      at same priority level.*/
 609:../../../os/rt/src/chschd.c ****   if (likely(firstprio(&oip->rlist.pqueue) >= tp->hdr.pqueue.prio)) {
 797               		.loc 1 609 0
 798 000c 4091 0000 		lds r20,ch0
 799 0010 5091 0000 		lds r21,ch0+1
 800 0014 EA01      		movw r28,r20
 801 0016 9C81      		ldd r25,Y+4
 802 0018 1496      		adiw r26,4
 803 001a 8C91      		ld r24,X
 804 001c 1497      		sbiw r26,4
 805 001e 9817      		cp r25,r24
 806 0020 00F4      		brsh .L54
 807               	/* epilogue start */
 610:../../../os/rt/src/chschd.c ****     __sch_reschedule_behind();
 611:../../../os/rt/src/chschd.c ****   }
 612:../../../os/rt/src/chschd.c **** }
 808               		.loc 1 612 0
 809 0022 DF91      		pop r29
 810 0024 CF91      		pop r28
 811 0026 0895      		ret
 812               	.L54:
 813               	.LVL62:
 814               	.LBB102:
 815               	.LBB103:
 816               	.LBB104:
 817               	.LBB105:
 415:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 818               		.loc 2 415 0
 819 0028 E881      		ld r30,Y
 820 002a F981      		ldd r31,Y+1
 821 002c F093 0000 		sts ch0+1,r31
 822 0030 E093 0000 		sts ch0,r30
 416:../../../os/rt/include/chlists.h **** 
 823               		.loc 2 416 0
 824 0034 80E0      		ldi r24,lo8(ch0)
 825 0036 90E0      		ldi r25,hi8(ch0)
 826 0038 9383      		std Z+3,r25
 827 003a 8283      		std Z+2,r24
 828               	.LVL63:
 829               	.LBE105:
 830               	.LBE104:
 134:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 831               		.loc 1 134 0
 832 003c 81E0      		ldi r24,lo8(1)
 833 003e 8F87      		std Y+15,r24
 135:../../../os/rt/src/chschd.c **** 
 834               		.loc 1 135 0
 835 0040 5093 0000 		sts ch0+5+1,r21
 836 0044 4093 0000 		sts ch0+5,r20
 837               	.LVL64:
 838               	.LBB106:
 839               	.LBB107:
  77:../../../os/rt/src/chschd.c **** 
 840               		.loc 1 77 0
 841 0048 1F96      		adiw r26,15
 842 004a 1C92      		st X,__zero_reg__
 843 004c 1F97      		sbiw r26,15
  80:../../../os/rt/src/chschd.c ****                                            &tp->hdr.pqueue));
 844               		.loc 1 80 0
 845 004e 1B96      		adiw r26,11
 846 0050 ED91      		ld r30,X+
 847 0052 FC91      		ld r31,X
 848 0054 1C97      		sbiw r26,11+1
 849               	.LVL65:
 850 0056 1496      		adiw r26,4
 851 0058 2C91      		ld r18,X
 852 005a 1497      		sbiw r26,4
 853               	.L52:
 854               	.LBB108:
 855               	.LBB109:
 438:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio >= p->prio));
 856               		.loc 2 438 0
 857 005c 0190      		ld __tmp_reg__,Z+
 858 005e F081      		ld r31,Z
 859 0060 E02D      		mov r30,__tmp_reg__
 860               	.LVL66:
 439:../../../os/rt/include/chlists.h **** 
 861               		.loc 2 439 0
 862 0062 9481      		ldd r25,Z+4
 863 0064 9217      		cp r25,r18
 864 0066 00F4      		brsh .L52
 442:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 865               		.loc 2 442 0
 866 0068 1196      		adiw r26,1
 867 006a FC93      		st X,r31
 868 006c EE93      		st -X,r30
 443:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 869               		.loc 2 443 0
 870 006e 8281      		ldd r24,Z+2
 871 0070 9381      		ldd r25,Z+3
 872 0072 1396      		adiw r26,2+1
 873 0074 9C93      		st X,r25
 874 0076 8E93      		st -X,r24
 875 0078 1297      		sbiw r26,2
 444:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 876               		.loc 2 444 0
 877 007a EC01      		movw r28,r24
 878 007c B983      		std Y+1,r27
 879 007e A883      		st Y,r26
 445:../../../os/rt/include/chlists.h **** 
 880               		.loc 2 445 0
 881 0080 B383      		std Z+3,r27
 882 0082 A283      		std Z+2,r26
 883               	.LVL67:
 884               	.LBE109:
 885               	.LBE108:
 886               	.LBE107:
 887               	.LBE106:
 151:../../../os/rt/src/chschd.c **** }
 888               		.loc 1 151 0
 889 0084 BD01      		movw r22,r26
 890 0086 CA01      		movw r24,r20
 891 0088 0E94 0000 		call _port_switch
 892               	.LVL68:
 893               	/* epilogue start */
 894               	.LBE103:
 895               	.LBE102:
 896               		.loc 1 612 0
 897 008c DF91      		pop r29
 898 008e CF91      		pop r28
 899 0090 0895      		ret
 900               		.cfi_endproc
 901               	.LFE206:
 903               		.section	.text.chSchSelectFirst,"ax",@progbits
 904               	.global	chSchSelectFirst
 906               	chSchSelectFirst:
 907               	.LFB207:
 613:../../../os/rt/src/chschd.c **** 
 614:../../../os/rt/src/chschd.c **** /**
 615:../../../os/rt/src/chschd.c ****  * @brief   Makes runnable the fist thread in the ready list, does not
 616:../../../os/rt/src/chschd.c ****  *          reschedule internally.
 617:../../../os/rt/src/chschd.c ****  * @details The current thread is positioned in the ready list ahead of all
 618:../../../os/rt/src/chschd.c ****  *          threads having the same priority.
 619:../../../os/rt/src/chschd.c ****  * @note    Not a user function, it is meant to be invoked by the scheduler
 620:../../../os/rt/src/chschd.c ****  *          itself.
 621:../../../os/rt/src/chschd.c ****  *
 622:../../../os/rt/src/chschd.c ****  * @return              The pointer to the thread being switched in.
 623:../../../os/rt/src/chschd.c ****  *
 624:../../../os/rt/src/chschd.c ****  * @special
 625:../../../os/rt/src/chschd.c ****  */
 626:../../../os/rt/src/chschd.c **** thread_t *chSchSelectFirst(void) {
 908               		.loc 1 626 0
 909               		.cfi_startproc
 910 0000 CF93      		push r28
 911               	.LCFI19:
 912               		.cfi_def_cfa_offset 3
 913               		.cfi_offset 28, -2
 914 0002 DF93      		push r29
 915               	.LCFI20:
 916               		.cfi_def_cfa_offset 4
 917               		.cfi_offset 29, -3
 918               	/* prologue: function */
 919               	/* frame size = 0 */
 920               	/* stack size = 2 */
 921               	.L__stack_usage = 2
 922               	.LVL69:
 627:../../../os/rt/src/chschd.c ****   os_instance_t *oip = currcore;
 628:../../../os/rt/src/chschd.c ****   thread_t *otp = __instance_get_currthread(oip);
 923               		.loc 1 628 0
 924 0004 A091 0000 		lds r26,ch0+5
 925 0008 B091 0000 		lds r27,ch0+5+1
 926               	.LVL70:
 927               	.LBB110:
 928               	.LBB111:
 413:../../../os/rt/include/chlists.h **** 
 929               		.loc 2 413 0
 930 000c 4091 0000 		lds r20,ch0
 931 0010 5091 0000 		lds r21,ch0+1
 932               	.LVL71:
 415:../../../os/rt/include/chlists.h ****   pqp->next->prev = pqp;
 933               		.loc 2 415 0
 934 0014 EA01      		movw r28,r20
 935 0016 E881      		ld r30,Y
 936 0018 F981      		ldd r31,Y+1
 937 001a F093 0000 		sts ch0+1,r31
 938 001e E093 0000 		sts ch0,r30
 416:../../../os/rt/include/chlists.h **** 
 939               		.loc 2 416 0
 940 0022 80E0      		ldi r24,lo8(ch0)
 941 0024 90E0      		ldi r25,hi8(ch0)
 942 0026 9383      		std Z+3,r25
 943 0028 8283      		std Z+2,r24
 944               	.LVL72:
 945               	.LBE111:
 946               	.LBE110:
 629:../../../os/rt/src/chschd.c ****   thread_t *ntp;
 630:../../../os/rt/src/chschd.c **** 
 631:../../../os/rt/src/chschd.c ****   /* Picks the first thread from the ready queue and makes it current.*/
 632:../../../os/rt/src/chschd.c ****   ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
 633:../../../os/rt/src/chschd.c ****   ntp->state = CH_STATE_CURRENT;
 947               		.loc 1 633 0
 948 002a 81E0      		ldi r24,lo8(1)
 949 002c 8F87      		std Y+15,r24
 634:../../../os/rt/src/chschd.c ****   __instance_set_currthread(oip, ntp);
 950               		.loc 1 634 0
 951 002e 5093 0000 		sts ch0+5+1,r21
 952 0032 4093 0000 		sts ch0+5,r20
 953               	.LVL73:
 954               	.LBB112:
 955               	.LBB113:
 110:../../../os/rt/src/chschd.c **** 
 956               		.loc 1 110 0
 957 0036 1F96      		adiw r26,15
 958 0038 1C92      		st X,__zero_reg__
 959 003a 1F97      		sbiw r26,15
 113:../../../os/rt/src/chschd.c ****                                           &tp->hdr.pqueue));
 960               		.loc 1 113 0
 961 003c 1B96      		adiw r26,11
 962 003e ED91      		ld r30,X+
 963 0040 FC91      		ld r31,X
 964 0042 1C97      		sbiw r26,11+1
 965               	.LVL74:
 966 0044 1496      		adiw r26,4
 967 0046 2C91      		ld r18,X
 968 0048 1497      		sbiw r26,4
 969               	.L56:
 970               	.LBB114:
 971               	.LBB115:
 467:../../../os/rt/include/chlists.h ****   } while (unlikely(pqp->prio > p->prio));
 972               		.loc 2 467 0
 973 004a 0190      		ld __tmp_reg__,Z+
 974 004c F081      		ld r31,Z
 975 004e E02D      		mov r30,__tmp_reg__
 976               	.LVL75:
 468:../../../os/rt/include/chlists.h **** 
 977               		.loc 2 468 0
 978 0050 9481      		ldd r25,Z+4
 979 0052 2917      		cp r18,r25
 980 0054 00F0      		brlo .L56
 471:../../../os/rt/include/chlists.h ****   p->prev       = pqp->prev;
 981               		.loc 2 471 0
 982 0056 1196      		adiw r26,1
 983 0058 FC93      		st X,r31
 984 005a EE93      		st -X,r30
 472:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 985               		.loc 2 472 0
 986 005c 8281      		ldd r24,Z+2
 987 005e 9381      		ldd r25,Z+3
 988 0060 1396      		adiw r26,2+1
 989 0062 9C93      		st X,r25
 990 0064 8E93      		st -X,r24
 991 0066 1297      		sbiw r26,2
 473:../../../os/rt/include/chlists.h ****   pqp->prev     = p;
 992               		.loc 2 473 0
 993 0068 EC01      		movw r28,r24
 994 006a B983      		std Y+1,r27
 995 006c A883      		st Y,r26
 996               		.loc 2 474 0
 997 006e B383      		std Z+3,r27
 998 0070 A283      		std Z+2,r26
 999               	.LVL76:
 1000               	.LBE115:
 1001               	.LBE114:
 1002               	.LBE113:
 1003               	.LBE112:
 635:../../../os/rt/src/chschd.c **** 
 636:../../../os/rt/src/chschd.c ****   /* Handling idle-leave hook.*/
 637:../../../os/rt/src/chschd.c ****   if (otp->hdr.pqueue.prio == IDLEPRIO) {
 638:../../../os/rt/src/chschd.c ****     CH_CFG_IDLE_LEAVE_HOOK();
 639:../../../os/rt/src/chschd.c ****   }
 640:../../../os/rt/src/chschd.c **** 
 641:../../../os/rt/src/chschd.c ****   /* Placing in ready list ahead of peers.*/
 642:../../../os/rt/src/chschd.c ****   (void) __sch_ready_ahead(otp);
 643:../../../os/rt/src/chschd.c **** 
 644:../../../os/rt/src/chschd.c ****   return ntp;
 645:../../../os/rt/src/chschd.c **** }
 1004               		.loc 1 645 0
 1005 0072 CA01      		movw r24,r20
 1006               	/* epilogue start */
 1007 0074 DF91      		pop r29
 1008 0076 CF91      		pop r28
 1009 0078 0895      		ret
 1010               		.cfi_endproc
 1011               	.LFE207:
 1013               		.text
 1014               	.Letext0:
 1015               		.file 4 "/usr/lib/avr/include/stdint.h"
 1016               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1017               		.file 6 "../../../os/rt/include/chearly.h"
 1018               		.file 7 "../../../os/rt/include/chobjects.h"
 1019               		.file 8 "../../../os/rt/include/chrfcu.h"
 1020               		.file 9 "../../../os/rt/include/chdebug.h"
 1021               		.file 10 "../../../os/rt/include/chtime.h"
 1022               		.file 11 "../../../os/common/ports/AVR/chcore.h"
 1023               		.file 12 "../../../os/rt/include/chmtx.h"
 1024               		.file 13 "../../../os/rt/include/chvt.h"
 1025               		.file 14 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chschd.c
     /tmp/ccnXK319.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccnXK319.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccnXK319.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccnXK319.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccnXK319.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccnXK319.s:12     .text.__sch_wakeup:0000000000000000 __sch_wakeup
     /tmp/ccnXK319.s:168    .text.chSchReadyI:0000000000000000 chSchReadyI
     /tmp/ccnXK319.s:249    .text.chSchGoSleepS:0000000000000000 chSchGoSleepS
     /tmp/ccnXK319.s:318    .text.chSchGoSleepTimeoutS:0000000000000000 chSchGoSleepTimeoutS
     /tmp/ccnXK319.s:427    .text.chSchWakeupS:0000000000000000 chSchWakeupS
     /tmp/ccnXK319.s:582    .text.chSchIsPreemptionRequired:0000000000000000 chSchIsPreemptionRequired
     /tmp/ccnXK319.s:614    .text.chSchDoPreemption:0000000000000000 chSchDoPreemption
     /tmp/ccnXK319.s:614    .text.chSchDoPreemption:0000000000000000 __sch_reschedule_ahead
     /tmp/ccnXK319.s:729    .text.chSchPreemption:0000000000000000 chSchPreemption
     /tmp/ccnXK319.s:761    .text.chSchRescheduleS:0000000000000000 chSchRescheduleS
     /tmp/ccnXK319.s:775    .text.chSchDoYieldS:0000000000000000 chSchDoYieldS
     /tmp/ccnXK319.s:906    .text.chSchSelectFirst:0000000000000000 chSchSelectFirst

UNDEFINED SYMBOLS
ch0
_port_switch
chVTDoSetI
chVTDoResetI
