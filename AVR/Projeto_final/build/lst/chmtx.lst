   1               		.file	"chmtx.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMtxObjectInit,"ax",@progbits
  11               	.global	chMtxObjectInit
  13               	chMtxObjectInit:
  14               	.LFB193:
  15               		.file 1 "../../../os/rt/src/chmtx.c"
   1:../../../os/rt/src/chmtx.c **** /*
   2:../../../os/rt/src/chmtx.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chmtx.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chmtx.c **** 
   5:../../../os/rt/src/chmtx.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chmtx.c **** 
   7:../../../os/rt/src/chmtx.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chmtx.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chmtx.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chmtx.c **** 
  11:../../../os/rt/src/chmtx.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chmtx.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chmtx.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chmtx.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chmtx.c **** 
  16:../../../os/rt/src/chmtx.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chmtx.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chmtx.c **** */
  19:../../../os/rt/src/chmtx.c **** 
  20:../../../os/rt/src/chmtx.c **** /**
  21:../../../os/rt/src/chmtx.c ****  * @file    rt/src/chmtx.c
  22:../../../os/rt/src/chmtx.c ****  * @brief   Mutexes code.
  23:../../../os/rt/src/chmtx.c ****  *
  24:../../../os/rt/src/chmtx.c ****  * @addtogroup mutexes
  25:../../../os/rt/src/chmtx.c ****  * @details Mutexes related APIs and services.
  26:../../../os/rt/src/chmtx.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chmtx.c ****  *          A mutex is a threads synchronization object that can be in two
  28:../../../os/rt/src/chmtx.c ****  *          distinct states:
  29:../../../os/rt/src/chmtx.c ****  *          - Not owned (unlocked).
  30:../../../os/rt/src/chmtx.c ****  *          - Owned by a thread (locked).
  31:../../../os/rt/src/chmtx.c ****  *          .
  32:../../../os/rt/src/chmtx.c ****  *          Operations defined for mutexes:
  33:../../../os/rt/src/chmtx.c ****  *          - <b>Lock</b>: The mutex is checked, if the mutex is not owned by
  34:../../../os/rt/src/chmtx.c ****  *            some other thread then it is associated to the locking thread
  35:../../../os/rt/src/chmtx.c ****  *            else the thread is queued on the mutex in a list ordered by
  36:../../../os/rt/src/chmtx.c ****  *            priority.
  37:../../../os/rt/src/chmtx.c ****  *          - <b>Unlock</b>: The mutex is released by the owner and the highest
  38:../../../os/rt/src/chmtx.c ****  *            priority thread waiting in the queue, if any, is resumed and made
  39:../../../os/rt/src/chmtx.c ****  *            owner of the mutex.
  40:../../../os/rt/src/chmtx.c ****  *          .
  41:../../../os/rt/src/chmtx.c ****  *          <h2>Constraints</h2>
  42:../../../os/rt/src/chmtx.c ****  *          In ChibiOS/RT the Unlock operations must always be performed
  43:../../../os/rt/src/chmtx.c ****  *          in lock-reverse order. This restriction both improves the
  44:../../../os/rt/src/chmtx.c ****  *          performance and is required for an efficient implementation
  45:../../../os/rt/src/chmtx.c ****  *          of the priority inheritance mechanism.<br>
  46:../../../os/rt/src/chmtx.c ****  *          Operating under this restriction also ensures that deadlocks
  47:../../../os/rt/src/chmtx.c ****  *          are no possible.
  48:../../../os/rt/src/chmtx.c ****  *
  49:../../../os/rt/src/chmtx.c ****  *          <h2>Recursive mode</h2>
  50:../../../os/rt/src/chmtx.c ****  *          By default mutexes are not recursive, this mean that it is not
  51:../../../os/rt/src/chmtx.c ****  *          possible to take a mutex already owned by the same thread.
  52:../../../os/rt/src/chmtx.c ****  *          It is possible to enable the recursive behavior by enabling the
  53:../../../os/rt/src/chmtx.c ****  *          option @p CH_CFG_USE_MUTEXES_RECURSIVE.
  54:../../../os/rt/src/chmtx.c ****  *
  55:../../../os/rt/src/chmtx.c ****  *          <h2>The priority inversion problem</h2>
  56:../../../os/rt/src/chmtx.c ****  *          The mutexes in ChibiOS/RT implements the <b>full</b> priority
  57:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism in order handle the priority inversion
  58:../../../os/rt/src/chmtx.c ****  *          problem.<br>
  59:../../../os/rt/src/chmtx.c ****  *          When a thread is queued on a mutex, any thread, directly or
  60:../../../os/rt/src/chmtx.c ****  *          indirectly, holding the mutex gains the same priority of the
  61:../../../os/rt/src/chmtx.c ****  *          waiting thread (if their priority was not already equal or higher).
  62:../../../os/rt/src/chmtx.c ****  *          The mechanism works with any number of nested mutexes and any
  63:../../../os/rt/src/chmtx.c ****  *          number of involved threads. The algorithm complexity (worst case)
  64:../../../os/rt/src/chmtx.c ****  *          is N with N equal to the number of nested mutexes.
  65:../../../os/rt/src/chmtx.c ****  * @pre     In order to use the mutex APIs the @p CH_CFG_USE_MUTEXES option
  66:../../../os/rt/src/chmtx.c ****  *          must be enabled in @p chconf.h.
  67:../../../os/rt/src/chmtx.c ****  * @post    Enabling mutexes requires 5-12 (depending on the architecture)
  68:../../../os/rt/src/chmtx.c ****  *          extra bytes in the @p thread_t structure.
  69:../../../os/rt/src/chmtx.c ****  * @{
  70:../../../os/rt/src/chmtx.c ****  */
  71:../../../os/rt/src/chmtx.c **** 
  72:../../../os/rt/src/chmtx.c **** #include <string.h>
  73:../../../os/rt/src/chmtx.c **** 
  74:../../../os/rt/src/chmtx.c **** #include "ch.h"
  75:../../../os/rt/src/chmtx.c **** 
  76:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  77:../../../os/rt/src/chmtx.c **** 
  78:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  79:../../../os/rt/src/chmtx.c **** /* Module exported variables.                                                */
  80:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  81:../../../os/rt/src/chmtx.c **** 
  82:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  83:../../../os/rt/src/chmtx.c **** /* Module local types.                                                       */
  84:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  85:../../../os/rt/src/chmtx.c **** 
  86:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  87:../../../os/rt/src/chmtx.c **** /* Module local variables.                                                   */
  88:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  89:../../../os/rt/src/chmtx.c **** 
  90:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  91:../../../os/rt/src/chmtx.c **** /* Module local functions.                                                   */
  92:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  93:../../../os/rt/src/chmtx.c **** 
  94:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  95:../../../os/rt/src/chmtx.c **** /* Module exported functions.                                                */
  96:../../../os/rt/src/chmtx.c **** /*===========================================================================*/
  97:../../../os/rt/src/chmtx.c **** 
  98:../../../os/rt/src/chmtx.c **** /**
  99:../../../os/rt/src/chmtx.c ****  * @brief   Initializes s @p mutex_t object.
 100:../../../os/rt/src/chmtx.c ****  *
 101:../../../os/rt/src/chmtx.c ****  * @param[out] mp       pointer to a @p mutex_t object
 102:../../../os/rt/src/chmtx.c ****  *
 103:../../../os/rt/src/chmtx.c ****  * @init
 104:../../../os/rt/src/chmtx.c ****  */
 105:../../../os/rt/src/chmtx.c **** void chMtxObjectInit(mutex_t *mp) {
  16               		.loc 1 105 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23 0000 FC01      		movw r30,r24
  24               	.LVL1:
  25               	.LBB99:
  26               	.LBB100:
  27               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
  28               		.loc 2 284 0
  29 0002 9183      		std Z+1,r25
  30 0004 8083      		st Z,r24
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
  31               		.loc 2 285 0
  32 0006 9383      		std Z+3,r25
  33 0008 8283      		std Z+2,r24
  34               	.LVL2:
  35               	.LBE100:
  36               	.LBE99:
 106:../../../os/rt/src/chmtx.c **** 
 107:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 108:../../../os/rt/src/chmtx.c **** 
 109:../../../os/rt/src/chmtx.c ****   ch_queue_init(&mp->queue);
 110:../../../os/rt/src/chmtx.c ****   mp->owner = NULL;
  37               		.loc 1 110 0
  38 000a 1582      		std Z+5,__zero_reg__
  39 000c 1482      		std Z+4,__zero_reg__
  40 000e 0895      		ret
  41               		.cfi_endproc
  42               	.LFE193:
  44               		.section	.text.chMtxObjectDispose,"ax",@progbits
  45               	.global	chMtxObjectDispose
  47               	chMtxObjectDispose:
  48               	.LFB194:
 111:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 112:../../../os/rt/src/chmtx.c ****   mp->cnt = (cnt_t)0;
 113:../../../os/rt/src/chmtx.c **** #endif
 114:../../../os/rt/src/chmtx.c **** }
 115:../../../os/rt/src/chmtx.c **** 
 116:../../../os/rt/src/chmtx.c **** /**
 117:../../../os/rt/src/chmtx.c ****  * @brief   Disposes a mutex.
 118:../../../os/rt/src/chmtx.c ****  * @note    Objects disposing does not involve freeing memory but just
 119:../../../os/rt/src/chmtx.c ****  *          performing checks that make sure that the object is in a
 120:../../../os/rt/src/chmtx.c ****  *          state compatible with operations stop.
 121:../../../os/rt/src/chmtx.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 122:../../../os/rt/src/chmtx.c ****  *          the object is also cleared, attempts to use the object would likely
 123:../../../os/rt/src/chmtx.c ****  *          result in a clean memory access violation because dereferencing
 124:../../../os/rt/src/chmtx.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 125:../../../os/rt/src/chmtx.c ****  *          pointers.
 126:../../../os/rt/src/chmtx.c ****  *
 127:../../../os/rt/src/chmtx.c ****  * @param[in] mp       pointer to a @p mutex_t object
 128:../../../os/rt/src/chmtx.c ****  *
 129:../../../os/rt/src/chmtx.c ****  * @dispose
 130:../../../os/rt/src/chmtx.c ****  */
 131:../../../os/rt/src/chmtx.c **** void chMtxObjectDispose(mutex_t *mp) {
  49               		.loc 1 131 0
  50               		.cfi_startproc
  51               	.LVL3:
  52               	/* prologue: function */
  53               	/* frame size = 0 */
  54               	/* stack size = 0 */
  55               	.L__stack_usage = 0
  56 0000 0895      		ret
  57               		.cfi_endproc
  58               	.LFE194:
  60               		.section	.text.chMtxLockS,"ax",@progbits
  61               	.global	chMtxLockS
  63               	chMtxLockS:
  64               	.LFB196:
 132:../../../os/rt/src/chmtx.c **** 
 133:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 134:../../../os/rt/src/chmtx.c ****   chDbgAssert(ch_queue_isempty(&mp->queue) && (mp->owner == NULL),
 135:../../../os/rt/src/chmtx.c ****               "object in use");
 136:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 137:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt == (cnt_t)0, "object in use");
 138:../../../os/rt/src/chmtx.c **** #endif
 139:../../../os/rt/src/chmtx.c **** 
 140:../../../os/rt/src/chmtx.c **** #if CH_CFG_HARDENING_LEVEL > 0
 141:../../../os/rt/src/chmtx.c ****   memset((void *)mp, 0, sizeof (mutex_t));
 142:../../../os/rt/src/chmtx.c **** #endif
 143:../../../os/rt/src/chmtx.c **** }
 144:../../../os/rt/src/chmtx.c **** 
 145:../../../os/rt/src/chmtx.c **** /**
 146:../../../os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 147:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 148:../../../os/rt/src/chmtx.c ****  *          mutexes.
 149:../../../os/rt/src/chmtx.c ****  *
 150:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 151:../../../os/rt/src/chmtx.c ****  *
 152:../../../os/rt/src/chmtx.c ****  * @api
 153:../../../os/rt/src/chmtx.c ****  */
 154:../../../os/rt/src/chmtx.c **** void chMtxLock(mutex_t *mp) {
 155:../../../os/rt/src/chmtx.c **** 
 156:../../../os/rt/src/chmtx.c ****   chSysLock();
 157:../../../os/rt/src/chmtx.c ****   chMtxLockS(mp);
 158:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 159:../../../os/rt/src/chmtx.c **** }
 160:../../../os/rt/src/chmtx.c **** 
 161:../../../os/rt/src/chmtx.c **** /**
 162:../../../os/rt/src/chmtx.c ****  * @brief   Locks the specified mutex.
 163:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 164:../../../os/rt/src/chmtx.c ****  *          mutexes.
 165:../../../os/rt/src/chmtx.c ****  *
 166:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 167:../../../os/rt/src/chmtx.c ****  *
 168:../../../os/rt/src/chmtx.c ****  * @sclass
 169:../../../os/rt/src/chmtx.c ****  */
 170:../../../os/rt/src/chmtx.c **** void chMtxLockS(mutex_t *mp) {
  65               		.loc 1 170 0
  66               		.cfi_startproc
  67               	.LVL4:
  68               		.loc 1 170 0
  69 0000 0F93      		push r16
  70               	.LCFI0:
  71               		.cfi_def_cfa_offset 3
  72               		.cfi_offset 16, -2
  73 0002 1F93      		push r17
  74               	.LCFI1:
  75               		.cfi_def_cfa_offset 4
  76               		.cfi_offset 17, -3
  77 0004 CF93      		push r28
  78               	.LCFI2:
  79               		.cfi_def_cfa_offset 5
  80               		.cfi_offset 28, -4
  81 0006 DF93      		push r29
  82               	.LCFI3:
  83               		.cfi_def_cfa_offset 6
  84               		.cfi_offset 29, -5
  85               	/* prologue: function */
  86               	/* frame size = 0 */
  87               	/* stack size = 4 */
  88               	.L__stack_usage = 4
  89               	.LBB101:
  90               	.LBB102:
  91               		.file 3 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
  92               		.loc 3 375 0
  93 0008 C091 0000 		lds r28,ch0+5
  94 000c D091 0000 		lds r29,ch0+5+1
  95               	.LBE102:
  96               	.LBE101:
 171:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 172:../../../os/rt/src/chmtx.c **** 
 173:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 174:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 175:../../../os/rt/src/chmtx.c **** 
 176:../../../os/rt/src/chmtx.c ****   /* Is the mutex already locked? */
 177:../../../os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
  97               		.loc 1 177 0
  98 0010 DC01      		movw r26,r24
  99 0012 1496      		adiw r26,4
 100 0014 ED91      		ld r30,X+
 101 0016 FC91      		ld r31,X
 102 0018 1597      		sbiw r26,4+1
 103 001a 3097      		sbiw r30,0
 104 001c 01F4      		brne .+2
 105 001e 00C0      		rjmp .L4
 106 0020 8C01      		movw r16,r24
 107               	.LVL5:
 108               	.LBB103:
 178:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 179:../../../os/rt/src/chmtx.c **** 
 180:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 181:../../../os/rt/src/chmtx.c **** 
 182:../../../os/rt/src/chmtx.c ****     /* If the mutex is already owned by this thread, the counter is increased
 183:../../../os/rt/src/chmtx.c ****        and there is no need of more actions.*/
 184:../../../os/rt/src/chmtx.c ****     if (mp->owner == currtp) {
 185:../../../os/rt/src/chmtx.c ****       mp->cnt++;
 186:../../../os/rt/src/chmtx.c ****     }
 187:../../../os/rt/src/chmtx.c ****     else {
 188:../../../os/rt/src/chmtx.c **** #endif
 189:../../../os/rt/src/chmtx.c ****       /* Priority inheritance protocol; explores the thread-mutex dependencies
 190:../../../os/rt/src/chmtx.c ****          boosting the priority of all the affected threads to equal the
 191:../../../os/rt/src/chmtx.c ****          priority of the running thread requesting the mutex.*/
 192:../../../os/rt/src/chmtx.c ****       thread_t *tp = mp->owner;
 193:../../../os/rt/src/chmtx.c **** 
 194:../../../os/rt/src/chmtx.c ****       /* Does the running thread have higher priority than the mutex
 195:../../../os/rt/src/chmtx.c ****          owning thread? */
 196:../../../os/rt/src/chmtx.c ****       while (tp->hdr.pqueue.prio < currtp->hdr.pqueue.prio) {
 109               		.loc 1 196 0
 110 0022 8C81      		ldd r24,Y+4
 111               	.LVL6:
 112 0024 9481      		ldd r25,Z+4
 113 0026 9817      		cp r25,r24
 114 0028 00F4      		brsh .L6
 115               	.L21:
 197:../../../os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 198:../../../os/rt/src/chmtx.c ****         tp->hdr.pqueue.prio = currtp->hdr.pqueue.prio;
 116               		.loc 1 198 0
 117 002a 8483      		std Z+4,r24
 199:../../../os/rt/src/chmtx.c **** 
 200:../../../os/rt/src/chmtx.c ****         /* The following states need priority queues reordering.*/
 201:../../../os/rt/src/chmtx.c ****         switch (tp->state) {
 118               		.loc 1 201 0
 119 002c 8785      		ldd r24,Z+15
 120 002e 8630      		cpi r24,lo8(6)
 121 0030 01F4      		brne .+2
 122 0032 00C0      		rjmp .L7
 123 0034 8730      		cpi r24,lo8(7)
 124 0036 01F0      		breq .L8
 125 0038 8823      		tst r24
 126 003a 01F0      		breq .L28
 127               	.LVL7:
 128               	.L6:
 129               	.LBB104:
 130               	.LBB105:
 131               		.file 4 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chschd.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chschd.h **** 
   5:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chschd.h **** 
   7:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chschd.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 122:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 123:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** /**
 126:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 127:../../../os/rt/include/chschd.h ****  *
 128:../../../os/rt/include/chschd.h ****  * @notapi
 129:../../../os/rt/include/chschd.h ****  */
 130:../../../os/rt/include/chschd.h **** #define firstprio(rlp)              ((rlp)->next->prio)
 131:../../../os/rt/include/chschd.h **** 
 132:../../../os/rt/include/chschd.h **** /**
 133:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer get macro.
 134:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 135:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 136:../../../os/rt/include/chschd.h ****  */
 137:../../../os/rt/include/chschd.h **** #define __sch_get_currthread()      __instance_get_currthread(currcore)
 138:../../../os/rt/include/chschd.h **** 
 139:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 140:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 141:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 142:../../../os/rt/include/chschd.h **** 
 143:../../../os/rt/include/chschd.h **** /*
 144:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 145:../../../os/rt/include/chschd.h ****  */
 146:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 147:../../../os/rt/include/chschd.h **** extern "C" {
 148:../../../os/rt/include/chschd.h **** #endif
 149:../../../os/rt/include/chschd.h ****   void chSchObjectInit(os_instance_t *oip,
 150:../../../os/rt/include/chschd.h ****                        const os_instance_config_t *oicp);
 151:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 152:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 153:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 154:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 155:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 156:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 157:../../../os/rt/include/chschd.h ****   void chSchDoPreemption(void);
 158:../../../os/rt/include/chschd.h ****   void chSchPreemption(void);
 159:../../../os/rt/include/chschd.h ****   void chSchDoYieldS(void);
 160:../../../os/rt/include/chschd.h ****   thread_t *chSchSelectFirst(void);
 161:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 162:../../../os/rt/include/chschd.h ****   void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp);
 163:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 164:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 165:../../../os/rt/include/chschd.h **** }
 166:../../../os/rt/include/chschd.h **** #endif
 167:../../../os/rt/include/chschd.h **** 
 168:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 169:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 170:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 171:../../../os/rt/include/chschd.h **** 
 172:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 173:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 174:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 175:../../../os/rt/include/chschd.h **** static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 176:../../../os/rt/include/chschd.h **** 
 177:../../../os/rt/include/chschd.h ****   ch_queue_t *cp = qp;
 132               		.loc 4 177 0
 133 003c F801      		movw r30,r16
 134 003e 00C0      		rjmp .L19
 135               	.LVL8:
 136               	.L18:
 178:../../../os/rt/include/chschd.h ****   do {
 179:../../../os/rt/include/chschd.h ****     cp = cp->next;
 180:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 137               		.loc 4 180 0
 138 0040 2481      		ldd r18,Z+4
 139 0042 9C81      		ldd r25,Y+4
 140 0044 2917      		cp r18,r25
 141 0046 00F0      		brlo .L20
 142               	.L19:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 143               		.loc 4 179 0
 144 0048 0190      		ld __tmp_reg__,Z+
 145 004a F081      		ld r31,Z
 146 004c E02D      		mov r30,__tmp_reg__
 147               	.LVL9:
 181:../../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 148               		.loc 4 181 0
 149 004e 0E17      		cp r16,r30
 150 0050 1F07      		cpc r17,r31
 151 0052 01F4      		brne .L18
 152               	.L20:
 182:../../../os/rt/include/chschd.h ****   tp->next       = cp;
 153               		.loc 4 182 0
 154 0054 F983      		std Y+1,r31
 155 0056 E883      		st Y,r30
 183:../../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 156               		.loc 4 183 0
 157 0058 A281      		ldd r26,Z+2
 158 005a B381      		ldd r27,Z+3
 159 005c BB83      		std Y+3,r27
 160 005e AA83      		std Y+2,r26
 184:../../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 161               		.loc 4 184 0
 162 0060 CD93      		st X+,r28
 163 0062 DC93      		st X,r29
 185:../../../os/rt/include/chschd.h ****   cp->prev       = tp;
 164               		.loc 4 185 0
 165 0064 D383      		std Z+3,r29
 166 0066 C283      		std Z+2,r28
 167               	.LVL10:
 168               	.LBE105:
 169               	.LBE104:
 202:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTMTX:
 203:../../../os/rt/src/chmtx.c ****           /* Re-enqueues the mutex owner with its new priority.*/
 204:../../../os/rt/src/chmtx.c ****           ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 205:../../../os/rt/src/chmtx.c ****                              ch_queue_dequeue(&tp->hdr.queue));
 206:../../../os/rt/src/chmtx.c ****           tp = tp->u.wtmtxp->owner;
 207:../../../os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 208:../../../os/rt/src/chmtx.c ****           continue;
 209:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_CONDVARS == TRUE) ||                                        \
 210:../../../os/rt/src/chmtx.c ****     ((CH_CFG_USE_SEMAPHORES == TRUE) &&                                     \
 211:../../../os/rt/src/chmtx.c ****      (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)) ||                           \
 212:../../../os/rt/src/chmtx.c ****     ((CH_CFG_USE_MESSAGES == TRUE) &&                                       \
 213:../../../os/rt/src/chmtx.c ****      (CH_CFG_USE_MESSAGES_PRIORITY == TRUE))
 214:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_CONDVARS == TRUE
 215:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTCOND:
 216:../../../os/rt/src/chmtx.c **** #endif
 217:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_SEMAPHORES == TRUE) &&                                      \
 218:../../../os/rt/src/chmtx.c ****     (CH_CFG_USE_SEMAPHORES_PRIORITY == TRUE)
 219:../../../os/rt/src/chmtx.c ****         case CH_STATE_WTSEM:
 220:../../../os/rt/src/chmtx.c **** #endif
 221:../../../os/rt/src/chmtx.c **** #if (CH_CFG_USE_MESSAGES == TRUE) && (CH_CFG_USE_MESSAGES_PRIORITY == TRUE)
 222:../../../os/rt/src/chmtx.c ****         case CH_STATE_SNDMSGQ:
 223:../../../os/rt/src/chmtx.c **** #endif
 224:../../../os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the queue.*/
 225:../../../os/rt/src/chmtx.c ****           ch_sch_prio_insert(&tp->u.wtmtxp->queue,
 226:../../../os/rt/src/chmtx.c ****                              ch_queue_dequeue(&tp->hdr.queue));
 227:../../../os/rt/src/chmtx.c ****           break;
 228:../../../os/rt/src/chmtx.c **** #endif
 229:../../../os/rt/src/chmtx.c ****         case CH_STATE_READY:
 230:../../../os/rt/src/chmtx.c **** #if CH_DBG_ENABLE_ASSERTS == TRUE
 231:../../../os/rt/src/chmtx.c ****           /* Prevents an assertion in chSchReadyI().*/
 232:../../../os/rt/src/chmtx.c ****           tp->state = CH_STATE_CURRENT;
 233:../../../os/rt/src/chmtx.c **** #endif
 234:../../../os/rt/src/chmtx.c ****           /* Re-enqueues tp with its new priority on the ready list.*/
 235:../../../os/rt/src/chmtx.c ****           (void) chSchReadyI(threadref(ch_queue_dequeue(&tp->hdr.queue)));
 236:../../../os/rt/src/chmtx.c ****           break;
 237:../../../os/rt/src/chmtx.c ****         default:
 238:../../../os/rt/src/chmtx.c ****           /* Nothing to do for other states.*/
 239:../../../os/rt/src/chmtx.c ****           break;
 240:../../../os/rt/src/chmtx.c ****         }
 241:../../../os/rt/src/chmtx.c ****         break;
 242:../../../os/rt/src/chmtx.c ****       }
 243:../../../os/rt/src/chmtx.c **** 
 244:../../../os/rt/src/chmtx.c ****       /* Sleep on the mutex.*/
 245:../../../os/rt/src/chmtx.c ****       ch_sch_prio_insert(&mp->queue, &currtp->hdr.queue);
 246:../../../os/rt/src/chmtx.c ****       currtp->u.wtmtxp = mp;
 170               		.loc 1 246 0
 171 0068 1B8B      		std Y+19,r17
 172 006a 0A8B      		std Y+18,r16
 247:../../../os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 173               		.loc 1 247 0
 174 006c 86E0      		ldi r24,lo8(6)
 175               	/* epilogue start */
 176               	.LBE103:
 248:../../../os/rt/src/chmtx.c **** 
 249:../../../os/rt/src/chmtx.c ****       /* It is assumed that the thread performing the unlock operation assigns
 250:../../../os/rt/src/chmtx.c ****          the mutex to this thread.*/
 251:../../../os/rt/src/chmtx.c ****       chDbgAssert(mp->owner == currtp, "not owner");
 252:../../../os/rt/src/chmtx.c ****       chDbgAssert(currtp->mtxlist == mp, "not owned");
 253:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 254:../../../os/rt/src/chmtx.c ****       chDbgAssert(mp->cnt == (cnt_t)1, "counter is not one");
 255:../../../os/rt/src/chmtx.c ****     }
 256:../../../os/rt/src/chmtx.c **** #endif
 257:../../../os/rt/src/chmtx.c ****   }
 258:../../../os/rt/src/chmtx.c ****   else {
 259:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 260:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 261:../../../os/rt/src/chmtx.c **** 
 262:../../../os/rt/src/chmtx.c ****     mp->cnt++;
 263:../../../os/rt/src/chmtx.c **** #endif
 264:../../../os/rt/src/chmtx.c ****     /* It was not owned, inserted in the owned mutexes list.*/
 265:../../../os/rt/src/chmtx.c ****     mp->owner = currtp;
 266:../../../os/rt/src/chmtx.c ****     mp->next = currtp->mtxlist;
 267:../../../os/rt/src/chmtx.c ****     currtp->mtxlist = mp;
 268:../../../os/rt/src/chmtx.c ****   }
 269:../../../os/rt/src/chmtx.c **** }
 177               		.loc 1 269 0
 178 006e DF91      		pop r29
 179 0070 CF91      		pop r28
 180 0072 1F91      		pop r17
 181 0074 0F91      		pop r16
 182               	.LVL11:
 183               	.LBB116:
 247:../../../os/rt/src/chmtx.c ****       chSchGoSleepS(CH_STATE_WTMTX);
 184               		.loc 1 247 0
 185 0076 0C94 0000 		jmp chSchGoSleepS
 186               	.LVL12:
 187               	.L28:
 188               	.LBB106:
 189               	.LBB107:
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 345:../../../os/rt/include/chlists.h **** 
 346:../../../os/rt/include/chlists.h ****   return p;
 347:../../../os/rt/include/chlists.h **** }
 348:../../../os/rt/include/chlists.h **** 
 349:../../../os/rt/include/chlists.h **** /**
 350:../../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 351:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 352:../../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 353:../../../os/rt/include/chlists.h ****  *
 354:../../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 355:../../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 356:../../../os/rt/include/chlists.h ****  *
 357:../../../os/rt/include/chlists.h ****  * @notapi
 358:../../../os/rt/include/chlists.h ****  */
 359:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 360:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 361:../../../os/rt/include/chlists.h **** 
 362:../../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 363:../../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 364:../../../os/rt/include/chlists.h **** 
 365:../../../os/rt/include/chlists.h ****   return p;
 366:../../../os/rt/include/chlists.h **** }
 367:../../../os/rt/include/chlists.h **** 
 368:../../../os/rt/include/chlists.h **** /**
 369:../../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 370:../../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 371:../../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 372:../../../os/rt/include/chlists.h ****  *
 373:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 374:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 375:../../../os/rt/include/chlists.h ****  *
 376:../../../os/rt/include/chlists.h ****  * @notapi
 377:../../../os/rt/include/chlists.h ****  */
 378:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 379:../../../os/rt/include/chlists.h **** 
 380:../../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 190               		.loc 2 380 0
 191 007a 2281      		ldd r18,Z+2
 192 007c 3381      		ldd r19,Z+3
 193 007e 8081      		ld r24,Z
 194 0080 9181      		ldd r25,Z+1
 195 0082 D901      		movw r26,r18
 196 0084 8D93      		st X+,r24
 197 0086 9C93      		st X,r25
 381:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 198               		.loc 2 381 0
 199 0088 8081      		ld r24,Z
 200 008a 9181      		ldd r25,Z+1
 201 008c DC01      		movw r26,r24
 202 008e 1396      		adiw r26,2+1
 203 0090 3C93      		st X,r19
 204 0092 2E93      		st -X,r18
 205 0094 1297      		sbiw r26,2
 206               	.LVL13:
 207               	.LBE107:
 208               	.LBE106:
 235:../../../os/rt/src/chmtx.c ****           break;
 209               		.loc 1 235 0
 210 0096 CF01      		movw r24,r30
 211 0098 0E94 0000 		call chSchReadyI
 212               	.LVL14:
 236:../../../os/rt/src/chmtx.c ****         default:
 213               		.loc 1 236 0
 214 009c 00C0      		rjmp .L6
 215               	.LVL15:
 216               	.L8:
 217               	.LBB108:
 218               	.LBB109:
 380:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 219               		.loc 2 380 0
 220 009e 2281      		ldd r18,Z+2
 221 00a0 3381      		ldd r19,Z+3
 222 00a2 8081      		ld r24,Z
 223 00a4 9181      		ldd r25,Z+1
 224 00a6 D901      		movw r26,r18
 225 00a8 8D93      		st X+,r24
 226 00aa 9C93      		st X,r25
 227               		.loc 2 381 0
 228 00ac 8081      		ld r24,Z
 229 00ae 9181      		ldd r25,Z+1
 230 00b0 DC01      		movw r26,r24
 231 00b2 1396      		adiw r26,2+1
 232 00b4 3C93      		st X,r19
 233 00b6 2E93      		st -X,r18
 234 00b8 1297      		sbiw r26,2
 235               	.LVL16:
 236               	.LBE109:
 237               	.LBE108:
 225:../../../os/rt/src/chmtx.c ****                              ch_queue_dequeue(&tp->hdr.queue));
 238               		.loc 1 225 0
 239 00ba 2289      		ldd r18,Z+18
 240 00bc 3389      		ldd r19,Z+19
 241               	.LVL17:
 242               	.LBB110:
 243               	.LBB111:
 177:../../../os/rt/include/chschd.h ****   do {
 244               		.loc 4 177 0
 245 00be A901      		movw r20,r18
 246 00c0 00C0      		rjmp .L16
 247               	.LVL18:
 248               	.L15:
 180:../../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 249               		.loc 4 180 0
 250 00c2 DA01      		movw r26,r20
 251 00c4 1496      		adiw r26,4
 252 00c6 9C91      		ld r25,X
 253 00c8 8481      		ldd r24,Z+4
 254 00ca 9817      		cp r25,r24
 255 00cc 00F0      		brlo .L17
 256               	.LVL19:
 257               	.L16:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 258               		.loc 4 179 0
 259 00ce DA01      		movw r26,r20
 260 00d0 4D91      		ld r20,X+
 261 00d2 5C91      		ld r21,X
 262               	.LVL20:
 181:../../../os/rt/include/chschd.h ****   tp->next       = cp;
 263               		.loc 4 181 0
 264 00d4 2417      		cp r18,r20
 265 00d6 3507      		cpc r19,r21
 266 00d8 01F4      		brne .L15
 267               	.L17:
 182:../../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 268               		.loc 4 182 0
 269 00da 5183      		std Z+1,r21
 270 00dc 4083      		st Z,r20
 183:../../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 271               		.loc 4 183 0
 272 00de DA01      		movw r26,r20
 273 00e0 1296      		adiw r26,2
 274 00e2 8D91      		ld r24,X+
 275 00e4 9C91      		ld r25,X
 276 00e6 1397      		sbiw r26,2+1
 277 00e8 9383      		std Z+3,r25
 278 00ea 8283      		std Z+2,r24
 184:../../../os/rt/include/chschd.h ****   cp->prev       = tp;
 279               		.loc 4 184 0
 280 00ec DC01      		movw r26,r24
 281 00ee ED93      		st X+,r30
 282 00f0 FC93      		st X,r31
 283               		.loc 4 185 0
 284 00f2 DA01      		movw r26,r20
 285 00f4 1396      		adiw r26,2+1
 286 00f6 FC93      		st X,r31
 287 00f8 EE93      		st -X,r30
 288 00fa 1297      		sbiw r26,2
 289 00fc 00C0      		rjmp .L6
 290               	.LVL21:
 291               	.L7:
 292               	.LBE111:
 293               	.LBE110:
 294               	.LBB112:
 295               	.LBB113:
 380:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 296               		.loc 2 380 0
 297 00fe 2281      		ldd r18,Z+2
 298 0100 3381      		ldd r19,Z+3
 299 0102 8081      		ld r24,Z
 300 0104 9181      		ldd r25,Z+1
 301 0106 D901      		movw r26,r18
 302 0108 8D93      		st X+,r24
 303 010a 9C93      		st X,r25
 304               		.loc 2 381 0
 305 010c 8081      		ld r24,Z
 306 010e 9181      		ldd r25,Z+1
 307 0110 DC01      		movw r26,r24
 308 0112 1396      		adiw r26,2+1
 309 0114 3C93      		st X,r19
 310 0116 2E93      		st -X,r18
 311 0118 1297      		sbiw r26,2
 312               	.LVL22:
 313               	.LBE113:
 314               	.LBE112:
 204:../../../os/rt/src/chmtx.c ****                              ch_queue_dequeue(&tp->hdr.queue));
 315               		.loc 1 204 0
 316 011a 2289      		ldd r18,Z+18
 317 011c 3389      		ldd r19,Z+19
 318               	.LVL23:
 319               	.LBB114:
 320               	.LBB115:
 177:../../../os/rt/include/chschd.h ****   do {
 321               		.loc 4 177 0
 322 011e A901      		movw r20,r18
 323 0120 00C0      		rjmp .L13
 324               	.LVL24:
 325               	.L10:
 180:../../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 326               		.loc 4 180 0
 327 0122 DA01      		movw r26,r20
 328 0124 1496      		adiw r26,4
 329 0126 9C91      		ld r25,X
 330 0128 8481      		ldd r24,Z+4
 331 012a 9817      		cp r25,r24
 332 012c 00F0      		brlo .L14
 333               	.LVL25:
 334               	.L13:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 335               		.loc 4 179 0
 336 012e DA01      		movw r26,r20
 337 0130 4D91      		ld r20,X+
 338 0132 5C91      		ld r21,X
 339               	.LVL26:
 181:../../../os/rt/include/chschd.h ****   tp->next       = cp;
 340               		.loc 4 181 0
 341 0134 2417      		cp r18,r20
 342 0136 3507      		cpc r19,r21
 343 0138 01F4      		brne .L10
 344               	.L14:
 182:../../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 345               		.loc 4 182 0
 346 013a 5183      		std Z+1,r21
 347 013c 4083      		st Z,r20
 183:../../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 348               		.loc 4 183 0
 349 013e DA01      		movw r26,r20
 350 0140 1296      		adiw r26,2
 351 0142 8D91      		ld r24,X+
 352 0144 9C91      		ld r25,X
 353 0146 1397      		sbiw r26,2+1
 354 0148 9383      		std Z+3,r25
 355 014a 8283      		std Z+2,r24
 184:../../../os/rt/include/chschd.h ****   cp->prev       = tp;
 356               		.loc 4 184 0
 357 014c DC01      		movw r26,r24
 358 014e ED93      		st X+,r30
 359 0150 FC93      		st X,r31
 360               		.loc 4 185 0
 361 0152 DA01      		movw r26,r20
 362 0154 1396      		adiw r26,2+1
 363 0156 FC93      		st X,r31
 364 0158 EE93      		st -X,r30
 365 015a 1297      		sbiw r26,2
 366               	.LVL27:
 367               	.LBE115:
 368               	.LBE114:
 206:../../../os/rt/src/chmtx.c ****           /*lint -e{9042} [16.1] Continues the while.*/
 369               		.loc 1 206 0
 370 015c 0288      		ldd __tmp_reg__,Z+18
 371 015e F389      		ldd r31,Z+19
 372 0160 E02D      		mov r30,__tmp_reg__
 373               	.LVL28:
 374 0162 0480      		ldd __tmp_reg__,Z+4
 375 0164 F581      		ldd r31,Z+5
 376 0166 E02D      		mov r30,__tmp_reg__
 377               	.LVL29:
 196:../../../os/rt/src/chmtx.c ****         /* Make priority of thread tp match the running thread's priority.*/
 378               		.loc 1 196 0
 379 0168 8C81      		ldd r24,Y+4
 380 016a 9481      		ldd r25,Z+4
 381 016c 9817      		cp r25,r24
 382 016e 00F4      		brsh .+2
 383 0170 00C0      		rjmp .L21
 384 0172 00C0      		rjmp .L6
 385               	.LVL30:
 386               	.L4:
 387               	.LBE116:
 265:../../../os/rt/src/chmtx.c ****     mp->next = currtp->mtxlist;
 388               		.loc 1 265 0
 389 0174 FC01      		movw r30,r24
 390 0176 D583      		std Z+5,r29
 391 0178 C483      		std Z+4,r28
 266:../../../os/rt/src/chmtx.c ****     currtp->mtxlist = mp;
 392               		.loc 1 266 0
 393 017a 2B8D      		ldd r18,Y+27
 394 017c 3C8D      		ldd r19,Y+28
 395 017e 3783      		std Z+7,r19
 396 0180 2683      		std Z+6,r18
 267:../../../os/rt/src/chmtx.c ****   }
 397               		.loc 1 267 0
 398 0182 9C8F      		std Y+28,r25
 399 0184 8B8F      		std Y+27,r24
 400               	/* epilogue start */
 401               		.loc 1 269 0
 402 0186 DF91      		pop r29
 403 0188 CF91      		pop r28
 404 018a 1F91      		pop r17
 405 018c 0F91      		pop r16
 406 018e 0895      		ret
 407               		.cfi_endproc
 408               	.LFE196:
 410               		.section	.text.chMtxLock,"ax",@progbits
 411               	.global	chMtxLock
 413               	chMtxLock:
 414               	.LFB195:
 154:../../../os/rt/src/chmtx.c **** 
 415               		.loc 1 154 0
 416               		.cfi_startproc
 417               	.LVL31:
 418               	/* prologue: function */
 419               	/* frame size = 0 */
 420               	/* stack size = 0 */
 421               	.L__stack_usage = 0
 422               	.LBB117:
 423               	.LBB118:
 424               	.LBB119:
 425               		.file 5 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 426               		.loc 5 430 0
 427               	/* #APP */
 428               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 429 0000 F894      		cli
 430               	 ;  0 "" 2
 431               	/* #NOAPP */
 432               	.LBE119:
 433               	.LBE118:
 434               	.LBE117:
 157:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 435               		.loc 1 157 0
 436 0002 0E94 0000 		call chMtxLockS
 437               	.LVL32:
 438               	.LBB120:
 439               	.LBB121:
 440               	.LBB122:
 441               	.LBB123:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 442               		.loc 5 440 0
 443               	/* #APP */
 444               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 445 0006 7894      		sei
 446               	 ;  0 "" 2
 447               	/* #NOAPP */
 448 0008 0895      		ret
 449               	.LBE123:
 450               	.LBE122:
 451               	.LBE121:
 452               	.LBE120:
 453               		.cfi_endproc
 454               	.LFE195:
 456               		.section	.text.chMtxTryLock,"ax",@progbits
 457               	.global	chMtxTryLock
 459               	chMtxTryLock:
 460               	.LFB197:
 270:../../../os/rt/src/chmtx.c **** 
 271:../../../os/rt/src/chmtx.c **** /**
 272:../../../os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 273:../../../os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 274:../../../os/rt/src/chmtx.c ****  *          locked by another thread then the function exits without waiting.
 275:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 276:../../../os/rt/src/chmtx.c ****  *          mutexes.
 277:../../../os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 278:../../../os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 279:../../../os/rt/src/chmtx.c ****  *          enter a sleep state.
 280:../../../os/rt/src/chmtx.c ****  *
 281:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 282:../../../os/rt/src/chmtx.c ****  * @return              The operation status.
 283:../../../os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 284:../../../os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 285:../../../os/rt/src/chmtx.c ****  *
 286:../../../os/rt/src/chmtx.c ****  * @api
 287:../../../os/rt/src/chmtx.c ****  */
 288:../../../os/rt/src/chmtx.c **** bool chMtxTryLock(mutex_t *mp) {
 461               		.loc 1 288 0
 462               		.cfi_startproc
 463               	.LVL33:
 464               	/* prologue: function */
 465               	/* frame size = 0 */
 466               	/* stack size = 0 */
 467               	.L__stack_usage = 0
 468               	.LBB124:
 469               	.LBB125:
 470               	.LBB126:
 430:../../../os/common/ports/AVR/chcore.h **** }
 471               		.loc 5 430 0
 472               	/* #APP */
 473               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 474 0000 F894      		cli
 475               	 ;  0 "" 2
 476               	.LVL34:
 477               	/* #NOAPP */
 478               	.LBE126:
 479               	.LBE125:
 480               	.LBE124:
 481               	.LBB127:
 482               	.LBB128:
 289:../../../os/rt/src/chmtx.c ****   bool b;
 290:../../../os/rt/src/chmtx.c **** 
 291:../../../os/rt/src/chmtx.c ****   chSysLock();
 292:../../../os/rt/src/chmtx.c ****   b = chMtxTryLockS(mp);
 293:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 294:../../../os/rt/src/chmtx.c **** 
 295:../../../os/rt/src/chmtx.c ****   return b;
 296:../../../os/rt/src/chmtx.c **** }
 297:../../../os/rt/src/chmtx.c **** 
 298:../../../os/rt/src/chmtx.c **** /**
 299:../../../os/rt/src/chmtx.c ****  * @brief   Tries to lock a mutex.
 300:../../../os/rt/src/chmtx.c ****  * @details This function attempts to lock a mutex, if the mutex is already
 301:../../../os/rt/src/chmtx.c ****  *          taken by another thread then the function exits without waiting.
 302:../../../os/rt/src/chmtx.c ****  * @post    The mutex is locked and inserted in the per-thread stack of owned
 303:../../../os/rt/src/chmtx.c ****  *          mutexes.
 304:../../../os/rt/src/chmtx.c ****  * @note    This function does not have any overhead related to the
 305:../../../os/rt/src/chmtx.c ****  *          priority inheritance mechanism because it does not try to
 306:../../../os/rt/src/chmtx.c ****  *          enter a sleep state.
 307:../../../os/rt/src/chmtx.c ****  *
 308:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 309:../../../os/rt/src/chmtx.c ****  * @return              The operation status.
 310:../../../os/rt/src/chmtx.c ****  * @retval true         if the mutex has been successfully acquired
 311:../../../os/rt/src/chmtx.c ****  * @retval false        if the lock attempt failed.
 312:../../../os/rt/src/chmtx.c ****  *
 313:../../../os/rt/src/chmtx.c ****  * @sclass
 314:../../../os/rt/src/chmtx.c ****  */
 315:../../../os/rt/src/chmtx.c **** bool chMtxTryLockS(mutex_t *mp) {
 316:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 317:../../../os/rt/src/chmtx.c **** 
 318:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 319:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 320:../../../os/rt/src/chmtx.c **** 
 321:../../../os/rt/src/chmtx.c ****   if (mp->owner != NULL) {
 483               		.loc 1 321 0
 484 0002 DC01      		movw r26,r24
 485 0004 1496      		adiw r26,4
 486 0006 2D91      		ld r18,X+
 487 0008 3C91      		ld r19,X
 488 000a 1597      		sbiw r26,4+1
 489 000c 232B      		or r18,r19
 490 000e 01F0      		breq .L33
 322:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 323:../../../os/rt/src/chmtx.c **** 
 324:../../../os/rt/src/chmtx.c ****     chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 325:../../../os/rt/src/chmtx.c **** 
 326:../../../os/rt/src/chmtx.c ****     if (mp->owner == currtp) {
 327:../../../os/rt/src/chmtx.c ****       mp->cnt++;
 328:../../../os/rt/src/chmtx.c ****       return true;
 329:../../../os/rt/src/chmtx.c ****     }
 330:../../../os/rt/src/chmtx.c **** #endif
 331:../../../os/rt/src/chmtx.c ****     return false;
 491               		.loc 1 331 0
 492 0010 80E0      		ldi r24,0
 493               	.LVL35:
 494               	.LBE128:
 495               	.LBE127:
 496               	.LBB132:
 497               	.LBB133:
 498               	.LBB134:
 499               	.LBB135:
 500               		.loc 5 440 0
 501               	/* #APP */
 502               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 503 0012 7894      		sei
 504               	 ;  0 "" 2
 505               	/* #NOAPP */
 506               	.LBE135:
 507               	.LBE134:
 508               	.LBE133:
 509               	.LBE132:
 296:../../../os/rt/src/chmtx.c **** 
 510               		.loc 1 296 0
 511 0014 0895      		ret
 512               	.LVL36:
 513               	.L33:
 514               	.LBB139:
 515               	.LBB131:
 516               	.LBB129:
 517               	.LBB130:
 518               		.loc 3 375 0
 519 0016 E091 0000 		lds r30,ch0+5
 520 001a F091 0000 		lds r31,ch0+5+1
 521               	.LBE130:
 522               	.LBE129:
 332:../../../os/rt/src/chmtx.c ****   }
 333:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 334:../../../os/rt/src/chmtx.c **** 
 335:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt == (cnt_t)0, "counter is not zero");
 336:../../../os/rt/src/chmtx.c **** 
 337:../../../os/rt/src/chmtx.c ****   mp->cnt++;
 338:../../../os/rt/src/chmtx.c **** #endif
 339:../../../os/rt/src/chmtx.c ****   mp->owner = currtp;
 523               		.loc 1 339 0
 524 001e 1596      		adiw r26,4+1
 525 0020 FC93      		st X,r31
 526 0022 EE93      		st -X,r30
 527 0024 1497      		sbiw r26,4
 340:../../../os/rt/src/chmtx.c ****   mp->next = currtp->mtxlist;
 528               		.loc 1 340 0
 529 0026 238D      		ldd r18,Z+27
 530 0028 348D      		ldd r19,Z+28
 531 002a 1796      		adiw r26,6+1
 532 002c 3C93      		st X,r19
 533 002e 2E93      		st -X,r18
 534 0030 1697      		sbiw r26,6
 341:../../../os/rt/src/chmtx.c ****   currtp->mtxlist = mp;
 535               		.loc 1 341 0
 536 0032 948F      		std Z+28,r25
 537 0034 838F      		std Z+27,r24
 342:../../../os/rt/src/chmtx.c ****   return true;
 538               		.loc 1 342 0
 539 0036 81E0      		ldi r24,lo8(1)
 540               	.LVL37:
 541               	.LBE131:
 542               	.LBE139:
 543               	.LBB140:
 544               	.LBB138:
 545               	.LBB137:
 546               	.LBB136:
 547               		.loc 5 440 0
 548               	/* #APP */
 549               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 550 0038 7894      		sei
 551               	 ;  0 "" 2
 552               	/* #NOAPP */
 553               	.LBE136:
 554               	.LBE137:
 555               	.LBE138:
 556               	.LBE140:
 296:../../../os/rt/src/chmtx.c **** 
 557               		.loc 1 296 0
 558 003a 0895      		ret
 559               		.cfi_endproc
 560               	.LFE197:
 562               		.section	.text.chMtxTryLockS,"ax",@progbits
 563               	.global	chMtxTryLockS
 565               	chMtxTryLockS:
 566               	.LFB198:
 315:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 567               		.loc 1 315 0
 568               		.cfi_startproc
 569               	.LVL38:
 570               	/* prologue: function */
 571               	/* frame size = 0 */
 572               	/* stack size = 0 */
 573               	.L__stack_usage = 0
 321:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 574               		.loc 1 321 0
 575 0000 DC01      		movw r26,r24
 576 0002 1496      		adiw r26,4
 577 0004 2D91      		ld r18,X+
 578 0006 3C91      		ld r19,X
 579 0008 1597      		sbiw r26,4+1
 580 000a 232B      		or r18,r19
 581 000c 01F0      		breq .L37
 331:../../../os/rt/src/chmtx.c ****   }
 582               		.loc 1 331 0
 583 000e 80E0      		ldi r24,0
 584               	.LVL39:
 343:../../../os/rt/src/chmtx.c **** }
 585               		.loc 1 343 0
 586 0010 0895      		ret
 587               	.LVL40:
 588               	.L37:
 589               	.LBB141:
 590               	.LBB142:
 591               		.loc 3 375 0
 592 0012 E091 0000 		lds r30,ch0+5
 593 0016 F091 0000 		lds r31,ch0+5+1
 594               	.LBE142:
 595               	.LBE141:
 339:../../../os/rt/src/chmtx.c ****   mp->next = currtp->mtxlist;
 596               		.loc 1 339 0
 597 001a 1596      		adiw r26,4+1
 598 001c FC93      		st X,r31
 599 001e EE93      		st -X,r30
 600 0020 1497      		sbiw r26,4
 340:../../../os/rt/src/chmtx.c ****   currtp->mtxlist = mp;
 601               		.loc 1 340 0
 602 0022 238D      		ldd r18,Z+27
 603 0024 348D      		ldd r19,Z+28
 604 0026 1796      		adiw r26,6+1
 605 0028 3C93      		st X,r19
 606 002a 2E93      		st -X,r18
 607 002c 1697      		sbiw r26,6
 341:../../../os/rt/src/chmtx.c ****   return true;
 608               		.loc 1 341 0
 609 002e 948F      		std Z+28,r25
 610 0030 838F      		std Z+27,r24
 342:../../../os/rt/src/chmtx.c **** }
 611               		.loc 1 342 0
 612 0032 81E0      		ldi r24,lo8(1)
 613               	.LVL41:
 614 0034 0895      		ret
 615               		.cfi_endproc
 616               	.LFE198:
 618               		.section	.text.chMtxUnlock,"ax",@progbits
 619               	.global	chMtxUnlock
 621               	chMtxUnlock:
 622               	.LFB199:
 344:../../../os/rt/src/chmtx.c **** 
 345:../../../os/rt/src/chmtx.c **** /**
 346:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 347:../../../os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 348:../../../os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 349:../../../os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 350:../../../os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 351:../../../os/rt/src/chmtx.c ****  *          owned mutexes.
 352:../../../os/rt/src/chmtx.c ****  *
 353:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 354:../../../os/rt/src/chmtx.c ****  *
 355:../../../os/rt/src/chmtx.c ****  * @api
 356:../../../os/rt/src/chmtx.c ****  */
 357:../../../os/rt/src/chmtx.c **** void chMtxUnlock(mutex_t *mp) {
 623               		.loc 1 357 0
 624               		.cfi_startproc
 625               	.LVL42:
 626 0000 CF93      		push r28
 627               	.LCFI4:
 628               		.cfi_def_cfa_offset 3
 629               		.cfi_offset 28, -2
 630 0002 DF93      		push r29
 631               	.LCFI5:
 632               		.cfi_def_cfa_offset 4
 633               		.cfi_offset 29, -3
 634               	/* prologue: function */
 635               	/* frame size = 0 */
 636               	/* stack size = 2 */
 637               	.L__stack_usage = 2
 638 0004 EC01      		movw r28,r24
 639               	.LBB143:
 640               	.LBB144:
 641               		.loc 3 375 0
 642 0006 4091 0000 		lds r20,ch0+5
 643 000a 5091 0000 		lds r21,ch0+5+1
 644               	.LBE144:
 645               	.LBE143:
 646               	.LBB145:
 647               	.LBB146:
 648               	.LBB147:
 430:../../../os/common/ports/AVR/chcore.h **** }
 649               		.loc 5 430 0
 650               	/* #APP */
 651               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 652 000e F894      		cli
 653               	 ;  0 "" 2
 654               	/* #NOAPP */
 655               	.LBE147:
 656               	.LBE146:
 657               	.LBE145:
 358:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 359:../../../os/rt/src/chmtx.c ****   mutex_t *lmp;
 360:../../../os/rt/src/chmtx.c **** 
 361:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 362:../../../os/rt/src/chmtx.c **** 
 363:../../../os/rt/src/chmtx.c ****   chSysLock();
 364:../../../os/rt/src/chmtx.c **** 
 365:../../../os/rt/src/chmtx.c ****   chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 366:../../../os/rt/src/chmtx.c ****   chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 367:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 368:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 369:../../../os/rt/src/chmtx.c **** 
 370:../../../os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 371:../../../os/rt/src/chmtx.c **** #endif
 372:../../../os/rt/src/chmtx.c **** 
 373:../../../os/rt/src/chmtx.c ****     chDbgAssert(currtp->mtxlist == mp, "not next in list");
 374:../../../os/rt/src/chmtx.c **** 
 375:../../../os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 376:../../../os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 377:../../../os/rt/src/chmtx.c ****        parameter of this function.*/
 378:../../../os/rt/src/chmtx.c ****     currtp->mtxlist = mp->next;
 658               		.loc 1 378 0
 659 0010 EE81      		ldd r30,Y+6
 660 0012 FF81      		ldd r31,Y+7
 661 0014 DA01      		movw r26,r20
 662 0016 5C96      		adiw r26,27+1
 663 0018 FC93      		st X,r31
 664 001a EE93      		st -X,r30
 665 001c 5B97      		sbiw r26,27
 379:../../../os/rt/src/chmtx.c **** 
 380:../../../os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 381:../../../os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 666               		.loc 1 381 0
 667 001e A881      		ld r26,Y
 668 0020 B981      		ldd r27,Y+1
 669 0022 A817      		cp r26,r24
 670 0024 B907      		cpc r27,r25
 671 0026 01F0      		breq .L39
 672               	.LBB148:
 382:../../../os/rt/src/chmtx.c ****       thread_t *tp;
 383:../../../os/rt/src/chmtx.c **** 
 384:../../../os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 385:../../../os/rt/src/chmtx.c ****          mutexes list.*/
 386:../../../os/rt/src/chmtx.c ****       tprio_t newprio = currtp->realprio;
 673               		.loc 1 386 0
 674 0028 DA01      		movw r26,r20
 675 002a 5D96      		adiw r26,29
 676 002c 2C91      		ld r18,X
 677               	.LVL43:
 387:../../../os/rt/src/chmtx.c ****       lmp = currtp->mtxlist;
 388:../../../os/rt/src/chmtx.c ****       while (lmp != NULL) {
 678               		.loc 1 388 0
 679 002e 3097      		sbiw r30,0
 680 0030 01F0      		breq .L40
 681               	.L43:
 682               	.LVL44:
 683               	.LBB149:
 684               	.LBB150:
 685               	.LBB151:
 686               	.LBB152:
 311:../../../os/rt/include/chlists.h **** }
 687               		.loc 2 311 0
 688 0032 A081      		ld r26,Z
 689 0034 B181      		ldd r27,Z+1
 690               	.LVL45:
 691               	.LBE152:
 692               	.LBE151:
 693               	.LBE150:
 694               	.LBE149:
 389:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 390:../../../os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 391:../../../os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 392:../../../os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 695               		.loc 1 392 0
 696 0036 EA17      		cp r30,r26
 697 0038 FB07      		cpc r31,r27
 698 003a 01F0      		breq .L41
 393:../../../os/rt/src/chmtx.c ****             ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 699               		.loc 1 393 0 discriminator 1
 700 003c 1496      		adiw r26,4
 701 003e 9C91      		ld r25,X
 702 0040 2917      		cp r18,r25
 703 0042 00F4      		brsh .L41
 704 0044 292F      		mov r18,r25
 705               	.LVL46:
 706               	.L41:
 394:../../../os/rt/src/chmtx.c ****           newprio = (threadref(lmp->queue.next))->hdr.pqueue.prio;
 395:../../../os/rt/src/chmtx.c ****         }
 396:../../../os/rt/src/chmtx.c ****         lmp = lmp->next;
 707               		.loc 1 396 0
 708 0046 0680      		ldd __tmp_reg__,Z+6
 709 0048 F781      		ldd r31,Z+7
 710 004a E02D      		mov r30,__tmp_reg__
 711               	.LVL47:
 388:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 712               		.loc 1 388 0
 713 004c 3097      		sbiw r30,0
 714 004e 01F4      		brne .L43
 715               	.L40:
 716 0050 FE01      		movw r30,r28
 717               	.LVL48:
 397:../../../os/rt/src/chmtx.c ****       }
 398:../../../os/rt/src/chmtx.c **** 
 399:../../../os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 400:../../../os/rt/src/chmtx.c ****          waiting threads.*/
 401:../../../os/rt/src/chmtx.c ****       currtp->hdr.pqueue.prio = newprio;
 718               		.loc 1 401 0
 719 0052 DA01      		movw r26,r20
 720 0054 1496      		adiw r26,4
 721 0056 2C93      		st X,r18
 722               	.LVL49:
 723               	.LBB153:
 724               	.LBB154:
 341:../../../os/rt/include/chlists.h **** 
 725               		.loc 2 341 0
 726 0058 A881      		ld r26,Y
 727 005a B981      		ldd r27,Y+1
 728               	.LVL50:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 729               		.loc 2 343 0
 730 005c CD91      		ld r28,X+
 731 005e DC91      		ld r29,X
 732 0060 1197      		sbiw r26,1
 733 0062 D183      		std Z+1,r29
 734 0064 C083      		st Z,r28
 344:../../../os/rt/include/chlists.h **** 
 735               		.loc 2 344 0
 736 0066 FB83      		std Y+3,r31
 737 0068 EA83      		std Y+2,r30
 738               	.LVL51:
 739               	.LBE154:
 740               	.LBE153:
 402:../../../os/rt/src/chmtx.c **** 
 403:../../../os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 404:../../../os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 405:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 406:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 407:../../../os/rt/src/chmtx.c **** #endif
 408:../../../os/rt/src/chmtx.c ****       tp = threadref(ch_queue_fifo_remove(&mp->queue));
 409:../../../os/rt/src/chmtx.c ****       mp->owner = tp;
 741               		.loc 1 409 0
 742 006a B583      		std Z+5,r27
 743 006c A483      		std Z+4,r26
 410:../../../os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 744               		.loc 1 410 0
 745 006e 5B96      		adiw r26,27
 746 0070 8D91      		ld r24,X+
 747 0072 9C91      		ld r25,X
 748 0074 5C97      		sbiw r26,27+1
 749               	.LVL52:
 750 0076 9783      		std Z+7,r25
 751 0078 8683      		std Z+6,r24
 411:../../../os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 752               		.loc 1 411 0
 753 007a 5C96      		adiw r26,27+1
 754 007c FC93      		st X,r31
 755 007e EE93      		st -X,r30
 756 0080 5B97      		sbiw r26,27
 412:../../../os/rt/src/chmtx.c **** 
 413:../../../os/rt/src/chmtx.c ****       /* Note, not using chSchWakeupS() because that function expects the
 414:../../../os/rt/src/chmtx.c ****          current thread to have the higher or equal priority than the ones
 415:../../../os/rt/src/chmtx.c ****          in the ready list. This is not necessarily true here because we
 416:../../../os/rt/src/chmtx.c ****          just changed priority.*/
 417:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 757               		.loc 1 417 0
 758 0082 CD01      		movw r24,r26
 759 0084 0E94 0000 		call chSchReadyI
 760               	.LVL53:
 418:../../../os/rt/src/chmtx.c ****       chSchRescheduleS();
 761               		.loc 1 418 0
 762 0088 0E94 0000 		call chSchRescheduleS
 763               	.LVL54:
 764               	.LBE148:
 765               	.LBB155:
 766               	.LBB156:
 767               	.LBB157:
 768               	.LBB158:
 769               		.loc 5 440 0
 770               	/* #APP */
 771               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 772 008c 7894      		sei
 773               	 ;  0 "" 2
 774               	/* epilogue start */
 775               	/* #NOAPP */
 776               	.LBE158:
 777               	.LBE157:
 778               	.LBE156:
 779               	.LBE155:
 419:../../../os/rt/src/chmtx.c ****     }
 420:../../../os/rt/src/chmtx.c ****     else {
 421:../../../os/rt/src/chmtx.c ****       mp->owner = NULL;
 422:../../../os/rt/src/chmtx.c ****     }
 423:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 424:../../../os/rt/src/chmtx.c ****   }
 425:../../../os/rt/src/chmtx.c **** #endif
 426:../../../os/rt/src/chmtx.c **** 
 427:../../../os/rt/src/chmtx.c ****   chSysUnlock();
 428:../../../os/rt/src/chmtx.c **** }
 780               		.loc 1 428 0
 781 008e DF91      		pop r29
 782 0090 CF91      		pop r28
 783 0092 0895      		ret
 784               	.LVL55:
 785               	.L39:
 421:../../../os/rt/src/chmtx.c ****     }
 786               		.loc 1 421 0
 787 0094 1596      		adiw r26,4+1
 788 0096 1C92      		st X,__zero_reg__
 789 0098 1E92      		st -X,__zero_reg__
 790 009a 1497      		sbiw r26,4
 791               	.LBB162:
 792               	.LBB161:
 793               	.LBB160:
 794               	.LBB159:
 795               		.loc 5 440 0
 796               	/* #APP */
 797               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 798 009c 7894      		sei
 799               	 ;  0 "" 2
 800               	/* epilogue start */
 801               	/* #NOAPP */
 802               	.LBE159:
 803               	.LBE160:
 804               	.LBE161:
 805               	.LBE162:
 806               		.loc 1 428 0
 807 009e DF91      		pop r29
 808 00a0 CF91      		pop r28
 809 00a2 0895      		ret
 810               		.cfi_endproc
 811               	.LFE199:
 813               		.section	.text.chMtxUnlockS,"ax",@progbits
 814               	.global	chMtxUnlockS
 816               	chMtxUnlockS:
 817               	.LFB200:
 429:../../../os/rt/src/chmtx.c **** 
 430:../../../os/rt/src/chmtx.c **** /**
 431:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks the specified mutex.
 432:../../../os/rt/src/chmtx.c ****  * @note    Mutexes must be unlocked in reverse lock order. Violating this
 433:../../../os/rt/src/chmtx.c ****  *          rules will result in a panic if assertions are enabled.
 434:../../../os/rt/src/chmtx.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 435:../../../os/rt/src/chmtx.c ****  * @post    The mutex is unlocked and removed from the per-thread stack of
 436:../../../os/rt/src/chmtx.c ****  *          owned mutexes.
 437:../../../os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 438:../../../os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 439:../../../os/rt/src/chmtx.c ****  *
 440:../../../os/rt/src/chmtx.c ****  * @param[in] mp        pointer to a @p mutex_t object
 441:../../../os/rt/src/chmtx.c ****  *
 442:../../../os/rt/src/chmtx.c ****  * @sclass
 443:../../../os/rt/src/chmtx.c ****  */
 444:../../../os/rt/src/chmtx.c **** void chMtxUnlockS(mutex_t *mp) {
 818               		.loc 1 444 0
 819               		.cfi_startproc
 820               	.LVL56:
 821 0000 CF93      		push r28
 822               	.LCFI6:
 823               		.cfi_def_cfa_offset 3
 824               		.cfi_offset 28, -2
 825 0002 DF93      		push r29
 826               	.LCFI7:
 827               		.cfi_def_cfa_offset 4
 828               		.cfi_offset 29, -3
 829               	/* prologue: function */
 830               	/* frame size = 0 */
 831               	/* stack size = 2 */
 832               	.L__stack_usage = 2
 833 0004 EC01      		movw r28,r24
 834               	.LBB163:
 835               	.LBB164:
 836               		.loc 3 375 0
 837 0006 4091 0000 		lds r20,ch0+5
 838 000a 5091 0000 		lds r21,ch0+5+1
 839               	.LBE164:
 840               	.LBE163:
 445:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 446:../../../os/rt/src/chmtx.c ****   mutex_t *lmp;
 447:../../../os/rt/src/chmtx.c **** 
 448:../../../os/rt/src/chmtx.c ****   chDbgCheckClassS();
 449:../../../os/rt/src/chmtx.c ****   chDbgCheck(mp != NULL);
 450:../../../os/rt/src/chmtx.c **** 
 451:../../../os/rt/src/chmtx.c ****   chDbgAssert(currtp->mtxlist != NULL, "owned mutexes list empty");
 452:../../../os/rt/src/chmtx.c ****   chDbgAssert(currtp->mtxlist->owner == currtp, "ownership failure");
 453:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 454:../../../os/rt/src/chmtx.c ****   chDbgAssert(mp->cnt >= (cnt_t)1, "counter is not positive");
 455:../../../os/rt/src/chmtx.c **** 
 456:../../../os/rt/src/chmtx.c ****   if (--mp->cnt == (cnt_t)0) {
 457:../../../os/rt/src/chmtx.c **** #endif
 458:../../../os/rt/src/chmtx.c **** 
 459:../../../os/rt/src/chmtx.c ****     chDbgAssert(currtp->mtxlist == mp, "not next in list");
 460:../../../os/rt/src/chmtx.c **** 
 461:../../../os/rt/src/chmtx.c ****     /* Removes the top mutex from the thread's owned mutexes list and marks
 462:../../../os/rt/src/chmtx.c ****        it as not owned. Note, it is assumed to be the same mutex passed as
 463:../../../os/rt/src/chmtx.c ****        parameter of this function.*/
 464:../../../os/rt/src/chmtx.c ****     currtp->mtxlist = mp->next;
 841               		.loc 1 464 0
 842 000e EE81      		ldd r30,Y+6
 843 0010 FF81      		ldd r31,Y+7
 844 0012 DA01      		movw r26,r20
 845 0014 5C96      		adiw r26,27+1
 846 0016 FC93      		st X,r31
 847 0018 EE93      		st -X,r30
 848 001a 5B97      		sbiw r26,27
 465:../../../os/rt/src/chmtx.c **** 
 466:../../../os/rt/src/chmtx.c ****     /* If a thread is waiting on the mutex then the fun part begins.*/
 467:../../../os/rt/src/chmtx.c ****     if (chMtxQueueNotEmptyS(mp)) {
 849               		.loc 1 467 0
 850 001c A881      		ld r26,Y
 851 001e B981      		ldd r27,Y+1
 852 0020 A817      		cp r26,r24
 853 0022 B907      		cpc r27,r25
 854 0024 01F0      		breq .L50
 855               	.LBB165:
 468:../../../os/rt/src/chmtx.c ****       thread_t *tp;
 469:../../../os/rt/src/chmtx.c **** 
 470:../../../os/rt/src/chmtx.c ****       /* Recalculates the optimal thread priority by scanning the owned
 471:../../../os/rt/src/chmtx.c ****          mutexes list.*/
 472:../../../os/rt/src/chmtx.c ****       tprio_t newprio = currtp->realprio;
 856               		.loc 1 472 0
 857 0026 DA01      		movw r26,r20
 858 0028 5D96      		adiw r26,29
 859 002a 2C91      		ld r18,X
 860               	.LVL57:
 473:../../../os/rt/src/chmtx.c ****       lmp = currtp->mtxlist;
 474:../../../os/rt/src/chmtx.c ****       while (lmp != NULL) {
 861               		.loc 1 474 0
 862 002c 3097      		sbiw r30,0
 863 002e 01F0      		breq .L51
 864               	.L54:
 865               	.LVL58:
 866               	.LBB166:
 867               	.LBB167:
 868               	.LBB168:
 869               	.LBB169:
 311:../../../os/rt/include/chlists.h **** }
 870               		.loc 2 311 0
 871 0030 A081      		ld r26,Z
 872 0032 B181      		ldd r27,Z+1
 873               	.LVL59:
 874               	.LBE169:
 875               	.LBE168:
 876               	.LBE167:
 877               	.LBE166:
 475:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 476:../../../os/rt/src/chmtx.c ****            greater priority than the current thread base priority then the
 477:../../../os/rt/src/chmtx.c ****            final priority will have at least that priority.*/
 478:../../../os/rt/src/chmtx.c ****         if (chMtxQueueNotEmptyS(lmp) &&
 878               		.loc 1 478 0
 879 0034 EA17      		cp r30,r26
 880 0036 FB07      		cpc r31,r27
 881 0038 01F0      		breq .L52
 479:../../../os/rt/src/chmtx.c ****             ((threadref(lmp->queue.next))->hdr.pqueue.prio > newprio)) {
 882               		.loc 1 479 0 discriminator 1
 883 003a 1496      		adiw r26,4
 884 003c 9C91      		ld r25,X
 885 003e 2917      		cp r18,r25
 886 0040 00F4      		brsh .L52
 887 0042 292F      		mov r18,r25
 888               	.LVL60:
 889               	.L52:
 480:../../../os/rt/src/chmtx.c ****           newprio = threadref(lmp->queue.next)->hdr.pqueue.prio;
 481:../../../os/rt/src/chmtx.c ****         }
 482:../../../os/rt/src/chmtx.c ****         lmp = lmp->next;
 890               		.loc 1 482 0
 891 0044 0680      		ldd __tmp_reg__,Z+6
 892 0046 F781      		ldd r31,Z+7
 893 0048 E02D      		mov r30,__tmp_reg__
 894               	.LVL61:
 474:../../../os/rt/src/chmtx.c ****         /* If the highest priority thread waiting in the mutexes list has a
 895               		.loc 1 474 0
 896 004a 3097      		sbiw r30,0
 897 004c 01F4      		brne .L54
 898               	.L51:
 483:../../../os/rt/src/chmtx.c ****       }
 484:../../../os/rt/src/chmtx.c **** 
 485:../../../os/rt/src/chmtx.c ****       /* Assigns to the current thread the highest priority among all the
 486:../../../os/rt/src/chmtx.c ****          waiting threads.*/
 487:../../../os/rt/src/chmtx.c ****       currtp->hdr.pqueue.prio = newprio;
 899               		.loc 1 487 0
 900 004e FA01      		movw r30,r20
 901               	.LVL62:
 902 0050 2483      		std Z+4,r18
 903               	.LVL63:
 904               	.LBB170:
 905               	.LBB171:
 341:../../../os/rt/include/chlists.h **** 
 906               		.loc 2 341 0
 907 0052 E881      		ld r30,Y
 908 0054 F981      		ldd r31,Y+1
 909               	.LVL64:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 910               		.loc 2 343 0
 911 0056 A081      		ld r26,Z
 912 0058 B181      		ldd r27,Z+1
 913 005a B983      		std Y+1,r27
 914 005c A883      		st Y,r26
 344:../../../os/rt/include/chlists.h **** 
 915               		.loc 2 344 0
 916 005e 1396      		adiw r26,2+1
 917 0060 DC93      		st X,r29
 918 0062 CE93      		st -X,r28
 919 0064 1297      		sbiw r26,2
 920               	.LVL65:
 921               	.LBE171:
 922               	.LBE170:
 488:../../../os/rt/src/chmtx.c **** 
 489:../../../os/rt/src/chmtx.c ****       /* Awakens the highest priority thread waiting for the unlocked mutex and
 490:../../../os/rt/src/chmtx.c ****          assigns the mutex to it.*/
 491:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 492:../../../os/rt/src/chmtx.c ****       mp->cnt = (cnt_t)1;
 493:../../../os/rt/src/chmtx.c **** #endif
 494:../../../os/rt/src/chmtx.c ****       tp = threadref(ch_queue_fifo_remove(&mp->queue));
 495:../../../os/rt/src/chmtx.c ****       mp->owner = tp;
 923               		.loc 1 495 0
 924 0066 FD83      		std Y+5,r31
 925 0068 EC83      		std Y+4,r30
 496:../../../os/rt/src/chmtx.c ****       mp->next = tp->mtxlist;
 926               		.loc 1 496 0
 927 006a 838D      		ldd r24,Z+27
 928 006c 948D      		ldd r25,Z+28
 929               	.LVL66:
 930 006e 9F83      		std Y+7,r25
 931 0070 8E83      		std Y+6,r24
 497:../../../os/rt/src/chmtx.c ****       tp->mtxlist = mp;
 932               		.loc 1 497 0
 933 0072 D48F      		std Z+28,r29
 934 0074 C38F      		std Z+27,r28
 498:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 935               		.loc 1 498 0
 936 0076 CF01      		movw r24,r30
 937               	/* epilogue start */
 938               	.LBE165:
 499:../../../os/rt/src/chmtx.c ****     }
 500:../../../os/rt/src/chmtx.c ****     else {
 501:../../../os/rt/src/chmtx.c ****       mp->owner = NULL;
 502:../../../os/rt/src/chmtx.c ****     }
 503:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 504:../../../os/rt/src/chmtx.c ****   }
 505:../../../os/rt/src/chmtx.c **** #endif
 506:../../../os/rt/src/chmtx.c **** }
 939               		.loc 1 506 0
 940 0078 DF91      		pop r29
 941 007a CF91      		pop r28
 942               	.LVL67:
 943               	.LBB172:
 498:../../../os/rt/src/chmtx.c ****       (void) chSchReadyI(tp);
 944               		.loc 1 498 0
 945 007c 0C94 0000 		jmp chSchReadyI
 946               	.LVL68:
 947               	.L50:
 948               	.LBE172:
 501:../../../os/rt/src/chmtx.c ****     }
 949               		.loc 1 501 0
 950 0080 1596      		adiw r26,4+1
 951 0082 1C92      		st X,__zero_reg__
 952 0084 1E92      		st -X,__zero_reg__
 953 0086 1497      		sbiw r26,4
 954               	/* epilogue start */
 955               		.loc 1 506 0
 956 0088 DF91      		pop r29
 957 008a CF91      		pop r28
 958 008c 0895      		ret
 959               		.cfi_endproc
 960               	.LFE200:
 962               		.section	.text.chMtxUnlockAllS,"ax",@progbits
 963               	.global	chMtxUnlockAllS
 965               	chMtxUnlockAllS:
 966               	.LFB201:
 507:../../../os/rt/src/chmtx.c **** 
 508:../../../os/rt/src/chmtx.c **** /**
 509:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 510:../../../os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 511:../../../os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 512:../../../os/rt/src/chmtx.c ****  * @post    This function does not reschedule so a call to a rescheduling
 513:../../../os/rt/src/chmtx.c ****  *          function must be performed before unlocking the kernel.
 514:../../../os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 515:../../../os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 516:../../../os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 517:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism.
 518:../../../os/rt/src/chmtx.c ****  *
 519:../../../os/rt/src/chmtx.c ****  * @sclass
 520:../../../os/rt/src/chmtx.c ****  */
 521:../../../os/rt/src/chmtx.c **** void chMtxUnlockAllS(void) {
 967               		.loc 1 521 0
 968               		.cfi_startproc
 969 0000 0F93      		push r16
 970               	.LCFI8:
 971               		.cfi_def_cfa_offset 3
 972               		.cfi_offset 16, -2
 973 0002 1F93      		push r17
 974               	.LCFI9:
 975               		.cfi_def_cfa_offset 4
 976               		.cfi_offset 17, -3
 977 0004 CF93      		push r28
 978               	.LCFI10:
 979               		.cfi_def_cfa_offset 5
 980               		.cfi_offset 28, -4
 981 0006 DF93      		push r29
 982               	.LCFI11:
 983               		.cfi_def_cfa_offset 6
 984               		.cfi_offset 29, -5
 985               	/* prologue: function */
 986               	/* frame size = 0 */
 987               	/* stack size = 4 */
 988               	.L__stack_usage = 4
 989               	.LBB173:
 990               	.LBB174:
 991               		.loc 3 375 0
 992 0008 0091 0000 		lds r16,ch0+5
 993 000c 1091 0000 		lds r17,ch0+5+1
 994               	.LBE174:
 995               	.LBE173:
 522:../../../os/rt/src/chmtx.c ****   thread_t *currtp = chThdGetSelfX();
 523:../../../os/rt/src/chmtx.c **** 
 524:../../../os/rt/src/chmtx.c ****   if (currtp->mtxlist != NULL) {
 996               		.loc 1 524 0
 997 0010 D801      		movw r26,r16
 998 0012 5B96      		adiw r26,27
 999 0014 ED91      		ld r30,X+
 1000 0016 FC91      		ld r31,X
 1001 0018 5C97      		sbiw r26,27+1
 1002 001a 3097      		sbiw r30,0
 1003 001c 01F4      		brne .L63
 1004 001e 00C0      		rjmp .L59
 1005               	.LVL69:
 1006               	.L66:
 1007               	.LBB175:
 1008               	.LBB176:
 1009               	.LBB177:
 1010               	.LBB178:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1011               		.loc 2 343 0
 1012 0020 8D91      		ld r24,X+
 1013 0022 9C91      		ld r25,X
 1014 0024 1197      		sbiw r26,1
 1015 0026 9183      		std Z+1,r25
 1016 0028 8083      		st Z,r24
 344:../../../os/rt/include/chlists.h **** 
 1017               		.loc 2 344 0
 1018 002a EC01      		movw r28,r24
 1019 002c FB83      		std Y+3,r31
 1020 002e EA83      		std Y+2,r30
 1021               	.LVL70:
 1022               	.LBE178:
 1023               	.LBE177:
 525:../../../os/rt/src/chmtx.c ****     do {
 526:../../../os/rt/src/chmtx.c ****       mutex_t *mp = currtp->mtxlist;
 527:../../../os/rt/src/chmtx.c ****       currtp->mtxlist = mp->next;
 528:../../../os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 529:../../../os/rt/src/chmtx.c ****         thread_t *tp;
 530:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 531:../../../os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)1;
 532:../../../os/rt/src/chmtx.c **** #endif
 533:../../../os/rt/src/chmtx.c ****         tp = threadref(ch_queue_fifo_remove(&mp->queue));
 534:../../../os/rt/src/chmtx.c ****         mp->owner   = tp;
 1024               		.loc 1 534 0
 1025 0030 B583      		std Z+5,r27
 1026 0032 A483      		std Z+4,r26
 535:../../../os/rt/src/chmtx.c ****         mp->next    = tp->mtxlist;
 1027               		.loc 1 535 0
 1028 0034 5B96      		adiw r26,27
 1029 0036 8D91      		ld r24,X+
 1030 0038 9C91      		ld r25,X
 1031 003a 5C97      		sbiw r26,27+1
 1032 003c 9783      		std Z+7,r25
 1033 003e 8683      		std Z+6,r24
 536:../../../os/rt/src/chmtx.c ****         tp->mtxlist = mp;
 1034               		.loc 1 536 0
 1035 0040 5C96      		adiw r26,27+1
 1036 0042 FC93      		st X,r31
 1037 0044 EE93      		st -X,r30
 1038 0046 5B97      		sbiw r26,27
 537:../../../os/rt/src/chmtx.c ****         (void) chSchReadyI(tp);
 1039               		.loc 1 537 0
 1040 0048 CD01      		movw r24,r26
 1041 004a 0E94 0000 		call chSchReadyI
 1042               	.LVL71:
 1043               	.LBE176:
 1044               	.LBE175:
 538:../../../os/rt/src/chmtx.c ****       }
 539:../../../os/rt/src/chmtx.c ****       else {
 540:../../../os/rt/src/chmtx.c **** #if CH_CFG_USE_MUTEXES_RECURSIVE == TRUE
 541:../../../os/rt/src/chmtx.c ****         mp->cnt = (cnt_t)0;
 542:../../../os/rt/src/chmtx.c **** #endif
 543:../../../os/rt/src/chmtx.c ****         mp->owner = NULL;
 544:../../../os/rt/src/chmtx.c ****       }
 545:../../../os/rt/src/chmtx.c ****     } while (currtp->mtxlist != NULL);
 1045               		.loc 1 545 0
 1046 004e D801      		movw r26,r16
 1047 0050 5B96      		adiw r26,27
 1048 0052 ED91      		ld r30,X+
 1049 0054 FC91      		ld r31,X
 1050 0056 5C97      		sbiw r26,27+1
 1051 0058 3097      		sbiw r30,0
 1052 005a 01F0      		breq .L65
 1053               	.L63:
 1054               	.LVL72:
 1055               	.LBB183:
 527:../../../os/rt/src/chmtx.c ****       if (chMtxQueueNotEmptyS(mp)) {
 1056               		.loc 1 527 0
 1057 005c 8681      		ldd r24,Z+6
 1058 005e 9781      		ldd r25,Z+7
 1059 0060 E801      		movw r28,r16
 1060 0062 9C8F      		std Y+28,r25
 1061 0064 8B8F      		std Y+27,r24
 1062               	.LVL73:
 1063               	.LBB179:
 1064               	.LBB180:
 1065               	.LBB181:
 1066               	.LBB182:
 311:../../../os/rt/include/chlists.h **** }
 1067               		.loc 2 311 0
 1068 0066 A081      		ld r26,Z
 1069 0068 B181      		ldd r27,Z+1
 1070               	.LVL74:
 1071               	.LBE182:
 1072               	.LBE181:
 1073               	.LBE180:
 1074               	.LBE179:
 528:../../../os/rt/src/chmtx.c ****         thread_t *tp;
 1075               		.loc 1 528 0
 1076 006a EA17      		cp r30,r26
 1077 006c FB07      		cpc r31,r27
 1078 006e 01F4      		brne .L66
 543:../../../os/rt/src/chmtx.c ****       }
 1079               		.loc 1 543 0
 1080 0070 1582      		std Z+5,__zero_reg__
 1081 0072 1482      		std Z+4,__zero_reg__
 1082               	.LBE183:
 1083               		.loc 1 545 0
 1084 0074 D801      		movw r26,r16
 1085 0076 5B96      		adiw r26,27
 1086 0078 ED91      		ld r30,X+
 1087 007a FC91      		ld r31,X
 1088 007c 5C97      		sbiw r26,27+1
 1089 007e 3097      		sbiw r30,0
 1090 0080 01F4      		brne .L63
 1091               	.L65:
 546:../../../os/rt/src/chmtx.c ****     currtp->hdr.pqueue.prio = currtp->realprio;
 1092               		.loc 1 546 0
 1093 0082 5D96      		adiw r26,29
 1094 0084 8C91      		ld r24,X
 1095 0086 5D97      		sbiw r26,29
 1096 0088 1496      		adiw r26,4
 1097 008a 8C93      		st X,r24
 1098               	/* epilogue start */
 547:../../../os/rt/src/chmtx.c ****     chSchRescheduleS();
 548:../../../os/rt/src/chmtx.c ****   }
 549:../../../os/rt/src/chmtx.c **** }
 1099               		.loc 1 549 0
 1100 008c DF91      		pop r29
 1101 008e CF91      		pop r28
 1102 0090 1F91      		pop r17
 1103 0092 0F91      		pop r16
 547:../../../os/rt/src/chmtx.c ****     chSchRescheduleS();
 1104               		.loc 1 547 0
 1105 0094 0C94 0000 		jmp chSchRescheduleS
 1106               	.LVL75:
 1107               	.L59:
 1108               	/* epilogue start */
 1109               		.loc 1 549 0
 1110 0098 DF91      		pop r29
 1111 009a CF91      		pop r28
 1112 009c 1F91      		pop r17
 1113 009e 0F91      		pop r16
 1114 00a0 0895      		ret
 1115               		.cfi_endproc
 1116               	.LFE201:
 1118               		.section	.text.chMtxUnlockAll,"ax",@progbits
 1119               	.global	chMtxUnlockAll
 1121               	chMtxUnlockAll:
 1122               	.LFB202:
 550:../../../os/rt/src/chmtx.c **** 
 551:../../../os/rt/src/chmtx.c **** /**
 552:../../../os/rt/src/chmtx.c ****  * @brief   Unlocks all mutexes owned by the invoking thread.
 553:../../../os/rt/src/chmtx.c ****  * @post    The stack of owned mutexes is emptied and all the found
 554:../../../os/rt/src/chmtx.c ****  *          mutexes are unlocked.
 555:../../../os/rt/src/chmtx.c ****  * @note    This function is <b>MUCH MORE</b> efficient than releasing the
 556:../../../os/rt/src/chmtx.c ****  *          mutexes one by one and not just because the call overhead,
 557:../../../os/rt/src/chmtx.c ****  *          this function does not have any overhead related to the priority
 558:../../../os/rt/src/chmtx.c ****  *          inheritance mechanism.
 559:../../../os/rt/src/chmtx.c ****  *
 560:../../../os/rt/src/chmtx.c ****  * @api
 561:../../../os/rt/src/chmtx.c ****  */
 562:../../../os/rt/src/chmtx.c **** void chMtxUnlockAll(void) {
 1123               		.loc 1 562 0
 1124               		.cfi_startproc
 1125               	/* prologue: function */
 1126               	/* frame size = 0 */
 1127               	/* stack size = 0 */
 1128               	.L__stack_usage = 0
 1129               	.LBB184:
 1130               	.LBB185:
 1131               	.LBB186:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1132               		.loc 5 430 0
 1133               	/* #APP */
 1134               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1135 0000 F894      		cli
 1136               	 ;  0 "" 2
 1137               	/* #NOAPP */
 1138               	.LBE186:
 1139               	.LBE185:
 1140               	.LBE184:
 563:../../../os/rt/src/chmtx.c **** 
 564:../../../os/rt/src/chmtx.c ****   chSysLock();
 565:../../../os/rt/src/chmtx.c ****   chMtxUnlockAllS();
 1141               		.loc 1 565 0
 1142 0002 0E94 0000 		call chMtxUnlockAllS
 1143               	.LVL76:
 1144               	.LBB187:
 1145               	.LBB188:
 1146               	.LBB189:
 1147               	.LBB190:
 1148               		.loc 5 440 0
 1149               	/* #APP */
 1150               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1151 0006 7894      		sei
 1152               	 ;  0 "" 2
 1153               	/* #NOAPP */
 1154 0008 0895      		ret
 1155               	.LBE190:
 1156               	.LBE189:
 1157               	.LBE188:
 1158               	.LBE187:
 1159               		.cfi_endproc
 1160               	.LFE202:
 1162               		.text
 1163               	.Letext0:
 1164               		.file 6 "/usr/lib/avr/include/stdint.h"
 1165               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1166               		.file 8 "../../../os/rt/include/chearly.h"
 1167               		.file 9 "../../../os/rt/include/chobjects.h"
 1168               		.file 10 "../../../os/rt/include/chrfcu.h"
 1169               		.file 11 "../../../os/rt/include/chdebug.h"
 1170               		.file 12 "../../../os/rt/include/chtime.h"
 1171               		.file 13 "../../../os/rt/include/chsem.h"
 1172               		.file 14 "../../../os/rt/include/chmtx.h"
 1173               		.file 15 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmtx.c
     /tmp/ccFlniHP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccFlniHP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccFlniHP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccFlniHP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccFlniHP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccFlniHP.s:13     .text.chMtxObjectInit:0000000000000000 chMtxObjectInit
     /tmp/ccFlniHP.s:47     .text.chMtxObjectDispose:0000000000000000 chMtxObjectDispose
     /tmp/ccFlniHP.s:63     .text.chMtxLockS:0000000000000000 chMtxLockS
     /tmp/ccFlniHP.s:413    .text.chMtxLock:0000000000000000 chMtxLock
     /tmp/ccFlniHP.s:459    .text.chMtxTryLock:0000000000000000 chMtxTryLock
     /tmp/ccFlniHP.s:565    .text.chMtxTryLockS:0000000000000000 chMtxTryLockS
     /tmp/ccFlniHP.s:621    .text.chMtxUnlock:0000000000000000 chMtxUnlock
     /tmp/ccFlniHP.s:816    .text.chMtxUnlockS:0000000000000000 chMtxUnlockS
     /tmp/ccFlniHP.s:965    .text.chMtxUnlockAllS:0000000000000000 chMtxUnlockAllS
     /tmp/ccFlniHP.s:1121   .text.chMtxUnlockAll:0000000000000000 chMtxUnlockAll

UNDEFINED SYMBOLS
ch0
chSchGoSleepS
chSchReadyI
chSchRescheduleS
