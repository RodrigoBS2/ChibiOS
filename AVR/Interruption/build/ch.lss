
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000012ee  00001382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000152  00800140  00800140  000013c2  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  000013c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0001241a  00000000  00000000  00001a74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cc3  00000000  00000000  00013e8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000491c  00000000  00000000  00017b51  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001008  00000000  00000000  0001c470  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001e44  00000000  00000000  0001d478  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00004d7f  00000000  00000000  0001f2bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  0002403b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	11 c5       	rjmp	.+2594   	; 0xa28 <__vector_1>
       6:	00 00       	nop
       8:	5c c0       	rjmp	.+184    	; 0xc2 <__bad_interrupt>
       a:	00 00       	nop
       c:	5a c0       	rjmp	.+180    	; 0xc2 <__bad_interrupt>
       e:	00 00       	nop
      10:	58 c0       	rjmp	.+176    	; 0xc2 <__bad_interrupt>
      12:	00 00       	nop
      14:	56 c0       	rjmp	.+172    	; 0xc2 <__bad_interrupt>
      16:	00 00       	nop
      18:	54 c0       	rjmp	.+168    	; 0xc2 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	52 c0       	rjmp	.+164    	; 0xc2 <__bad_interrupt>
      1e:	00 00       	nop
      20:	50 c0       	rjmp	.+160    	; 0xc2 <__bad_interrupt>
      22:	00 00       	nop
      24:	4e c0       	rjmp	.+156    	; 0xc2 <__bad_interrupt>
      26:	00 00       	nop
      28:	4c c0       	rjmp	.+152    	; 0xc2 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	c8 c0       	rjmp	.+400    	; 0x1be <__vector_11>
      2e:	00 00       	nop
      30:	48 c0       	rjmp	.+144    	; 0xc2 <__bad_interrupt>
      32:	00 00       	nop
      34:	46 c0       	rjmp	.+140    	; 0xc2 <__bad_interrupt>
      36:	00 00       	nop
      38:	8d c0       	rjmp	.+282    	; 0x154 <__vector_14>
      3a:	00 00       	nop
      3c:	42 c0       	rjmp	.+132    	; 0xc2 <__bad_interrupt>
      3e:	00 00       	nop
      40:	40 c0       	rjmp	.+128    	; 0xc2 <__bad_interrupt>
      42:	00 00       	nop
      44:	3e c0       	rjmp	.+124    	; 0xc2 <__bad_interrupt>
      46:	00 00       	nop
      48:	3c c0       	rjmp	.+120    	; 0xc2 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3a c0       	rjmp	.+116    	; 0xc2 <__bad_interrupt>
      4e:	00 00       	nop
      50:	38 c0       	rjmp	.+112    	; 0xc2 <__bad_interrupt>
      52:	00 00       	nop
      54:	36 c0       	rjmp	.+108    	; 0xc2 <__bad_interrupt>
      56:	00 00       	nop
      58:	34 c0       	rjmp	.+104    	; 0xc2 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	32 c0       	rjmp	.+100    	; 0xc2 <__bad_interrupt>
      5e:	00 00       	nop
      60:	30 c0       	rjmp	.+96     	; 0xc2 <__bad_interrupt>
      62:	00 00       	nop
      64:	2e c0       	rjmp	.+92     	; 0xc2 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	ee ee       	ldi	r30, 0xEE	; 238
      9e:	f2 e1       	ldi	r31, 0x12	; 18
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	a0 34       	cpi	r26, 0x40	; 64
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	22 e0       	ldi	r18, 0x02	; 2
      ae:	a0 e4       	ldi	r26, 0x40	; 64
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a2 39       	cpi	r26, 0x92	; 146
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	f1 d4       	rcall	.+2530   	; 0xaa0 <main>
      be:	0c 94 75 09 	jmp	0x12ea	; 0x12ea <_exit>

000000c2 <__bad_interrupt>:
      c2:	9e cf       	rjmp	.-196    	; 0x0 <__vectors>

000000c4 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c4:	14 d0       	rcall	.+40     	; 0xee <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c6:	80 e0       	ldi	r24, 0x00	; 0
      c8:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_EFL == TRUE) || defined(__DOXYGEN__)
  eflInit();
#endif
#if (HAL_USE_GPT == TRUE) || defined(__DOXYGEN__)
  gptInit();
      ca:	12 d0       	rcall	.+36     	; 0xf0 <_pal_lld_init>
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      cc:	04 d0       	rcall	.+8      	; 0xd6 <gptInit>
      ce:	0a d0       	rcall	.+20     	; 0xe4 <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d0:	0a d0       	rcall	.+20     	; 0xe6 <boardInit>
      d2:	00 c0       	rjmp	.+0      	; 0xd4 <stInit>

000000d4 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d4:	6a c0       	rjmp	.+212    	; 0x1aa <st_lld_init>

000000d6 <gptInit>:
 *
 * @init
 */
void gptInit(void) {

  gpt_lld_init();
      d6:	c7 c0       	rjmp	.+398    	; 0x266 <gpt_lld_init>

000000d8 <gptObjectInit>:
 *
 * @init
 */
void gptObjectInit(GPTDriver *gptp) {

  gptp->state  = GPT_STOP;
      d8:	21 e0       	ldi	r18, 0x01	; 1
      da:	fc 01       	movw	r30, r24
      dc:	20 83       	st	Z, r18
  gptp->config = NULL;
      de:	12 82       	std	Z+2, r1	; 0x02
      e0:	11 82       	std	Z+1, r1	; 0x01
      e2:	08 95       	ret

000000e4 <sdInit>:
 *
 * @init
 */
void sdInit(void) {

  sd_lld_init();
      e4:	c3 c0       	rjmp	.+390    	; 0x26c <sd_lld_init>

000000e6 <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
      e6:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
      ea:	1d ba       	out	0x1d, r1	; 29
      ec:	08 95       	ret

000000ee <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
      ee:	08 95       	ret

000000f0 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
      f0:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
      f2:	80 81       	ld	r24, Z
      f4:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
      f6:	81 81       	ldd	r24, Z+1	; 0x01
      f8:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
      fa:	82 81       	ldd	r24, Z+2	; 0x02
      fc:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
      fe:	83 81       	ldd	r24, Z+3	; 0x03
     100:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     102:	84 81       	ldd	r24, Z+4	; 0x04
     104:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     106:	85 81       	ldd	r24, Z+5	; 0x05
     108:	8a b9       	out	0x0a, r24	; 10
     10a:	08 95       	ret

0000010c <_pal_lld_setgroupmode>:
 *
 * @notapi
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {
     10c:	fc 01       	movw	r30, r24

  switch (mode) {
     10e:	42 30       	cpi	r20, 0x02	; 2
     110:	c9 f0       	breq	.+50     	; 0x144 <_pal_lld_setgroupmode+0x38>
     112:	98 f0       	brcs	.+38     	; 0x13a <_pal_lld_setgroupmode+0x2e>
     114:	45 30       	cpi	r20, 0x05	; 5
     116:	b1 f0       	breq	.+44     	; 0x144 <_pal_lld_setgroupmode+0x38>
     118:	46 30       	cpi	r20, 0x06	; 6
     11a:	21 f4       	brne	.+8      	; 0x124 <_pal_lld_setgroupmode+0x18>
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
    port->out |= mask;
    break;
  case PAL_MODE_OUTPUT_PUSHPULL:
    port->dir |= mask;
     11c:	81 81       	ldd	r24, Z+1	; 0x01
     11e:	68 2b       	or	r22, r24
     120:	61 83       	std	Z+1, r22	; 0x01
     122:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     124:	43 30       	cpi	r20, 0x03	; 3
     126:	e9 f7       	brne	.-6      	; 0x122 <_pal_lld_setgroupmode+0x16>
    port->dir &= ~mask;
    port->out &= ~mask;
    break;
  case PAL_MODE_UNCONNECTED:
  case PAL_MODE_INPUT_PULLUP:
    port->dir &= ~mask;
     128:	81 81       	ldd	r24, Z+1	; 0x01
     12a:	96 2f       	mov	r25, r22
     12c:	90 95       	com	r25
     12e:	89 23       	and	r24, r25
     130:	81 83       	std	Z+1, r24	; 0x01
    port->out |= mask;
     132:	82 81       	ldd	r24, Z+2	; 0x02
     134:	68 2b       	or	r22, r24
     136:	62 83       	std	Z+2, r22	; 0x02
    break;
     138:	08 95       	ret
 */
void _pal_lld_setgroupmode(ioportid_t port,
                           ioportmask_t mask,
                           iomode_t mode) {

  switch (mode) {
     13a:	44 23       	and	r20, r20
     13c:	19 f0       	breq	.+6      	; 0x144 <_pal_lld_setgroupmode+0x38>
     13e:	41 30       	cpi	r20, 0x01	; 1
     140:	99 f3       	breq	.-26     	; 0x128 <_pal_lld_setgroupmode+0x1c>
     142:	08 95       	ret
  case PAL_MODE_RESET:
  case PAL_MODE_INPUT:
  case PAL_MODE_INPUT_ANALOG:
    port->dir &= ~mask;
     144:	81 81       	ldd	r24, Z+1	; 0x01
     146:	60 95       	com	r22
     148:	86 23       	and	r24, r22
     14a:	81 83       	std	Z+1, r24	; 0x01
    port->out &= ~mask;
     14c:	82 81       	ldd	r24, Z+2	; 0x02
     14e:	68 23       	and	r22, r24
     150:	62 83       	std	Z+2, r22	; 0x02
    break;
     152:	08 95       	ret

00000154 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     154:	1f 92       	push	r1
     156:	0f 92       	push	r0
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	0f 92       	push	r0
     15c:	11 24       	eor	r1, r1
     15e:	2f 93       	push	r18
     160:	3f 93       	push	r19
     162:	4f 93       	push	r20
     164:	5f 93       	push	r21
     166:	6f 93       	push	r22
     168:	7f 93       	push	r23
     16a:	8f 93       	push	r24
     16c:	9f 93       	push	r25
     16e:	af 93       	push	r26
     170:	bf 93       	push	r27
     172:	ef 93       	push	r30
     174:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     176:	81 e0       	ldi	r24, 0x01	; 1
     178:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     17c:	8d d0       	rcall	.+282    	; 0x298 <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     17e:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <__avr_in_isr>
     182:	2c d2       	rcall	.+1112   	; 0x5dc <chSchIsPreemptionRequired>
     184:	81 11       	cpse	r24, r1
     186:	3a d2       	rcall	.+1140   	; 0x5fc <chSchDoPreemption>
}
     188:	ff 91       	pop	r31
     18a:	ef 91       	pop	r30
     18c:	bf 91       	pop	r27
     18e:	af 91       	pop	r26
     190:	9f 91       	pop	r25
     192:	8f 91       	pop	r24
     194:	7f 91       	pop	r23
     196:	6f 91       	pop	r22
     198:	5f 91       	pop	r21
     19a:	4f 91       	pop	r20
     19c:	3f 91       	pop	r19
     19e:	2f 91       	pop	r18
     1a0:	0f 90       	pop	r0
     1a2:	0f be       	out	0x3f, r0	; 63
     1a4:	0f 90       	pop	r0
     1a6:	1f 90       	pop	r1
     1a8:	18 95       	reti

000001aa <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     1aa:	82 e0       	ldi	r24, 0x02	; 2
     1ac:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     1ae:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     1b0:	9f e7       	ldi	r25, 0x7F	; 127
     1b2:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     1b4:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     1b6:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     1b8:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     1bc:	08 95       	ret

000001be <__vector_11>:
/**
 * @brief   TIM1 interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {
     1be:	1f 92       	push	r1
     1c0:	0f 92       	push	r0
     1c2:	0f b6       	in	r0, 0x3f	; 63
     1c4:	0f 92       	push	r0
     1c6:	11 24       	eor	r1, r1
     1c8:	2f 93       	push	r18
     1ca:	3f 93       	push	r19
     1cc:	4f 93       	push	r20
     1ce:	5f 93       	push	r21
     1d0:	6f 93       	push	r22
     1d2:	7f 93       	push	r23
     1d4:	8f 93       	push	r24
     1d6:	9f 93       	push	r25
     1d8:	af 93       	push	r26
     1da:	bf 93       	push	r27
     1dc:	ef 93       	push	r30
     1de:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     1e0:	81 e0       	ldi	r24, 0x01	; 1
     1e2:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <__avr_in_isr>
 *
 * @param[in] gptp  pointer to the General Purpose Timer driver.
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
     1e6:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <GPTD1+0x6>
     1ea:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <GPTD1+0x7>
     1ee:	01 96       	adiw	r24, 0x01	; 1
     1f0:	90 93 44 02 	sts	0x0244, r25	; 0x800244 <GPTD1+0x7>
     1f4:	80 93 43 02 	sts	0x0243, r24	; 0x800243 <GPTD1+0x6>
  if (gptp->counter == gptp->period) {
     1f8:	20 91 41 02 	lds	r18, 0x0241	; 0x800241 <GPTD1+0x4>
     1fc:	30 91 42 02 	lds	r19, 0x0242	; 0x800242 <GPTD1+0x5>
     200:	82 17       	cp	r24, r18
     202:	93 07       	cpc	r25, r19
     204:	b1 f0       	breq	.+44     	; 0x232 <__vector_11+0x74>
 */
OSAL_IRQ_HANDLER(TIMER1_COMPA_vect) {

  OSAL_IRQ_PROLOGUE();
  gpt_lld_serve_interrupt(&GPTD1);
  OSAL_IRQ_EPILOGUE();
     206:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <__avr_in_isr>
     20a:	e8 d1       	rcall	.+976    	; 0x5dc <chSchIsPreemptionRequired>
     20c:	81 11       	cpse	r24, r1
     20e:	f6 d1       	rcall	.+1004   	; 0x5fc <chSchDoPreemption>
     210:	ff 91       	pop	r31
}
     212:	ef 91       	pop	r30
     214:	bf 91       	pop	r27
     216:	af 91       	pop	r26
     218:	9f 91       	pop	r25
     21a:	8f 91       	pop	r24
     21c:	7f 91       	pop	r23
     21e:	6f 91       	pop	r22
     220:	5f 91       	pop	r21
     222:	4f 91       	pop	r20
     224:	3f 91       	pop	r19
     226:	2f 91       	pop	r18
     228:	0f 90       	pop	r0
     22a:	0f be       	out	0x3f, r0	; 63
     22c:	0f 90       	pop	r0
     22e:	1f 90       	pop	r1
     230:	18 95       	reti
     232:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <GPTD1+0x7>
 */
static void gpt_lld_serve_interrupt(GPTDriver *gptp) {

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
     236:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <GPTD1+0x6>
     23a:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <GPTD1>
    if (gptp->state == GPT_ONESHOT) {
     23e:	84 30       	cpi	r24, 0x04	; 4
     240:	41 f0       	breq	.+16     	; 0x252 <__vector_11+0x94>
     242:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <GPTD1+0x8>
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
      gpt_lld_stop_timer(gptp);            /* Timer automatically stopped. */
    }
    gptp->callback(gptp);
     246:	f0 91 46 02 	lds	r31, 0x0246	; 0x800246 <GPTD1+0x9>
     24a:	8d e3       	ldi	r24, 0x3D	; 61
     24c:	92 e0       	ldi	r25, 0x02	; 2
     24e:	09 95       	icall
     250:	da cf       	rjmp	.-76     	; 0x206 <__vector_11+0x48>
     252:	92 e0       	ldi	r25, 0x02	; 2

  gptp->counter++;
  if (gptp->counter == gptp->period) {
    gptp->counter = 0;
    if (gptp->state == GPT_ONESHOT) {
      gptp->state = GPT_READY;             /* Back in GPT_READY state.     */
     254:	90 93 3d 02 	sts	0x023D, r25	; 0x80023d <GPTD1>
     258:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 */
void gpt_lld_stop_timer(GPTDriver *gptp) {

  uint8_t i = getTimerIndex(gptp);

  *regs_table[i].tccrb &= ~((7 << CS10) | (1 << OCIE1A));
     25c:	88 7f       	andi	r24, 0xF8	; 248
     25e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
     262:	96 bb       	out	0x16, r25	; 22
  *regs_table[i].tifr = (1 << OCF1A);
     264:	ee cf       	rjmp	.-36     	; 0x242 <__vector_11+0x84>

00000266 <gpt_lld_init>:
     266:	8d e3       	ldi	r24, 0x3D	; 61
 * @notapi
 */
void gpt_lld_init(void) {

#if AVR_GPT_USE_TIM1 || defined(__DOXYGEN__)
  gptObjectInit(&GPTD1);
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	36 cf       	rjmp	.-404    	; 0xd8 <gptObjectInit>

0000026c <sd_lld_init>:
/**
 * @brief   Low level serial driver initialization.
 *
 * @notapi
 */
void sd_lld_init(void) {
     26c:	08 95       	ret

0000026e <chSysInit>:
    /* Registry header, access to this list depends on the current
       kernel configuration.*/
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	c7 e4       	ldi	r28, 0x47	; 71
     274:	d2 e0       	ldi	r29, 0x02	; 2
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	88 83       	st	Y, r24
     27a:	1a 82       	std	Y+2, r1	; 0x02
     27c:	19 82       	std	Y+1, r1	; 0x01
     27e:	4b d3       	rcall	.+1686   	; 0x916 <__core_init>
     280:	8b d3       	rcall	.+1814   	; 0x998 <__heap_init>
     282:	69 e0       	ldi	r22, 0x09	; 9
     284:	71 e0       	ldi	r23, 0x01	; 1
     286:	8a e4       	ldi	r24, 0x4A	; 74
     288:	92 e0       	ldi	r25, 0x02	; 2
     28a:	f8 d1       	rcall	.+1008   	; 0x67c <chInstanceObjectInit>
     28c:	82 e0       	ldi	r24, 0x02	; 2
     28e:	88 83       	st	Y, r24
     290:	78 94       	sei
     292:	df 91       	pop	r29
     294:	cf 91       	pop	r28
     296:	08 95       	ret

00000298 <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     298:	68 c0       	rjmp	.+208    	; 0x36a <chVTDoTickI>

0000029a <chVTDoSetI>:
    dlp = dlp->next;
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
     29a:	cf 93       	push	r28
     29c:	df 93       	push	r29
     29e:	dc 01       	movw	r26, r24
     2a0:	19 96       	adiw	r26, 0x09	; 9
     2a2:	3c 93       	st	X, r19
     2a4:	2e 93       	st	-X, r18
     2a6:	18 97       	sbiw	r26, 0x08	; 8
     2a8:	17 96       	adiw	r26, 0x07	; 7
     2aa:	5c 93       	st	X, r21
     2ac:	4e 93       	st	-X, r20
     2ae:	16 97       	sbiw	r26, 0x06	; 6
     2b0:	1b 96       	adiw	r26, 0x0b	; 11
     2b2:	1c 92       	st	X, r1
     2b4:	1e 92       	st	-X, r1
     2b6:	1a 97       	sbiw	r26, 0x0a	; 10
     2b8:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ch0+0x7>
     2bc:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <ch0+0x8>
     2c0:	24 81       	ldd	r18, Z+4	; 0x04
     2c2:	35 81       	ldd	r19, Z+5	; 0x05
     2c4:	26 17       	cp	r18, r22
     2c6:	37 07       	cpc	r19, r23
     2c8:	50 f4       	brcc	.+20     	; 0x2de <chVTDoSetI+0x44>
     2ca:	62 1b       	sub	r22, r18
     2cc:	73 0b       	sbc	r23, r19
     2ce:	01 90       	ld	r0, Z+
     2d0:	f0 81       	ld	r31, Z
     2d2:	e0 2d       	mov	r30, r0
     2d4:	24 81       	ldd	r18, Z+4	; 0x04
     2d6:	35 81       	ldd	r19, Z+5	; 0x05
     2d8:	26 17       	cp	r18, r22
     2da:	37 07       	cpc	r19, r23
     2dc:	b0 f3       	brcs	.-20     	; 0x2ca <chVTDoSetI+0x30>
     2de:	15 96       	adiw	r26, 0x05	; 5
     2e0:	7c 93       	st	X, r23
     2e2:	6e 93       	st	-X, r22
     2e4:	14 97       	sbiw	r26, 0x04	; 4
     2e6:	11 96       	adiw	r26, 0x01	; 1
     2e8:	fc 93       	st	X, r31
     2ea:	ee 93       	st	-X, r30
     2ec:	c2 81       	ldd	r28, Z+2	; 0x02
     2ee:	d3 81       	ldd	r29, Z+3	; 0x03
     2f0:	13 96       	adiw	r26, 0x03	; 3
     2f2:	dc 93       	st	X, r29
     2f4:	ce 93       	st	-X, r28
     2f6:	12 97       	sbiw	r26, 0x02	; 2
     2f8:	b9 83       	std	Y+1, r27	; 0x01
     2fa:	a8 83       	st	Y, r26
     2fc:	b3 83       	std	Z+3, r27	; 0x03
     2fe:	a2 83       	std	Z+2, r26	; 0x02
     300:	84 81       	ldd	r24, Z+4	; 0x04
     302:	95 81       	ldd	r25, Z+5	; 0x05
     304:	86 1b       	sub	r24, r22
     306:	97 0b       	sbc	r25, r23
     308:	95 83       	std	Z+5, r25	; 0x05
     30a:	84 83       	std	Z+4, r24	; 0x04
     30c:	8f ef       	ldi	r24, 0xFF	; 255
     30e:	9f ef       	ldi	r25, 0xFF	; 255
     310:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <ch0+0xc>
     314:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ch0+0xb>
     318:	df 91       	pop	r29
     31a:	cf 91       	pop	r28
     31c:	08 95       	ret

0000031e <chVTDoResetI>:
     31e:	cf 93       	push	r28
     320:	df 93       	push	r29
     322:	fc 01       	movw	r30, r24
     324:	a0 81       	ld	r26, Z
     326:	b1 81       	ldd	r27, Z+1	; 0x01
     328:	14 96       	adiw	r26, 0x04	; 4
     32a:	2d 91       	ld	r18, X+
     32c:	3c 91       	ld	r19, X
     32e:	15 97       	sbiw	r26, 0x05	; 5
     330:	84 81       	ldd	r24, Z+4	; 0x04
     332:	95 81       	ldd	r25, Z+5	; 0x05
     334:	82 0f       	add	r24, r18
     336:	93 1f       	adc	r25, r19
     338:	15 96       	adiw	r26, 0x05	; 5
     33a:	9c 93       	st	X, r25
     33c:	8e 93       	st	-X, r24
     33e:	14 97       	sbiw	r26, 0x04	; 4
     340:	c2 81       	ldd	r28, Z+2	; 0x02
     342:	d3 81       	ldd	r29, Z+3	; 0x03
     344:	b9 83       	std	Y+1, r27	; 0x01
     346:	a8 83       	st	Y, r26
     348:	a0 81       	ld	r26, Z
     34a:	b1 81       	ldd	r27, Z+1	; 0x01
     34c:	13 96       	adiw	r26, 0x03	; 3
     34e:	dc 93       	st	X, r29
     350:	ce 93       	st	-X, r28
     352:	12 97       	sbiw	r26, 0x02	; 2
     354:	11 82       	std	Z+1, r1	; 0x01
     356:	10 82       	st	Z, r1
     358:	8f ef       	ldi	r24, 0xFF	; 255
     35a:	9f ef       	ldi	r25, 0xFF	; 255
     35c:	90 93 56 02 	sts	0x0256, r25	; 0x800256 <ch0+0xc>
     360:	80 93 55 02 	sts	0x0255, r24	; 0x800255 <ch0+0xb>
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
     36a:	0f 93       	push	r16
     36c:	1f 93       	push	r17
     36e:	cf 93       	push	r28
     370:	df 93       	push	r29
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
     372:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <ch0+0xd>
     376:	90 91 58 02 	lds	r25, 0x0258	; 0x800258 <ch0+0xe>
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	90 93 58 02 	sts	0x0258, r25	; 0x800258 <ch0+0xe>
     380:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <ch0+0xd>
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp != dlhp->next);
     384:	c0 91 51 02 	lds	r28, 0x0251	; 0x800251 <ch0+0x7>
     388:	d0 91 52 02 	lds	r29, 0x0252	; 0x800252 <ch0+0x8>
  if (ch_dlist_notempty(&vtlp->dlist)) {
     38c:	42 e0       	ldi	r20, 0x02	; 2
     38e:	c1 35       	cpi	r28, 0x51	; 81
     390:	d4 07       	cpc	r29, r20
     392:	41 f1       	breq	.+80     	; 0x3e4 <chVTDoTickI+0x7a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
     394:	8c 81       	ldd	r24, Y+4	; 0x04
     396:	9d 81       	ldd	r25, Y+5	; 0x05
     398:	01 97       	sbiw	r24, 0x01	; 1
     39a:	9d 83       	std	Y+5, r25	; 0x05
     39c:	8c 83       	std	Y+4, r24	; 0x04
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     39e:	0f ef       	ldi	r16, 0xFF	; 255
     3a0:	1f ef       	ldi	r17, 0xFF	; 255
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3a2:	1e c0       	rjmp	.+60     	; 0x3e0 <chVTDoTickI+0x76>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
     3a4:	ea 81       	ldd	r30, Y+2	; 0x02
     3a6:	fb 81       	ldd	r31, Y+3	; 0x03
     3a8:	88 81       	ld	r24, Y
     3aa:	99 81       	ldd	r25, Y+1	; 0x01
     3ac:	91 83       	std	Z+1, r25	; 0x01
     3ae:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
     3b0:	a8 81       	ld	r26, Y
     3b2:	b9 81       	ldd	r27, Y+1	; 0x01
     3b4:	13 96       	adiw	r26, 0x03	; 3
     3b6:	fc 93       	st	X, r31
     3b8:	ee 93       	st	-X, r30
     3ba:	12 97       	sbiw	r26, 0x02	; 2
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
     3bc:	19 82       	std	Y+1, r1	; 0x01
     3be:	18 82       	st	Y, r1

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
     3c0:	68 85       	ldd	r22, Y+8	; 0x08
     3c2:	79 85       	ldd	r23, Y+9	; 0x09
     3c4:	ee 81       	ldd	r30, Y+6	; 0x06
     3c6:	ff 81       	ldd	r31, Y+7	; 0x07
     3c8:	ce 01       	movw	r24, r28
     3ca:	09 95       	icall
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
     3cc:	8a 85       	ldd	r24, Y+10	; 0x0a
     3ce:	9b 85       	ldd	r25, Y+11	; 0x0b
     3d0:	00 97       	sbiw	r24, 0x00	; 0
     3d2:	69 f4       	brne	.+26     	; 0x3ee <chVTDoTickI+0x84>
     3d4:	c0 91 51 02 	lds	r28, 0x0251	; 0x800251 <ch0+0x7>
     3d8:	d0 91 52 02 	lds	r29, 0x0252	; 0x800252 <ch0+0x8>
     3dc:	8c 81       	ldd	r24, Y+4	; 0x04
     3de:	9d 81       	ldd	r25, Y+5	; 0x05
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
  if (ch_dlist_notempty(&vtlp->dlist)) {
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     3e0:	89 2b       	or	r24, r25
     3e2:	01 f3       	breq	.-64     	; 0x3a4 <chVTDoTickI+0x3a>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     3e4:	df 91       	pop	r29
     3e6:	cf 91       	pop	r28
     3e8:	1f 91       	pop	r17
     3ea:	0f 91       	pop	r16
     3ec:	08 95       	ret
     3ee:	e0 91 51 02 	lds	r30, 0x0251	; 0x800251 <ch0+0x7>
     3f2:	f0 91 52 02 	lds	r31, 0x0252	; 0x800252 <ch0+0x8>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     3f6:	24 81       	ldd	r18, Z+4	; 0x04
     3f8:	35 81       	ldd	r19, Z+5	; 0x05
     3fa:	28 17       	cp	r18, r24
     3fc:	39 07       	cpc	r19, r25
     3fe:	50 f4       	brcc	.+20     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
     400:	82 1b       	sub	r24, r18
     402:	93 0b       	sbc	r25, r19
    dlp = dlp->next;
     404:	01 90       	ld	r0, Z+
     406:	f0 81       	ld	r31, Z
     408:	e0 2d       	mov	r30, r0
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     40a:	24 81       	ldd	r18, Z+4	; 0x04
     40c:	35 81       	ldd	r19, Z+5	; 0x05
     40e:	28 17       	cp	r18, r24
     410:	39 07       	cpc	r19, r25
     412:	b0 f3       	brcs	.-20     	; 0x400 <__EEPROM_REGION_LENGTH__>
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
     414:	9d 83       	std	Y+5, r25	; 0x05
     416:	8c 83       	std	Y+4, r24	; 0x04
  dlp->next       = dlhp;
     418:	f9 83       	std	Y+1, r31	; 0x01
     41a:	e8 83       	st	Y, r30
  dlp->prev       = dlp->next->prev;
     41c:	a2 81       	ldd	r26, Z+2	; 0x02
     41e:	b3 81       	ldd	r27, Z+3	; 0x03
     420:	bb 83       	std	Y+3, r27	; 0x03
     422:	aa 83       	std	Y+2, r26	; 0x02
  dlp->prev->next = dlp;
     424:	cd 93       	st	X+, r28
     426:	dc 93       	st	X, r29
  dlhp->prev      = dlp;
     428:	d3 83       	std	Z+3, r29	; 0x03
     42a:	c2 83       	std	Z+2, r28	; 0x02

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
     42c:	24 81       	ldd	r18, Z+4	; 0x04
     42e:	35 81       	ldd	r19, Z+5	; 0x05
     430:	a9 01       	movw	r20, r18
     432:	48 1b       	sub	r20, r24
     434:	59 0b       	sbc	r21, r25
     436:	55 83       	std	Z+5, r21	; 0x05
     438:	44 83       	std	Z+4, r20	; 0x04

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     43a:	10 93 56 02 	sts	0x0256, r17	; 0x800256 <ch0+0xc>
     43e:	00 93 55 02 	sts	0x0255, r16	; 0x800255 <ch0+0xb>
     442:	c8 cf       	rjmp	.-112    	; 0x3d4 <chVTDoTickI+0x6a>

00000444 <__sch_wakeup>:
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
     444:	cf 93       	push	r28
     446:	df 93       	push	r29
     448:	db 01       	movw	r26, r22
     44a:	1f 96       	adiw	r26, 0x0f	; 15
     44c:	8c 91       	ld	r24, X
     44e:	1f 97       	sbiw	r26, 0x0f	; 15
     450:	84 30       	cpi	r24, 0x04	; 4
     452:	f1 f1       	breq	.+124    	; 0x4d0 <__sch_wakeup+0x8c>
     454:	80 f5       	brcc	.+96     	; 0x4b6 <__sch_wakeup+0x72>
     456:	88 23       	and	r24, r24
     458:	59 f1       	breq	.+86     	; 0x4b0 <__sch_wakeup+0x6c>
     45a:	83 30       	cpi	r24, 0x03	; 3
     45c:	31 f4       	brne	.+12     	; 0x46a <__sch_wakeup+0x26>
     45e:	52 96       	adiw	r26, 0x12	; 18
     460:	ed 91       	ld	r30, X+
     462:	fc 91       	ld	r31, X
     464:	53 97       	sbiw	r26, 0x13	; 19
     466:	11 82       	std	Z+1, r1	; 0x01
     468:	10 82       	st	Z, r1
     46a:	8f ef       	ldi	r24, 0xFF	; 255
     46c:	9f ef       	ldi	r25, 0xFF	; 255
     46e:	53 96       	adiw	r26, 0x13	; 19
     470:	9c 93       	st	X, r25
     472:	8e 93       	st	-X, r24
     474:	52 97       	sbiw	r26, 0x12	; 18
     476:	1f 96       	adiw	r26, 0x0f	; 15
     478:	1c 92       	st	X, r1
     47a:	1f 97       	sbiw	r26, 0x0f	; 15
     47c:	1b 96       	adiw	r26, 0x0b	; 11
     47e:	ed 91       	ld	r30, X+
     480:	fc 91       	ld	r31, X
     482:	1c 97       	sbiw	r26, 0x0c	; 12
     484:	14 96       	adiw	r26, 0x04	; 4
     486:	9c 91       	ld	r25, X
     488:	14 97       	sbiw	r26, 0x04	; 4
     48a:	01 90       	ld	r0, Z+
     48c:	f0 81       	ld	r31, Z
     48e:	e0 2d       	mov	r30, r0
     490:	84 81       	ldd	r24, Z+4	; 0x04
     492:	89 17       	cp	r24, r25
     494:	d0 f7       	brcc	.-12     	; 0x48a <__sch_wakeup+0x46>
     496:	11 96       	adiw	r26, 0x01	; 1
     498:	fc 93       	st	X, r31
     49a:	ee 93       	st	-X, r30
     49c:	c2 81       	ldd	r28, Z+2	; 0x02
     49e:	d3 81       	ldd	r29, Z+3	; 0x03
     4a0:	13 96       	adiw	r26, 0x03	; 3
     4a2:	dc 93       	st	X, r29
     4a4:	ce 93       	st	-X, r28
     4a6:	12 97       	sbiw	r26, 0x02	; 2
     4a8:	b9 83       	std	Y+1, r27	; 0x01
     4aa:	a8 83       	st	Y, r26
     4ac:	b3 83       	std	Z+3, r27	; 0x03
     4ae:	a2 83       	std	Z+2, r26	; 0x02
     4b0:	df 91       	pop	r29
     4b2:	cf 91       	pop	r28
     4b4:	08 95       	ret
     4b6:	87 30       	cpi	r24, 0x07	; 7
     4b8:	59 f0       	breq	.+22     	; 0x4d0 <__sch_wakeup+0x8c>
     4ba:	8c 30       	cpi	r24, 0x0C	; 12
     4bc:	49 f0       	breq	.+18     	; 0x4d0 <__sch_wakeup+0x8c>
     4be:	85 30       	cpi	r24, 0x05	; 5
     4c0:	a1 f6       	brne	.-88     	; 0x46a <__sch_wakeup+0x26>
     4c2:	52 96       	adiw	r26, 0x12	; 18
     4c4:	ed 91       	ld	r30, X+
     4c6:	fc 91       	ld	r31, X
     4c8:	53 97       	sbiw	r26, 0x13	; 19
     4ca:	84 81       	ldd	r24, Z+4	; 0x04
     4cc:	8f 5f       	subi	r24, 0xFF	; 255
     4ce:	84 83       	std	Z+4, r24	; 0x04
     4d0:	12 96       	adiw	r26, 0x02	; 2
     4d2:	ed 91       	ld	r30, X+
     4d4:	fc 91       	ld	r31, X
     4d6:	13 97       	sbiw	r26, 0x03	; 3
     4d8:	8d 91       	ld	r24, X+
     4da:	9c 91       	ld	r25, X
     4dc:	11 97       	sbiw	r26, 0x01	; 1
     4de:	91 83       	std	Z+1, r25	; 0x01
     4e0:	80 83       	st	Z, r24
     4e2:	cd 91       	ld	r28, X+
     4e4:	dc 91       	ld	r29, X
     4e6:	11 97       	sbiw	r26, 0x01	; 1
     4e8:	fb 83       	std	Y+3, r31	; 0x03
     4ea:	ea 83       	std	Y+2, r30	; 0x02
     4ec:	be cf       	rjmp	.-132    	; 0x46a <__sch_wakeup+0x26>

000004ee <chSchReadyI>:
     4ee:	cf 93       	push	r28
     4f0:	df 93       	push	r29
     4f2:	dc 01       	movw	r26, r24
     4f4:	1f 96       	adiw	r26, 0x0f	; 15
     4f6:	1c 92       	st	X, r1
     4f8:	1f 97       	sbiw	r26, 0x0f	; 15
     4fa:	1b 96       	adiw	r26, 0x0b	; 11
     4fc:	ed 91       	ld	r30, X+
     4fe:	fc 91       	ld	r31, X
     500:	1c 97       	sbiw	r26, 0x0c	; 12
     502:	14 96       	adiw	r26, 0x04	; 4
     504:	2c 91       	ld	r18, X
     506:	14 97       	sbiw	r26, 0x04	; 4
     508:	01 90       	ld	r0, Z+
     50a:	f0 81       	ld	r31, Z
     50c:	e0 2d       	mov	r30, r0
     50e:	94 81       	ldd	r25, Z+4	; 0x04
     510:	92 17       	cp	r25, r18
     512:	d0 f7       	brcc	.-12     	; 0x508 <chSchReadyI+0x1a>
     514:	11 96       	adiw	r26, 0x01	; 1
     516:	fc 93       	st	X, r31
     518:	ee 93       	st	-X, r30
     51a:	c2 81       	ldd	r28, Z+2	; 0x02
     51c:	d3 81       	ldd	r29, Z+3	; 0x03
     51e:	13 96       	adiw	r26, 0x03	; 3
     520:	dc 93       	st	X, r29
     522:	ce 93       	st	-X, r28
     524:	12 97       	sbiw	r26, 0x02	; 2
     526:	b9 83       	std	Y+1, r27	; 0x01
     528:	a8 83       	st	Y, r26
     52a:	b3 83       	std	Z+3, r27	; 0x03
     52c:	a2 83       	std	Z+2, r26	; 0x02
     52e:	cd 01       	movw	r24, r26
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	08 95       	ret

00000536 <chSchGoSleepS>:
     536:	cf 93       	push	r28
     538:	df 93       	push	r29
     53a:	ea e4       	ldi	r30, 0x4A	; 74
     53c:	f2 e0       	ldi	r31, 0x02	; 2
     53e:	65 81       	ldd	r22, Z+5	; 0x05
     540:	76 81       	ldd	r23, Z+6	; 0x06
     542:	db 01       	movw	r26, r22
     544:	1f 96       	adiw	r26, 0x0f	; 15
     546:	8c 93       	st	X, r24
     548:	80 81       	ld	r24, Z
     54a:	91 81       	ldd	r25, Z+1	; 0x01
     54c:	ec 01       	movw	r28, r24
     54e:	a8 81       	ld	r26, Y
     550:	b9 81       	ldd	r27, Y+1	; 0x01
     552:	b1 83       	std	Z+1, r27	; 0x01
     554:	a0 83       	st	Z, r26
     556:	13 96       	adiw	r26, 0x03	; 3
     558:	fc 93       	st	X, r31
     55a:	ee 93       	st	-X, r30
     55c:	12 97       	sbiw	r26, 0x02	; 2
     55e:	21 e0       	ldi	r18, 0x01	; 1
     560:	2f 87       	std	Y+15, r18	; 0x0f
     562:	96 83       	std	Z+6, r25	; 0x06
     564:	85 83       	std	Z+5, r24	; 0x05
     566:	2c d2       	rcall	.+1112   	; 0x9c0 <_port_switch>
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <chSchGoSleepTimeoutS>:
     56e:	ff 92       	push	r15
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	2c 97       	sbiw	r28, 0x0c	; 12
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	f8 2e       	mov	r15, r24
     58a:	00 91 4f 02 	lds	r16, 0x024F	; 0x80024f <ch0+0x5>
     58e:	10 91 50 02 	lds	r17, 0x0250	; 0x800250 <ch0+0x6>
     592:	6f 3f       	cpi	r22, 0xFF	; 255
     594:	8f ef       	ldi	r24, 0xFF	; 255
     596:	78 07       	cpc	r23, r24
     598:	f1 f0       	breq	.+60     	; 0x5d6 <chSchGoSleepTimeoutS+0x68>
     59a:	98 01       	movw	r18, r16
     59c:	42 e2       	ldi	r20, 0x22	; 34
     59e:	52 e0       	ldi	r21, 0x02	; 2
     5a0:	ce 01       	movw	r24, r28
     5a2:	01 96       	adiw	r24, 0x01	; 1
     5a4:	7a de       	rcall	.-780    	; 0x29a <chVTDoSetI>
     5a6:	8f 2d       	mov	r24, r15
     5a8:	c6 df       	rcall	.-116    	; 0x536 <chSchGoSleepS>
     5aa:	89 81       	ldd	r24, Y+1	; 0x01
     5ac:	9a 81       	ldd	r25, Y+2	; 0x02
     5ae:	89 2b       	or	r24, r25
     5b0:	19 f0       	breq	.+6      	; 0x5b8 <chSchGoSleepTimeoutS+0x4a>
     5b2:	ce 01       	movw	r24, r28
     5b4:	01 96       	adiw	r24, 0x01	; 1
     5b6:	b3 de       	rcall	.-666    	; 0x31e <chVTDoResetI>
     5b8:	f8 01       	movw	r30, r16
     5ba:	82 89       	ldd	r24, Z+18	; 0x12
     5bc:	93 89       	ldd	r25, Z+19	; 0x13
     5be:	2c 96       	adiw	r28, 0x0c	; 12
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	df 91       	pop	r29
     5cc:	cf 91       	pop	r28
     5ce:	1f 91       	pop	r17
     5d0:	0f 91       	pop	r16
     5d2:	ff 90       	pop	r15
     5d4:	08 95       	ret
     5d6:	8f 2d       	mov	r24, r15
     5d8:	ae df       	rcall	.-164    	; 0x536 <chSchGoSleepS>
     5da:	ee cf       	rjmp	.-36     	; 0x5b8 <chSchGoSleepTimeoutS+0x4a>

000005dc <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
     5dc:	a0 91 4a 02 	lds	r26, 0x024A	; 0x80024a <ch0>
     5e0:	b0 91 4b 02 	lds	r27, 0x024B	; 0x80024b <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
     5e4:	e0 91 4f 02 	lds	r30, 0x024F	; 0x80024f <ch0+0x5>
     5e8:	f0 91 50 02 	lds	r31, 0x0250	; 0x800250 <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	14 96       	adiw	r26, 0x04	; 4
     5f0:	2c 91       	ld	r18, X
     5f2:	94 81       	ldd	r25, Z+4	; 0x04
     5f4:	92 17       	cp	r25, r18
     5f6:	08 f0       	brcs	.+2      	; 0x5fa <chSchIsPreemptionRequired+0x1e>
     5f8:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
     5fa:	08 95       	ret

000005fc <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
     600:	a0 91 4f 02 	lds	r26, 0x024F	; 0x80024f <ch0+0x5>
     604:	b0 91 50 02 	lds	r27, 0x0250	; 0x800250 <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
     608:	40 91 4a 02 	lds	r20, 0x024A	; 0x80024a <ch0>
     60c:	50 91 4b 02 	lds	r21, 0x024B	; 0x80024b <ch0+0x1>

  pqp->next       = p->next;
     610:	ea 01       	movw	r28, r20
     612:	e8 81       	ld	r30, Y
     614:	f9 81       	ldd	r31, Y+1	; 0x01
     616:	f0 93 4b 02 	sts	0x024B, r31	; 0x80024b <ch0+0x1>
     61a:	e0 93 4a 02 	sts	0x024A, r30	; 0x80024a <ch0>
  pqp->next->prev = pqp;
     61e:	8a e4       	ldi	r24, 0x4A	; 74
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	93 83       	std	Z+3, r25	; 0x03
     624:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
     626:	81 e0       	ldi	r24, 0x01	; 1
     628:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
     62a:	50 93 50 02 	sts	0x0250, r21	; 0x800250 <ch0+0x6>
     62e:	40 93 4f 02 	sts	0x024F, r20	; 0x80024f <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
     632:	1f 96       	adiw	r26, 0x0f	; 15
     634:	1c 92       	st	X, r1
     636:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
     638:	1b 96       	adiw	r26, 0x0b	; 11
     63a:	ed 91       	ld	r30, X+
     63c:	fc 91       	ld	r31, X
     63e:	1c 97       	sbiw	r26, 0x0c	; 12
     640:	14 96       	adiw	r26, 0x04	; 4
     642:	2c 91       	ld	r18, X
     644:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
     646:	01 90       	ld	r0, Z+
     648:	f0 81       	ld	r31, Z
     64a:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
     64c:	94 81       	ldd	r25, Z+4	; 0x04
     64e:	29 17       	cp	r18, r25
     650:	d0 f3       	brcs	.-12     	; 0x646 <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
     652:	11 96       	adiw	r26, 0x01	; 1
     654:	fc 93       	st	X, r31
     656:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
     658:	82 81       	ldd	r24, Z+2	; 0x02
     65a:	93 81       	ldd	r25, Z+3	; 0x03
     65c:	13 96       	adiw	r26, 0x03	; 3
     65e:	9c 93       	st	X, r25
     660:	8e 93       	st	-X, r24
     662:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
     664:	ec 01       	movw	r28, r24
     666:	b9 83       	std	Y+1, r27	; 0x01
     668:	a8 83       	st	Y, r26
  pqp->prev     = p;
     66a:	b3 83       	std	Z+3, r27	; 0x03
     66c:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
     66e:	bd 01       	movw	r22, r26
     670:	ca 01       	movw	r24, r20
     672:	a6 d1       	rcall	.+844    	; 0x9c0 <_port_switch>
}
     674:	df 91       	pop	r29
     676:	cf 91       	pop	r28
     678:	08 95       	ret

0000067a <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
     67a:	ff cf       	rjmp	.-2      	; 0x67a <__idle_thread>

0000067c <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	2b 97       	sbiw	r28, 0x0b	; 11
     690:	0f b6       	in	r0, 0x3f	; 63
     692:	f8 94       	cli
     694:	de bf       	out	0x3e, r29	; 62
     696:	0f be       	out	0x3f, r0	; 63
     698:	cd bf       	out	0x3d, r28	; 61
     69a:	8c 01       	movw	r16, r24
     69c:	7b 01       	movw	r14, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
     69e:	90 93 49 02 	sts	0x0249, r25	; 0x800249 <ch_system+0x2>
     6a2:	80 93 48 02 	sts	0x0248, r24	; 0x800248 <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
     6a6:	fc 01       	movw	r30, r24
     6a8:	14 8e       	std	Z+28, r1	; 0x1c
     6aa:	13 8e       	std	Z+27, r1	; 0x1b

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
     6ac:	72 a3       	std	Z+34, r23	; 0x22
     6ae:	61 a3       	std	Z+33, r22	; 0x21

  /* Port initialization for the current instance.*/
  port_init(oip);
     6b0:	dd 24       	eor	r13, r13
     6b2:	d3 94       	inc	r13
     6b4:	d0 92 91 02 	sts	0x0291, r13	; 0x800291 <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
     6b8:	91 83       	std	Z+1, r25	; 0x01
     6ba:	80 83       	st	Z, r24
  pqp->prev = pqp;
     6bc:	93 83       	std	Z+3, r25	; 0x03
     6be:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
     6c0:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
     6c2:	47 96       	adiw	r24, 0x17	; 23
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     6c4:	90 8f       	std	Z+24, r25	; 0x18
     6c6:	87 8b       	std	Z+23, r24	; 0x17
  qp->prev = qp;
     6c8:	92 8f       	std	Z+26, r25	; 0x1a
     6ca:	81 8f       	std	Z+25, r24	; 0x19
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
     6cc:	15 8e       	std	Z+29, r1	; 0x1d
     6ce:	16 8e       	std	Z+30, r1	; 0x1e
     6d0:	17 8e       	std	Z+31, r1	; 0x1f
     6d2:	10 a2       	std	Z+32, r1	; 0x20
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
     6d4:	40 97       	sbiw	r24, 0x10	; 16
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
     6d6:	90 87       	std	Z+8, r25	; 0x08
     6d8:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
     6da:	92 87       	std	Z+10, r25	; 0x0a
     6dc:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
     6de:	8f ef       	ldi	r24, 0xFF	; 255
     6e0:	9f ef       	ldi	r25, 0xFF	; 255
     6e2:	94 87       	std	Z+12, r25	; 0x0c
     6e4:	83 87       	std	Z+11, r24	; 0x0b
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
     6e6:	16 86       	std	Z+14, r1	; 0x0e
     6e8:	15 86       	std	Z+13, r1	; 0x0d
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
     6ea:	20 91 57 02 	lds	r18, 0x0257	; 0x800257 <ch0+0xd>
     6ee:	30 91 58 02 	lds	r19, 0x0258	; 0x800258 <ch0+0xe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
     6f2:	27 87       	std	Z+15, r18	; 0x0f
     6f4:	30 8b       	std	Z+16, r19	; 0x10
     6f6:	11 8a       	std	Z+17, r1	; 0x11
     6f8:	12 8a       	std	Z+18, r1	; 0x12
     6fa:	13 8a       	std	Z+19, r1	; 0x13
     6fc:	14 8a       	std	Z+20, r1	; 0x14
     6fe:	15 8a       	std	Z+21, r1	; 0x15
     700:	16 8a       	std	Z+22, r1	; 0x16
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
     702:	ef 5b       	subi	r30, 0xBF	; 191
     704:	ff 4f       	sbci	r31, 0xFF	; 255
     706:	11 82       	std	Z+1, r1	; 0x01
     708:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
     70a:	b8 01       	movw	r22, r16
     70c:	6d 5d       	subi	r22, 0xDD	; 221
     70e:	7f 4f       	sbci	r23, 0xFF	; 255
     710:	20 e8       	ldi	r18, 0x80	; 128
     712:	44 e1       	ldi	r20, 0x14	; 20
     714:	51 e0       	ldi	r21, 0x01	; 1
     716:	c8 01       	movw	r24, r16
     718:	2a d0       	rcall	.+84     	; 0x76e <__thd_object_init>
     71a:	f8 01       	movw	r30, r16
     71c:	96 83       	std	Z+6, r25	; 0x06
     71e:	85 83       	std	Z+5, r24	; 0x05
  oip->rlist.current->wabase = oicp->mainthread_base;
  oip->rlist.current->waend  = oicp->mainthread_end;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
     720:	fc 01       	movw	r30, r24
     722:	d7 86       	std	Z+15, r13	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
     724:	8f e0       	ldi	r24, 0x0F	; 15
     726:	91 e0       	ldi	r25, 0x01	; 1
     728:	9a 83       	std	Y+2, r25	; 0x02
     72a:	89 83       	std	Y+1, r24	; 0x01
     72c:	f7 01       	movw	r30, r14
     72e:	82 81       	ldd	r24, Z+2	; 0x02
     730:	93 81       	ldd	r25, Z+3	; 0x03
     732:	9c 83       	std	Y+4, r25	; 0x04
     734:	8b 83       	std	Y+3, r24	; 0x03
     736:	84 81       	ldd	r24, Z+4	; 0x04
     738:	95 81       	ldd	r25, Z+5	; 0x05
     73a:	9e 83       	std	Y+6, r25	; 0x06
     73c:	8d 83       	std	Y+5, r24	; 0x05
     73e:	df 82       	std	Y+7, r13	; 0x07
     740:	8d e3       	ldi	r24, 0x3D	; 61
     742:	93 e0       	ldi	r25, 0x03	; 3
     744:	99 87       	std	Y+9, r25	; 0x09
     746:	88 87       	std	Y+8, r24	; 0x08
     748:	1b 86       	std	Y+11, r1	; 0x0b
     74a:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
     74c:	ce 01       	movw	r24, r28
     74e:	01 96       	adiw	r24, 0x01	; 1
     750:	9e d0       	rcall	.+316    	; 0x88e <chThdCreateI>
  }
#endif
}
     752:	2b 96       	adiw	r28, 0x0b	; 11
     754:	0f b6       	in	r0, 0x3f	; 63
     756:	f8 94       	cli
     758:	de bf       	out	0x3e, r29	; 62
     75a:	0f be       	out	0x3f, r0	; 63
     75c:	cd bf       	out	0x3d, r28	; 61
     75e:	df 91       	pop	r29
     760:	cf 91       	pop	r28
     762:	1f 91       	pop	r17
     764:	0f 91       	pop	r16
     766:	ff 90       	pop	r15
     768:	ef 90       	pop	r14
     76a:	df 90       	pop	r13
     76c:	08 95       	ret

0000076e <__thd_object_init>:
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	fb 01       	movw	r30, r22
     774:	24 83       	std	Z+4, r18	; 0x04
     776:	32 e0       	ldi	r19, 0x02	; 2
     778:	37 87       	std	Z+15, r19	; 0x0f
     77a:	10 8a       	std	Z+16, r1	; 0x10
     77c:	94 87       	std	Z+12, r25	; 0x0c
     77e:	83 87       	std	Z+11, r24	; 0x0b
     780:	25 8f       	std	Z+29, r18	; 0x1d
     782:	14 8e       	std	Z+28, r1	; 0x1c
     784:	13 8e       	std	Z+27, r1	; 0x1b
     786:	12 8e       	std	Z+26, r1	; 0x1a
     788:	21 e0       	ldi	r18, 0x01	; 1
     78a:	21 8b       	std	Z+17, r18	; 0x11
     78c:	56 87       	std	Z+14, r21	; 0x0e
     78e:	45 87       	std	Z+13, r20	; 0x0d
     790:	9b 01       	movw	r18, r22
     792:	29 5f       	subi	r18, 0xF9	; 249
     794:	3f 4f       	sbci	r19, 0xFF	; 255
     796:	ac 01       	movw	r20, r24
     798:	49 5e       	subi	r20, 0xE9	; 233
     79a:	5f 4f       	sbci	r21, 0xFF	; 255
     79c:	50 87       	std	Z+8, r21	; 0x08
     79e:	47 83       	std	Z+7, r20	; 0x07
     7a0:	ec 01       	movw	r28, r24
     7a2:	a9 8d       	ldd	r26, Y+25	; 0x19
     7a4:	ba 8d       	ldd	r27, Y+26	; 0x1a
     7a6:	b2 87       	std	Z+10, r27	; 0x0a
     7a8:	a1 87       	std	Z+9, r26	; 0x09
     7aa:	2d 93       	st	X+, r18
     7ac:	3c 93       	st	X, r19
     7ae:	3a 8f       	std	Y+26, r19	; 0x1a
     7b0:	29 8f       	std	Y+25, r18	; 0x19
     7b2:	cb 01       	movw	r24, r22
     7b4:	44 96       	adiw	r24, 0x14	; 20
     7b6:	95 8b       	std	Z+21, r25	; 0x15
     7b8:	84 8b       	std	Z+20, r24	; 0x14
     7ba:	02 96       	adiw	r24, 0x02	; 2
     7bc:	97 8b       	std	Z+23, r25	; 0x17
     7be:	86 8b       	std	Z+22, r24	; 0x16
     7c0:	91 8f       	std	Z+25, r25	; 0x19
     7c2:	80 8f       	std	Z+24, r24	; 0x18
     7c4:	cb 01       	movw	r24, r22
     7c6:	df 91       	pop	r29
     7c8:	cf 91       	pop	r28
     7ca:	08 95       	ret

000007cc <chThdCreateSuspendedI>:
     7cc:	cf 93       	push	r28
     7ce:	df 93       	push	r29
     7d0:	dc 01       	movw	r26, r24
     7d2:	14 96       	adiw	r26, 0x04	; 4
     7d4:	2d 91       	ld	r18, X+
     7d6:	3c 91       	ld	r19, X
     7d8:	15 97       	sbiw	r26, 0x05	; 5
     7da:	f9 01       	movw	r30, r18
     7dc:	7e 97       	sbiw	r30, 0x1e	; 30
     7de:	e9 01       	movw	r28, r18
     7e0:	e3 97       	sbiw	r28, 0x33	; 51
     7e2:	d6 83       	std	Z+6, r29	; 0x06
     7e4:	c5 83       	std	Z+5, r28	; 0x05
     7e6:	17 96       	adiw	r26, 0x07	; 7
     7e8:	8c 91       	ld	r24, X
     7ea:	17 97       	sbiw	r26, 0x07	; 7
     7ec:	8a 8b       	std	Y+18, r24	; 0x12
     7ee:	18 96       	adiw	r26, 0x08	; 8
     7f0:	8c 91       	ld	r24, X
     7f2:	18 97       	sbiw	r26, 0x08	; 8
     7f4:	89 8b       	std	Y+17, r24	; 0x11
     7f6:	19 96       	adiw	r26, 0x09	; 9
     7f8:	8c 91       	ld	r24, X
     7fa:	19 97       	sbiw	r26, 0x09	; 9
     7fc:	88 8b       	std	Y+16, r24	; 0x10
     7fe:	1a 96       	adiw	r26, 0x0a	; 10
     800:	8c 91       	ld	r24, X
     802:	1a 97       	sbiw	r26, 0x0a	; 10
     804:	8f 87       	std	Y+15, r24	; 0x0f
     806:	8f e0       	ldi	r24, 0x0F	; 15
     808:	95 e0       	ldi	r25, 0x05	; 5
     80a:	9b 8b       	std	Y+19, r25	; 0x13
     80c:	8c 8b       	std	Y+20, r24	; 0x14
     80e:	16 96       	adiw	r26, 0x06	; 6
     810:	8c 91       	ld	r24, X
     812:	16 97       	sbiw	r26, 0x06	; 6
     814:	4d 91       	ld	r20, X+
     816:	5c 91       	ld	r21, X
     818:	84 83       	std	Z+4, r24	; 0x04
     81a:	92 e0       	ldi	r25, 0x02	; 2
     81c:	97 87       	std	Z+15, r25	; 0x0f
     81e:	10 8a       	std	Z+16, r1	; 0x10
     820:	6a e4       	ldi	r22, 0x4A	; 74
     822:	72 e0       	ldi	r23, 0x02	; 2
     824:	74 87       	std	Z+12, r23	; 0x0c
     826:	63 87       	std	Z+11, r22	; 0x0b
     828:	85 8f       	std	Z+29, r24	; 0x1d
     82a:	14 8e       	std	Z+28, r1	; 0x1c
     82c:	13 8e       	std	Z+27, r1	; 0x1b
     82e:	12 8e       	std	Z+26, r1	; 0x1a
     830:	81 e0       	ldi	r24, 0x01	; 1
     832:	81 8b       	std	Z+17, r24	; 0x11
     834:	56 87       	std	Z+14, r21	; 0x0e
     836:	45 87       	std	Z+13, r20	; 0x0d
     838:	d9 01       	movw	r26, r18
     83a:	57 97       	sbiw	r26, 0x17	; 23
     83c:	81 e6       	ldi	r24, 0x61	; 97
     83e:	92 e0       	ldi	r25, 0x02	; 2
     840:	11 96       	adiw	r26, 0x01	; 1
     842:	9c 93       	st	X, r25
     844:	8e 93       	st	-X, r24
     846:	eb 01       	movw	r28, r22
     848:	89 8d       	ldd	r24, Y+25	; 0x19
     84a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     84c:	13 96       	adiw	r26, 0x03	; 3
     84e:	9c 93       	st	X, r25
     850:	8e 93       	st	-X, r24
     852:	12 97       	sbiw	r26, 0x02	; 2
     854:	ec 01       	movw	r28, r24
     856:	b9 83       	std	Y+1, r27	; 0x01
     858:	a8 83       	st	Y, r26
     85a:	eb 01       	movw	r28, r22
     85c:	ba 8f       	std	Y+26, r27	; 0x1a
     85e:	a9 8f       	std	Y+25, r26	; 0x19
     860:	1d 96       	adiw	r26, 0x0d	; 13
     862:	0b 2e       	mov	r0, r27
     864:	11 96       	adiw	r26, 0x01	; 1
     866:	0c 92       	st	X, r0
     868:	11 97       	sbiw	r26, 0x01	; 1
     86a:	ac 93       	st	X, r26
     86c:	12 96       	adiw	r26, 0x02	; 2
     86e:	0b 2e       	mov	r0, r27
     870:	11 96       	adiw	r26, 0x01	; 1
     872:	0c 92       	st	X, r0
     874:	11 97       	sbiw	r26, 0x01	; 1
     876:	ac 93       	st	X, r26
     878:	0a 2e       	mov	r0, r26
     87a:	1b 2e       	mov	r1, r27
     87c:	13 96       	adiw	r26, 0x03	; 3
     87e:	1c 92       	st	X, r1
     880:	0e 92       	st	-X, r0
     882:	11 24       	eor	r1, r1
     884:	12 97       	sbiw	r26, 0x02	; 2
     886:	cf 01       	movw	r24, r30
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <chThdCreateI>:
     88e:	9e df       	rcall	.-196    	; 0x7cc <chThdCreateSuspendedI>
     890:	2e ce       	rjmp	.-932    	; 0x4ee <chSchReadyI>

00000892 <chThdExitS>:
     892:	0f 93       	push	r16
     894:	1f 93       	push	r17
     896:	cf 93       	push	r28
     898:	df 93       	push	r29
     89a:	c0 91 4f 02 	lds	r28, 0x024F	; 0x80024f <ch0+0x5>
     89e:	d0 91 50 02 	lds	r29, 0x0250	; 0x800250 <ch0+0x6>
     8a2:	9b 8b       	std	Y+19, r25	; 0x13
     8a4:	8a 8b       	std	Y+18, r24	; 0x12
     8a6:	8e 01       	movw	r16, r28
     8a8:	0c 5e       	subi	r16, 0xEC	; 236
     8aa:	1f 4f       	sbci	r17, 0xFF	; 255
     8ac:	8c 89       	ldd	r24, Y+20	; 0x14
     8ae:	9d 89       	ldd	r25, Y+21	; 0x15
     8b0:	08 17       	cp	r16, r24
     8b2:	19 07       	cpc	r17, r25
     8b4:	59 f0       	breq	.+22     	; 0x8cc <chThdExitS+0x3a>
     8b6:	fc 01       	movw	r30, r24
     8b8:	20 81       	ld	r18, Z
     8ba:	31 81       	ldd	r19, Z+1	; 0x01
     8bc:	3d 8b       	std	Y+21, r19	; 0x15
     8be:	2c 8b       	std	Y+20, r18	; 0x14
     8c0:	16 de       	rcall	.-980    	; 0x4ee <chSchReadyI>
     8c2:	8c 89       	ldd	r24, Y+20	; 0x14
     8c4:	9d 89       	ldd	r25, Y+21	; 0x15
     8c6:	80 17       	cp	r24, r16
     8c8:	91 07       	cpc	r25, r17
     8ca:	a9 f7       	brne	.-22     	; 0x8b6 <chThdExitS+0x24>
     8cc:	89 89       	ldd	r24, Y+17	; 0x11
     8ce:	81 11       	cpse	r24, r1
     8d0:	0c c0       	rjmp	.+24     	; 0x8ea <chThdExitS+0x58>
     8d2:	e9 85       	ldd	r30, Y+9	; 0x09
     8d4:	fa 85       	ldd	r31, Y+10	; 0x0a
     8d6:	8f 81       	ldd	r24, Y+7	; 0x07
     8d8:	98 85       	ldd	r25, Y+8	; 0x08
     8da:	91 83       	std	Z+1, r25	; 0x01
     8dc:	80 83       	st	Z, r24
     8de:	af 81       	ldd	r26, Y+7	; 0x07
     8e0:	b8 85       	ldd	r27, Y+8	; 0x08
     8e2:	13 96       	adiw	r26, 0x03	; 3
     8e4:	fc 93       	st	X, r31
     8e6:	ee 93       	st	-X, r30
     8e8:	12 97       	sbiw	r26, 0x02	; 2
     8ea:	8f e0       	ldi	r24, 0x0F	; 15
     8ec:	df 91       	pop	r29
     8ee:	cf 91       	pop	r28
     8f0:	1f 91       	pop	r17
     8f2:	0f 91       	pop	r16
     8f4:	20 ce       	rjmp	.-960    	; 0x536 <chSchGoSleepS>

000008f6 <chThdExit>:
     8f6:	f8 94       	cli
     8f8:	cc cf       	rjmp	.-104    	; 0x892 <chThdExitS>

000008fa <chThdSleep>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     8fa:	f8 94       	cli
 */
static inline void chThdSleepS(sysinterval_t ticks) {

  chDbgCheck(ticks != TIME_IMMEDIATE);

  (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
     8fc:	bc 01       	movw	r22, r24
     8fe:	88 e0       	ldi	r24, 0x08	; 8
     900:	36 de       	rcall	.-916    	; 0x56e <chSchGoSleepTimeoutS>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     902:	78 94       	sei
     904:	08 95       	ret

00000906 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
     906:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
     908:	91 83       	std	Z+1, r25	; 0x01
     90a:	80 83       	st	Z, r24
  qp->prev = qp;
     90c:	93 83       	std	Z+3, r25	; 0x03
     90e:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
     910:	15 82       	std	Z+5, r1	; 0x05
     912:	14 82       	std	Z+4, r1	; 0x04
     914:	08 95       	ret

00000916 <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
     916:	ed e8       	ldi	r30, 0x8D	; 141
     918:	f2 e0       	ldi	r31, 0x02	; 2
     91a:	8b ea       	ldi	r24, 0xAB	; 171
     91c:	91 e0       	ldi	r25, 0x01	; 1
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	8b e2       	ldi	r24, 0x2B	; 43
     924:	92 e0       	ldi	r25, 0x02	; 2
     926:	93 83       	std	Z+3, r25	; 0x03
     928:	82 83       	std	Z+2, r24	; 0x02
     92a:	08 95       	ret

0000092c <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     92c:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
     92e:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <ch_memcore+0x2>
     932:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <ch_memcore+0x3>
     936:	f9 01       	movw	r30, r18
     938:	e8 1b       	sub	r30, r24
     93a:	f9 0b       	sbc	r31, r25
     93c:	71 95       	neg	r23
     93e:	61 95       	neg	r22
     940:	71 09       	sbc	r23, r1
     942:	6e 23       	and	r22, r30
     944:	7f 23       	and	r23, r31
  prev = p - offset;
     946:	cb 01       	movw	r24, r22
     948:	84 1b       	sub	r24, r20
     94a:	95 0b       	sbc	r25, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
     94c:	40 91 8d 02 	lds	r20, 0x028D	; 0x80028d <ch_memcore>
     950:	50 91 8e 02 	lds	r21, 0x028E	; 0x80028e <ch_memcore+0x1>
     954:	84 17       	cp	r24, r20
     956:	95 07       	cpc	r25, r21
     958:	50 f0       	brcs	.+20     	; 0x96e <chCoreAllocFromTop+0x42>
     95a:	28 17       	cp	r18, r24
     95c:	39 07       	cpc	r19, r25
     95e:	38 f0       	brcs	.+14     	; 0x96e <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
     960:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <ch_memcore+0x3>
     964:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <ch_memcore+0x2>

  return p;
     968:	cb 01       	movw	r24, r22
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     96a:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     96c:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
     974:	08 95       	ret

00000976 <chCoreGetStatusX>:
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
     976:	ed e8       	ldi	r30, 0x8D	; 141
     978:	f2 e0       	ldi	r31, 0x02	; 2
     97a:	40 81       	ld	r20, Z
     97c:	51 81       	ldd	r21, Z+1	; 0x01
     97e:	dc 01       	movw	r26, r24
     980:	11 96       	adiw	r26, 0x01	; 1
     982:	5c 93       	st	X, r21
     984:	4e 93       	st	-X, r20
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
     986:	22 81       	ldd	r18, Z+2	; 0x02
     988:	33 81       	ldd	r19, Z+3	; 0x03
     98a:	24 1b       	sub	r18, r20
     98c:	35 0b       	sbc	r19, r21
     98e:	13 96       	adiw	r26, 0x03	; 3
     990:	3c 93       	st	X, r19
     992:	2e 93       	st	-X, r18
     994:	12 97       	sbiw	r26, 0x02	; 2
     996:	08 95       	ret

00000998 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
     998:	cf 93       	push	r28
     99a:	df 93       	push	r29

  default_heap.provider = chCoreAllocAlignedWithOffset;
     99c:	cb e2       	ldi	r28, 0x2B	; 43
     99e:	d2 e0       	ldi	r29, 0x02	; 2
     9a0:	86 e9       	ldi	r24, 0x96	; 150
     9a2:	94 e0       	ldi	r25, 0x04	; 4
     9a4:	99 83       	std	Y+1, r25	; 0x01
     9a6:	88 83       	st	Y, r24
  chCoreGetStatusX(&default_heap.area);
     9a8:	8d e2       	ldi	r24, 0x2D	; 45
     9aa:	92 e0       	ldi	r25, 0x02	; 2
     9ac:	e4 df       	rcall	.-56     	; 0x976 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
     9ae:	1f 82       	std	Y+7, r1	; 0x07
     9b0:	1e 82       	std	Y+6, r1	; 0x06
  H_FREE_PAGES(&default_heap.header) = 0;
     9b2:	19 86       	std	Y+9, r1	; 0x09
     9b4:	18 86       	std	Y+8, r1	; 0x08
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9b6:	85 e3       	ldi	r24, 0x35	; 53
     9b8:	92 e0       	ldi	r25, 0x02	; 2
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
     9ba:	df 91       	pop	r29
  default_heap.provider = chCoreAllocAlignedWithOffset;
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
     9bc:	cf 91       	pop	r28
     9be:	a3 cf       	rjmp	.-186    	; 0x906 <chMtxObjectInit>

000009c0 <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
     9c0:	2f 92       	push	r2
  asm volatile ("push    r3");
     9c2:	3f 92       	push	r3
  asm volatile ("push    r4");
     9c4:	4f 92       	push	r4
  asm volatile ("push    r5");
     9c6:	5f 92       	push	r5
  asm volatile ("push    r6");
     9c8:	6f 92       	push	r6
  asm volatile ("push    r7");
     9ca:	7f 92       	push	r7
  asm volatile ("push    r8");
     9cc:	8f 92       	push	r8
  asm volatile ("push    r9");
     9ce:	9f 92       	push	r9
  asm volatile ("push    r10");
     9d0:	af 92       	push	r10
  asm volatile ("push    r11");
     9d2:	bf 92       	push	r11
  asm volatile ("push    r12");
     9d4:	cf 92       	push	r12
  asm volatile ("push    r13");
     9d6:	df 92       	push	r13
  asm volatile ("push    r14");
     9d8:	ef 92       	push	r14
  asm volatile ("push    r15");
     9da:	ff 92       	push	r15
  asm volatile ("push    r16");
     9dc:	0f 93       	push	r16
  asm volatile ("push    r17");
     9de:	1f 93       	push	r17
  asm volatile ("push    r28");
     9e0:	cf 93       	push	r28
  asm volatile ("push    r29");
     9e2:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
     9e4:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
     9e6:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
     9e8:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
     9ea:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
     9ec:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
     9ee:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
     9f0:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
     9f2:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
     9f4:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
     9f6:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
     9f8:	df 91       	pop	r29
  asm volatile ("pop     r28");
     9fa:	cf 91       	pop	r28
  asm volatile ("pop     r17");
     9fc:	1f 91       	pop	r17
  asm volatile ("pop     r16");
     9fe:	0f 91       	pop	r16
  asm volatile ("pop     r15");
     a00:	ff 90       	pop	r15
  asm volatile ("pop     r14");
     a02:	ef 90       	pop	r14
  asm volatile ("pop     r13");
     a04:	df 90       	pop	r13
  asm volatile ("pop     r12");
     a06:	cf 90       	pop	r12
  asm volatile ("pop     r11");
     a08:	bf 90       	pop	r11
  asm volatile ("pop     r10");
     a0a:	af 90       	pop	r10
  asm volatile ("pop     r9");
     a0c:	9f 90       	pop	r9
  asm volatile ("pop     r8");
     a0e:	8f 90       	pop	r8
  asm volatile ("pop     r7");
     a10:	7f 90       	pop	r7
  asm volatile ("pop     r6");
     a12:	6f 90       	pop	r6
  asm volatile ("pop     r5");
     a14:	5f 90       	pop	r5
  asm volatile ("pop     r4");
     a16:	4f 90       	pop	r4
  asm volatile ("pop     r3");
     a18:	3f 90       	pop	r3
  asm volatile ("pop     r2");
     a1a:	2f 90       	pop	r2
  asm volatile ("ret");
     a1c:	08 95       	ret

00000a1e <_port_thread_start>:
     a1e:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
     a20:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
     a22:	f1 01       	movw	r30, r2
  asm volatile ("icall");
     a24:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
     a26:	67 cf       	rjmp	.-306    	; 0x8f6 <chThdExit>

00000a28 <__vector_1>:
    sei();                                 // HAbilitaa interrupção de maniera geral

}


ISR(INT0_vect) { 
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31

    if (EICRA & (1 << ISC00)) {             // Se configurado para borda de subida
     a4a:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
        EIMSK &= ~(1 << INT0);              // Desabilita a interrupção
     a4e:	e8 98       	cbi	0x1d, 0	; 29
}


ISR(INT0_vect) { 

    if (EICRA & (1 << ISC00)) {             // Se configurado para borda de subida
     a50:	80 fd       	sbrc	r24, 0
     a52:	1b c0       	rjmp	.+54     	; 0xa8a <__vector_1+0x62>
        chThdSleepMilliseconds(100);
        EICRA &= ~(1 << ISC00);             // Configura para borda de descida
        EIMSK |= (1 << INT0);               // Habilita a interrupção
    } else {
        EIMSK &= ~(1 << INT0);              // Desabilita a interrupção
        palWritePad(LED_PORT, LED_PIN, 0);  // LED OFF
     a54:	5f 98       	cbi	0x0b, 7	; 11
        chThdSleepMilliseconds(100);        
     a56:	8b e1       	ldi	r24, 0x1B	; 27
     a58:	96 e0       	ldi	r25, 0x06	; 6
     a5a:	4f df       	rcall	.-354    	; 0x8fa <chThdSleep>
        EICRA |= (1 << ISC00);              // Configura para borda de subida
     a5c:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     a60:	81 60       	ori	r24, 0x01	; 1
     a62:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
        EIMSK |= (1 << INT0);               // Habilita a interrupção       
     a66:	e8 9a       	sbi	0x1d, 0	; 29
    }
  
     
}
     a68:	ff 91       	pop	r31
     a6a:	ef 91       	pop	r30
     a6c:	bf 91       	pop	r27
     a6e:	af 91       	pop	r26
     a70:	9f 91       	pop	r25
     a72:	8f 91       	pop	r24
     a74:	7f 91       	pop	r23
     a76:	6f 91       	pop	r22
     a78:	5f 91       	pop	r21
     a7a:	4f 91       	pop	r20
     a7c:	3f 91       	pop	r19
     a7e:	2f 91       	pop	r18
     a80:	0f 90       	pop	r0
     a82:	0f be       	out	0x3f, r0	; 63
     a84:	0f 90       	pop	r0
     a86:	1f 90       	pop	r1
     a88:	18 95       	reti

ISR(INT0_vect) { 

    if (EICRA & (1 << ISC00)) {             // Se configurado para borda de subida
        EIMSK &= ~(1 << INT0);              // Desabilita a interrupção
        palWritePad(LED_PORT, LED_PIN, 1);  // LED ON
     a8a:	5f 9a       	sbi	0x0b, 7	; 11
        chThdSleepMilliseconds(100);
     a8c:	8b e1       	ldi	r24, 0x1B	; 27
     a8e:	96 e0       	ldi	r25, 0x06	; 6
     a90:	34 df       	rcall	.-408    	; 0x8fa <chThdSleep>
        EICRA &= ~(1 << ISC00);             // Configura para borda de descida
     a92:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     a96:	8e 7f       	andi	r24, 0xFE	; 254
     a98:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
        EIMSK |= (1 << INT0);               // Habilita a interrupção
     a9c:	e8 9a       	sbi	0x1d, 0	; 29
     a9e:	e4 cf       	rjmp	.-56     	; 0xa68 <__vector_1+0x40>

00000aa0 <main>:
/*
 * Application main function.
 */
int main(void) {

    halInit();
     aa0:	11 db       	rcall	.-2526   	; 0xc4 <halInit>
    chSysInit();
     aa2:	e5 db       	rcall	.-2102   	; 0x26e <chSysInit>
     aa4:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
#define LED_PIN 7

uint32_t n = 0;

void config_interruption(){
    EICRA |=  (1 << ISC01) | (1 << ISC00); // Ativando a interrupção INT0 para borda de subida.    
     aa8:	83 60       	ori	r24, 0x03	; 3
     aaa:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
     aae:	e8 9a       	sbi	0x1d, 0	; 29
    EIMSK |= (1 << INT0);                  // Habilitando a interrupção INT0
     ab0:	78 94       	sei
    sei();                                 // HAbilitaa interrupção de maniera geral
     ab2:	46 e0       	ldi	r20, 0x06	; 6

    halInit();
    chSysInit();
    config_interruption();

    palSetPadMode(LED_PORT, LED_PIN, PAL_MODE_OUTPUT_PUSHPULL);
     ab4:	60 e8       	ldi	r22, 0x80	; 128
     ab6:	89 e2       	ldi	r24, 0x29	; 41
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	28 db       	rcall	.-2480   	; 0x10c <_pal_lld_setgroupmode>
     abc:	5f 98       	cbi	0x0b, 7	; 11
    palClearPad(LED_PORT, LED_PIN); 
    

    while(1){
        chThdSleepMilliseconds(500);
     abe:	84 e8       	ldi	r24, 0x84	; 132
     ac0:	9e e1       	ldi	r25, 0x1E	; 30
     ac2:	1b df       	rcall	.-458    	; 0x8fa <chThdSleep>
     ac4:	fc cf       	rjmp	.-8      	; 0xabe <main+0x1e>

00000ac6 <vfprintf>:
     ac6:	ab e0       	ldi	r26, 0x0B	; 11
     ac8:	b0 e0       	ldi	r27, 0x00	; 0
     aca:	e8 e6       	ldi	r30, 0x68	; 104
     acc:	f5 e0       	ldi	r31, 0x05	; 5
     ace:	d3 c2       	rjmp	.+1446   	; 0x1076 <__prologue_saves__+0x8>
     ad0:	6c 01       	movw	r12, r24
     ad2:	7b 01       	movw	r14, r22
     ad4:	3a 01       	movw	r6, r20
     ad6:	fc 01       	movw	r30, r24
     ad8:	17 82       	std	Z+7, r1	; 0x07
     ada:	16 82       	std	Z+6, r1	; 0x06
     adc:	83 81       	ldd	r24, Z+3	; 0x03
     ade:	81 ff       	sbrs	r24, 1
     ae0:	f9 c0       	rjmp	.+498    	; 0xcd4 <vfprintf+0x20e>
     ae2:	ce 01       	movw	r24, r28
     ae4:	01 96       	adiw	r24, 0x01	; 1
     ae6:	4c 01       	movw	r8, r24
     ae8:	f6 01       	movw	r30, r12
     aea:	b3 80       	ldd	r11, Z+3	; 0x03
     aec:	f7 01       	movw	r30, r14
     aee:	b3 fc       	sbrc	r11, 3
     af0:	05 91       	lpm	r16, Z+
     af2:	b3 fe       	sbrs	r11, 3
     af4:	01 91       	ld	r16, Z+
     af6:	7f 01       	movw	r14, r30
     af8:	00 23       	and	r16, r16
     afa:	09 f4       	brne	.+2      	; 0xafe <vfprintf+0x38>
     afc:	e7 c0       	rjmp	.+462    	; 0xccc <vfprintf+0x206>
     afe:	05 32       	cpi	r16, 0x25	; 37
     b00:	49 f4       	brne	.+18     	; 0xb14 <vfprintf+0x4e>
     b02:	b3 fc       	sbrc	r11, 3
     b04:	05 91       	lpm	r16, Z+
     b06:	b3 fe       	sbrs	r11, 3
     b08:	01 91       	ld	r16, Z+
     b0a:	7f 01       	movw	r14, r30
     b0c:	05 32       	cpi	r16, 0x25	; 37
     b0e:	11 f0       	breq	.+4      	; 0xb14 <vfprintf+0x4e>
     b10:	10 e0       	ldi	r17, 0x00	; 0
     b12:	17 c0       	rjmp	.+46     	; 0xb42 <vfprintf+0x7c>
     b14:	b6 01       	movw	r22, r12
     b16:	80 2f       	mov	r24, r16
     b18:	90 e0       	ldi	r25, 0x00	; 0
     b1a:	31 d3       	rcall	.+1634   	; 0x117e <fputc>
     b1c:	53 01       	movw	r10, r6
     b1e:	35 01       	movw	r6, r10
     b20:	e3 cf       	rjmp	.-58     	; 0xae8 <vfprintf+0x22>
     b22:	00 23       	and	r16, r16
     b24:	09 f4       	brne	.+2      	; 0xb28 <vfprintf+0x62>
     b26:	d2 c0       	rjmp	.+420    	; 0xccc <vfprintf+0x206>
     b28:	60 2f       	mov	r22, r16
     b2a:	70 e0       	ldi	r23, 0x00	; 0
     b2c:	8f e6       	ldi	r24, 0x6F	; 111
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	dd d2       	rcall	.+1466   	; 0x10ec <strchr_P>
     b32:	89 2b       	or	r24, r25
     b34:	49 f0       	breq	.+18     	; 0xb48 <vfprintf+0x82>
     b36:	f7 01       	movw	r30, r14
     b38:	b3 fc       	sbrc	r11, 3
     b3a:	05 91       	lpm	r16, Z+
     b3c:	b3 fe       	sbrs	r11, 3
     b3e:	01 91       	ld	r16, Z+
     b40:	7f 01       	movw	r14, r30
     b42:	17 ff       	sbrs	r17, 7
     b44:	ee cf       	rjmp	.-36     	; 0xb22 <vfprintf+0x5c>
     b46:	04 c0       	rjmp	.+8      	; 0xb50 <vfprintf+0x8a>
     b48:	03 32       	cpi	r16, 0x23	; 35
     b4a:	39 f0       	breq	.+14     	; 0xb5a <vfprintf+0x94>
     b4c:	0c 36       	cpi	r16, 0x6C	; 108
     b4e:	19 f0       	breq	.+6      	; 0xb56 <vfprintf+0x90>
     b50:	01 11       	cpse	r16, r1
     b52:	05 c0       	rjmp	.+10     	; 0xb5e <vfprintf+0x98>
     b54:	bb c0       	rjmp	.+374    	; 0xccc <vfprintf+0x206>
     b56:	10 68       	ori	r17, 0x80	; 128
     b58:	ee cf       	rjmp	.-36     	; 0xb36 <vfprintf+0x70>
     b5a:	10 e1       	ldi	r17, 0x10	; 16
     b5c:	ec cf       	rjmp	.-40     	; 0xb36 <vfprintf+0x70>
     b5e:	60 2f       	mov	r22, r16
     b60:	70 e0       	ldi	r23, 0x00	; 0
     b62:	88 e6       	ldi	r24, 0x68	; 104
     b64:	90 e0       	ldi	r25, 0x00	; 0
     b66:	c2 d2       	rcall	.+1412   	; 0x10ec <strchr_P>
     b68:	89 2b       	or	r24, r25
     b6a:	41 f0       	breq	.+16     	; 0xb7c <vfprintf+0xb6>
     b6c:	53 01       	movw	r10, r6
     b6e:	f4 e0       	ldi	r31, 0x04	; 4
     b70:	af 0e       	add	r10, r31
     b72:	b1 1c       	adc	r11, r1
     b74:	b6 01       	movw	r22, r12
     b76:	8f e3       	ldi	r24, 0x3F	; 63
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	10 c0       	rjmp	.+32     	; 0xb9c <vfprintf+0xd6>
     b7c:	03 36       	cpi	r16, 0x63	; 99
     b7e:	31 f0       	breq	.+12     	; 0xb8c <vfprintf+0xc6>
     b80:	03 37       	cpi	r16, 0x73	; 115
     b82:	71 f0       	breq	.+28     	; 0xba0 <vfprintf+0xda>
     b84:	03 35       	cpi	r16, 0x53	; 83
     b86:	01 f5       	brne	.+64     	; 0xbc8 <vfprintf+0x102>
     b88:	11 60       	ori	r17, 0x01	; 1
     b8a:	0a c0       	rjmp	.+20     	; 0xba0 <vfprintf+0xda>
     b8c:	53 01       	movw	r10, r6
     b8e:	82 e0       	ldi	r24, 0x02	; 2
     b90:	a8 0e       	add	r10, r24
     b92:	b1 1c       	adc	r11, r1
     b94:	b6 01       	movw	r22, r12
     b96:	f3 01       	movw	r30, r6
     b98:	80 81       	ld	r24, Z
     b9a:	91 81       	ldd	r25, Z+1	; 0x01
     b9c:	f0 d2       	rcall	.+1504   	; 0x117e <fputc>
     b9e:	bf cf       	rjmp	.-130    	; 0xb1e <vfprintf+0x58>
     ba0:	53 01       	movw	r10, r6
     ba2:	f2 e0       	ldi	r31, 0x02	; 2
     ba4:	af 0e       	add	r10, r31
     ba6:	b1 1c       	adc	r11, r1
     ba8:	f3 01       	movw	r30, r6
     baa:	60 80       	ld	r6, Z
     bac:	71 80       	ldd	r7, Z+1	; 0x01
     bae:	f3 01       	movw	r30, r6
     bb0:	10 fd       	sbrc	r17, 0
     bb2:	85 91       	lpm	r24, Z+
     bb4:	10 ff       	sbrs	r17, 0
     bb6:	81 91       	ld	r24, Z+
     bb8:	3f 01       	movw	r6, r30
     bba:	88 23       	and	r24, r24
     bbc:	09 f4       	brne	.+2      	; 0xbc0 <vfprintf+0xfa>
     bbe:	af cf       	rjmp	.-162    	; 0xb1e <vfprintf+0x58>
     bc0:	b6 01       	movw	r22, r12
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	dc d2       	rcall	.+1464   	; 0x117e <fputc>
     bc6:	f3 cf       	rjmp	.-26     	; 0xbae <vfprintf+0xe8>
     bc8:	04 36       	cpi	r16, 0x64	; 100
     bca:	11 f0       	breq	.+4      	; 0xbd0 <vfprintf+0x10a>
     bcc:	09 36       	cpi	r16, 0x69	; 105
     bce:	21 f5       	brne	.+72     	; 0xc18 <vfprintf+0x152>
     bd0:	53 01       	movw	r10, r6
     bd2:	17 ff       	sbrs	r17, 7
     bd4:	09 c0       	rjmp	.+18     	; 0xbe8 <vfprintf+0x122>
     bd6:	f4 e0       	ldi	r31, 0x04	; 4
     bd8:	af 0e       	add	r10, r31
     bda:	b1 1c       	adc	r11, r1
     bdc:	f3 01       	movw	r30, r6
     bde:	60 81       	ld	r22, Z
     be0:	71 81       	ldd	r23, Z+1	; 0x01
     be2:	82 81       	ldd	r24, Z+2	; 0x02
     be4:	93 81       	ldd	r25, Z+3	; 0x03
     be6:	0a c0       	rjmp	.+20     	; 0xbfc <vfprintf+0x136>
     be8:	f2 e0       	ldi	r31, 0x02	; 2
     bea:	af 0e       	add	r10, r31
     bec:	b1 1c       	adc	r11, r1
     bee:	f3 01       	movw	r30, r6
     bf0:	60 81       	ld	r22, Z
     bf2:	71 81       	ldd	r23, Z+1	; 0x01
     bf4:	07 2e       	mov	r0, r23
     bf6:	00 0c       	add	r0, r0
     bf8:	88 0b       	sbc	r24, r24
     bfa:	99 0b       	sbc	r25, r25
     bfc:	1f 7e       	andi	r17, 0xEF	; 239
     bfe:	97 ff       	sbrs	r25, 7
     c00:	08 c0       	rjmp	.+16     	; 0xc12 <vfprintf+0x14c>
     c02:	90 95       	com	r25
     c04:	80 95       	com	r24
     c06:	70 95       	com	r23
     c08:	61 95       	neg	r22
     c0a:	7f 4f       	sbci	r23, 0xFF	; 255
     c0c:	8f 4f       	sbci	r24, 0xFF	; 255
     c0e:	9f 4f       	sbci	r25, 0xFF	; 255
     c10:	10 64       	ori	r17, 0x40	; 64
     c12:	2a e0       	ldi	r18, 0x0A	; 10
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	30 c0       	rjmp	.+96     	; 0xc78 <vfprintf+0x1b2>
     c18:	00 37       	cpi	r16, 0x70	; 112
     c1a:	91 f0       	breq	.+36     	; 0xc40 <vfprintf+0x17a>
     c1c:	40 f4       	brcc	.+16     	; 0xc2e <vfprintf+0x168>
     c1e:	08 35       	cpi	r16, 0x58	; 88
     c20:	a1 f0       	breq	.+40     	; 0xc4a <vfprintf+0x184>
     c22:	0f 36       	cpi	r16, 0x6F	; 111
     c24:	09 f0       	breq	.+2      	; 0xc28 <vfprintf+0x162>
     c26:	52 c0       	rjmp	.+164    	; 0xccc <vfprintf+0x206>
     c28:	28 e0       	ldi	r18, 0x08	; 8
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	11 c0       	rjmp	.+34     	; 0xc50 <vfprintf+0x18a>
     c2e:	05 37       	cpi	r16, 0x75	; 117
     c30:	19 f0       	breq	.+6      	; 0xc38 <vfprintf+0x172>
     c32:	08 37       	cpi	r16, 0x78	; 120
     c34:	31 f0       	breq	.+12     	; 0xc42 <vfprintf+0x17c>
     c36:	4a c0       	rjmp	.+148    	; 0xccc <vfprintf+0x206>
     c38:	1f 7e       	andi	r17, 0xEF	; 239
     c3a:	2a e0       	ldi	r18, 0x0A	; 10
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	08 c0       	rjmp	.+16     	; 0xc50 <vfprintf+0x18a>
     c40:	10 61       	ori	r17, 0x10	; 16
     c42:	14 62       	ori	r17, 0x24	; 36
     c44:	20 e1       	ldi	r18, 0x10	; 16
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	03 c0       	rjmp	.+6      	; 0xc50 <vfprintf+0x18a>
     c4a:	14 60       	ori	r17, 0x04	; 4
     c4c:	20 e1       	ldi	r18, 0x10	; 16
     c4e:	32 e0       	ldi	r19, 0x02	; 2
     c50:	53 01       	movw	r10, r6
     c52:	17 ff       	sbrs	r17, 7
     c54:	09 c0       	rjmp	.+18     	; 0xc68 <vfprintf+0x1a2>
     c56:	f4 e0       	ldi	r31, 0x04	; 4
     c58:	af 0e       	add	r10, r31
     c5a:	b1 1c       	adc	r11, r1
     c5c:	f3 01       	movw	r30, r6
     c5e:	60 81       	ld	r22, Z
     c60:	71 81       	ldd	r23, Z+1	; 0x01
     c62:	82 81       	ldd	r24, Z+2	; 0x02
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	08 c0       	rjmp	.+16     	; 0xc78 <vfprintf+0x1b2>
     c68:	f2 e0       	ldi	r31, 0x02	; 2
     c6a:	af 0e       	add	r10, r31
     c6c:	b1 1c       	adc	r11, r1
     c6e:	f3 01       	movw	r30, r6
     c70:	60 81       	ld	r22, Z
     c72:	71 81       	ldd	r23, Z+1	; 0x01
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	a4 01       	movw	r20, r8
     c7a:	d6 d2       	rcall	.+1452   	; 0x1228 <__ultoa_invert>
     c7c:	08 2f       	mov	r16, r24
     c7e:	08 19       	sub	r16, r8
     c80:	16 ff       	sbrs	r17, 6
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <vfprintf+0x1c6>
     c84:	b6 01       	movw	r22, r12
     c86:	8d e2       	ldi	r24, 0x2D	; 45
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	79 d2       	rcall	.+1266   	; 0x117e <fputc>
     c8c:	14 ff       	sbrs	r17, 4
     c8e:	13 c0       	rjmp	.+38     	; 0xcb6 <vfprintf+0x1f0>
     c90:	fe 01       	movw	r30, r28
     c92:	e0 0f       	add	r30, r16
     c94:	f1 1d       	adc	r31, r1
     c96:	80 81       	ld	r24, Z
     c98:	80 33       	cpi	r24, 0x30	; 48
     c9a:	69 f0       	breq	.+26     	; 0xcb6 <vfprintf+0x1f0>
     c9c:	b6 01       	movw	r22, r12
     c9e:	80 e3       	ldi	r24, 0x30	; 48
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	6d d2       	rcall	.+1242   	; 0x117e <fputc>
     ca4:	12 ff       	sbrs	r17, 2
     ca6:	07 c0       	rjmp	.+14     	; 0xcb6 <vfprintf+0x1f0>
     ca8:	10 72       	andi	r17, 0x20	; 32
     caa:	81 2f       	mov	r24, r17
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	b6 01       	movw	r22, r12
     cb0:	88 5a       	subi	r24, 0xA8	; 168
     cb2:	9f 4f       	sbci	r25, 0xFF	; 255
     cb4:	64 d2       	rcall	.+1224   	; 0x117e <fputc>
     cb6:	01 50       	subi	r16, 0x01	; 1
     cb8:	f4 01       	movw	r30, r8
     cba:	e0 0f       	add	r30, r16
     cbc:	f1 1d       	adc	r31, r1
     cbe:	80 81       	ld	r24, Z
     cc0:	b6 01       	movw	r22, r12
     cc2:	90 e0       	ldi	r25, 0x00	; 0
     cc4:	5c d2       	rcall	.+1208   	; 0x117e <fputc>
     cc6:	01 11       	cpse	r16, r1
     cc8:	f6 cf       	rjmp	.-20     	; 0xcb6 <vfprintf+0x1f0>
     cca:	29 cf       	rjmp	.-430    	; 0xb1e <vfprintf+0x58>
     ccc:	f6 01       	movw	r30, r12
     cce:	86 81       	ldd	r24, Z+6	; 0x06
     cd0:	97 81       	ldd	r25, Z+7	; 0x07
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <vfprintf+0x212>
     cd4:	8f ef       	ldi	r24, 0xFF	; 255
     cd6:	9f ef       	ldi	r25, 0xFF	; 255
     cd8:	2b 96       	adiw	r28, 0x0b	; 11
     cda:	ee e0       	ldi	r30, 0x0E	; 14
     cdc:	e8 c1       	rjmp	.+976    	; 0x10ae <__epilogue_restores__+0x8>

00000cde <putval>:
     cde:	20 fd       	sbrc	r18, 0
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <putval+0x16>
     ce2:	fc 01       	movw	r30, r24
     ce4:	23 fd       	sbrc	r18, 3
     ce6:	05 c0       	rjmp	.+10     	; 0xcf2 <putval+0x14>
     ce8:	22 ff       	sbrs	r18, 2
     cea:	02 c0       	rjmp	.+4      	; 0xcf0 <putval+0x12>
     cec:	73 83       	std	Z+3, r23	; 0x03
     cee:	62 83       	std	Z+2, r22	; 0x02
     cf0:	51 83       	std	Z+1, r21	; 0x01
     cf2:	40 83       	st	Z, r20
     cf4:	08 95       	ret

00000cf6 <mulacc>:
     cf6:	44 fd       	sbrc	r20, 4
     cf8:	17 c0       	rjmp	.+46     	; 0xd28 <mulacc+0x32>
     cfa:	46 fd       	sbrc	r20, 6
     cfc:	17 c0       	rjmp	.+46     	; 0xd2c <mulacc+0x36>
     cfe:	ab 01       	movw	r20, r22
     d00:	bc 01       	movw	r22, r24
     d02:	da 01       	movw	r26, r20
     d04:	fb 01       	movw	r30, r22
     d06:	aa 0f       	add	r26, r26
     d08:	bb 1f       	adc	r27, r27
     d0a:	ee 1f       	adc	r30, r30
     d0c:	ff 1f       	adc	r31, r31
     d0e:	10 94       	com	r1
     d10:	d1 f7       	brne	.-12     	; 0xd06 <mulacc+0x10>
     d12:	4a 0f       	add	r20, r26
     d14:	5b 1f       	adc	r21, r27
     d16:	6e 1f       	adc	r22, r30
     d18:	7f 1f       	adc	r23, r31
     d1a:	cb 01       	movw	r24, r22
     d1c:	ba 01       	movw	r22, r20
     d1e:	66 0f       	add	r22, r22
     d20:	77 1f       	adc	r23, r23
     d22:	88 1f       	adc	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	09 c0       	rjmp	.+18     	; 0xd3a <mulacc+0x44>
     d28:	33 e0       	ldi	r19, 0x03	; 3
     d2a:	01 c0       	rjmp	.+2      	; 0xd2e <mulacc+0x38>
     d2c:	34 e0       	ldi	r19, 0x04	; 4
     d2e:	66 0f       	add	r22, r22
     d30:	77 1f       	adc	r23, r23
     d32:	88 1f       	adc	r24, r24
     d34:	99 1f       	adc	r25, r25
     d36:	31 50       	subi	r19, 0x01	; 1
     d38:	d1 f7       	brne	.-12     	; 0xd2e <mulacc+0x38>
     d3a:	62 0f       	add	r22, r18
     d3c:	71 1d       	adc	r23, r1
     d3e:	81 1d       	adc	r24, r1
     d40:	91 1d       	adc	r25, r1
     d42:	08 95       	ret

00000d44 <skip_spaces>:
     d44:	0f 93       	push	r16
     d46:	1f 93       	push	r17
     d48:	cf 93       	push	r28
     d4a:	df 93       	push	r29
     d4c:	8c 01       	movw	r16, r24
     d4e:	c8 01       	movw	r24, r16
     d50:	d8 d1       	rcall	.+944    	; 0x1102 <fgetc>
     d52:	ec 01       	movw	r28, r24
     d54:	97 fd       	sbrc	r25, 7
     d56:	06 c0       	rjmp	.+12     	; 0xd64 <skip_spaces+0x20>
     d58:	c1 d1       	rcall	.+898    	; 0x10dc <isspace>
     d5a:	89 2b       	or	r24, r25
     d5c:	c1 f7       	brne	.-16     	; 0xd4e <skip_spaces+0xa>
     d5e:	b8 01       	movw	r22, r16
     d60:	ce 01       	movw	r24, r28
     d62:	49 d2       	rcall	.+1170   	; 0x11f6 <ungetc>
     d64:	ce 01       	movw	r24, r28
     d66:	df 91       	pop	r29
     d68:	cf 91       	pop	r28
     d6a:	1f 91       	pop	r17
     d6c:	0f 91       	pop	r16
     d6e:	08 95       	ret

00000d70 <conv_int>:
     d70:	8f 92       	push	r8
     d72:	9f 92       	push	r9
     d74:	af 92       	push	r10
     d76:	bf 92       	push	r11
     d78:	ef 92       	push	r14
     d7a:	ff 92       	push	r15
     d7c:	0f 93       	push	r16
     d7e:	1f 93       	push	r17
     d80:	cf 93       	push	r28
     d82:	df 93       	push	r29
     d84:	8c 01       	movw	r16, r24
     d86:	d6 2f       	mov	r29, r22
     d88:	7a 01       	movw	r14, r20
     d8a:	b2 2e       	mov	r11, r18
     d8c:	ba d1       	rcall	.+884    	; 0x1102 <fgetc>
     d8e:	9c 01       	movw	r18, r24
     d90:	33 27       	eor	r19, r19
     d92:	2b 32       	cpi	r18, 0x2B	; 43
     d94:	31 05       	cpc	r19, r1
     d96:	31 f0       	breq	.+12     	; 0xda4 <conv_int+0x34>
     d98:	2d 32       	cpi	r18, 0x2D	; 45
     d9a:	31 05       	cpc	r19, r1
     d9c:	59 f4       	brne	.+22     	; 0xdb4 <conv_int+0x44>
     d9e:	8b 2d       	mov	r24, r11
     da0:	80 68       	ori	r24, 0x80	; 128
     da2:	b8 2e       	mov	r11, r24
     da4:	d1 50       	subi	r29, 0x01	; 1
     da6:	11 f4       	brne	.+4      	; 0xdac <conv_int+0x3c>
     da8:	80 e0       	ldi	r24, 0x00	; 0
     daa:	61 c0       	rjmp	.+194    	; 0xe6e <conv_int+0xfe>
     dac:	c8 01       	movw	r24, r16
     dae:	a9 d1       	rcall	.+850    	; 0x1102 <fgetc>
     db0:	97 fd       	sbrc	r25, 7
     db2:	fa cf       	rjmp	.-12     	; 0xda8 <conv_int+0x38>
     db4:	cb 2d       	mov	r28, r11
     db6:	cd 7f       	andi	r28, 0xFD	; 253
     db8:	2b 2d       	mov	r18, r11
     dba:	20 73       	andi	r18, 0x30	; 48
     dbc:	f9 f4       	brne	.+62     	; 0xdfc <conv_int+0x8c>
     dbe:	80 33       	cpi	r24, 0x30	; 48
     dc0:	e9 f4       	brne	.+58     	; 0xdfc <conv_int+0x8c>
     dc2:	aa 24       	eor	r10, r10
     dc4:	aa 94       	dec	r10
     dc6:	ad 0e       	add	r10, r29
     dc8:	09 f4       	brne	.+2      	; 0xdcc <conv_int+0x5c>
     dca:	3e c0       	rjmp	.+124    	; 0xe48 <conv_int+0xd8>
     dcc:	c8 01       	movw	r24, r16
     dce:	99 d1       	rcall	.+818    	; 0x1102 <fgetc>
     dd0:	97 fd       	sbrc	r25, 7
     dd2:	3a c0       	rjmp	.+116    	; 0xe48 <conv_int+0xd8>
     dd4:	9c 01       	movw	r18, r24
     dd6:	2f 7d       	andi	r18, 0xDF	; 223
     dd8:	33 27       	eor	r19, r19
     dda:	28 35       	cpi	r18, 0x58	; 88
     ddc:	31 05       	cpc	r19, r1
     dde:	41 f4       	brne	.+16     	; 0xdf0 <conv_int+0x80>
     de0:	c2 64       	ori	r28, 0x42	; 66
     de2:	d2 50       	subi	r29, 0x02	; 2
     de4:	89 f1       	breq	.+98     	; 0xe48 <conv_int+0xd8>
     de6:	c8 01       	movw	r24, r16
     de8:	8c d1       	rcall	.+792    	; 0x1102 <fgetc>
     dea:	97 ff       	sbrs	r25, 7
     dec:	07 c0       	rjmp	.+14     	; 0xdfc <conv_int+0x8c>
     dee:	2c c0       	rjmp	.+88     	; 0xe48 <conv_int+0xd8>
     df0:	b6 fe       	sbrs	r11, 6
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <conv_int+0x88>
     df4:	c2 60       	ori	r28, 0x02	; 2
     df6:	01 c0       	rjmp	.+2      	; 0xdfa <conv_int+0x8a>
     df8:	c2 61       	ori	r28, 0x12	; 18
     dfa:	da 2d       	mov	r29, r10
     dfc:	81 2c       	mov	r8, r1
     dfe:	91 2c       	mov	r9, r1
     e00:	54 01       	movw	r10, r8
     e02:	20 ed       	ldi	r18, 0xD0	; 208
     e04:	28 0f       	add	r18, r24
     e06:	28 30       	cpi	r18, 0x08	; 8
     e08:	78 f0       	brcs	.+30     	; 0xe28 <conv_int+0xb8>
     e0a:	c4 ff       	sbrs	r28, 4
     e0c:	03 c0       	rjmp	.+6      	; 0xe14 <conv_int+0xa4>
     e0e:	b8 01       	movw	r22, r16
     e10:	f2 d1       	rcall	.+996    	; 0x11f6 <ungetc>
     e12:	17 c0       	rjmp	.+46     	; 0xe42 <conv_int+0xd2>
     e14:	2a 30       	cpi	r18, 0x0A	; 10
     e16:	40 f0       	brcs	.+16     	; 0xe28 <conv_int+0xb8>
     e18:	c6 ff       	sbrs	r28, 6
     e1a:	f9 cf       	rjmp	.-14     	; 0xe0e <conv_int+0x9e>
     e1c:	2f 7d       	andi	r18, 0xDF	; 223
     e1e:	3f ee       	ldi	r19, 0xEF	; 239
     e20:	32 0f       	add	r19, r18
     e22:	36 30       	cpi	r19, 0x06	; 6
     e24:	a0 f7       	brcc	.-24     	; 0xe0e <conv_int+0x9e>
     e26:	27 50       	subi	r18, 0x07	; 7
     e28:	4c 2f       	mov	r20, r28
     e2a:	c5 01       	movw	r24, r10
     e2c:	b4 01       	movw	r22, r8
     e2e:	63 df       	rcall	.-314    	; 0xcf6 <mulacc>
     e30:	4b 01       	movw	r8, r22
     e32:	5c 01       	movw	r10, r24
     e34:	c2 60       	ori	r28, 0x02	; 2
     e36:	d1 50       	subi	r29, 0x01	; 1
     e38:	51 f0       	breq	.+20     	; 0xe4e <conv_int+0xde>
     e3a:	c8 01       	movw	r24, r16
     e3c:	62 d1       	rcall	.+708    	; 0x1102 <fgetc>
     e3e:	97 ff       	sbrs	r25, 7
     e40:	e0 cf       	rjmp	.-64     	; 0xe02 <conv_int+0x92>
     e42:	c1 fd       	sbrc	r28, 1
     e44:	04 c0       	rjmp	.+8      	; 0xe4e <conv_int+0xde>
     e46:	b0 cf       	rjmp	.-160    	; 0xda8 <conv_int+0x38>
     e48:	81 2c       	mov	r8, r1
     e4a:	91 2c       	mov	r9, r1
     e4c:	54 01       	movw	r10, r8
     e4e:	c7 ff       	sbrs	r28, 7
     e50:	08 c0       	rjmp	.+16     	; 0xe62 <conv_int+0xf2>
     e52:	b0 94       	com	r11
     e54:	a0 94       	com	r10
     e56:	90 94       	com	r9
     e58:	80 94       	com	r8
     e5a:	81 1c       	adc	r8, r1
     e5c:	91 1c       	adc	r9, r1
     e5e:	a1 1c       	adc	r10, r1
     e60:	b1 1c       	adc	r11, r1
     e62:	2c 2f       	mov	r18, r28
     e64:	b5 01       	movw	r22, r10
     e66:	a4 01       	movw	r20, r8
     e68:	c7 01       	movw	r24, r14
     e6a:	39 df       	rcall	.-398    	; 0xcde <putval>
     e6c:	81 e0       	ldi	r24, 0x01	; 1
     e6e:	df 91       	pop	r29
     e70:	cf 91       	pop	r28
     e72:	1f 91       	pop	r17
     e74:	0f 91       	pop	r16
     e76:	ff 90       	pop	r15
     e78:	ef 90       	pop	r14
     e7a:	bf 90       	pop	r11
     e7c:	af 90       	pop	r10
     e7e:	9f 90       	pop	r9
     e80:	8f 90       	pop	r8
     e82:	08 95       	ret

00000e84 <vfscanf>:
     e84:	a0 e0       	ldi	r26, 0x00	; 0
     e86:	b0 e0       	ldi	r27, 0x00	; 0
     e88:	e7 e4       	ldi	r30, 0x47	; 71
     e8a:	f7 e0       	ldi	r31, 0x07	; 7
     e8c:	f3 c0       	rjmp	.+486    	; 0x1074 <__prologue_saves__+0x6>
     e8e:	6c 01       	movw	r12, r24
     e90:	eb 01       	movw	r28, r22
     e92:	5a 01       	movw	r10, r20
     e94:	fc 01       	movw	r30, r24
     e96:	17 82       	std	Z+7, r1	; 0x07
     e98:	16 82       	std	Z+6, r1	; 0x06
     e9a:	51 2c       	mov	r5, r1
     e9c:	f6 01       	movw	r30, r12
     e9e:	f3 80       	ldd	r15, Z+3	; 0x03
     ea0:	fe 01       	movw	r30, r28
     ea2:	f3 fc       	sbrc	r15, 3
     ea4:	85 91       	lpm	r24, Z+
     ea6:	f3 fe       	sbrs	r15, 3
     ea8:	81 91       	ld	r24, Z+
     eaa:	18 2f       	mov	r17, r24
     eac:	ef 01       	movw	r28, r30
     eae:	88 23       	and	r24, r24
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <vfscanf+0x30>
     eb2:	d4 c0       	rjmp	.+424    	; 0x105c <vfscanf+0x1d8>
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	12 d1       	rcall	.+548    	; 0x10dc <isspace>
     eb8:	89 2b       	or	r24, r25
     eba:	19 f0       	breq	.+6      	; 0xec2 <vfscanf+0x3e>
     ebc:	c6 01       	movw	r24, r12
     ebe:	42 df       	rcall	.-380    	; 0xd44 <skip_spaces>
     ec0:	ed cf       	rjmp	.-38     	; 0xe9c <vfscanf+0x18>
     ec2:	15 32       	cpi	r17, 0x25	; 37
     ec4:	41 f4       	brne	.+16     	; 0xed6 <vfscanf+0x52>
     ec6:	fe 01       	movw	r30, r28
     ec8:	f3 fc       	sbrc	r15, 3
     eca:	15 91       	lpm	r17, Z+
     ecc:	f3 fe       	sbrs	r15, 3
     ece:	11 91       	ld	r17, Z+
     ed0:	ef 01       	movw	r28, r30
     ed2:	15 32       	cpi	r17, 0x25	; 37
     ed4:	71 f4       	brne	.+28     	; 0xef2 <vfscanf+0x6e>
     ed6:	c6 01       	movw	r24, r12
     ed8:	14 d1       	rcall	.+552    	; 0x1102 <fgetc>
     eda:	97 fd       	sbrc	r25, 7
     edc:	bd c0       	rjmp	.+378    	; 0x1058 <vfscanf+0x1d4>
     ede:	41 2f       	mov	r20, r17
     ee0:	50 e0       	ldi	r21, 0x00	; 0
     ee2:	9c 01       	movw	r18, r24
     ee4:	33 27       	eor	r19, r19
     ee6:	24 17       	cp	r18, r20
     ee8:	35 07       	cpc	r19, r21
     eea:	c1 f2       	breq	.-80     	; 0xe9c <vfscanf+0x18>
     eec:	b6 01       	movw	r22, r12
     eee:	83 d1       	rcall	.+774    	; 0x11f6 <ungetc>
     ef0:	b5 c0       	rjmp	.+362    	; 0x105c <vfscanf+0x1d8>
     ef2:	1a 32       	cpi	r17, 0x2A	; 42
     ef4:	39 f4       	brne	.+14     	; 0xf04 <vfscanf+0x80>
     ef6:	f3 fc       	sbrc	r15, 3
     ef8:	15 91       	lpm	r17, Z+
     efa:	f3 fe       	sbrs	r15, 3
     efc:	11 91       	ld	r17, Z+
     efe:	ef 01       	movw	r28, r30
     f00:	01 e0       	ldi	r16, 0x01	; 1
     f02:	01 c0       	rjmp	.+2      	; 0xf06 <vfscanf+0x82>
     f04:	00 e0       	ldi	r16, 0x00	; 0
     f06:	e1 2c       	mov	r14, r1
     f08:	20 ed       	ldi	r18, 0xD0	; 208
     f0a:	21 0f       	add	r18, r17
     f0c:	2a 30       	cpi	r18, 0x0A	; 10
     f0e:	78 f4       	brcc	.+30     	; 0xf2e <vfscanf+0xaa>
     f10:	02 60       	ori	r16, 0x02	; 2
     f12:	6e 2d       	mov	r22, r14
     f14:	70 e0       	ldi	r23, 0x00	; 0
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	40 e2       	ldi	r20, 0x20	; 32
     f1c:	ec de       	rcall	.-552    	; 0xcf6 <mulacc>
     f1e:	e6 2e       	mov	r14, r22
     f20:	fe 01       	movw	r30, r28
     f22:	f3 fc       	sbrc	r15, 3
     f24:	15 91       	lpm	r17, Z+
     f26:	f3 fe       	sbrs	r15, 3
     f28:	11 91       	ld	r17, Z+
     f2a:	ef 01       	movw	r28, r30
     f2c:	ed cf       	rjmp	.-38     	; 0xf08 <vfscanf+0x84>
     f2e:	01 ff       	sbrs	r16, 1
     f30:	03 c0       	rjmp	.+6      	; 0xf38 <vfscanf+0xb4>
     f32:	e1 10       	cpse	r14, r1
     f34:	03 c0       	rjmp	.+6      	; 0xf3c <vfscanf+0xb8>
     f36:	92 c0       	rjmp	.+292    	; 0x105c <vfscanf+0x1d8>
     f38:	ee 24       	eor	r14, r14
     f3a:	ea 94       	dec	r14
     f3c:	18 36       	cpi	r17, 0x68	; 104
     f3e:	19 f0       	breq	.+6      	; 0xf46 <vfscanf+0xc2>
     f40:	1c 36       	cpi	r17, 0x6C	; 108
     f42:	51 f0       	breq	.+20     	; 0xf58 <vfscanf+0xd4>
     f44:	10 c0       	rjmp	.+32     	; 0xf66 <vfscanf+0xe2>
     f46:	fe 01       	movw	r30, r28
     f48:	f3 fc       	sbrc	r15, 3
     f4a:	15 91       	lpm	r17, Z+
     f4c:	f3 fe       	sbrs	r15, 3
     f4e:	11 91       	ld	r17, Z+
     f50:	ef 01       	movw	r28, r30
     f52:	18 36       	cpi	r17, 0x68	; 104
     f54:	41 f4       	brne	.+16     	; 0xf66 <vfscanf+0xe2>
     f56:	08 60       	ori	r16, 0x08	; 8
     f58:	04 60       	ori	r16, 0x04	; 4
     f5a:	fe 01       	movw	r30, r28
     f5c:	f3 fc       	sbrc	r15, 3
     f5e:	15 91       	lpm	r17, Z+
     f60:	f3 fe       	sbrs	r15, 3
     f62:	11 91       	ld	r17, Z+
     f64:	ef 01       	movw	r28, r30
     f66:	11 23       	and	r17, r17
     f68:	09 f4       	brne	.+2      	; 0xf6c <vfscanf+0xe8>
     f6a:	78 c0       	rjmp	.+240    	; 0x105c <vfscanf+0x1d8>
     f6c:	61 2f       	mov	r22, r17
     f6e:	70 e0       	ldi	r23, 0x00	; 0
     f70:	8f e7       	ldi	r24, 0x7F	; 127
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	bb d0       	rcall	.+374    	; 0x10ec <strchr_P>
     f76:	89 2b       	or	r24, r25
     f78:	09 f4       	brne	.+2      	; 0xf7c <vfscanf+0xf8>
     f7a:	70 c0       	rjmp	.+224    	; 0x105c <vfscanf+0x1d8>
     f7c:	00 fd       	sbrc	r16, 0
     f7e:	07 c0       	rjmp	.+14     	; 0xf8e <vfscanf+0x10a>
     f80:	f5 01       	movw	r30, r10
     f82:	80 80       	ld	r8, Z
     f84:	91 80       	ldd	r9, Z+1	; 0x01
     f86:	c5 01       	movw	r24, r10
     f88:	02 96       	adiw	r24, 0x02	; 2
     f8a:	5c 01       	movw	r10, r24
     f8c:	02 c0       	rjmp	.+4      	; 0xf92 <vfscanf+0x10e>
     f8e:	81 2c       	mov	r8, r1
     f90:	91 2c       	mov	r9, r1
     f92:	1e 36       	cpi	r17, 0x6E	; 110
     f94:	49 f4       	brne	.+18     	; 0xfa8 <vfscanf+0x124>
     f96:	f6 01       	movw	r30, r12
     f98:	46 81       	ldd	r20, Z+6	; 0x06
     f9a:	57 81       	ldd	r21, Z+7	; 0x07
     f9c:	60 e0       	ldi	r22, 0x00	; 0
     f9e:	70 e0       	ldi	r23, 0x00	; 0
     fa0:	20 2f       	mov	r18, r16
     fa2:	c4 01       	movw	r24, r8
     fa4:	9c de       	rcall	.-712    	; 0xcde <putval>
     fa6:	7a cf       	rjmp	.-268    	; 0xe9c <vfscanf+0x18>
     fa8:	13 36       	cpi	r17, 0x63	; 99
     faa:	a1 f4       	brne	.+40     	; 0xfd4 <vfscanf+0x150>
     fac:	01 fd       	sbrc	r16, 1
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <vfscanf+0x130>
     fb0:	ee 24       	eor	r14, r14
     fb2:	e3 94       	inc	r14
     fb4:	c6 01       	movw	r24, r12
     fb6:	a5 d0       	rcall	.+330    	; 0x1102 <fgetc>
     fb8:	97 fd       	sbrc	r25, 7
     fba:	4e c0       	rjmp	.+156    	; 0x1058 <vfscanf+0x1d4>
     fbc:	81 14       	cp	r8, r1
     fbe:	91 04       	cpc	r9, r1
     fc0:	29 f0       	breq	.+10     	; 0xfcc <vfscanf+0x148>
     fc2:	f4 01       	movw	r30, r8
     fc4:	80 83       	st	Z, r24
     fc6:	c4 01       	movw	r24, r8
     fc8:	01 96       	adiw	r24, 0x01	; 1
     fca:	4c 01       	movw	r8, r24
     fcc:	ea 94       	dec	r14
     fce:	e1 10       	cpse	r14, r1
     fd0:	f1 cf       	rjmp	.-30     	; 0xfb4 <vfscanf+0x130>
     fd2:	3e c0       	rjmp	.+124    	; 0x1050 <vfscanf+0x1cc>
     fd4:	c6 01       	movw	r24, r12
     fd6:	b6 de       	rcall	.-660    	; 0xd44 <skip_spaces>
     fd8:	97 fd       	sbrc	r25, 7
     fda:	3e c0       	rjmp	.+124    	; 0x1058 <vfscanf+0x1d4>
     fdc:	1f 36       	cpi	r17, 0x6F	; 111
     fde:	49 f1       	breq	.+82     	; 0x1032 <vfscanf+0x1ae>
     fe0:	28 f4       	brcc	.+10     	; 0xfec <vfscanf+0x168>
     fe2:	14 36       	cpi	r17, 0x64	; 100
     fe4:	21 f1       	breq	.+72     	; 0x102e <vfscanf+0x1aa>
     fe6:	19 36       	cpi	r17, 0x69	; 105
     fe8:	39 f1       	breq	.+78     	; 0x1038 <vfscanf+0x1b4>
     fea:	25 c0       	rjmp	.+74     	; 0x1036 <vfscanf+0x1b2>
     fec:	13 37       	cpi	r17, 0x73	; 115
     fee:	71 f0       	breq	.+28     	; 0x100c <vfscanf+0x188>
     ff0:	15 37       	cpi	r17, 0x75	; 117
     ff2:	e9 f0       	breq	.+58     	; 0x102e <vfscanf+0x1aa>
     ff4:	20 c0       	rjmp	.+64     	; 0x1036 <vfscanf+0x1b2>
     ff6:	81 14       	cp	r8, r1
     ff8:	91 04       	cpc	r9, r1
     ffa:	29 f0       	breq	.+10     	; 0x1006 <vfscanf+0x182>
     ffc:	f4 01       	movw	r30, r8
     ffe:	60 82       	st	Z, r6
    1000:	c4 01       	movw	r24, r8
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	4c 01       	movw	r8, r24
    1006:	ea 94       	dec	r14
    1008:	ee 20       	and	r14, r14
    100a:	59 f0       	breq	.+22     	; 0x1022 <vfscanf+0x19e>
    100c:	c6 01       	movw	r24, r12
    100e:	79 d0       	rcall	.+242    	; 0x1102 <fgetc>
    1010:	3c 01       	movw	r6, r24
    1012:	97 fd       	sbrc	r25, 7
    1014:	06 c0       	rjmp	.+12     	; 0x1022 <vfscanf+0x19e>
    1016:	62 d0       	rcall	.+196    	; 0x10dc <isspace>
    1018:	89 2b       	or	r24, r25
    101a:	69 f3       	breq	.-38     	; 0xff6 <vfscanf+0x172>
    101c:	b6 01       	movw	r22, r12
    101e:	c3 01       	movw	r24, r6
    1020:	ea d0       	rcall	.+468    	; 0x11f6 <ungetc>
    1022:	81 14       	cp	r8, r1
    1024:	91 04       	cpc	r9, r1
    1026:	a1 f0       	breq	.+40     	; 0x1050 <vfscanf+0x1cc>
    1028:	f4 01       	movw	r30, r8
    102a:	10 82       	st	Z, r1
    102c:	11 c0       	rjmp	.+34     	; 0x1050 <vfscanf+0x1cc>
    102e:	00 62       	ori	r16, 0x20	; 32
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <vfscanf+0x1b4>
    1032:	00 61       	ori	r16, 0x10	; 16
    1034:	01 c0       	rjmp	.+2      	; 0x1038 <vfscanf+0x1b4>
    1036:	00 64       	ori	r16, 0x40	; 64
    1038:	20 2f       	mov	r18, r16
    103a:	a4 01       	movw	r20, r8
    103c:	6e 2d       	mov	r22, r14
    103e:	c6 01       	movw	r24, r12
    1040:	97 de       	rcall	.-722    	; 0xd70 <conv_int>
    1042:	81 11       	cpse	r24, r1
    1044:	05 c0       	rjmp	.+10     	; 0x1050 <vfscanf+0x1cc>
    1046:	f6 01       	movw	r30, r12
    1048:	83 81       	ldd	r24, Z+3	; 0x03
    104a:	80 73       	andi	r24, 0x30	; 48
    104c:	29 f4       	brne	.+10     	; 0x1058 <vfscanf+0x1d4>
    104e:	06 c0       	rjmp	.+12     	; 0x105c <vfscanf+0x1d8>
    1050:	00 fd       	sbrc	r16, 0
    1052:	24 cf       	rjmp	.-440    	; 0xe9c <vfscanf+0x18>
    1054:	53 94       	inc	r5
    1056:	22 cf       	rjmp	.-444    	; 0xe9c <vfscanf+0x18>
    1058:	55 20       	and	r5, r5
    105a:	19 f0       	breq	.+6      	; 0x1062 <vfscanf+0x1de>
    105c:	85 2d       	mov	r24, r5
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <vfscanf+0x1e2>
    1062:	8f ef       	ldi	r24, 0xFF	; 255
    1064:	9f ef       	ldi	r25, 0xFF	; 255
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
    106a:	ef e0       	ldi	r30, 0x0F	; 15
    106c:	1f c0       	rjmp	.+62     	; 0x10ac <__epilogue_restores__+0x6>

0000106e <__prologue_saves__>:
    106e:	2f 92       	push	r2
    1070:	3f 92       	push	r3
    1072:	4f 92       	push	r4
    1074:	5f 92       	push	r5
    1076:	6f 92       	push	r6
    1078:	7f 92       	push	r7
    107a:	8f 92       	push	r8
    107c:	9f 92       	push	r9
    107e:	af 92       	push	r10
    1080:	bf 92       	push	r11
    1082:	cf 92       	push	r12
    1084:	df 92       	push	r13
    1086:	ef 92       	push	r14
    1088:	ff 92       	push	r15
    108a:	0f 93       	push	r16
    108c:	1f 93       	push	r17
    108e:	cf 93       	push	r28
    1090:	df 93       	push	r29
    1092:	cd b7       	in	r28, 0x3d	; 61
    1094:	de b7       	in	r29, 0x3e	; 62
    1096:	ca 1b       	sub	r28, r26
    1098:	db 0b       	sbc	r29, r27
    109a:	0f b6       	in	r0, 0x3f	; 63
    109c:	f8 94       	cli
    109e:	de bf       	out	0x3e, r29	; 62
    10a0:	0f be       	out	0x3f, r0	; 63
    10a2:	cd bf       	out	0x3d, r28	; 61
    10a4:	09 94       	ijmp

000010a6 <__epilogue_restores__>:
    10a6:	2a 88       	ldd	r2, Y+18	; 0x12
    10a8:	39 88       	ldd	r3, Y+17	; 0x11
    10aa:	48 88       	ldd	r4, Y+16	; 0x10
    10ac:	5f 84       	ldd	r5, Y+15	; 0x0f
    10ae:	6e 84       	ldd	r6, Y+14	; 0x0e
    10b0:	7d 84       	ldd	r7, Y+13	; 0x0d
    10b2:	8c 84       	ldd	r8, Y+12	; 0x0c
    10b4:	9b 84       	ldd	r9, Y+11	; 0x0b
    10b6:	aa 84       	ldd	r10, Y+10	; 0x0a
    10b8:	b9 84       	ldd	r11, Y+9	; 0x09
    10ba:	c8 84       	ldd	r12, Y+8	; 0x08
    10bc:	df 80       	ldd	r13, Y+7	; 0x07
    10be:	ee 80       	ldd	r14, Y+6	; 0x06
    10c0:	fd 80       	ldd	r15, Y+5	; 0x05
    10c2:	0c 81       	ldd	r16, Y+4	; 0x04
    10c4:	1b 81       	ldd	r17, Y+3	; 0x03
    10c6:	aa 81       	ldd	r26, Y+2	; 0x02
    10c8:	b9 81       	ldd	r27, Y+1	; 0x01
    10ca:	ce 0f       	add	r28, r30
    10cc:	d1 1d       	adc	r29, r1
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	ed 01       	movw	r28, r26
    10da:	08 95       	ret

000010dc <isspace>:
    10dc:	91 11       	cpse	r25, r1
    10de:	02 c1       	rjmp	.+516    	; 0x12e4 <__ctype_isfalse>
    10e0:	80 32       	cpi	r24, 0x20	; 32
    10e2:	19 f0       	breq	.+6      	; 0x10ea <isspace+0xe>
    10e4:	89 50       	subi	r24, 0x09	; 9
    10e6:	85 50       	subi	r24, 0x05	; 5
    10e8:	d0 f7       	brcc	.-12     	; 0x10de <isspace+0x2>
    10ea:	08 95       	ret

000010ec <strchr_P>:
    10ec:	fc 01       	movw	r30, r24
    10ee:	05 90       	lpm	r0, Z+
    10f0:	06 16       	cp	r0, r22
    10f2:	21 f0       	breq	.+8      	; 0x10fc <strchr_P+0x10>
    10f4:	00 20       	and	r0, r0
    10f6:	d9 f7       	brne	.-10     	; 0x10ee <strchr_P+0x2>
    10f8:	c0 01       	movw	r24, r0
    10fa:	08 95       	ret
    10fc:	31 97       	sbiw	r30, 0x01	; 1
    10fe:	cf 01       	movw	r24, r30
    1100:	08 95       	ret

00001102 <fgetc>:
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	ec 01       	movw	r28, r24
    1108:	2b 81       	ldd	r18, Y+3	; 0x03
    110a:	20 ff       	sbrs	r18, 0
    110c:	33 c0       	rjmp	.+102    	; 0x1174 <fgetc+0x72>
    110e:	26 ff       	sbrs	r18, 6
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <fgetc+0x24>
    1112:	2f 7b       	andi	r18, 0xBF	; 191
    1114:	2b 83       	std	Y+3, r18	; 0x03
    1116:	8e 81       	ldd	r24, Y+6	; 0x06
    1118:	9f 81       	ldd	r25, Y+7	; 0x07
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	9f 83       	std	Y+7, r25	; 0x07
    111e:	8e 83       	std	Y+6, r24	; 0x06
    1120:	8a 81       	ldd	r24, Y+2	; 0x02
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	29 c0       	rjmp	.+82     	; 0x1178 <fgetc+0x76>
    1126:	22 ff       	sbrs	r18, 2
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <fgetc+0x46>
    112a:	e8 81       	ld	r30, Y
    112c:	f9 81       	ldd	r31, Y+1	; 0x01
    112e:	80 81       	ld	r24, Z
    1130:	08 2e       	mov	r0, r24
    1132:	00 0c       	add	r0, r0
    1134:	99 0b       	sbc	r25, r25
    1136:	00 97       	sbiw	r24, 0x00	; 0
    1138:	19 f4       	brne	.+6      	; 0x1140 <fgetc+0x3e>
    113a:	20 62       	ori	r18, 0x20	; 32
    113c:	2b 83       	std	Y+3, r18	; 0x03
    113e:	1a c0       	rjmp	.+52     	; 0x1174 <fgetc+0x72>
    1140:	31 96       	adiw	r30, 0x01	; 1
    1142:	f9 83       	std	Y+1, r31	; 0x01
    1144:	e8 83       	st	Y, r30
    1146:	0e c0       	rjmp	.+28     	; 0x1164 <fgetc+0x62>
    1148:	ea 85       	ldd	r30, Y+10	; 0x0a
    114a:	fb 85       	ldd	r31, Y+11	; 0x0b
    114c:	09 95       	icall
    114e:	97 ff       	sbrs	r25, 7
    1150:	09 c0       	rjmp	.+18     	; 0x1164 <fgetc+0x62>
    1152:	2b 81       	ldd	r18, Y+3	; 0x03
    1154:	01 96       	adiw	r24, 0x01	; 1
    1156:	11 f0       	breq	.+4      	; 0x115c <fgetc+0x5a>
    1158:	80 e2       	ldi	r24, 0x20	; 32
    115a:	01 c0       	rjmp	.+2      	; 0x115e <fgetc+0x5c>
    115c:	80 e1       	ldi	r24, 0x10	; 16
    115e:	82 2b       	or	r24, r18
    1160:	8b 83       	std	Y+3, r24	; 0x03
    1162:	08 c0       	rjmp	.+16     	; 0x1174 <fgetc+0x72>
    1164:	2e 81       	ldd	r18, Y+6	; 0x06
    1166:	3f 81       	ldd	r19, Y+7	; 0x07
    1168:	2f 5f       	subi	r18, 0xFF	; 255
    116a:	3f 4f       	sbci	r19, 0xFF	; 255
    116c:	3f 83       	std	Y+7, r19	; 0x07
    116e:	2e 83       	std	Y+6, r18	; 0x06
    1170:	99 27       	eor	r25, r25
    1172:	02 c0       	rjmp	.+4      	; 0x1178 <fgetc+0x76>
    1174:	8f ef       	ldi	r24, 0xFF	; 255
    1176:	9f ef       	ldi	r25, 0xFF	; 255
    1178:	df 91       	pop	r29
    117a:	cf 91       	pop	r28
    117c:	08 95       	ret

0000117e <fputc>:
    117e:	0f 93       	push	r16
    1180:	1f 93       	push	r17
    1182:	cf 93       	push	r28
    1184:	df 93       	push	r29
    1186:	fb 01       	movw	r30, r22
    1188:	23 81       	ldd	r18, Z+3	; 0x03
    118a:	21 fd       	sbrc	r18, 1
    118c:	03 c0       	rjmp	.+6      	; 0x1194 <fputc+0x16>
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	2c c0       	rjmp	.+88     	; 0x11ec <fputc+0x6e>
    1194:	22 ff       	sbrs	r18, 2
    1196:	16 c0       	rjmp	.+44     	; 0x11c4 <fputc+0x46>
    1198:	46 81       	ldd	r20, Z+6	; 0x06
    119a:	57 81       	ldd	r21, Z+7	; 0x07
    119c:	24 81       	ldd	r18, Z+4	; 0x04
    119e:	35 81       	ldd	r19, Z+5	; 0x05
    11a0:	42 17       	cp	r20, r18
    11a2:	53 07       	cpc	r21, r19
    11a4:	44 f4       	brge	.+16     	; 0x11b6 <fputc+0x38>
    11a6:	a0 81       	ld	r26, Z
    11a8:	b1 81       	ldd	r27, Z+1	; 0x01
    11aa:	9d 01       	movw	r18, r26
    11ac:	2f 5f       	subi	r18, 0xFF	; 255
    11ae:	3f 4f       	sbci	r19, 0xFF	; 255
    11b0:	31 83       	std	Z+1, r19	; 0x01
    11b2:	20 83       	st	Z, r18
    11b4:	8c 93       	st	X, r24
    11b6:	26 81       	ldd	r18, Z+6	; 0x06
    11b8:	37 81       	ldd	r19, Z+7	; 0x07
    11ba:	2f 5f       	subi	r18, 0xFF	; 255
    11bc:	3f 4f       	sbci	r19, 0xFF	; 255
    11be:	37 83       	std	Z+7, r19	; 0x07
    11c0:	26 83       	std	Z+6, r18	; 0x06
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <fputc+0x6e>
    11c4:	8b 01       	movw	r16, r22
    11c6:	ec 01       	movw	r28, r24
    11c8:	fb 01       	movw	r30, r22
    11ca:	00 84       	ldd	r0, Z+8	; 0x08
    11cc:	f1 85       	ldd	r31, Z+9	; 0x09
    11ce:	e0 2d       	mov	r30, r0
    11d0:	09 95       	icall
    11d2:	89 2b       	or	r24, r25
    11d4:	e1 f6       	brne	.-72     	; 0x118e <fputc+0x10>
    11d6:	d8 01       	movw	r26, r16
    11d8:	16 96       	adiw	r26, 0x06	; 6
    11da:	8d 91       	ld	r24, X+
    11dc:	9c 91       	ld	r25, X
    11de:	17 97       	sbiw	r26, 0x07	; 7
    11e0:	01 96       	adiw	r24, 0x01	; 1
    11e2:	17 96       	adiw	r26, 0x07	; 7
    11e4:	9c 93       	st	X, r25
    11e6:	8e 93       	st	-X, r24
    11e8:	16 97       	sbiw	r26, 0x06	; 6
    11ea:	ce 01       	movw	r24, r28
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	1f 91       	pop	r17
    11f2:	0f 91       	pop	r16
    11f4:	08 95       	ret

000011f6 <ungetc>:
    11f6:	fb 01       	movw	r30, r22
    11f8:	23 81       	ldd	r18, Z+3	; 0x03
    11fa:	20 ff       	sbrs	r18, 0
    11fc:	12 c0       	rjmp	.+36     	; 0x1222 <ungetc+0x2c>
    11fe:	26 fd       	sbrc	r18, 6
    1200:	10 c0       	rjmp	.+32     	; 0x1222 <ungetc+0x2c>
    1202:	8f 3f       	cpi	r24, 0xFF	; 255
    1204:	3f ef       	ldi	r19, 0xFF	; 255
    1206:	93 07       	cpc	r25, r19
    1208:	61 f0       	breq	.+24     	; 0x1222 <ungetc+0x2c>
    120a:	82 83       	std	Z+2, r24	; 0x02
    120c:	2f 7d       	andi	r18, 0xDF	; 223
    120e:	20 64       	ori	r18, 0x40	; 64
    1210:	23 83       	std	Z+3, r18	; 0x03
    1212:	26 81       	ldd	r18, Z+6	; 0x06
    1214:	37 81       	ldd	r19, Z+7	; 0x07
    1216:	21 50       	subi	r18, 0x01	; 1
    1218:	31 09       	sbc	r19, r1
    121a:	37 83       	std	Z+7, r19	; 0x07
    121c:	26 83       	std	Z+6, r18	; 0x06
    121e:	99 27       	eor	r25, r25
    1220:	08 95       	ret
    1222:	8f ef       	ldi	r24, 0xFF	; 255
    1224:	9f ef       	ldi	r25, 0xFF	; 255
    1226:	08 95       	ret

00001228 <__ultoa_invert>:
    1228:	fa 01       	movw	r30, r20
    122a:	aa 27       	eor	r26, r26
    122c:	28 30       	cpi	r18, 0x08	; 8
    122e:	51 f1       	breq	.+84     	; 0x1284 <__ultoa_invert+0x5c>
    1230:	20 31       	cpi	r18, 0x10	; 16
    1232:	81 f1       	breq	.+96     	; 0x1294 <__ultoa_invert+0x6c>
    1234:	e8 94       	clt
    1236:	6f 93       	push	r22
    1238:	6e 7f       	andi	r22, 0xFE	; 254
    123a:	6e 5f       	subi	r22, 0xFE	; 254
    123c:	7f 4f       	sbci	r23, 0xFF	; 255
    123e:	8f 4f       	sbci	r24, 0xFF	; 255
    1240:	9f 4f       	sbci	r25, 0xFF	; 255
    1242:	af 4f       	sbci	r26, 0xFF	; 255
    1244:	b1 e0       	ldi	r27, 0x01	; 1
    1246:	3e d0       	rcall	.+124    	; 0x12c4 <__ultoa_invert+0x9c>
    1248:	b4 e0       	ldi	r27, 0x04	; 4
    124a:	3c d0       	rcall	.+120    	; 0x12c4 <__ultoa_invert+0x9c>
    124c:	67 0f       	add	r22, r23
    124e:	78 1f       	adc	r23, r24
    1250:	89 1f       	adc	r24, r25
    1252:	9a 1f       	adc	r25, r26
    1254:	a1 1d       	adc	r26, r1
    1256:	68 0f       	add	r22, r24
    1258:	79 1f       	adc	r23, r25
    125a:	8a 1f       	adc	r24, r26
    125c:	91 1d       	adc	r25, r1
    125e:	a1 1d       	adc	r26, r1
    1260:	6a 0f       	add	r22, r26
    1262:	71 1d       	adc	r23, r1
    1264:	81 1d       	adc	r24, r1
    1266:	91 1d       	adc	r25, r1
    1268:	a1 1d       	adc	r26, r1
    126a:	20 d0       	rcall	.+64     	; 0x12ac <__ultoa_invert+0x84>
    126c:	09 f4       	brne	.+2      	; 0x1270 <__ultoa_invert+0x48>
    126e:	68 94       	set
    1270:	3f 91       	pop	r19
    1272:	2a e0       	ldi	r18, 0x0A	; 10
    1274:	26 9f       	mul	r18, r22
    1276:	11 24       	eor	r1, r1
    1278:	30 19       	sub	r19, r0
    127a:	30 5d       	subi	r19, 0xD0	; 208
    127c:	31 93       	st	Z+, r19
    127e:	de f6       	brtc	.-74     	; 0x1236 <__ultoa_invert+0xe>
    1280:	cf 01       	movw	r24, r30
    1282:	08 95       	ret
    1284:	46 2f       	mov	r20, r22
    1286:	47 70       	andi	r20, 0x07	; 7
    1288:	40 5d       	subi	r20, 0xD0	; 208
    128a:	41 93       	st	Z+, r20
    128c:	b3 e0       	ldi	r27, 0x03	; 3
    128e:	0f d0       	rcall	.+30     	; 0x12ae <__ultoa_invert+0x86>
    1290:	c9 f7       	brne	.-14     	; 0x1284 <__ultoa_invert+0x5c>
    1292:	f6 cf       	rjmp	.-20     	; 0x1280 <__ultoa_invert+0x58>
    1294:	46 2f       	mov	r20, r22
    1296:	4f 70       	andi	r20, 0x0F	; 15
    1298:	40 5d       	subi	r20, 0xD0	; 208
    129a:	4a 33       	cpi	r20, 0x3A	; 58
    129c:	18 f0       	brcs	.+6      	; 0x12a4 <__ultoa_invert+0x7c>
    129e:	49 5d       	subi	r20, 0xD9	; 217
    12a0:	31 fd       	sbrc	r19, 1
    12a2:	40 52       	subi	r20, 0x20	; 32
    12a4:	41 93       	st	Z+, r20
    12a6:	02 d0       	rcall	.+4      	; 0x12ac <__ultoa_invert+0x84>
    12a8:	a9 f7       	brne	.-22     	; 0x1294 <__ultoa_invert+0x6c>
    12aa:	ea cf       	rjmp	.-44     	; 0x1280 <__ultoa_invert+0x58>
    12ac:	b4 e0       	ldi	r27, 0x04	; 4
    12ae:	a6 95       	lsr	r26
    12b0:	97 95       	ror	r25
    12b2:	87 95       	ror	r24
    12b4:	77 95       	ror	r23
    12b6:	67 95       	ror	r22
    12b8:	ba 95       	dec	r27
    12ba:	c9 f7       	brne	.-14     	; 0x12ae <__ultoa_invert+0x86>
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	61 05       	cpc	r22, r1
    12c0:	71 05       	cpc	r23, r1
    12c2:	08 95       	ret
    12c4:	9b 01       	movw	r18, r22
    12c6:	ac 01       	movw	r20, r24
    12c8:	0a 2e       	mov	r0, r26
    12ca:	06 94       	lsr	r0
    12cc:	57 95       	ror	r21
    12ce:	47 95       	ror	r20
    12d0:	37 95       	ror	r19
    12d2:	27 95       	ror	r18
    12d4:	ba 95       	dec	r27
    12d6:	c9 f7       	brne	.-14     	; 0x12ca <__ultoa_invert+0xa2>
    12d8:	62 0f       	add	r22, r18
    12da:	73 1f       	adc	r23, r19
    12dc:	84 1f       	adc	r24, r20
    12de:	95 1f       	adc	r25, r21
    12e0:	a0 1d       	adc	r26, r0
    12e2:	08 95       	ret

000012e4 <__ctype_isfalse>:
    12e4:	99 27       	eor	r25, r25
    12e6:	88 27       	eor	r24, r24

000012e8 <__ctype_istrue>:
    12e8:	08 95       	ret

000012ea <_exit>:
    12ea:	f8 94       	cli

000012ec <__stop_program>:
    12ec:	ff cf       	rjmp	.-2      	; 0x12ec <__stop_program>
