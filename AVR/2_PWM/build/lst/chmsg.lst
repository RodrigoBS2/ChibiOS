   1               		.file	"chmsg.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMsgSend,"ax",@progbits
  11               	.global	chMsgSend
  13               	chMsgSend:
  14               	.LFB193:
  15               		.file 1 "../../../os/rt/src/chmsg.c"
   1:../../../os/rt/src/chmsg.c **** /*
   2:../../../os/rt/src/chmsg.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chmsg.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chmsg.c **** 
   5:../../../os/rt/src/chmsg.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chmsg.c **** 
   7:../../../os/rt/src/chmsg.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chmsg.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chmsg.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chmsg.c **** 
  11:../../../os/rt/src/chmsg.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chmsg.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chmsg.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chmsg.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chmsg.c **** 
  16:../../../os/rt/src/chmsg.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chmsg.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chmsg.c **** */
  19:../../../os/rt/src/chmsg.c **** 
  20:../../../os/rt/src/chmsg.c **** /**
  21:../../../os/rt/src/chmsg.c ****  * @file    rt/src/chmsg.c
  22:../../../os/rt/src/chmsg.c ****  * @brief   Messages code.
  23:../../../os/rt/src/chmsg.c ****  *
  24:../../../os/rt/src/chmsg.c ****  * @addtogroup messages
  25:../../../os/rt/src/chmsg.c ****  * @details Synchronous inter-thread messages APIs and services.
  26:../../../os/rt/src/chmsg.c ****  *          <h2>Operation Mode</h2>
  27:../../../os/rt/src/chmsg.c ****  *          Synchronous messages are an easy to use and fast IPC mechanism,
  28:../../../os/rt/src/chmsg.c ****  *          threads can both act as message servers and/or message clients,
  29:../../../os/rt/src/chmsg.c ****  *          the mechanism allows data to be carried in both directions. Note
  30:../../../os/rt/src/chmsg.c ****  *          that messages are not copied between the client and server threads
  31:../../../os/rt/src/chmsg.c ****  *          but just a pointer passed so the exchange is very time
  32:../../../os/rt/src/chmsg.c ****  *          efficient.<br>
  33:../../../os/rt/src/chmsg.c ****  *          Messages are scalar data types of type @p msg_t that are guaranteed
  34:../../../os/rt/src/chmsg.c ****  *          to be size compatible with data pointers. Note that on some
  35:../../../os/rt/src/chmsg.c ****  *          architectures function pointers can be larger that @p msg_t.<br>
  36:../../../os/rt/src/chmsg.c ****  *          Messages are usually processed in FIFO order but it is possible to
  37:../../../os/rt/src/chmsg.c ****  *          process them in priority order by enabling the
  38:../../../os/rt/src/chmsg.c ****  *          @p CH_CFG_USE_MESSAGES_PRIORITY option in @p chconf.h.<br>
  39:../../../os/rt/src/chmsg.c ****  * @pre     In order to use the message APIs the @p CH_CFG_USE_MESSAGES option
  40:../../../os/rt/src/chmsg.c ****  *          must be enabled in @p chconf.h.
  41:../../../os/rt/src/chmsg.c ****  * @post    Enabling messages requires 6-12 (depending on the architecture)
  42:../../../os/rt/src/chmsg.c ****  *          extra bytes in the @p thread_t structure.
  43:../../../os/rt/src/chmsg.c ****  * @{
  44:../../../os/rt/src/chmsg.c ****  */
  45:../../../os/rt/src/chmsg.c **** 
  46:../../../os/rt/src/chmsg.c **** #include "ch.h"
  47:../../../os/rt/src/chmsg.c **** 
  48:../../../os/rt/src/chmsg.c **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
  49:../../../os/rt/src/chmsg.c **** 
  50:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  51:../../../os/rt/src/chmsg.c **** /* Module local definitions.                                                 */
  52:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  53:../../../os/rt/src/chmsg.c **** 
  54:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  55:../../../os/rt/src/chmsg.c **** /* Module exported variables.                                                */
  56:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  57:../../../os/rt/src/chmsg.c **** 
  58:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  59:../../../os/rt/src/chmsg.c **** /* Module local types.                                                       */
  60:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  61:../../../os/rt/src/chmsg.c **** 
  62:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  63:../../../os/rt/src/chmsg.c **** /* Module local variables.                                                   */
  64:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  65:../../../os/rt/src/chmsg.c **** 
  66:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  67:../../../os/rt/src/chmsg.c **** /* Module local functions.                                                   */
  68:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  69:../../../os/rt/src/chmsg.c **** 
  70:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  71:../../../os/rt/src/chmsg.c **** /* Module exported functions.                                                */
  72:../../../os/rt/src/chmsg.c **** /*===========================================================================*/
  73:../../../os/rt/src/chmsg.c **** 
  74:../../../os/rt/src/chmsg.c **** /**
  75:../../../os/rt/src/chmsg.c ****  * @brief   Sends a message to the specified thread.
  76:../../../os/rt/src/chmsg.c ****  * @details The sender is stopped until the receiver executes a
  77:../../../os/rt/src/chmsg.c ****  *          @p chMsgRelease()after receiving the message.
  78:../../../os/rt/src/chmsg.c ****  *
  79:../../../os/rt/src/chmsg.c ****  * @param[in] tp        the pointer to the thread
  80:../../../os/rt/src/chmsg.c ****  * @param[in] msg       the message
  81:../../../os/rt/src/chmsg.c ****  * @return              The answer message from @p chMsgRelease().
  82:../../../os/rt/src/chmsg.c ****  *
  83:../../../os/rt/src/chmsg.c ****  * @api
  84:../../../os/rt/src/chmsg.c ****  */
  85:../../../os/rt/src/chmsg.c **** msg_t chMsgSend(thread_t *tp, msg_t msg) {
  16               		.loc 1 85 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FC01      		movw r30,r24
  32               	.LBB46:
  33               	.LBB47:
  34               		.file 2 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
  35               		.loc 2 375 0
  36 0006 C091 0000 		lds r28,ch0+5
  37 000a D091 0000 		lds r29,ch0+5+1
  38               	.LBE47:
  39               	.LBE46:
  40               	.LBB48:
  41               	.LBB49:
  42               	.LBB50:
  43               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  44               		.loc 3 430 0
  45               	/* #APP */
  46               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  47 000e F894      		cli
  48               	 ;  0 "" 2
  49               	/* #NOAPP */
  50               	.LBE50:
  51               	.LBE49:
  52               	.LBE48:
  86:../../../os/rt/src/chmsg.c ****   thread_t *currtp = chThdGetSelfX();
  87:../../../os/rt/src/chmsg.c **** 
  88:../../../os/rt/src/chmsg.c ****   chDbgCheck(tp != NULL);
  89:../../../os/rt/src/chmsg.c **** 
  90:../../../os/rt/src/chmsg.c ****   chSysLock();
  91:../../../os/rt/src/chmsg.c ****   currtp->u.sentmsg = msg;
  53               		.loc 1 91 0
  54 0010 7B8B      		std Y+19,r23
  55 0012 6A8B      		std Y+18,r22
  56               	.LVL1:
  92:../../../os/rt/src/chmsg.c ****   __ch_msg_insert(&tp->msgqueue, currtp);
  57               		.loc 1 92 0
  58 0014 4696      		adiw r24,22
  59               	.LVL2:
  60               	.LBB51:
  61               	.LBB52:
  62               		.file 4 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
  63               		.loc 4 324 0
  64 0016 9983      		std Y+1,r25
  65 0018 8883      		st Y,r24
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
  66               		.loc 4 325 0
  67 001a A08D      		ldd r26,Z+24
  68 001c B18D      		ldd r27,Z+25
  69 001e BB83      		std Y+3,r27
  70 0020 AA83      		std Y+2,r26
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
  71               		.loc 4 326 0
  72 0022 CD93      		st X+,r28
  73 0024 DC93      		st X,r29
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
  74               		.loc 4 327 0
  75 0026 D18F      		std Z+25,r29
  76 0028 C08F      		std Z+24,r28
  77               	.LVL3:
  78               	.LBE52:
  79               	.LBE51:
  93:../../../os/rt/src/chmsg.c ****   if (tp->state == CH_STATE_WTMSG) {
  80               		.loc 1 93 0
  81 002a 8785      		ldd r24,Z+15
  82 002c 8E30      		cpi r24,lo8(14)
  83 002e 01F0      		breq .L4
  84               	.LVL4:
  85               	.L2:
  94:../../../os/rt/src/chmsg.c ****     (void) chSchReadyI(tp);
  95:../../../os/rt/src/chmsg.c ****   }
  96:../../../os/rt/src/chmsg.c ****   chSchGoSleepS(CH_STATE_SNDMSGQ);
  86               		.loc 1 96 0
  87 0030 8CE0      		ldi r24,lo8(12)
  88 0032 0E94 0000 		call chSchGoSleepS
  89               	.LVL5:
  97:../../../os/rt/src/chmsg.c ****   msg = currtp->u.rdymsg;
  90               		.loc 1 97 0
  91 0036 8A89      		ldd r24,Y+18
  92 0038 9B89      		ldd r25,Y+19
  93               	.LVL6:
  94               	.LBB53:
  95               	.LBB54:
  96               	.LBB55:
  97               	.LBB56:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  98               		.loc 3 440 0
  99               	/* #APP */
 100               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 101 003a 7894      		sei
 102               	 ;  0 "" 2
 103               	/* epilogue start */
 104               	/* #NOAPP */
 105               	.LBE56:
 106               	.LBE55:
 107               	.LBE54:
 108               	.LBE53:
  98:../../../os/rt/src/chmsg.c ****   chSysUnlock();
  99:../../../os/rt/src/chmsg.c **** 
 100:../../../os/rt/src/chmsg.c ****   return msg;
 101:../../../os/rt/src/chmsg.c **** }
 109               		.loc 1 101 0
 110 003c DF91      		pop r29
 111 003e CF91      		pop r28
 112 0040 0895      		ret
 113               	.LVL7:
 114               	.L4:
  94:../../../os/rt/src/chmsg.c ****   }
 115               		.loc 1 94 0
 116 0042 CF01      		movw r24,r30
 117 0044 0E94 0000 		call chSchReadyI
 118               	.LVL8:
 119 0048 00C0      		rjmp .L2
 120               		.cfi_endproc
 121               	.LFE193:
 123               		.section	.text.chMsgWaitS,"ax",@progbits
 124               	.global	chMsgWaitS
 126               	chMsgWaitS:
 127               	.LFB194:
 102:../../../os/rt/src/chmsg.c **** 
 103:../../../os/rt/src/chmsg.c **** /**
 104:../../../os/rt/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message.
 105:../../../os/rt/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 106:../../../os/rt/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 107:../../../os/rt/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 108:../../../os/rt/src/chmsg.c ****  *          the answer.
 109:../../../os/rt/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 110:../../../os/rt/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 111:../../../os/rt/src/chmsg.c ****  *          because the sending thread is suspended until then.
 112:../../../os/rt/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 113:../../../os/rt/src/chmsg.c ****  *          returned pointer is a temporary reference.
 114:../../../os/rt/src/chmsg.c ****  *
 115:../../../os/rt/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 116:../../../os/rt/src/chmsg.c ****  *
 117:../../../os/rt/src/chmsg.c ****  * @sclass
 118:../../../os/rt/src/chmsg.c ****  */
 119:../../../os/rt/src/chmsg.c **** thread_t *chMsgWaitS(void) {
 128               		.loc 1 119 0
 129               		.cfi_startproc
 130 0000 0F93      		push r16
 131               	.LCFI2:
 132               		.cfi_def_cfa_offset 3
 133               		.cfi_offset 16, -2
 134 0002 1F93      		push r17
 135               	.LCFI3:
 136               		.cfi_def_cfa_offset 4
 137               		.cfi_offset 17, -3
 138 0004 CF93      		push r28
 139               	.LCFI4:
 140               		.cfi_def_cfa_offset 5
 141               		.cfi_offset 28, -4
 142 0006 DF93      		push r29
 143               	.LCFI5:
 144               		.cfi_def_cfa_offset 6
 145               		.cfi_offset 29, -5
 146               	/* prologue: function */
 147               	/* frame size = 0 */
 148               	/* stack size = 4 */
 149               	.L__stack_usage = 4
 150               	.LBB57:
 151               	.LBB58:
 152               		.loc 2 375 0
 153 0008 C091 0000 		lds r28,ch0+5
 154 000c D091 0000 		lds r29,ch0+5+1
 155               	.LBE58:
 156               	.LBE57:
 157               	.LBB59:
 158               	.LBB60:
 159               		.file 5 "../../../os/rt/include/chmsg.h"
   1:../../../os/rt/include/chmsg.h **** /*
   2:../../../os/rt/include/chmsg.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chmsg.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chmsg.h **** 
   5:../../../os/rt/include/chmsg.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chmsg.h **** 
   7:../../../os/rt/include/chmsg.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chmsg.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chmsg.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chmsg.h **** 
  11:../../../os/rt/include/chmsg.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chmsg.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chmsg.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chmsg.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chmsg.h **** 
  16:../../../os/rt/include/chmsg.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chmsg.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chmsg.h **** */
  19:../../../os/rt/include/chmsg.h **** 
  20:../../../os/rt/include/chmsg.h **** /**
  21:../../../os/rt/include/chmsg.h ****  * @file    rt/include/chmsg.h
  22:../../../os/rt/include/chmsg.h ****  * @brief   Messages macros and structures.
  23:../../../os/rt/include/chmsg.h ****  *
  24:../../../os/rt/include/chmsg.h ****  * @addtogroup messages
  25:../../../os/rt/include/chmsg.h ****  * @{
  26:../../../os/rt/include/chmsg.h ****  */
  27:../../../os/rt/include/chmsg.h **** 
  28:../../../os/rt/include/chmsg.h **** #ifndef CHMSG_H
  29:../../../os/rt/include/chmsg.h **** #define CHMSG_H
  30:../../../os/rt/include/chmsg.h **** 
  31:../../../os/rt/include/chmsg.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chmsg.h **** 
  33:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  34:../../../os/rt/include/chmsg.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  36:../../../os/rt/include/chmsg.h **** 
  37:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  38:../../../os/rt/include/chmsg.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  40:../../../os/rt/include/chmsg.h **** 
  41:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  42:../../../os/rt/include/chmsg.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  44:../../../os/rt/include/chmsg.h **** 
  45:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  46:../../../os/rt/include/chmsg.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  48:../../../os/rt/include/chmsg.h **** 
  49:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  50:../../../os/rt/include/chmsg.h **** /* Module macros.                                                            */
  51:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  52:../../../os/rt/include/chmsg.h **** 
  53:../../../os/rt/include/chmsg.h **** #if CH_CFG_USE_MESSAGES_PRIORITY == TRUE
  54:../../../os/rt/include/chmsg.h **** #define __ch_msg_insert(qp, tp) ch_sch_prio_insert(qp, &tp->hdr.queue)
  55:../../../os/rt/include/chmsg.h **** #else
  56:../../../os/rt/include/chmsg.h **** #define __ch_msg_insert(qp, tp) ch_queue_insert(qp, &tp->hdr.queue)
  57:../../../os/rt/include/chmsg.h **** #endif
  58:../../../os/rt/include/chmsg.h **** 
  59:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  60:../../../os/rt/include/chmsg.h **** /* External declarations.                                                    */
  61:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  62:../../../os/rt/include/chmsg.h **** 
  63:../../../os/rt/include/chmsg.h **** #ifdef __cplusplus
  64:../../../os/rt/include/chmsg.h **** extern "C" {
  65:../../../os/rt/include/chmsg.h **** #endif
  66:../../../os/rt/include/chmsg.h ****   msg_t chMsgSend(thread_t *tp, msg_t msg);
  67:../../../os/rt/include/chmsg.h ****   thread_t *chMsgWaitS(void);
  68:../../../os/rt/include/chmsg.h ****   thread_t *chMsgWaitTimeoutS(sysinterval_t timeout);
  69:../../../os/rt/include/chmsg.h ****   thread_t *chMsgPollS(void);
  70:../../../os/rt/include/chmsg.h ****   void chMsgRelease(thread_t *tp, msg_t msg);
  71:../../../os/rt/include/chmsg.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chmsg.h **** }
  73:../../../os/rt/include/chmsg.h **** #endif
  74:../../../os/rt/include/chmsg.h **** 
  75:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  76:../../../os/rt/include/chmsg.h **** /* External declarations.                                                    */
  77:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  78:../../../os/rt/include/chmsg.h **** 
  79:../../../os/rt/include/chmsg.h **** /**
  80:../../../os/rt/include/chmsg.h ****  * @brief   Suspends the thread and waits for an incoming message.
  81:../../../os/rt/include/chmsg.h ****  * @post    After receiving a message the function @p chMsgGet() must be
  82:../../../os/rt/include/chmsg.h ****  *          called in order to retrieve the message and then @p chMsgRelease()
  83:../../../os/rt/include/chmsg.h ****  *          must be invoked in order to acknowledge the reception and send
  84:../../../os/rt/include/chmsg.h ****  *          the answer.
  85:../../../os/rt/include/chmsg.h ****  * @note    If the message is a pointer then you can assume that the data
  86:../../../os/rt/include/chmsg.h ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
  87:../../../os/rt/include/chmsg.h ****  *          because the sending thread is suspended until then.
  88:../../../os/rt/include/chmsg.h ****  * @note    The reference counter of the sender thread is not increased, the
  89:../../../os/rt/include/chmsg.h ****  *          returned pointer is a temporary reference.
  90:../../../os/rt/include/chmsg.h ****  *
  91:../../../os/rt/include/chmsg.h ****  * @return              A pointer to the thread carrying the message.
  92:../../../os/rt/include/chmsg.h ****  *
  93:../../../os/rt/include/chmsg.h ****  * @api
  94:../../../os/rt/include/chmsg.h ****  */
  95:../../../os/rt/include/chmsg.h **** static inline thread_t *chMsgWait(void) {
  96:../../../os/rt/include/chmsg.h ****   thread_t *tp;
  97:../../../os/rt/include/chmsg.h **** 
  98:../../../os/rt/include/chmsg.h ****   chSysLock();
  99:../../../os/rt/include/chmsg.h ****   tp = chMsgWaitS();
 100:../../../os/rt/include/chmsg.h ****   chSysUnlock();
 101:../../../os/rt/include/chmsg.h **** 
 102:../../../os/rt/include/chmsg.h ****   return tp;
 103:../../../os/rt/include/chmsg.h **** }
 104:../../../os/rt/include/chmsg.h **** 
 105:../../../os/rt/include/chmsg.h **** /**
 106:../../../os/rt/include/chmsg.h ****  * @brief   Suspends the thread and waits for an incoming message or a
 107:../../../os/rt/include/chmsg.h ****  *          timeout to occur.
 108:../../../os/rt/include/chmsg.h ****  * @post    After receiving a message the function @p chMsgGet() must be
 109:../../../os/rt/include/chmsg.h ****  *          called in order to retrieve the message and then @p chMsgRelease()
 110:../../../os/rt/include/chmsg.h ****  *          must be invoked in order to acknowledge the reception and send
 111:../../../os/rt/include/chmsg.h ****  *          the answer.
 112:../../../os/rt/include/chmsg.h ****  * @note    If the message is a pointer then you can assume that the data
 113:../../../os/rt/include/chmsg.h ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 114:../../../os/rt/include/chmsg.h ****  *          because the sending thread is suspended until then.
 115:../../../os/rt/include/chmsg.h ****  * @note    The reference counter of the sender thread is not increased, the
 116:../../../os/rt/include/chmsg.h ****  *          returned pointer is a temporary reference.
 117:../../../os/rt/include/chmsg.h ****  *
 118:../../../os/rt/include/chmsg.h ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 119:../../../os/rt/include/chmsg.h ****  *                      the following special values are allowed:
 120:../../../os/rt/include/chmsg.h ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 121:../../../os/rt/include/chmsg.h ****  *                      - @a TIME_INFINITE no timeout.
 122:../../../os/rt/include/chmsg.h ****  * @return              A pointer to the thread carrying the message.
 123:../../../os/rt/include/chmsg.h ****  * @retval NULL         if a timeout occurred.
 124:../../../os/rt/include/chmsg.h ****  *
 125:../../../os/rt/include/chmsg.h ****  * @api
 126:../../../os/rt/include/chmsg.h ****  */
 127:../../../os/rt/include/chmsg.h **** static inline thread_t *chMsgWaitTimeout(sysinterval_t timeout) {
 128:../../../os/rt/include/chmsg.h ****   thread_t *tp;
 129:../../../os/rt/include/chmsg.h **** 
 130:../../../os/rt/include/chmsg.h ****   chSysLock();
 131:../../../os/rt/include/chmsg.h ****   tp = chMsgWaitTimeoutS(timeout);
 132:../../../os/rt/include/chmsg.h ****   chSysUnlock();
 133:../../../os/rt/include/chmsg.h **** 
 134:../../../os/rt/include/chmsg.h ****   return tp;
 135:../../../os/rt/include/chmsg.h **** }
 136:../../../os/rt/include/chmsg.h **** 
 137:../../../os/rt/include/chmsg.h **** /**
 138:../../../os/rt/include/chmsg.h ****  * @brief   Poll to check for an incoming message.
 139:../../../os/rt/include/chmsg.h ****  * @post    If a message is available the function @p chMsgGet() must be
 140:../../../os/rt/include/chmsg.h ****  *          called in order to retrieve the message and then @p chMsgRelease()
 141:../../../os/rt/include/chmsg.h ****  *          must be invoked in order to acknowledge the reception and send
 142:../../../os/rt/include/chmsg.h ****  *          the answer.
 143:../../../os/rt/include/chmsg.h ****  * @note    If the message is a pointer then you can assume that the data
 144:../../../os/rt/include/chmsg.h ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 145:../../../os/rt/include/chmsg.h ****  *          because the sending thread is suspended until then.
 146:../../../os/rt/include/chmsg.h ****  * @note    The reference counter of the sender thread is not increased, the
 147:../../../os/rt/include/chmsg.h ****  *          returned pointer is a temporary reference.
 148:../../../os/rt/include/chmsg.h ****  *
 149:../../../os/rt/include/chmsg.h ****  * @return              A pointer to the thread carrying the message.
 150:../../../os/rt/include/chmsg.h ****  * @retval  NULL        if no incoming message waiting.
 151:../../../os/rt/include/chmsg.h ****  *
 152:../../../os/rt/include/chmsg.h ****  * @api
 153:../../../os/rt/include/chmsg.h ****  */
 154:../../../os/rt/include/chmsg.h **** static inline thread_t *chMsgPoll(void) {
 155:../../../os/rt/include/chmsg.h ****   thread_t *tp;
 156:../../../os/rt/include/chmsg.h **** 
 157:../../../os/rt/include/chmsg.h ****   chSysLock();
 158:../../../os/rt/include/chmsg.h ****   tp = chMsgPollS();
 159:../../../os/rt/include/chmsg.h ****   chSysUnlock();
 160:../../../os/rt/include/chmsg.h **** 
 161:../../../os/rt/include/chmsg.h ****   return tp;
 162:../../../os/rt/include/chmsg.h **** }
 163:../../../os/rt/include/chmsg.h **** 
 164:../../../os/rt/include/chmsg.h **** /**
 165:../../../os/rt/include/chmsg.h ****  * @brief   Evaluates to @p true if the thread has pending messages.
 166:../../../os/rt/include/chmsg.h ****  *
 167:../../../os/rt/include/chmsg.h ****  * @param[in] tp        pointer to the thread
 168:../../../os/rt/include/chmsg.h ****  * @return              The pending messages status.
 169:../../../os/rt/include/chmsg.h ****  *
 170:../../../os/rt/include/chmsg.h ****  * @iclass
 171:../../../os/rt/include/chmsg.h ****  */
 172:../../../os/rt/include/chmsg.h **** static inline bool chMsgIsPendingI(thread_t *tp) {
 173:../../../os/rt/include/chmsg.h **** 
 174:../../../os/rt/include/chmsg.h ****   chDbgCheckClassI();
 175:../../../os/rt/include/chmsg.h **** 
 176:../../../os/rt/include/chmsg.h ****   return (bool)(tp->msgqueue.next != &tp->msgqueue);
 160               		.loc 5 176 0
 161 0010 8E89      		ldd r24,Y+22
 162 0012 9F89      		ldd r25,Y+23
 163 0014 8E01      		movw r16,r28
 164 0016 0A5E      		subi r16,-22
 165 0018 1F4F      		sbci r17,-1
 166               	.LBE60:
 167               	.LBE59:
 120:../../../os/rt/src/chmsg.c ****   thread_t *currtp = chThdGetSelfX();
 121:../../../os/rt/src/chmsg.c ****   thread_t *tp;
 122:../../../os/rt/src/chmsg.c **** 
 123:../../../os/rt/src/chmsg.c ****   chDbgCheckClassS();
 124:../../../os/rt/src/chmsg.c **** 
 125:../../../os/rt/src/chmsg.c ****   if (!chMsgIsPendingI(currtp)) {
 168               		.loc 1 125 0
 169 001a 0817      		cp r16,r24
 170 001c 1907      		cpc r17,r25
 171 001e 01F0      		breq .L7
 172               	.L6:
 173               	.LVL9:
 174               	.LBB61:
 175               	.LBB62:
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 176               		.loc 4 343 0
 177 0020 DC01      		movw r26,r24
 178 0022 ED91      		ld r30,X+
 179 0024 FC91      		ld r31,X
 180 0026 1197      		sbiw r26,1
 181 0028 FF8B      		std Y+23,r31
 182 002a EE8B      		std Y+22,r30
 183               	.LVL10:
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 184               		.loc 4 344 0
 185 002c 1383      		std Z+3,r17
 186 002e 0283      		std Z+2,r16
 187               	.LVL11:
 188               	.LBE62:
 189               	.LBE61:
 126:../../../os/rt/src/chmsg.c ****     chSchGoSleepS(CH_STATE_WTMSG);
 127:../../../os/rt/src/chmsg.c ****   }
 128:../../../os/rt/src/chmsg.c ****   tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
 129:../../../os/rt/src/chmsg.c ****   tp->state = CH_STATE_SNDMSG;
 190               		.loc 1 129 0
 191 0030 2DE0      		ldi r18,lo8(13)
 192 0032 1F96      		adiw r26,15
 193 0034 2C93      		st X,r18
 194               	/* epilogue start */
 130:../../../os/rt/src/chmsg.c **** 
 131:../../../os/rt/src/chmsg.c ****   return tp;
 132:../../../os/rt/src/chmsg.c **** }
 195               		.loc 1 132 0
 196 0036 DF91      		pop r29
 197 0038 CF91      		pop r28
 198 003a 1F91      		pop r17
 199 003c 0F91      		pop r16
 200 003e 0895      		ret
 201               	.L7:
 126:../../../os/rt/src/chmsg.c ****     chSchGoSleepS(CH_STATE_WTMSG);
 202               		.loc 1 126 0
 203 0040 8EE0      		ldi r24,lo8(14)
 204 0042 0E94 0000 		call chSchGoSleepS
 205               	.LVL12:
 206 0046 8E89      		ldd r24,Y+22
 207 0048 9F89      		ldd r25,Y+23
 208 004a 00C0      		rjmp .L6
 209               		.cfi_endproc
 210               	.LFE194:
 212               		.section	.text.chMsgWaitTimeoutS,"ax",@progbits
 213               	.global	chMsgWaitTimeoutS
 215               	chMsgWaitTimeoutS:
 216               	.LFB195:
 133:../../../os/rt/src/chmsg.c **** 
 134:../../../os/rt/src/chmsg.c **** /**
 135:../../../os/rt/src/chmsg.c ****  * @brief   Suspends the thread and waits for an incoming message or a
 136:../../../os/rt/src/chmsg.c ****  *          timeout to occur.
 137:../../../os/rt/src/chmsg.c ****  * @post    After receiving a message the function @p chMsgGet() must be
 138:../../../os/rt/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 139:../../../os/rt/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 140:../../../os/rt/src/chmsg.c ****  *          the answer.
 141:../../../os/rt/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 142:../../../os/rt/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 143:../../../os/rt/src/chmsg.c ****  *          because the sending thread is suspended until then.
 144:../../../os/rt/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 145:../../../os/rt/src/chmsg.c ****  *          returned pointer is a temporary reference.
 146:../../../os/rt/src/chmsg.c ****  *
 147:../../../os/rt/src/chmsg.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 148:../../../os/rt/src/chmsg.c ****  *                      the following special values are allowed:
 149:../../../os/rt/src/chmsg.c ****  *                      - @a TIME_INFINITE no timeout.
 150:../../../os/rt/src/chmsg.c ****  * @return              A pointer to the thread carrying the message.
 151:../../../os/rt/src/chmsg.c ****  * @retval NULL         if a timeout occurred.
 152:../../../os/rt/src/chmsg.c ****  *
 153:../../../os/rt/src/chmsg.c ****  * @sclass
 154:../../../os/rt/src/chmsg.c ****  */
 155:../../../os/rt/src/chmsg.c **** thread_t *chMsgWaitTimeoutS(sysinterval_t timeout) {
 217               		.loc 1 155 0
 218               		.cfi_startproc
 219               	.LVL13:
 220 0000 0F93      		push r16
 221               	.LCFI6:
 222               		.cfi_def_cfa_offset 3
 223               		.cfi_offset 16, -2
 224 0002 1F93      		push r17
 225               	.LCFI7:
 226               		.cfi_def_cfa_offset 4
 227               		.cfi_offset 17, -3
 228 0004 CF93      		push r28
 229               	.LCFI8:
 230               		.cfi_def_cfa_offset 5
 231               		.cfi_offset 28, -4
 232 0006 DF93      		push r29
 233               	.LCFI9:
 234               		.cfi_def_cfa_offset 6
 235               		.cfi_offset 29, -5
 236               	/* prologue: function */
 237               	/* frame size = 0 */
 238               	/* stack size = 4 */
 239               	.L__stack_usage = 4
 240               	.LBB63:
 241               	.LBB64:
 242               		.loc 2 375 0
 243 0008 C091 0000 		lds r28,ch0+5
 244 000c D091 0000 		lds r29,ch0+5+1
 245               	.LBE64:
 246               	.LBE63:
 247               	.LBB65:
 248               	.LBB66:
 249               		.loc 5 176 0
 250 0010 EE89      		ldd r30,Y+22
 251 0012 FF89      		ldd r31,Y+23
 252 0014 8E01      		movw r16,r28
 253 0016 0A5E      		subi r16,-22
 254 0018 1F4F      		sbci r17,-1
 255               	.LBE66:
 256               	.LBE65:
 156:../../../os/rt/src/chmsg.c ****   thread_t *currtp = chThdGetSelfX();
 157:../../../os/rt/src/chmsg.c ****   thread_t *tp;
 158:../../../os/rt/src/chmsg.c **** 
 159:../../../os/rt/src/chmsg.c ****   chDbgCheckClassS();
 160:../../../os/rt/src/chmsg.c **** 
 161:../../../os/rt/src/chmsg.c ****   if (!chMsgIsPendingI(currtp)) {
 257               		.loc 1 161 0
 258 001a 0E17      		cp r16,r30
 259 001c 1F07      		cpc r17,r31
 260 001e 01F0      		breq .L12
 261               	.LVL14:
 262               	.L9:
 263               	.LBB67:
 264               	.LBB68:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 265               		.loc 4 343 0
 266 0020 A081      		ld r26,Z
 267 0022 B181      		ldd r27,Z+1
 268 0024 BF8B      		std Y+23,r27
 269 0026 AE8B      		std Y+22,r26
 270               	.LVL15:
 271               		.loc 4 344 0
 272 0028 1396      		adiw r26,2+1
 273 002a 1C93      		st X,r17
 274 002c 0E93      		st -X,r16
 275 002e 1297      		sbiw r26,2
 276               	.LVL16:
 277               	.LBE68:
 278               	.LBE67:
 162:../../../os/rt/src/chmsg.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTMSG, timeout) != MSG_OK) {
 163:../../../os/rt/src/chmsg.c ****       return NULL;
 164:../../../os/rt/src/chmsg.c ****     }
 165:../../../os/rt/src/chmsg.c ****   }
 166:../../../os/rt/src/chmsg.c ****   tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
 167:../../../os/rt/src/chmsg.c ****   tp->state = CH_STATE_SNDMSG;
 279               		.loc 1 167 0
 280 0030 8DE0      		ldi r24,lo8(13)
 281 0032 8787      		std Z+15,r24
 168:../../../os/rt/src/chmsg.c **** 
 169:../../../os/rt/src/chmsg.c ****   return tp;
 282               		.loc 1 169 0
 283 0034 CF01      		movw r24,r30
 284               	.L10:
 285               	/* epilogue start */
 170:../../../os/rt/src/chmsg.c **** }
 286               		.loc 1 170 0
 287 0036 DF91      		pop r29
 288 0038 CF91      		pop r28
 289 003a 1F91      		pop r17
 290 003c 0F91      		pop r16
 291 003e 0895      		ret
 292               	.LVL17:
 293               	.L12:
 294 0040 BC01      		movw r22,r24
 162:../../../os/rt/src/chmsg.c ****     if (chSchGoSleepTimeoutS(CH_STATE_WTMSG, timeout) != MSG_OK) {
 295               		.loc 1 162 0
 296 0042 8EE0      		ldi r24,lo8(14)
 297               	.LVL18:
 298 0044 0E94 0000 		call chSchGoSleepTimeoutS
 299               	.LVL19:
 300 0048 892B      		or r24,r25
 301 004a 01F4      		brne .L11
 302 004c EE89      		ldd r30,Y+22
 303 004e FF89      		ldd r31,Y+23
 304 0050 00C0      		rjmp .L9
 305               	.L11:
 163:../../../os/rt/src/chmsg.c ****     }
 306               		.loc 1 163 0
 307 0052 80E0      		ldi r24,0
 308 0054 90E0      		ldi r25,0
 309 0056 00C0      		rjmp .L10
 310               		.cfi_endproc
 311               	.LFE195:
 313               		.section	.text.chMsgPollS,"ax",@progbits
 314               	.global	chMsgPollS
 316               	chMsgPollS:
 317               	.LFB196:
 171:../../../os/rt/src/chmsg.c **** 
 172:../../../os/rt/src/chmsg.c **** /**
 173:../../../os/rt/src/chmsg.c ****  * @brief   Poll to check for an incoming message.
 174:../../../os/rt/src/chmsg.c ****  * @post    If a message is available the function @p chMsgGet() must be
 175:../../../os/rt/src/chmsg.c ****  *          called in order to retrieve the message and then @p chMsgRelease()
 176:../../../os/rt/src/chmsg.c ****  *          must be invoked in order to acknowledge the reception and send
 177:../../../os/rt/src/chmsg.c ****  *          the answer.
 178:../../../os/rt/src/chmsg.c ****  * @note    If the message is a pointer then you can assume that the data
 179:../../../os/rt/src/chmsg.c ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 180:../../../os/rt/src/chmsg.c ****  *          because the sending thread is suspended until then.
 181:../../../os/rt/src/chmsg.c ****  * @note    The reference counter of the sender thread is not increased, the
 182:../../../os/rt/src/chmsg.c ****  *          returned pointer is a temporary reference.
 183:../../../os/rt/src/chmsg.c ****  *
 184:../../../os/rt/src/chmsg.c ****  * @return              Result of the poll.
 185:../../../os/rt/src/chmsg.c ****  * @retval  NULL        if no incoming message waiting.
 186:../../../os/rt/src/chmsg.c ****  *
 187:../../../os/rt/src/chmsg.c ****  * @sclass
 188:../../../os/rt/src/chmsg.c ****  */
 189:../../../os/rt/src/chmsg.c **** thread_t *chMsgPollS(void) {
 318               		.loc 1 189 0
 319               		.cfi_startproc
 320 0000 CF93      		push r28
 321               	.LCFI10:
 322               		.cfi_def_cfa_offset 3
 323               		.cfi_offset 28, -2
 324 0002 DF93      		push r29
 325               	.LCFI11:
 326               		.cfi_def_cfa_offset 4
 327               		.cfi_offset 29, -3
 328               	/* prologue: function */
 329               	/* frame size = 0 */
 330               	/* stack size = 2 */
 331               	.L__stack_usage = 2
 332               	.LBB69:
 333               	.LBB70:
 334               		.loc 2 375 0
 335 0004 E091 0000 		lds r30,ch0+5
 336 0008 F091 0000 		lds r31,ch0+5+1
 337               	.LVL20:
 338               	.LBE70:
 339               	.LBE69:
 340               	.LBB71:
 341               	.LBB72:
 342               		.loc 5 176 0
 343 000c 8689      		ldd r24,Z+22
 344 000e 9789      		ldd r25,Z+23
 345 0010 9F01      		movw r18,r30
 346 0012 2A5E      		subi r18,-22
 347 0014 3F4F      		sbci r19,-1
 348               	.LBE72:
 349               	.LBE71:
 190:../../../os/rt/src/chmsg.c ****   thread_t *currtp = chThdGetSelfX();
 191:../../../os/rt/src/chmsg.c ****   thread_t *tp = NULL;
 192:../../../os/rt/src/chmsg.c **** 
 193:../../../os/rt/src/chmsg.c ****   if (chMsgIsPendingI(currtp)) {
 350               		.loc 1 193 0
 351 0016 2817      		cp r18,r24
 352 0018 3907      		cpc r19,r25
 353 001a 01F0      		breq .L15
 354               	.LVL21:
 355               	.LBB73:
 356               	.LBB74:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 357               		.loc 4 343 0
 358 001c EC01      		movw r28,r24
 359 001e A881      		ld r26,Y
 360 0020 B981      		ldd r27,Y+1
 361 0022 B78B      		std Z+23,r27
 362 0024 A68B      		std Z+22,r26
 363               		.loc 4 344 0
 364 0026 1396      		adiw r26,2+1
 365 0028 3C93      		st X,r19
 366 002a 2E93      		st -X,r18
 367 002c 1297      		sbiw r26,2
 368               	.LVL22:
 369               	.LBE74:
 370               	.LBE73:
 194:../../../os/rt/src/chmsg.c ****     tp = threadref(ch_queue_fifo_remove(&currtp->msgqueue));
 195:../../../os/rt/src/chmsg.c ****     tp->state = CH_STATE_SNDMSG;
 371               		.loc 1 195 0
 372 002e 2DE0      		ldi r18,lo8(13)
 373 0030 2F87      		std Y+15,r18
 374               	.L14:
 375               	.LVL23:
 376               	/* epilogue start */
 196:../../../os/rt/src/chmsg.c ****   }
 197:../../../os/rt/src/chmsg.c **** 
 198:../../../os/rt/src/chmsg.c ****   return tp;
 199:../../../os/rt/src/chmsg.c **** }
 377               		.loc 1 199 0
 378 0032 DF91      		pop r29
 379 0034 CF91      		pop r28
 380 0036 0895      		ret
 381               	.LVL24:
 382               	.L15:
 191:../../../os/rt/src/chmsg.c **** 
 383               		.loc 1 191 0
 384 0038 80E0      		ldi r24,0
 385 003a 90E0      		ldi r25,0
 386 003c 00C0      		rjmp .L14
 387               		.cfi_endproc
 388               	.LFE196:
 390               		.section	.text.chMsgRelease,"ax",@progbits
 391               	.global	chMsgRelease
 393               	chMsgRelease:
 394               	.LFB197:
 200:../../../os/rt/src/chmsg.c **** 
 201:../../../os/rt/src/chmsg.c **** /**
 202:../../../os/rt/src/chmsg.c ****  * @brief   Releases a sender thread specifying a response message.
 203:../../../os/rt/src/chmsg.c ****  * @pre     Invoke this function only after a message has been received
 204:../../../os/rt/src/chmsg.c ****  *          using @p chMsgWait().
 205:../../../os/rt/src/chmsg.c ****  *
 206:../../../os/rt/src/chmsg.c ****  * @param[in] tp        pointer to the thread
 207:../../../os/rt/src/chmsg.c ****  * @param[in] msg       message to be returned to the sender
 208:../../../os/rt/src/chmsg.c ****  *
 209:../../../os/rt/src/chmsg.c ****  * @api
 210:../../../os/rt/src/chmsg.c ****  */
 211:../../../os/rt/src/chmsg.c **** void chMsgRelease(thread_t *tp, msg_t msg) {
 395               		.loc 1 211 0
 396               		.cfi_startproc
 397               	.LVL25:
 398               	/* prologue: function */
 399               	/* frame size = 0 */
 400               	/* stack size = 0 */
 401               	.L__stack_usage = 0
 402               	.LBB75:
 403               	.LBB76:
 404               	.LBB77:
 430:../../../os/common/ports/AVR/chcore.h **** }
 405               		.loc 3 430 0
 406               	/* #APP */
 407               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 408 0000 F894      		cli
 409               	 ;  0 "" 2
 410               	.LVL26:
 411               	/* #NOAPP */
 412               	.LBE77:
 413               	.LBE76:
 414               	.LBE75:
 415               	.LBB78:
 416               	.LBB79:
 177:../../../os/rt/include/chmsg.h **** }
 178:../../../os/rt/include/chmsg.h **** 
 179:../../../os/rt/include/chmsg.h **** /**
 180:../../../os/rt/include/chmsg.h ****  * @brief   Returns the message carried by the specified thread.
 181:../../../os/rt/include/chmsg.h ****  * @pre     This function must be invoked immediately after exiting a call
 182:../../../os/rt/include/chmsg.h ****  *          to @p chMsgWait().
 183:../../../os/rt/include/chmsg.h ****  *
 184:../../../os/rt/include/chmsg.h ****  * @param[in] tp        pointer to the thread
 185:../../../os/rt/include/chmsg.h ****  * @return              The message carried by the sender.
 186:../../../os/rt/include/chmsg.h ****  *
 187:../../../os/rt/include/chmsg.h ****  * @api
 188:../../../os/rt/include/chmsg.h ****  */
 189:../../../os/rt/include/chmsg.h **** static inline msg_t chMsgGet(thread_t *tp) {
 190:../../../os/rt/include/chmsg.h **** 
 191:../../../os/rt/include/chmsg.h ****   chDbgAssert(tp->state == CH_STATE_SNDMSG, "invalid state");
 192:../../../os/rt/include/chmsg.h **** 
 193:../../../os/rt/include/chmsg.h ****   return tp->u.sentmsg;
 194:../../../os/rt/include/chmsg.h **** }
 195:../../../os/rt/include/chmsg.h **** 
 196:../../../os/rt/include/chmsg.h **** /**
 197:../../../os/rt/include/chmsg.h ****  * @brief   Releases the thread waiting on top of the messages queue.
 198:../../../os/rt/include/chmsg.h ****  * @pre     Invoke this function only after a message has been received
 199:../../../os/rt/include/chmsg.h ****  *          using @p chMsgWait().
 200:../../../os/rt/include/chmsg.h ****  *
 201:../../../os/rt/include/chmsg.h ****  * @param[in] tp        pointer to the thread
 202:../../../os/rt/include/chmsg.h ****  * @param[in] msg       message to be returned to the sender
 203:../../../os/rt/include/chmsg.h ****  *
 204:../../../os/rt/include/chmsg.h ****  * @sclass
 205:../../../os/rt/include/chmsg.h ****  */
 206:../../../os/rt/include/chmsg.h **** static inline void chMsgReleaseS(thread_t *tp, msg_t msg) {
 207:../../../os/rt/include/chmsg.h **** 
 208:../../../os/rt/include/chmsg.h ****   chDbgCheckClassS();
 209:../../../os/rt/include/chmsg.h **** 
 210:../../../os/rt/include/chmsg.h ****   chSchWakeupS(tp, msg);
 417               		.loc 5 210 0
 418 0002 0E94 0000 		call chSchWakeupS
 419               	.LVL27:
 420               	.LBE79:
 421               	.LBE78:
 422               	.LBB80:
 423               	.LBB81:
 424               	.LBB82:
 425               	.LBB83:
 426               		.loc 3 440 0
 427               	/* #APP */
 428               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 429 0006 7894      		sei
 430               	 ;  0 "" 2
 431               	/* #NOAPP */
 432 0008 0895      		ret
 433               	.LBE83:
 434               	.LBE82:
 435               	.LBE81:
 436               	.LBE80:
 437               		.cfi_endproc
 438               	.LFE197:
 440               		.text
 441               	.Letext0:
 442               		.file 6 "/usr/lib/avr/include/stdint.h"
 443               		.file 7 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 444               		.file 8 "../../../os/rt/include/chearly.h"
 445               		.file 9 "../../../os/rt/include/chobjects.h"
 446               		.file 10 "../../../os/rt/include/chrfcu.h"
 447               		.file 11 "../../../os/rt/include/chdebug.h"
 448               		.file 12 "../../../os/rt/include/chtime.h"
 449               		.file 13 "../../../os/rt/include/chsem.h"
 450               		.file 14 "../../../os/rt/include/chmtx.h"
 451               		.file 15 "../../../os/rt/include/chsys.h"
 452               		.file 16 "../../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmsg.c
     /tmp/ccIvLhpD.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccIvLhpD.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccIvLhpD.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccIvLhpD.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccIvLhpD.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccIvLhpD.s:13     .text.chMsgSend:0000000000000000 chMsgSend
     /tmp/ccIvLhpD.s:126    .text.chMsgWaitS:0000000000000000 chMsgWaitS
     /tmp/ccIvLhpD.s:215    .text.chMsgWaitTimeoutS:0000000000000000 chMsgWaitTimeoutS
     /tmp/ccIvLhpD.s:316    .text.chMsgPollS:0000000000000000 chMsgPollS
     /tmp/ccIvLhpD.s:393    .text.chMsgRelease:0000000000000000 chMsgRelease

UNDEFINED SYMBOLS
ch0
chSchGoSleepS
chSchReadyI
chSchGoSleepTimeoutS
chSchWakeupS
