
build/ch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000007c  00800100  00001e18  00001eac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  0080017c  0080017c  00001f28  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00001f28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001f3c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007e0  00000000  00000000  00001f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00015a46  00000000  00000000  0000275c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000458d  00000000  00000000  000181a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005991  00000000  00000000  0001c72f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000016e4  00000000  00000000  000220c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000021d1  00000000  00000000  000237a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007291  00000000  00000000  00025975  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d8  00000000  00000000  0002cc06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
       2:	00 00       	nop
       4:	5f c0       	rjmp	.+190    	; 0xc4 <__bad_interrupt>
       6:	00 00       	nop
       8:	5d c0       	rjmp	.+186    	; 0xc4 <__bad_interrupt>
       a:	00 00       	nop
       c:	5b c0       	rjmp	.+182    	; 0xc4 <__bad_interrupt>
       e:	00 00       	nop
      10:	59 c0       	rjmp	.+178    	; 0xc4 <__bad_interrupt>
      12:	00 00       	nop
      14:	57 c0       	rjmp	.+174    	; 0xc4 <__bad_interrupt>
      16:	00 00       	nop
      18:	55 c0       	rjmp	.+170    	; 0xc4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	53 c0       	rjmp	.+166    	; 0xc4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	51 c0       	rjmp	.+162    	; 0xc4 <__bad_interrupt>
      22:	00 00       	nop
      24:	4f c0       	rjmp	.+158    	; 0xc4 <__bad_interrupt>
      26:	00 00       	nop
      28:	4d c0       	rjmp	.+154    	; 0xc4 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	03 c4       	rjmp	.+2054   	; 0x834 <__vector_11>
      2e:	00 00       	nop
      30:	35 c4       	rjmp	.+2154   	; 0x89c <__vector_12>
      32:	00 00       	nop
      34:	cb c3       	rjmp	.+1942   	; 0x7cc <__vector_13>
      36:	00 00       	nop
      38:	94 c3       	rjmp	.+1832   	; 0x762 <__vector_14>
      3a:	00 00       	nop
      3c:	43 c0       	rjmp	.+134    	; 0xc4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	41 c0       	rjmp	.+130    	; 0xc4 <__bad_interrupt>
      42:	00 00       	nop
      44:	3f c0       	rjmp	.+126    	; 0xc4 <__bad_interrupt>
      46:	00 00       	nop
      48:	b8 c5       	rjmp	.+2928   	; 0xbba <__vector_18>
      4a:	00 00       	nop
      4c:	f4 c5       	rjmp	.+3048   	; 0xc36 <__vector_19>
      4e:	00 00       	nop
      50:	39 c0       	rjmp	.+114    	; 0xc4 <__bad_interrupt>
      52:	00 00       	nop
      54:	37 c0       	rjmp	.+110    	; 0xc4 <__bad_interrupt>
      56:	00 00       	nop
      58:	35 c0       	rjmp	.+106    	; 0xc4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	33 c0       	rjmp	.+102    	; 0xc4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	31 c0       	rjmp	.+98     	; 0xc4 <__bad_interrupt>
      62:	00 00       	nop
      64:	2f c0       	rjmp	.+94     	; 0xc4 <__bad_interrupt>
	...

00000068 <__trampolines_end>:
      68:	45 46       	sbci	r20, 0x65	; 101
      6a:	47 65       	ori	r20, 0x57	; 87
      6c:	66 67       	ori	r22, 0x76	; 118
	...

0000006f <__c.2314>:
      6f:	20 2b 2d 2e 30 31 32 33 34 35 36 37 38 39 68 00      +-.0123456789h.

0000007f <__c.2449>:
      7f:	63 64 69 6e 6f 70 73 75 78 58 00                    cdinopsuxX.

0000008a <__ctors_end>:
      8a:	11 24       	eor	r1, r1
      8c:	1f be       	out	0x3f, r1	; 63
      8e:	cf ef       	ldi	r28, 0xFF	; 255
      90:	d8 e0       	ldi	r29, 0x08	; 8
      92:	de bf       	out	0x3e, r29	; 62
      94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
      96:	11 e0       	ldi	r17, 0x01	; 1
      98:	a0 e0       	ldi	r26, 0x00	; 0
      9a:	b1 e0       	ldi	r27, 0x01	; 1
      9c:	e8 e1       	ldi	r30, 0x18	; 24
      9e:	fe e1       	ldi	r31, 0x1E	; 30
      a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
      a2:	05 90       	lpm	r0, Z+
      a4:	0d 92       	st	X+, r0
      a6:	ac 37       	cpi	r26, 0x7C	; 124
      a8:	b1 07       	cpc	r27, r17
      aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
      ac:	23 e0       	ldi	r18, 0x03	; 3
      ae:	ac e7       	ldi	r26, 0x7C	; 124
      b0:	b1 e0       	ldi	r27, 0x01	; 1
      b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
      b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
      b6:	a4 31       	cpi	r26, 0x14	; 20
      b8:	b2 07       	cpc	r27, r18
      ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
      bc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <main>
      c0:	0c 94 0a 0f 	jmp	0x1e14	; 0x1e14 <_exit>

000000c4 <__bad_interrupt>:
      c4:	9d cf       	rjmp	.-198    	; 0x0 <__vectors>

000000c6 <halInit>:

  /* Initializes the OS Abstraction Layer.*/
  osalInit();

  /* Platform low level initializations.*/
  hal_lld_init();
      c6:	3e d3       	rcall	.+1660   	; 0x744 <hal_lld_init>

#if (HAL_USE_PAL == TRUE) || defined(__DOXYGEN__)
#if defined(PAL_NEW_INIT)
  palInit();
#else
  palInit(&pal_default_config);
      c8:	87 e2       	ldi	r24, 0x27	; 39
      ca:	91 e0       	ldi	r25, 0x01	; 1
#endif
#if (HAL_USE_MAC == TRUE) || defined(__DOXYGEN__)
  macInit();
#endif
#if (HAL_USE_PWM == TRUE) || defined(__DOXYGEN__)
  pwmInit();
      cc:	3c d3       	rcall	.+1656   	; 0x746 <_pal_lld_init>
#endif
#if (HAL_USE_SERIAL == TRUE) || defined(__DOXYGEN__)
  sdInit();
      ce:	78 d2       	rcall	.+1264   	; 0x5c0 <pwmInit>
      d0:	c6 d2       	rcall	.+1420   	; 0x65e <sdInit>
  halCommunityInit();
#endif
#endif

  /* Board specific initialization.*/
  boardInit();
      d2:	34 d3       	rcall	.+1640   	; 0x73c <boardInit>
      d4:	00 c0       	rjmp	.+0      	; 0xd6 <stInit>

000000d6 <stInit>:

  for (i = 0U; i < (unsigned)ST_LLD_NUM_ALARMS; i++) {
    st_callbacks[i] = NULL;
  }
#endif
  st_lld_init();
      d6:	70 c3       	rjmp	.+1760   	; 0x7b8 <st_lld_init>

000000d8 <iq_read>:
/*
 *  The ST driver is a special case, it is only initialized if the OSAL is
 *  configured to require it.
 */
#if OSAL_ST_MODE != OSAL_ST_MODE_NONE
  stInit();
      d8:	af 92       	push	r10
  if ((wr > (size_t)0) && (nfy != NULL)) {
    nfy(oqp);
  }

  return wr;
}
      da:	bf 92       	push	r11
      dc:	cf 92       	push	r12
      de:	df 92       	push	r13
      e0:	ef 92       	push	r14
      e2:	ff 92       	push	r15
      e4:	0f 93       	push	r16
      e6:	1f 93       	push	r17
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	ec 01       	movw	r28, r24
      ee:	6b 01       	movw	r12, r22
      f0:	8a 01       	movw	r16, r20
      f2:	8c 81       	ldd	r24, Y+4	; 0x04
      f4:	9d 81       	ldd	r25, Y+5	; 0x05
      f6:	84 17       	cp	r24, r20
      f8:	95 07       	cpc	r25, r21
      fa:	10 f4       	brcc	.+4      	; 0x100 <iq_read+0x28>
      fc:	0c 81       	ldd	r16, Y+4	; 0x04
      fe:	1d 81       	ldd	r17, Y+5	; 0x05
     100:	6c 85       	ldd	r22, Y+12	; 0x0c
     102:	7d 85       	ldd	r23, Y+13	; 0x0d
     104:	e8 84       	ldd	r14, Y+8	; 0x08
     106:	f9 84       	ldd	r15, Y+9	; 0x09
     108:	e6 1a       	sub	r14, r22
     10a:	f7 0a       	sbc	r15, r23
     10c:	0e 15       	cp	r16, r14
     10e:	1f 05       	cpc	r17, r15
     110:	98 f1       	brcs	.+102    	; 0x178 <iq_read+0xa0>
     112:	e0 16       	cp	r14, r16
     114:	f1 06       	cpc	r15, r17
     116:	d0 f0       	brcs	.+52     	; 0x14c <iq_read+0x74>
     118:	a8 01       	movw	r20, r16
     11a:	c6 01       	movw	r24, r12
     11c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     120:	8e 81       	ldd	r24, Y+6	; 0x06
     122:	9f 81       	ldd	r25, Y+7	; 0x07
     124:	9d 87       	std	Y+13, r25	; 0x0d
     126:	8c 87       	std	Y+12, r24	; 0x0c
     128:	8c 81       	ldd	r24, Y+4	; 0x04
     12a:	9d 81       	ldd	r25, Y+5	; 0x05
     12c:	80 1b       	sub	r24, r16
     12e:	91 0b       	sbc	r25, r17
     130:	9d 83       	std	Y+5, r25	; 0x05
     132:	8c 83       	std	Y+4, r24	; 0x04
     134:	c8 01       	movw	r24, r16
     136:	df 91       	pop	r29
     138:	cf 91       	pop	r28
     13a:	1f 91       	pop	r17
     13c:	0f 91       	pop	r16
     13e:	ff 90       	pop	r15
     140:	ef 90       	pop	r14
     142:	df 90       	pop	r13
     144:	cf 90       	pop	r12
     146:	bf 90       	pop	r11
     148:	af 90       	pop	r10
     14a:	08 95       	ret
     14c:	a7 01       	movw	r20, r14
     14e:	c6 01       	movw	r24, r12
     150:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     154:	58 01       	movw	r10, r16
     156:	ae 18       	sub	r10, r14
     158:	bf 08       	sbc	r11, r15
     15a:	6e 81       	ldd	r22, Y+6	; 0x06
     15c:	7f 81       	ldd	r23, Y+7	; 0x07
     15e:	a5 01       	movw	r20, r10
     160:	c6 01       	movw	r24, r12
     162:	8e 0d       	add	r24, r14
     164:	9f 1d       	adc	r25, r15
     166:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     16a:	8e 81       	ldd	r24, Y+6	; 0x06
     16c:	9f 81       	ldd	r25, Y+7	; 0x07
     16e:	a8 0e       	add	r10, r24
     170:	b9 1e       	adc	r11, r25
     172:	bd 86       	std	Y+13, r11	; 0x0d
     174:	ac 86       	std	Y+12, r10	; 0x0c
     176:	d8 cf       	rjmp	.-80     	; 0x128 <iq_read+0x50>
     178:	a8 01       	movw	r20, r16
     17a:	c6 01       	movw	r24, r12
     17c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     180:	8c 85       	ldd	r24, Y+12	; 0x0c
     182:	9d 85       	ldd	r25, Y+13	; 0x0d
     184:	80 0f       	add	r24, r16
     186:	91 1f       	adc	r25, r17
     188:	9d 87       	std	Y+13, r25	; 0x0d
     18a:	8c 87       	std	Y+12, r24	; 0x0c
     18c:	cd cf       	rjmp	.-102    	; 0x128 <iq_read+0x50>

0000018e <oq_write>:
     18e:	af 92       	push	r10
     190:	bf 92       	push	r11
     192:	cf 92       	push	r12
     194:	df 92       	push	r13
     196:	ef 92       	push	r14
     198:	ff 92       	push	r15
     19a:	0f 93       	push	r16
     19c:	1f 93       	push	r17
     19e:	cf 93       	push	r28
     1a0:	df 93       	push	r29
     1a2:	ec 01       	movw	r28, r24
     1a4:	6b 01       	movw	r12, r22
     1a6:	8a 01       	movw	r16, r20
     1a8:	8c 81       	ldd	r24, Y+4	; 0x04
     1aa:	9d 81       	ldd	r25, Y+5	; 0x05
     1ac:	84 17       	cp	r24, r20
     1ae:	95 07       	cpc	r25, r21
     1b0:	10 f4       	brcc	.+4      	; 0x1b6 <oq_write+0x28>
     1b2:	0c 81       	ldd	r16, Y+4	; 0x04
     1b4:	1d 81       	ldd	r17, Y+5	; 0x05
     1b6:	8a 85       	ldd	r24, Y+10	; 0x0a
     1b8:	9b 85       	ldd	r25, Y+11	; 0x0b
     1ba:	e8 84       	ldd	r14, Y+8	; 0x08
     1bc:	f9 84       	ldd	r15, Y+9	; 0x09
     1be:	e8 1a       	sub	r14, r24
     1c0:	f9 0a       	sbc	r15, r25
     1c2:	0e 15       	cp	r16, r14
     1c4:	1f 05       	cpc	r17, r15
     1c6:	98 f1       	brcs	.+102    	; 0x22e <oq_write+0xa0>
     1c8:	e0 16       	cp	r14, r16
     1ca:	f1 06       	cpc	r15, r17
     1cc:	d0 f0       	brcs	.+52     	; 0x202 <oq_write+0x74>
     1ce:	a8 01       	movw	r20, r16
     1d0:	b6 01       	movw	r22, r12
     1d2:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     1d6:	8e 81       	ldd	r24, Y+6	; 0x06
     1d8:	9f 81       	ldd	r25, Y+7	; 0x07
     1da:	9b 87       	std	Y+11, r25	; 0x0b
     1dc:	8a 87       	std	Y+10, r24	; 0x0a
     1de:	8c 81       	ldd	r24, Y+4	; 0x04
     1e0:	9d 81       	ldd	r25, Y+5	; 0x05
     1e2:	80 1b       	sub	r24, r16
     1e4:	91 0b       	sbc	r25, r17
     1e6:	9d 83       	std	Y+5, r25	; 0x05
     1e8:	8c 83       	std	Y+4, r24	; 0x04
     1ea:	c8 01       	movw	r24, r16
     1ec:	df 91       	pop	r29
     1ee:	cf 91       	pop	r28
     1f0:	1f 91       	pop	r17
     1f2:	0f 91       	pop	r16
     1f4:	ff 90       	pop	r15
     1f6:	ef 90       	pop	r14
     1f8:	df 90       	pop	r13
     1fa:	cf 90       	pop	r12
     1fc:	bf 90       	pop	r11
     1fe:	af 90       	pop	r10
     200:	08 95       	ret
     202:	a7 01       	movw	r20, r14
     204:	b6 01       	movw	r22, r12
     206:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     20a:	58 01       	movw	r10, r16
     20c:	ae 18       	sub	r10, r14
     20e:	bf 08       	sbc	r11, r15
     210:	b6 01       	movw	r22, r12
     212:	6e 0d       	add	r22, r14
     214:	7f 1d       	adc	r23, r15
     216:	a5 01       	movw	r20, r10
     218:	8e 81       	ldd	r24, Y+6	; 0x06
     21a:	9f 81       	ldd	r25, Y+7	; 0x07
     21c:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     220:	8e 81       	ldd	r24, Y+6	; 0x06
     222:	9f 81       	ldd	r25, Y+7	; 0x07
     224:	a8 0e       	add	r10, r24
     226:	b9 1e       	adc	r11, r25
     228:	bb 86       	std	Y+11, r11	; 0x0b
     22a:	aa 86       	std	Y+10, r10	; 0x0a
     22c:	d8 cf       	rjmp	.-80     	; 0x1de <oq_write+0x50>
     22e:	a8 01       	movw	r20, r16
     230:	b6 01       	movw	r22, r12
     232:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <memcpy>
     236:	8a 85       	ldd	r24, Y+10	; 0x0a
     238:	9b 85       	ldd	r25, Y+11	; 0x0b
     23a:	80 0f       	add	r24, r16
     23c:	91 1f       	adc	r25, r17
     23e:	9b 87       	std	Y+11, r25	; 0x0b
     240:	8a 87       	std	Y+10, r24	; 0x0a
     242:	cd cf       	rjmp	.-102    	; 0x1de <oq_write+0x50>

00000244 <iqObjectInit>:
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	ec 01       	movw	r28, r24
     25a:	7b 01       	movw	r14, r22
     25c:	6a 01       	movw	r12, r20
     25e:	59 01       	movw	r10, r18
     260:	0e 94 a5 09 	call	0x134a	; 0x134a <chThdQueueObjectInit>
     264:	1d 82       	std	Y+5, r1	; 0x05
     266:	1c 82       	std	Y+4, r1	; 0x04
     268:	ff 82       	std	Y+7, r15	; 0x07
     26a:	ee 82       	std	Y+6, r14	; 0x06
     26c:	fd 86       	std	Y+13, r15	; 0x0d
     26e:	ec 86       	std	Y+12, r14	; 0x0c
     270:	fb 86       	std	Y+11, r15	; 0x0b
     272:	ea 86       	std	Y+10, r14	; 0x0a
     274:	ec 0c       	add	r14, r12
     276:	fd 1c       	adc	r15, r13
     278:	f9 86       	std	Y+9, r15	; 0x09
     27a:	e8 86       	std	Y+8, r14	; 0x08
     27c:	bf 86       	std	Y+15, r11	; 0x0f
     27e:	ae 86       	std	Y+14, r10	; 0x0e
     280:	19 8b       	std	Y+17, r17	; 0x11
     282:	08 8b       	std	Y+16, r16	; 0x10
     284:	df 91       	pop	r29
     286:	cf 91       	pop	r28
     288:	1f 91       	pop	r17
     28a:	0f 91       	pop	r16
     28c:	ff 90       	pop	r15
     28e:	ef 90       	pop	r14
     290:	df 90       	pop	r13
     292:	cf 90       	pop	r12
     294:	bf 90       	pop	r11
     296:	af 90       	pop	r10
     298:	08 95       	ret

0000029a <iqPutI>:
     29a:	fc 01       	movw	r30, r24
     29c:	a2 85       	ldd	r26, Z+10	; 0x0a
     29e:	b3 85       	ldd	r27, Z+11	; 0x0b
     2a0:	84 85       	ldd	r24, Z+12	; 0x0c
     2a2:	95 85       	ldd	r25, Z+13	; 0x0d
     2a4:	a8 17       	cp	r26, r24
     2a6:	b9 07       	cpc	r27, r25
     2a8:	e9 f0       	breq	.+58     	; 0x2e4 <iqPutI+0x4a>
     2aa:	84 81       	ldd	r24, Z+4	; 0x04
     2ac:	95 81       	ldd	r25, Z+5	; 0x05
     2ae:	01 96       	adiw	r24, 0x01	; 1
     2b0:	95 83       	std	Z+5, r25	; 0x05
     2b2:	84 83       	std	Z+4, r24	; 0x04
     2b4:	cd 01       	movw	r24, r26
     2b6:	01 96       	adiw	r24, 0x01	; 1
     2b8:	93 87       	std	Z+11, r25	; 0x0b
     2ba:	82 87       	std	Z+10, r24	; 0x0a
     2bc:	6c 93       	st	X, r22
     2be:	22 85       	ldd	r18, Z+10	; 0x0a
     2c0:	33 85       	ldd	r19, Z+11	; 0x0b
     2c2:	80 85       	ldd	r24, Z+8	; 0x08
     2c4:	91 85       	ldd	r25, Z+9	; 0x09
     2c6:	28 17       	cp	r18, r24
     2c8:	39 07       	cpc	r19, r25
     2ca:	20 f0       	brcs	.+8      	; 0x2d4 <iqPutI+0x3a>
     2cc:	86 81       	ldd	r24, Z+6	; 0x06
     2ce:	97 81       	ldd	r25, Z+7	; 0x07
     2d0:	93 87       	std	Z+11, r25	; 0x0b
     2d2:	82 87       	std	Z+10, r24	; 0x0a
     2d4:	cf 01       	movw	r24, r30
     2d6:	60 e0       	ldi	r22, 0x00	; 0
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	0e 94 c8 09 	call	0x1390	; 0x1390 <chThdDequeueNextI>
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 95       	ret
     2e4:	84 81       	ldd	r24, Z+4	; 0x04
     2e6:	95 81       	ldd	r25, Z+5	; 0x05
     2e8:	89 2b       	or	r24, r25
     2ea:	f9 f2       	breq	.-66     	; 0x2aa <iqPutI+0x10>
     2ec:	8f ef       	ldi	r24, 0xFF	; 255
     2ee:	9f ef       	ldi	r25, 0xFF	; 255
     2f0:	08 95       	ret

000002f2 <iqGetTimeout>:
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	cf 93       	push	r28
     2f8:	df 93       	push	r29
     2fa:	ec 01       	movw	r28, r24
     2fc:	8b 01       	movw	r16, r22
     2fe:	f8 94       	cli
     300:	06 c0       	rjmp	.+12     	; 0x30e <iqGetTimeout+0x1c>
     302:	b8 01       	movw	r22, r16
     304:	ce 01       	movw	r24, r28
     306:	0e 94 ab 09 	call	0x1356	; 0x1356 <chThdEnqueueTimeoutS>
     30a:	97 fd       	sbrc	r25, 7
     30c:	27 c0       	rjmp	.+78     	; 0x35c <iqGetTimeout+0x6a>
     30e:	8c 81       	ldd	r24, Y+4	; 0x04
     310:	9d 81       	ldd	r25, Y+5	; 0x05
     312:	89 2b       	or	r24, r25
     314:	b1 f3       	breq	.-20     	; 0x302 <iqGetTimeout+0x10>
     316:	8c 81       	ldd	r24, Y+4	; 0x04
     318:	9d 81       	ldd	r25, Y+5	; 0x05
     31a:	01 97       	sbiw	r24, 0x01	; 1
     31c:	9d 83       	std	Y+5, r25	; 0x05
     31e:	8c 83       	std	Y+4, r24	; 0x04
     320:	ec 85       	ldd	r30, Y+12	; 0x0c
     322:	fd 85       	ldd	r31, Y+13	; 0x0d
     324:	cf 01       	movw	r24, r30
     326:	01 96       	adiw	r24, 0x01	; 1
     328:	9d 87       	std	Y+13, r25	; 0x0d
     32a:	8c 87       	std	Y+12, r24	; 0x0c
     32c:	10 81       	ld	r17, Z
     32e:	28 85       	ldd	r18, Y+8	; 0x08
     330:	39 85       	ldd	r19, Y+9	; 0x09
     332:	82 17       	cp	r24, r18
     334:	93 07       	cpc	r25, r19
     336:	20 f0       	brcs	.+8      	; 0x340 <iqGetTimeout+0x4e>
     338:	8e 81       	ldd	r24, Y+6	; 0x06
     33a:	9f 81       	ldd	r25, Y+7	; 0x07
     33c:	9d 87       	std	Y+13, r25	; 0x0d
     33e:	8c 87       	std	Y+12, r24	; 0x0c
     340:	ee 85       	ldd	r30, Y+14	; 0x0e
     342:	ff 85       	ldd	r31, Y+15	; 0x0f
     344:	30 97       	sbiw	r30, 0x00	; 0
     346:	11 f0       	breq	.+4      	; 0x34c <iqGetTimeout+0x5a>
     348:	ce 01       	movw	r24, r28
     34a:	09 95       	icall
     34c:	78 94       	sei
     34e:	81 2f       	mov	r24, r17
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	0f 91       	pop	r16
     35a:	08 95       	ret
     35c:	78 94       	sei
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <iqReadTimeout>:
     368:	6f 92       	push	r6
     36a:	7f 92       	push	r7
     36c:	8f 92       	push	r8
     36e:	9f 92       	push	r9
     370:	af 92       	push	r10
     372:	bf 92       	push	r11
     374:	cf 92       	push	r12
     376:	df 92       	push	r13
     378:	ef 92       	push	r14
     37a:	ff 92       	push	r15
     37c:	0f 93       	push	r16
     37e:	1f 93       	push	r17
     380:	cf 93       	push	r28
     382:	df 93       	push	r29
     384:	6c 01       	movw	r12, r24
     386:	7b 01       	movw	r14, r22
     388:	3a 01       	movw	r6, r20
     38a:	49 01       	movw	r8, r18
     38c:	fc 01       	movw	r30, r24
     38e:	a6 84       	ldd	r10, Z+14	; 0x0e
     390:	b7 84       	ldd	r11, Z+15	; 0x0f
     392:	f8 94       	cli
     394:	41 15       	cp	r20, r1
     396:	51 05       	cpc	r21, r1
     398:	b9 f0       	breq	.+46     	; 0x3c8 <iqReadTimeout+0x60>
     39a:	8a 01       	movw	r16, r20
     39c:	a8 01       	movw	r20, r16
     39e:	b7 01       	movw	r22, r14
     3a0:	c6 01       	movw	r24, r12
     3a2:	9a de       	rcall	.-716    	; 0xd8 <iq_read>
     3a4:	ec 01       	movw	r28, r24
     3a6:	89 2b       	or	r24, r25
     3a8:	21 f1       	breq	.+72     	; 0x3f2 <iqReadTimeout+0x8a>
     3aa:	a1 14       	cp	r10, r1
     3ac:	b1 04       	cpc	r11, r1
     3ae:	19 f0       	breq	.+6      	; 0x3b6 <iqReadTimeout+0x4e>
     3b0:	c6 01       	movw	r24, r12
     3b2:	f5 01       	movw	r30, r10
     3b4:	09 95       	icall
     3b6:	78 94       	sei
     3b8:	0c 1b       	sub	r16, r28
     3ba:	1d 0b       	sbc	r17, r29
     3bc:	ec 0e       	add	r14, r28
     3be:	fd 1e       	adc	r15, r29
     3c0:	f8 94       	cli
     3c2:	01 15       	cp	r16, r1
     3c4:	11 05       	cpc	r17, r1
     3c6:	51 f7       	brne	.-44     	; 0x39c <iqReadTimeout+0x34>
     3c8:	00 e0       	ldi	r16, 0x00	; 0
     3ca:	10 e0       	ldi	r17, 0x00	; 0
     3cc:	78 94       	sei
     3ce:	c3 01       	movw	r24, r6
     3d0:	80 1b       	sub	r24, r16
     3d2:	91 0b       	sbc	r25, r17
     3d4:	df 91       	pop	r29
     3d6:	cf 91       	pop	r28
     3d8:	1f 91       	pop	r17
     3da:	0f 91       	pop	r16
     3dc:	ff 90       	pop	r15
     3de:	ef 90       	pop	r14
     3e0:	df 90       	pop	r13
     3e2:	cf 90       	pop	r12
     3e4:	bf 90       	pop	r11
     3e6:	af 90       	pop	r10
     3e8:	9f 90       	pop	r9
     3ea:	8f 90       	pop	r8
     3ec:	7f 90       	pop	r7
     3ee:	6f 90       	pop	r6
     3f0:	08 95       	ret
     3f2:	b4 01       	movw	r22, r8
     3f4:	c6 01       	movw	r24, r12
     3f6:	af d7       	rcall	.+3934   	; 0x1356 <chThdEnqueueTimeoutS>
     3f8:	89 2b       	or	r24, r25
     3fa:	81 f2       	breq	.-96     	; 0x39c <iqReadTimeout+0x34>
     3fc:	e7 cf       	rjmp	.-50     	; 0x3cc <iqReadTimeout+0x64>

000003fe <oqObjectInit>:
     3fe:	af 92       	push	r10
     400:	bf 92       	push	r11
     402:	cf 92       	push	r12
     404:	df 92       	push	r13
     406:	ef 92       	push	r14
     408:	ff 92       	push	r15
     40a:	0f 93       	push	r16
     40c:	1f 93       	push	r17
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	ec 01       	movw	r28, r24
     414:	5b 01       	movw	r10, r22
     416:	7a 01       	movw	r14, r20
     418:	69 01       	movw	r12, r18
     41a:	97 d7       	rcall	.+3886   	; 0x134a <chThdQueueObjectInit>
     41c:	fd 82       	std	Y+5, r15	; 0x05
     41e:	ec 82       	std	Y+4, r14	; 0x04
     420:	bf 82       	std	Y+7, r11	; 0x07
     422:	ae 82       	std	Y+6, r10	; 0x06
     424:	bd 86       	std	Y+13, r11	; 0x0d
     426:	ac 86       	std	Y+12, r10	; 0x0c
     428:	bb 86       	std	Y+11, r11	; 0x0b
     42a:	aa 86       	std	Y+10, r10	; 0x0a
     42c:	ea 0c       	add	r14, r10
     42e:	fb 1c       	adc	r15, r11
     430:	f9 86       	std	Y+9, r15	; 0x09
     432:	e8 86       	std	Y+8, r14	; 0x08
     434:	df 86       	std	Y+15, r13	; 0x0f
     436:	ce 86       	std	Y+14, r12	; 0x0e
     438:	19 8b       	std	Y+17, r17	; 0x11
     43a:	08 8b       	std	Y+16, r16	; 0x10
     43c:	df 91       	pop	r29
     43e:	cf 91       	pop	r28
     440:	1f 91       	pop	r17
     442:	0f 91       	pop	r16
     444:	ff 90       	pop	r15
     446:	ef 90       	pop	r14
     448:	df 90       	pop	r13
     44a:	cf 90       	pop	r12
     44c:	bf 90       	pop	r11
     44e:	af 90       	pop	r10
     450:	08 95       	ret

00000452 <oqPutTimeout>:
     452:	ff 92       	push	r15
     454:	0f 93       	push	r16
     456:	1f 93       	push	r17
     458:	cf 93       	push	r28
     45a:	df 93       	push	r29
     45c:	ec 01       	movw	r28, r24
     45e:	f6 2e       	mov	r15, r22
     460:	8a 01       	movw	r16, r20
     462:	f8 94       	cli
     464:	05 c0       	rjmp	.+10     	; 0x470 <oqPutTimeout+0x1e>
     466:	b8 01       	movw	r22, r16
     468:	ce 01       	movw	r24, r28
     46a:	75 d7       	rcall	.+3818   	; 0x1356 <chThdEnqueueTimeoutS>
     46c:	97 fd       	sbrc	r25, 7
     46e:	2a c0       	rjmp	.+84     	; 0x4c4 <oqPutTimeout+0x72>
     470:	8c 81       	ldd	r24, Y+4	; 0x04
     472:	9d 81       	ldd	r25, Y+5	; 0x05
     474:	89 2b       	or	r24, r25
     476:	b9 f3       	breq	.-18     	; 0x466 <oqPutTimeout+0x14>
     478:	8c 81       	ldd	r24, Y+4	; 0x04
     47a:	9d 81       	ldd	r25, Y+5	; 0x05
     47c:	01 97       	sbiw	r24, 0x01	; 1
     47e:	9d 83       	std	Y+5, r25	; 0x05
     480:	8c 83       	std	Y+4, r24	; 0x04
     482:	ea 85       	ldd	r30, Y+10	; 0x0a
     484:	fb 85       	ldd	r31, Y+11	; 0x0b
     486:	cf 01       	movw	r24, r30
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	9b 87       	std	Y+11, r25	; 0x0b
     48c:	8a 87       	std	Y+10, r24	; 0x0a
     48e:	f0 82       	st	Z, r15
     490:	2a 85       	ldd	r18, Y+10	; 0x0a
     492:	3b 85       	ldd	r19, Y+11	; 0x0b
     494:	88 85       	ldd	r24, Y+8	; 0x08
     496:	99 85       	ldd	r25, Y+9	; 0x09
     498:	28 17       	cp	r18, r24
     49a:	39 07       	cpc	r19, r25
     49c:	20 f0       	brcs	.+8      	; 0x4a6 <oqPutTimeout+0x54>
     49e:	8e 81       	ldd	r24, Y+6	; 0x06
     4a0:	9f 81       	ldd	r25, Y+7	; 0x07
     4a2:	9b 87       	std	Y+11, r25	; 0x0b
     4a4:	8a 87       	std	Y+10, r24	; 0x0a
     4a6:	ee 85       	ldd	r30, Y+14	; 0x0e
     4a8:	ff 85       	ldd	r31, Y+15	; 0x0f
     4aa:	30 97       	sbiw	r30, 0x00	; 0
     4ac:	11 f0       	breq	.+4      	; 0x4b2 <oqPutTimeout+0x60>
     4ae:	ce 01       	movw	r24, r28
     4b0:	09 95       	icall
     4b2:	78 94       	sei
     4b4:	80 e0       	ldi	r24, 0x00	; 0
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	df 91       	pop	r29
     4ba:	cf 91       	pop	r28
     4bc:	1f 91       	pop	r17
     4be:	0f 91       	pop	r16
     4c0:	ff 90       	pop	r15
     4c2:	08 95       	ret
     4c4:	78 94       	sei
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	1f 91       	pop	r17
     4cc:	0f 91       	pop	r16
     4ce:	ff 90       	pop	r15
     4d0:	08 95       	ret

000004d2 <oqGetI>:
     4d2:	cf 93       	push	r28
     4d4:	fc 01       	movw	r30, r24
     4d6:	a4 85       	ldd	r26, Z+12	; 0x0c
     4d8:	b5 85       	ldd	r27, Z+13	; 0x0d
     4da:	82 85       	ldd	r24, Z+10	; 0x0a
     4dc:	93 85       	ldd	r25, Z+11	; 0x0b
     4de:	8a 17       	cp	r24, r26
     4e0:	9b 07       	cpc	r25, r27
     4e2:	e1 f0       	breq	.+56     	; 0x51c <oqGetI+0x4a>
     4e4:	84 81       	ldd	r24, Z+4	; 0x04
     4e6:	95 81       	ldd	r25, Z+5	; 0x05
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	95 83       	std	Z+5, r25	; 0x05
     4ec:	84 83       	std	Z+4, r24	; 0x04
     4ee:	cd 01       	movw	r24, r26
     4f0:	01 96       	adiw	r24, 0x01	; 1
     4f2:	95 87       	std	Z+13, r25	; 0x0d
     4f4:	84 87       	std	Z+12, r24	; 0x0c
     4f6:	cc 91       	ld	r28, X
     4f8:	20 85       	ldd	r18, Z+8	; 0x08
     4fa:	31 85       	ldd	r19, Z+9	; 0x09
     4fc:	82 17       	cp	r24, r18
     4fe:	93 07       	cpc	r25, r19
     500:	40 f4       	brcc	.+16     	; 0x512 <oqGetI+0x40>
     502:	cf 01       	movw	r24, r30
     504:	60 e0       	ldi	r22, 0x00	; 0
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	43 d7       	rcall	.+3718   	; 0x1390 <chThdDequeueNextI>
     50a:	8c 2f       	mov	r24, r28
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	cf 91       	pop	r28
     510:	08 95       	ret
     512:	86 81       	ldd	r24, Z+6	; 0x06
     514:	97 81       	ldd	r25, Z+7	; 0x07
     516:	95 87       	std	Z+13, r25	; 0x0d
     518:	84 87       	std	Z+12, r24	; 0x0c
     51a:	f3 cf       	rjmp	.-26     	; 0x502 <oqGetI+0x30>
     51c:	84 81       	ldd	r24, Z+4	; 0x04
     51e:	95 81       	ldd	r25, Z+5	; 0x05
     520:	89 2b       	or	r24, r25
     522:	01 f3       	breq	.-64     	; 0x4e4 <oqGetI+0x12>
     524:	8f ef       	ldi	r24, 0xFF	; 255
     526:	9f ef       	ldi	r25, 0xFF	; 255
     528:	f2 cf       	rjmp	.-28     	; 0x50e <oqGetI+0x3c>

0000052a <oqWriteTimeout>:
 * @return              The number of bytes effectively transferred.
 *
 * @api
 */
size_t oqWriteTimeout(output_queue_t *oqp, const uint8_t *bp,
                      size_t n, sysinterval_t timeout) {
     52a:	6f 92       	push	r6
     52c:	7f 92       	push	r7
     52e:	8f 92       	push	r8
     530:	9f 92       	push	r9
     532:	af 92       	push	r10
     534:	bf 92       	push	r11
     536:	cf 92       	push	r12
     538:	df 92       	push	r13
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	cf 93       	push	r28
     544:	df 93       	push	r29
     546:	6c 01       	movw	r12, r24
     548:	7b 01       	movw	r14, r22
     54a:	3a 01       	movw	r6, r20
     54c:	49 01       	movw	r8, r18
  qnotify_t nfy = oqp->q_notify;
     54e:	fc 01       	movw	r30, r24
     550:	a6 84       	ldd	r10, Z+14	; 0x0e
     552:	b7 84       	ldd	r11, Z+15	; 0x0f
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     554:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     556:	41 15       	cp	r20, r1
     558:	51 05       	cpc	r21, r1
     55a:	b9 f0       	breq	.+46     	; 0x58a <oqWriteTimeout+0x60>
     55c:	8a 01       	movw	r16, r20
    size_t done;

    done = oq_write(oqp, bp, n);
     55e:	a8 01       	movw	r20, r16
     560:	b7 01       	movw	r22, r14
     562:	c6 01       	movw	r24, r12
     564:	14 de       	rcall	.-984    	; 0x18e <oq_write>
     566:	ec 01       	movw	r28, r24
    if (done == (size_t)0) {
     568:	89 2b       	or	r24, r25
     56a:	21 f1       	breq	.+72     	; 0x5b4 <oqWriteTimeout+0x8a>
      }
    }
    else {
      /* Inform the low side that the queue has at least one character
         available.*/
      if (nfy != NULL) {
     56c:	a1 14       	cp	r10, r1
     56e:	b1 04       	cpc	r11, r1
     570:	19 f0       	breq	.+6      	; 0x578 <oqWriteTimeout+0x4e>
        nfy(oqp);
     572:	c6 01       	movw	r24, r12
     574:	f5 01       	movw	r30, r10
     576:	09 95       	icall
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     578:	78 94       	sei
      }

      /* Giving a preemption chance in a controlled point.*/
      osalSysUnlock();

      n  -= done;
     57a:	0c 1b       	sub	r16, r28
     57c:	1d 0b       	sbc	r17, r29
      bp += done;
     57e:	ec 0e       	add	r14, r28
     580:	fd 1e       	adc	r15, r29
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     582:	f8 94       	cli

  osalDbgCheck(n > 0U);

  osalSysLock();

  while (n > 0U) {
     584:	01 15       	cp	r16, r1
     586:	11 05       	cpc	r17, r1
     588:	51 f7       	brne	.-44     	; 0x55e <oqWriteTimeout+0x34>
     58a:	00 e0       	ldi	r16, 0x00	; 0
     58c:	10 e0       	ldi	r17, 0x00	; 0
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     58e:	78 94       	sei
    }
  }

  osalSysUnlock();
  return max - n;
}
     590:	c3 01       	movw	r24, r6
     592:	80 1b       	sub	r24, r16
     594:	91 0b       	sbc	r25, r17
     596:	df 91       	pop	r29
     598:	cf 91       	pop	r28
     59a:	1f 91       	pop	r17
     59c:	0f 91       	pop	r16
     59e:	ff 90       	pop	r15
     5a0:	ef 90       	pop	r14
     5a2:	df 90       	pop	r13
     5a4:	cf 90       	pop	r12
     5a6:	bf 90       	pop	r11
     5a8:	af 90       	pop	r10
     5aa:	9f 90       	pop	r9
     5ac:	8f 90       	pop	r8
     5ae:	7f 90       	pop	r7
     5b0:	6f 90       	pop	r6
     5b2:	08 95       	ret
 * @sclass
 */
static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
                                              sysinterval_t timeout) {

  return chThdEnqueueTimeoutS(tqp, timeout);
     5b4:	b4 01       	movw	r22, r8
     5b6:	c6 01       	movw	r24, r12
     5b8:	ce d6       	rcall	.+3484   	; 0x1356 <chThdEnqueueTimeoutS>
    done = oq_write(oqp, bp, n);
    if (done == (size_t)0) {
      msg_t msg = osalThreadEnqueueTimeoutS(&oqp->q_waiting, timeout);

      /* Anything except MSG_OK causes the operation to stop.*/
      if (msg != MSG_OK) {
     5ba:	89 2b       	or	r24, r25
     5bc:	81 f2       	breq	.-96     	; 0x55e <oqWriteTimeout+0x34>
     5be:	e7 cf       	rjmp	.-50     	; 0x58e <oqWriteTimeout+0x64>

000005c0 <pwmInit>:
     5c0:	a1 c1       	rjmp	.+834    	; 0x904 <pwm_lld_init>

000005c2 <pwmObjectInit>:
     5c2:	fc 01       	movw	r30, r24
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	80 83       	st	Z, r24
     5c8:	12 82       	std	Z+2, r1	; 0x02
     5ca:	11 82       	std	Z+1, r1	; 0x01
     5cc:	15 82       	std	Z+5, r1	; 0x05
     5ce:	16 82       	std	Z+6, r1	; 0x06
     5d0:	08 95       	ret

000005d2 <pwmStart>:
     5d2:	cf 93       	push	r28
     5d4:	df 93       	push	r29
     5d6:	ec 01       	movw	r28, r24
     5d8:	f8 94       	cli
     5da:	7a 83       	std	Y+2, r23	; 0x02
     5dc:	69 83       	std	Y+1, r22	; 0x01
     5de:	fb 01       	movw	r30, r22
     5e0:	84 81       	ldd	r24, Z+4	; 0x04
     5e2:	95 81       	ldd	r25, Z+5	; 0x05
     5e4:	9c 83       	std	Y+4, r25	; 0x04
     5e6:	8b 83       	std	Y+3, r24	; 0x03
     5e8:	1d 82       	std	Y+5, r1	; 0x05
     5ea:	ce 01       	movw	r24, r28
     5ec:	92 d1       	rcall	.+804    	; 0x912 <pwm_lld_start>
     5ee:	82 e0       	ldi	r24, 0x02	; 2
     5f0:	88 83       	st	Y, r24
     5f2:	78 94       	sei
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	df 91       	pop	r29
     5fa:	cf 91       	pop	r28
     5fc:	08 95       	ret

000005fe <pwmEnableChannel>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
     5fe:	f8 94       	cli

  osalSysLock();

  osalDbgAssert(pwmp->state == PWM_READY, "not ready");

  pwmEnableChannelI(pwmp, channel, width);
     600:	21 e0       	ldi	r18, 0x01	; 1
     602:	30 e0       	ldi	r19, 0x00	; 0
     604:	06 2e       	mov	r0, r22
     606:	01 c0       	rjmp	.+2      	; 0x60a <pwmEnableChannel+0xc>
     608:	22 0f       	add	r18, r18
     60a:	0a 94       	dec	r0
     60c:	ea f7       	brpl	.-6      	; 0x608 <pwmEnableChannel+0xa>
     60e:	fc 01       	movw	r30, r24
     610:	35 81       	ldd	r19, Z+5	; 0x05
     612:	23 2b       	or	r18, r19
     614:	25 83       	std	Z+5, r18	; 0x05
     616:	03 d2       	rcall	.+1030   	; 0xa1e <pwm_lld_enable_channel>
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
     618:	78 94       	sei
     61a:	08 95       	ret

0000061c <_readt>:
  oqResetI(&sdp->oqueue);
  iqResetI(&sdp->iqueue);
  osalOsRescheduleS();

  osalSysUnlock();
}
     61c:	05 96       	adiw	r24, 0x05	; 5
     61e:	a4 ce       	rjmp	.-696    	; 0x368 <iqReadTimeout>

00000620 <_read>:
     620:	2f ef       	ldi	r18, 0xFF	; 255
     622:	3f ef       	ldi	r19, 0xFF	; 255
     624:	05 96       	adiw	r24, 0x05	; 5
     626:	a0 ce       	rjmp	.-704    	; 0x368 <iqReadTimeout>

00000628 <_writet>:
     628:	47 96       	adiw	r24, 0x17	; 23
     62a:	7f cf       	rjmp	.-258    	; 0x52a <oqWriteTimeout>

0000062c <_write>:
     62c:	2f ef       	ldi	r18, 0xFF	; 255
     62e:	3f ef       	ldi	r19, 0xFF	; 255
     630:	47 96       	adiw	r24, 0x17	; 23
     632:	7b cf       	rjmp	.-266    	; 0x52a <oqWriteTimeout>

00000634 <_gett>:
     634:	05 96       	adiw	r24, 0x05	; 5
     636:	5d ce       	rjmp	.-838    	; 0x2f2 <iqGetTimeout>

00000638 <_get>:
     638:	6f ef       	ldi	r22, 0xFF	; 255
     63a:	7f ef       	ldi	r23, 0xFF	; 255
     63c:	05 96       	adiw	r24, 0x05	; 5
     63e:	59 ce       	rjmp	.-846    	; 0x2f2 <iqGetTimeout>

00000640 <_putt>:
     640:	47 96       	adiw	r24, 0x17	; 23
     642:	07 cf       	rjmp	.-498    	; 0x452 <oqPutTimeout>

00000644 <_put>:
     644:	4f ef       	ldi	r20, 0xFF	; 255
     646:	5f ef       	ldi	r21, 0xFF	; 255
     648:	47 96       	adiw	r24, 0x17	; 23
     64a:	03 cf       	rjmp	.-506    	; 0x452 <oqPutTimeout>

0000064c <_ctl>:
     64c:	61 30       	cpi	r22, 0x01	; 1
     64e:	71 05       	cpc	r23, r1
     650:	19 f0       	breq	.+6      	; 0x658 <_ctl+0xc>
     652:	8c ee       	ldi	r24, 0xEC	; 236
     654:	9f ef       	ldi	r25, 0xFF	; 255
     656:	08 95       	ret
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 e0       	ldi	r25, 0x00	; 0
     65c:	08 95       	ret

0000065e <sdInit>:
     65e:	22 c3       	rjmp	.+1604   	; 0xca4 <sd_lld_init>

00000660 <sdObjectInit>:
     660:	cf 92       	push	r12
     662:	df 92       	push	r13
     664:	ef 92       	push	r14
     666:	ff 92       	push	r15
     668:	0f 93       	push	r16
     66a:	1f 93       	push	r17
     66c:	cf 93       	push	r28
     66e:	df 93       	push	r29
     670:	ec 01       	movw	r28, r24
     672:	6b 01       	movw	r12, r22
     674:	7a 01       	movw	r14, r20
     676:	23 e1       	ldi	r18, 0x13	; 19
     678:	31 e0       	ldi	r19, 0x01	; 1
     67a:	fc 01       	movw	r30, r24
     67c:	21 93       	st	Z+, r18
     67e:	31 93       	st	Z+, r19
     680:	cf 01       	movw	r24, r30
     682:	a7 d6       	rcall	.+3406   	; 0x13d2 <chEvtObjectInit>
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	8c 83       	std	Y+4, r24	; 0x04
     688:	be 01       	movw	r22, r28
     68a:	67 5d       	subi	r22, 0xD7	; 215
     68c:	7f 4f       	sbci	r23, 0xFF	; 255
     68e:	8e 01       	movw	r16, r28
     690:	96 01       	movw	r18, r12
     692:	40 e1       	ldi	r20, 0x10	; 16
     694:	50 e0       	ldi	r21, 0x00	; 0
     696:	ce 01       	movw	r24, r28
     698:	05 96       	adiw	r24, 0x05	; 5
     69a:	d4 dd       	rcall	.-1112   	; 0x244 <iqObjectInit>
     69c:	be 01       	movw	r22, r28
     69e:	67 5c       	subi	r22, 0xC7	; 199
     6a0:	7f 4f       	sbci	r23, 0xFF	; 255
     6a2:	97 01       	movw	r18, r14
     6a4:	40 e1       	ldi	r20, 0x10	; 16
     6a6:	50 e0       	ldi	r21, 0x00	; 0
     6a8:	ce 01       	movw	r24, r28
     6aa:	47 96       	adiw	r24, 0x17	; 23
     6ac:	a8 de       	rcall	.-688    	; 0x3fe <oqObjectInit>
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	df 90       	pop	r13
     6bc:	cf 90       	pop	r12
     6be:	08 95       	ret

000006c0 <sdIncomingDataI>:
 * @param[in] sdp       pointer to a @p SerialDriver structure
 * @param[in] b         the byte to be written in the driver's Input Queue
 *
 * @iclass
 */
void sdIncomingDataI(SerialDriver *sdp, uint8_t b) {
     6c0:	1f 93       	push	r17
     6c2:	cf 93       	push	r28
     6c4:	df 93       	push	r29
     6c6:	ec 01       	movw	r28, r24
     6c8:	16 2f       	mov	r17, r22

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
     6ca:	89 85       	ldd	r24, Y+9	; 0x09
     6cc:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ce:	89 2b       	or	r24, r25
     6d0:	51 f0       	breq	.+20     	; 0x6e6 <sdIncomingDataI+0x26>
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6d2:	61 2f       	mov	r22, r17
     6d4:	ce 01       	movw	r24, r28
     6d6:	05 96       	adiw	r24, 0x05	; 5
     6d8:	e0 dd       	rcall	.-1088   	; 0x29a <iqPutI>
     6da:	97 fd       	sbrc	r25, 7
     6dc:	0e c0       	rjmp	.+28     	; 0x6fa <sdIncomingDataI+0x3a>
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     6de:	df 91       	pop	r29
     6e0:	cf 91       	pop	r28
     6e2:	1f 91       	pop	r17
     6e4:	08 95       	ret
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     6e6:	64 e0       	ldi	r22, 0x04	; 4
     6e8:	ce 01       	movw	r24, r28
     6ea:	02 96       	adiw	r24, 0x02	; 2
     6ec:	8c d6       	rcall	.+3352   	; 0x1406 <chEvtBroadcastFlagsI>
  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  if (iqIsEmptyI(&sdp->iqueue))
    chnAddFlagsI(sdp, CHN_INPUT_AVAILABLE);
  if (iqPutI(&sdp->iqueue, b) < MSG_OK)
     6ee:	61 2f       	mov	r22, r17
     6f0:	ce 01       	movw	r24, r28
     6f2:	05 96       	adiw	r24, 0x05	; 5
     6f4:	d2 dd       	rcall	.-1116   	; 0x29a <iqPutI>
     6f6:	97 ff       	sbrs	r25, 7
     6f8:	f2 cf       	rjmp	.-28     	; 0x6de <sdIncomingDataI+0x1e>
     6fa:	60 e0       	ldi	r22, 0x00	; 0
     6fc:	ce 01       	movw	r24, r28
     6fe:	02 96       	adiw	r24, 0x02	; 2
    chnAddFlagsI(sdp, SD_QUEUE_FULL_ERROR);
}
     700:	df 91       	pop	r29
     702:	cf 91       	pop	r28
     704:	1f 91       	pop	r17
     706:	7f c6       	rjmp	.+3326   	; 0x1406 <chEvtBroadcastFlagsI>

00000708 <sdRequestDataI>:
 * @retval MSG_TIMEOUT  if the queue is empty (the lower driver usually
 *                      disables the interrupt source when this happens).
 *
 * @iclass
 */
msg_t sdRequestDataI(SerialDriver *sdp) {
     708:	0f 93       	push	r16
     70a:	1f 93       	push	r17
     70c:	cf 93       	push	r28
     70e:	df 93       	push	r29
     710:	8c 01       	movw	r16, r24
  msg_t  b;

  osalDbgCheckClassI();
  osalDbgCheck(sdp != NULL);

  b = oqGetI(&sdp->oqueue);
     712:	47 96       	adiw	r24, 0x17	; 23
     714:	de de       	rcall	.-580    	; 0x4d2 <oqGetI>
     716:	ec 01       	movw	r28, r24
  if (b < MSG_OK)
     718:	97 fd       	sbrc	r25, 7
     71a:	06 c0       	rjmp	.+12     	; 0x728 <sdRequestDataI+0x20>
    chnAddFlagsI(sdp, CHN_OUTPUT_EMPTY);
  return b;
}
     71c:	ce 01       	movw	r24, r28
     71e:	df 91       	pop	r29
     720:	cf 91       	pop	r28
     722:	1f 91       	pop	r17
     724:	0f 91       	pop	r16
     726:	08 95       	ret
     728:	68 e0       	ldi	r22, 0x08	; 8
     72a:	c8 01       	movw	r24, r16
     72c:	02 96       	adiw	r24, 0x02	; 2
     72e:	6b d6       	rcall	.+3286   	; 0x1406 <chEvtBroadcastFlagsI>
     730:	ce 01       	movw	r24, r28
     732:	df 91       	pop	r29
     734:	cf 91       	pop	r28
     736:	1f 91       	pop	r17
     738:	0f 91       	pop	r16
     73a:	08 95       	ret

0000073c <boardInit>:
void boardInit(void) {

  /*
   * External interrupts setup, all disabled initially.
   */
  EICRA  = 0x00;
     73c:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__TEXT_REGION_LENGTH__+0x7f8069>
  EIMSK  = 0x00;
     740:	1d ba       	out	0x1d, r1	; 29
     742:	08 95       	ret

00000744 <hal_lld_init>:
/**
 * @brief   Low level HAL driver initialization.
 *
 * @notapi
 */
void hal_lld_init(void) {
     744:	08 95       	ret

00000746 <_pal_lld_init>:
 *
 * @param[in] config    the AVR ports configuration
 *
 * @notapi
 */
void _pal_lld_init(const PALConfig *config) {
     746:	fc 01       	movw	r30, r24
  PORTA = config->porta.out;
  DDRA = config->porta.dir;
#endif

#if defined(PORTB) || defined(__DOXYGEN__)
  PORTB = config->portb.out;
     748:	80 81       	ld	r24, Z
     74a:	85 b9       	out	0x05, r24	; 5
  DDRB = config->portb.dir;
     74c:	81 81       	ldd	r24, Z+1	; 0x01
     74e:	84 b9       	out	0x04, r24	; 4
#endif

#if defined(PORTC) || defined(__DOXYGEN__)
  PORTC = config->portc.out;
     750:	82 81       	ldd	r24, Z+2	; 0x02
     752:	88 b9       	out	0x08, r24	; 8
  DDRC = config->portc.dir;
     754:	83 81       	ldd	r24, Z+3	; 0x03
     756:	87 b9       	out	0x07, r24	; 7
#endif

#if defined(PORTD) || defined(__DOXYGEN__)
  PORTD = config->portd.out;
     758:	84 81       	ldd	r24, Z+4	; 0x04
     75a:	8b b9       	out	0x0b, r24	; 11
  DDRD = config->portd.dir;
     75c:	85 81       	ldd	r24, Z+5	; 0x05
     75e:	8a b9       	out	0x0a, r24	; 10
     760:	08 95       	ret

00000762 <__vector_14>:
#if (OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) || defined(__DOXYGEN__)

/**
 * @brief Timer handler for periodic mode.
 */
OSAL_IRQ_HANDLER(AVR_TIMER_VECT) {
     762:	1f 92       	push	r1
     764:	0f 92       	push	r0
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	0f 92       	push	r0
     76a:	11 24       	eor	r1, r1
     76c:	2f 93       	push	r18
     76e:	3f 93       	push	r19
     770:	4f 93       	push	r20
     772:	5f 93       	push	r21
     774:	6f 93       	push	r22
     776:	7f 93       	push	r23
     778:	8f 93       	push	r24
     77a:	9f 93       	push	r25
     77c:	af 93       	push	r26
     77e:	bf 93       	push	r27
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31

  OSAL_IRQ_PROLOGUE();
     784:	81 e0       	ldi	r24, 0x01	; 1
     786:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>
 *          service from the HAL.
 */
#if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
static inline void osalOsTimerHandlerI(void) {

  chSysTimerHandlerI();
     78a:	a8 d2       	rcall	.+1360   	; 0xcdc <chSysTimerHandlerI>

  osalSysLockFromISR();
  osalOsTimerHandlerI();
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     78c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     790:	47 d4       	rcall	.+2190   	; 0x1020 <chSchIsPreemptionRequired>
     792:	81 11       	cpse	r24, r1
     794:	55 d4       	rcall	.+2218   	; 0x1040 <chSchDoPreemption>
}
     796:	ff 91       	pop	r31
     798:	ef 91       	pop	r30
     79a:	bf 91       	pop	r27
     79c:	af 91       	pop	r26
     79e:	9f 91       	pop	r25
     7a0:	8f 91       	pop	r24
     7a2:	7f 91       	pop	r23
     7a4:	6f 91       	pop	r22
     7a6:	5f 91       	pop	r21
     7a8:	4f 91       	pop	r20
     7aa:	3f 91       	pop	r19
     7ac:	2f 91       	pop	r18
     7ae:	0f 90       	pop	r0
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	0f 90       	pop	r0
     7b4:	1f 90       	pop	r1
     7b6:	18 95       	reti

000007b8 <st_lld_init>:

  /*
   * Periodic mode uses Timer 0 (8 bit).
   */
#if defined(TCCR0B) /* Timer has multiple output comparators.               */
  TCCR0A  = (1 << WGM01) | (0 << WGM00) |                /* CTC mode.       */
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	84 bd       	out	0x24, r24	; 36
            (0 << COM0A1) | (0 << COM0A0) |              /* OC0A disabled.  */
            (0 << COM0B1) | (0 << COM0B0);               /* OC0B disabled.  */
  TCCR0B  = (0 << WGM02) | AVR_TIMER_PRESCALER_BITS;     /* CTC mode.       */
     7bc:	85 bd       	out	0x25, r24	; 37
  OCR0A   = AVR_TIMER_COUNTER - 1;
     7be:	9f e7       	ldi	r25, 0x7F	; 127
     7c0:	97 bd       	out	0x27, r25	; 39
  TCNT0   = 0;                                           /* Reset counter.  */
     7c2:	16 bc       	out	0x26, r1	; 38
  TIFR0   = (1 << OCF0A);                                /* Reset pending.  */
     7c4:	85 bb       	out	0x15, r24	; 21
  TIMSK0  = (1 << OCIE0A);                               /* IRQ on compare. */
     7c6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7f806e>
     7ca:	08 95       	ret

000007cc <__vector_13>:
    PWMD2.period = 0xFF;
    return;
  }
#endif
  uint8_t i = timer_index(pwmp);
  *regs_table[i].icr = period;
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	ef 93       	push	r30
     7ec:	ff 93       	push	r31
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>
     7f4:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <PWMD1+0x1>
     7f8:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <PWMD1+0x2>
     7fc:	06 80       	ldd	r0, Z+6	; 0x06
     7fe:	f7 81       	ldd	r31, Z+7	; 0x07
     800:	e0 2d       	mov	r30, r0
     802:	89 e7       	ldi	r24, 0x79	; 121
     804:	92 e0       	ldi	r25, 0x02	; 2
     806:	09 95       	icall
     808:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     80c:	09 d4       	rcall	.+2066   	; 0x1020 <chSchIsPreemptionRequired>
     80e:	81 11       	cpse	r24, r1
     810:	17 d4       	rcall	.+2094   	; 0x1040 <chSchDoPreemption>
     812:	ff 91       	pop	r31
     814:	ef 91       	pop	r30
     816:	bf 91       	pop	r27
     818:	af 91       	pop	r26
     81a:	9f 91       	pop	r25
     81c:	8f 91       	pop	r24
     81e:	7f 91       	pop	r23
     820:	6f 91       	pop	r22
     822:	5f 91       	pop	r21
     824:	4f 91       	pop	r20
     826:	3f 91       	pop	r19
     828:	2f 91       	pop	r18
     82a:	0f 90       	pop	r0
     82c:	0f be       	out	0x3f, r0	; 63
     82e:	0f 90       	pop	r0
     830:	1f 90       	pop	r1
     832:	18 95       	reti

00000834 <__vector_11>:
     834:	1f 92       	push	r1
     836:	0f 92       	push	r0
     838:	0f b6       	in	r0, 0x3f	; 63
     83a:	0f 92       	push	r0
     83c:	11 24       	eor	r1, r1
     83e:	2f 93       	push	r18
     840:	3f 93       	push	r19
     842:	4f 93       	push	r20
     844:	5f 93       	push	r21
     846:	6f 93       	push	r22
     848:	7f 93       	push	r23
     84a:	8f 93       	push	r24
     84c:	9f 93       	push	r25
     84e:	af 93       	push	r26
     850:	bf 93       	push	r27
     852:	ef 93       	push	r30
     854:	ff 93       	push	r31
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>
     85c:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <PWMD1+0x1>
     860:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <PWMD1+0x2>
     864:	01 84       	ldd	r0, Z+9	; 0x09
     866:	f2 85       	ldd	r31, Z+10	; 0x0a
     868:	e0 2d       	mov	r30, r0
     86a:	89 e7       	ldi	r24, 0x79	; 121
     86c:	92 e0       	ldi	r25, 0x02	; 2
     86e:	09 95       	icall
     870:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     874:	d5 d3       	rcall	.+1962   	; 0x1020 <chSchIsPreemptionRequired>
     876:	81 11       	cpse	r24, r1
     878:	e3 d3       	rcall	.+1990   	; 0x1040 <chSchDoPreemption>
     87a:	ff 91       	pop	r31
     87c:	ef 91       	pop	r30
     87e:	bf 91       	pop	r27
     880:	af 91       	pop	r26
     882:	9f 91       	pop	r25
     884:	8f 91       	pop	r24
     886:	7f 91       	pop	r23
     888:	6f 91       	pop	r22
     88a:	5f 91       	pop	r21
     88c:	4f 91       	pop	r20
     88e:	3f 91       	pop	r19
     890:	2f 91       	pop	r18
     892:	0f 90       	pop	r0
     894:	0f be       	out	0x3f, r0	; 63
     896:	0f 90       	pop	r0
     898:	1f 90       	pop	r1
     89a:	18 95       	reti

0000089c <__vector_12>:
     89c:	1f 92       	push	r1
     89e:	0f 92       	push	r0
     8a0:	0f b6       	in	r0, 0x3f	; 63
     8a2:	0f 92       	push	r0
     8a4:	11 24       	eor	r1, r1
     8a6:	2f 93       	push	r18
     8a8:	3f 93       	push	r19
     8aa:	4f 93       	push	r20
     8ac:	5f 93       	push	r21
     8ae:	6f 93       	push	r22
     8b0:	7f 93       	push	r23
     8b2:	8f 93       	push	r24
     8b4:	9f 93       	push	r25
     8b6:	af 93       	push	r26
     8b8:	bf 93       	push	r27
     8ba:	ef 93       	push	r30
     8bc:	ff 93       	push	r31
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>
     8c4:	e0 91 7a 02 	lds	r30, 0x027A	; 0x80027a <PWMD1+0x1>
     8c8:	f0 91 7b 02 	lds	r31, 0x027B	; 0x80027b <PWMD1+0x2>
     8cc:	04 84       	ldd	r0, Z+12	; 0x0c
     8ce:	f5 85       	ldd	r31, Z+13	; 0x0d
     8d0:	e0 2d       	mov	r30, r0
     8d2:	89 e7       	ldi	r24, 0x79	; 121
     8d4:	92 e0       	ldi	r25, 0x02	; 2
     8d6:	09 95       	icall
     8d8:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     8dc:	a1 d3       	rcall	.+1858   	; 0x1020 <chSchIsPreemptionRequired>
     8de:	81 11       	cpse	r24, r1
     8e0:	af d3       	rcall	.+1886   	; 0x1040 <chSchDoPreemption>
     8e2:	ff 91       	pop	r31
     8e4:	ef 91       	pop	r30
     8e6:	bf 91       	pop	r27
     8e8:	af 91       	pop	r26
     8ea:	9f 91       	pop	r25
     8ec:	8f 91       	pop	r24
     8ee:	7f 91       	pop	r23
     8f0:	6f 91       	pop	r22
     8f2:	5f 91       	pop	r21
     8f4:	4f 91       	pop	r20
     8f6:	3f 91       	pop	r19
     8f8:	2f 91       	pop	r18
     8fa:	0f 90       	pop	r0
     8fc:	0f be       	out	0x3f, r0	; 63
     8fe:	0f 90       	pop	r0
     900:	1f 90       	pop	r1
     902:	18 95       	reti

00000904 <pwm_lld_init>:
     904:	89 e7       	ldi	r24, 0x79	; 121
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	5c de       	rcall	.-840    	; 0x5c2 <pwmObjectInit>
     90a:	82 e0       	ldi	r24, 0x02	; 2
     90c:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <PWMD1+0x6>
     910:	08 95       	ret

00000912 <pwm_lld_start>:
     912:	8f 92       	push	r8
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	bf 92       	push	r11
     91a:	cf 92       	push	r12
     91c:	df 92       	push	r13
     91e:	ef 92       	push	r14
     920:	ff 92       	push	r15
     922:	cf 93       	push	r28
     924:	df 93       	push	r29
     926:	00 d0       	rcall	.+0      	; 0x928 <pwm_lld_start+0x16>
     928:	00 d0       	rcall	.+0      	; 0x92a <pwm_lld_start+0x18>
     92a:	1f 92       	push	r1
     92c:	cd b7       	in	r28, 0x3d	; 61
     92e:	de b7       	in	r29, 0x3e	; 62
     930:	9c 01       	movw	r18, r24
     932:	dc 01       	movw	r26, r24
     934:	8c 91       	ld	r24, X
     936:	81 30       	cpi	r24, 0x01	; 1
     938:	81 f0       	breq	.+32     	; 0x95a <pwm_lld_start+0x48>
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	0f 90       	pop	r0
     942:	0f 90       	pop	r0
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	ff 90       	pop	r15
     94a:	ef 90       	pop	r14
     94c:	df 90       	pop	r13
     94e:	cf 90       	pop	r12
     950:	bf 90       	pop	r11
     952:	af 90       	pop	r10
     954:	9f 90       	pop	r9
     956:	8f 90       	pop	r8
     958:	08 95       	ret
     95a:	85 e0       	ldi	r24, 0x05	; 5
     95c:	ee e0       	ldi	r30, 0x0E	; 14
     95e:	f1 e0       	ldi	r31, 0x01	; 1
     960:	de 01       	movw	r26, r28
     962:	11 96       	adiw	r26, 0x01	; 1
     964:	01 90       	ld	r0, Z+
     966:	0d 92       	st	X+, r0
     968:	8a 95       	dec	r24
     96a:	e1 f7       	brne	.-8      	; 0x964 <pwm_lld_start+0x52>
     96c:	d9 01       	movw	r26, r18
     96e:	11 96       	adiw	r26, 0x01	; 1
     970:	ed 91       	ld	r30, X+
     972:	fc 91       	ld	r31, X
     974:	12 97       	sbiw	r26, 0x02	; 2
     976:	80 80       	ld	r8, Z
     978:	91 80       	ldd	r9, Z+1	; 0x01
     97a:	a2 80       	ldd	r10, Z+2	; 0x02
     97c:	b3 80       	ldd	r11, Z+3	; 0x03
     97e:	fe 01       	movw	r30, r28
     980:	31 96       	adiw	r30, 0x01	; 1
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	c1 2c       	mov	r12, r1
     986:	84 e2       	ldi	r24, 0x24	; 36
     988:	d8 2e       	mov	r13, r24
     98a:	84 ef       	ldi	r24, 0xF4	; 244
     98c:	e8 2e       	mov	r14, r24
     98e:	f1 2c       	mov	r15, r1
     990:	b7 01       	movw	r22, r14
     992:	a6 01       	movw	r20, r12
     994:	01 90       	ld	r0, Z+
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <pwm_lld_start+0x8e>
     998:	76 95       	lsr	r23
     99a:	67 95       	ror	r22
     99c:	57 95       	ror	r21
     99e:	47 95       	ror	r20
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <pwm_lld_start+0x86>
     9a4:	9f 5f       	subi	r25, 0xFF	; 255
     9a6:	48 15       	cp	r20, r8
     9a8:	59 05       	cpc	r21, r9
     9aa:	6a 05       	cpc	r22, r10
     9ac:	7b 05       	cpc	r23, r11
     9ae:	91 f1       	breq	.+100    	; 0xa14 <pwm_lld_start+0x102>
     9b0:	95 30       	cpi	r25, 0x05	; 5
     9b2:	71 f7       	brne	.-36     	; 0x990 <pwm_lld_start+0x7e>
     9b4:	9d e1       	ldi	r25, 0x1D	; 29
     9b6:	41 e0       	ldi	r20, 0x01	; 1
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	b2 e0       	ldi	r27, 0x02	; 2
     9bc:	29 37       	cpi	r18, 0x79	; 121
     9be:	3b 07       	cpc	r19, r27
     9c0:	59 f1       	breq	.+86     	; 0xa18 <pwm_lld_start+0x106>
     9c2:	f9 01       	movw	r30, r18
     9c4:	63 81       	ldd	r22, Z+3	; 0x03
     9c6:	74 81       	ldd	r23, Z+4	; 0x04
     9c8:	70 93 87 00 	sts	0x0087, r23	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
     9cc:	60 93 86 00 	sts	0x0086, r22	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
     9d0:	86 e1       	ldi	r24, 0x16	; 22
     9d2:	84 9f       	mul	r24, r20
     9d4:	f0 01       	movw	r30, r0
     9d6:	85 9f       	mul	r24, r21
     9d8:	f0 0d       	add	r31, r0
     9da:	11 24       	eor	r1, r1
     9dc:	e3 5d       	subi	r30, 0xD3	; 211
     9de:	fe 4f       	sbci	r31, 0xFE	; 254
     9e0:	a0 81       	ld	r26, Z
     9e2:	b1 81       	ldd	r27, Z+1	; 0x01
     9e4:	82 e0       	ldi	r24, 0x02	; 2
     9e6:	8c 93       	st	X, r24
     9e8:	a2 81       	ldd	r26, Z+2	; 0x02
     9ea:	b3 81       	ldd	r27, Z+3	; 0x03
     9ec:	9c 93       	st	X, r25
     9ee:	d9 01       	movw	r26, r18
     9f0:	11 96       	adiw	r26, 0x01	; 1
     9f2:	8d 91       	ld	r24, X+
     9f4:	9c 91       	ld	r25, X
     9f6:	12 97       	sbiw	r26, 0x02	; 2
     9f8:	dc 01       	movw	r26, r24
     9fa:	16 96       	adiw	r26, 0x06	; 6
     9fc:	8d 91       	ld	r24, X+
     9fe:	9c 91       	ld	r25, X
     a00:	17 97       	sbiw	r26, 0x07	; 7
     a02:	89 2b       	or	r24, r25
     a04:	09 f4       	brne	.+2      	; 0xa08 <pwm_lld_start+0xf6>
     a06:	99 cf       	rjmp	.-206    	; 0x93a <pwm_lld_start+0x28>
     a08:	02 88       	ldd	r0, Z+18	; 0x12
     a0a:	f3 89       	ldd	r31, Z+19	; 0x13
     a0c:	e0 2d       	mov	r30, r0
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	80 83       	st	Z, r24
     a12:	93 cf       	rjmp	.-218    	; 0x93a <pwm_lld_start+0x28>
     a14:	98 61       	ori	r25, 0x18	; 24
     a16:	cf cf       	rjmp	.-98     	; 0x9b6 <pwm_lld_start+0xa4>
     a18:	40 e0       	ldi	r20, 0x00	; 0
     a1a:	50 e0       	ldi	r21, 0x00	; 0
     a1c:	d2 cf       	rjmp	.-92     	; 0x9c2 <pwm_lld_start+0xb0>

00000a1e <pwm_lld_enable_channel>:
 *
 * @notapi
 */
void pwm_lld_enable_channel(PWMDriver *pwmp,
                            pwmchannel_t channel,
                            pwmcnt_t width) {
     a1e:	af 92       	push	r10
     a20:	bf 92       	push	r11
     a22:	cf 92       	push	r12
     a24:	df 92       	push	r13
     a26:	ef 92       	push	r14
     a28:	ff 92       	push	r15
     a2a:	0f 93       	push	r16
     a2c:	1f 93       	push	r17
     a2e:	cf 93       	push	r28
     a30:	df 93       	push	r29
     a32:	fc 01       	movw	r30, r24
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     a34:	26 2f       	mov	r18, r22
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	a1 81       	ldd	r26, Z+1	; 0x01
     a3a:	b2 81       	ldd	r27, Z+2	; 0x02
     a3c:	89 01       	movw	r16, r18
     a3e:	00 0f       	add	r16, r16
     a40:	11 1f       	adc	r17, r17
     a42:	c8 01       	movw	r24, r16
     a44:	82 0f       	add	r24, r18
     a46:	93 1f       	adc	r25, r19
     a48:	a8 0f       	add	r26, r24
     a4a:	b9 1f       	adc	r27, r25
     a4c:	18 96       	adiw	r26, 0x08	; 8
     a4e:	7c 91       	ld	r23, X
     a50:	c1 e0       	ldi	r28, 0x01	; 1
     a52:	d0 e0       	ldi	r29, 0x00	; 0
     a54:	82 e0       	ldi	r24, 0x02	; 2
     a56:	e9 37       	cpi	r30, 0x79	; 121
     a58:	f8 07       	cpc	r31, r24
     a5a:	09 f4       	brne	.+2      	; 0xa5e <pwm_lld_enable_channel+0x40>
     a5c:	a5 c0       	rjmp	.+330    	; 0xba8 <pwm_lld_enable_channel+0x18a>
     a5e:	86 e1       	ldi	r24, 0x16	; 22
     a60:	8c 9f       	mul	r24, r28
     a62:	d0 01       	movw	r26, r0
     a64:	8d 9f       	mul	r24, r29
     a66:	b0 0d       	add	r27, r0
     a68:	11 24       	eor	r1, r1
     a6a:	a3 5d       	subi	r26, 0xD3	; 211
     a6c:	be 4f       	sbci	r27, 0xFE	; 254
     a6e:	ed 90       	ld	r14, X+
     a70:	fc 90       	ld	r15, X
static void config_channel(volatile uint8_t *tccra,
                           uint8_t com1,
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
     a72:	d7 01       	movw	r26, r14
     a74:	8c 91       	ld	r24, X
     a76:	a6 2f       	mov	r26, r22
     a78:	aa 0f       	add	r26, r26
     a7a:	97 e0       	ldi	r25, 0x07	; 7
     a7c:	9a 1b       	sub	r25, r26
     a7e:	a1 e0       	ldi	r26, 0x01	; 1
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	6d 01       	movw	r12, r26
     a84:	01 c0       	rjmp	.+2      	; 0xa88 <pwm_lld_enable_channel+0x6a>
     a86:	cc 0c       	add	r12, r12
     a88:	9a 95       	dec	r25
     a8a:	ea f7       	brpl	.-6      	; 0xa86 <pwm_lld_enable_channel+0x68>
     a8c:	93 e0       	ldi	r25, 0x03	; 3
     a8e:	a9 2e       	mov	r10, r25
     a90:	b1 2c       	mov	r11, r1
     a92:	a2 1a       	sub	r10, r18
     a94:	b3 0a       	sbc	r11, r19
     a96:	aa 0c       	add	r10, r10
     a98:	01 c0       	rjmp	.+2      	; 0xa9c <pwm_lld_enable_channel+0x7e>
     a9a:	aa 0f       	add	r26, r26
     a9c:	aa 94       	dec	r10
     a9e:	ea f7       	brpl	.-6      	; 0xa9a <pwm_lld_enable_channel+0x7c>
     aa0:	ba 2e       	mov	r11, r26
     aa2:	bc 28       	or	r11, r12
     aa4:	9b 2d       	mov	r25, r11
     aa6:	90 95       	com	r25
     aa8:	98 23       	and	r25, r24
     aaa:	d7 01       	movw	r26, r14
     aac:	9c 93       	st	X, r25
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
     aae:	71 30       	cpi	r23, 0x01	; 1
     ab0:	09 f4       	brne	.+2      	; 0xab4 <pwm_lld_enable_channel+0x96>
     ab2:	71 c0       	rjmp	.+226    	; 0xb96 <pwm_lld_enable_channel+0x178>
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
     ab4:	72 30       	cpi	r23, 0x02	; 2
     ab6:	09 f4       	brne	.+2      	; 0xaba <pwm_lld_enable_channel+0x9c>
     ab8:	72 c0       	rjmp	.+228    	; 0xb9e <pwm_lld_enable_channel+0x180>
  config_channel(regs_table[i].tccra,
                 7 - 2*channel,
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
     aba:	61 30       	cpi	r22, 0x01	; 1
     abc:	09 f4       	brne	.+2      	; 0xac0 <pwm_lld_enable_channel+0xa2>
     abe:	5a c0       	rjmp	.+180    	; 0xb74 <pwm_lld_enable_channel+0x156>
     ac0:	62 30       	cpi	r22, 0x02	; 2
     ac2:	09 f4       	brne	.+2      	; 0xac6 <pwm_lld_enable_channel+0xa8>
     ac4:	46 c0       	rjmp	.+140    	; 0xb52 <pwm_lld_enable_channel+0x134>
  case 2:
    ocrh = regs_table[i].ocrch;
    ocrl = regs_table[i].ocrcl;
    break;
  default:
    ocrh = regs_table[i].ocrah;
     ac6:	86 e1       	ldi	r24, 0x16	; 22
     ac8:	8c 9f       	mul	r24, r28
     aca:	d0 01       	movw	r26, r0
     acc:	8d 9f       	mul	r24, r29
     ace:	b0 0d       	add	r27, r0
     ad0:	11 24       	eor	r1, r1
     ad2:	a3 5d       	subi	r26, 0xD3	; 211
     ad4:	be 4f       	sbci	r27, 0xFE	; 254
     ad6:	14 96       	adiw	r26, 0x04	; 4
     ad8:	8d 91       	ld	r24, X+
     ada:	9c 91       	ld	r25, X
     adc:	15 97       	sbiw	r26, 0x05	; 5
    ocrl = regs_table[i].ocral;
     ade:	16 96       	adiw	r26, 0x06	; 6
     ae0:	6d 91       	ld	r22, X+
     ae2:	7c 91       	ld	r23, X
     ae4:	17 97       	sbiw	r26, 0x07	; 7
  }
  *ocrh = val >> 8;
     ae6:	dc 01       	movw	r26, r24
     ae8:	5c 93       	st	X, r21
  *ocrl = val & 0xFF;
     aea:	db 01       	movw	r26, r22
     aec:	4c 93       	st	X, r20
  *regs_table[i].tifr = (1 << (channel + 1));
     aee:	86 e1       	ldi	r24, 0x16	; 22
     af0:	8c 9f       	mul	r24, r28
     af2:	d0 01       	movw	r26, r0
     af4:	8d 9f       	mul	r24, r29
     af6:	b0 0d       	add	r27, r0
     af8:	11 24       	eor	r1, r1
     afa:	a3 5d       	subi	r26, 0xD3	; 211
     afc:	be 4f       	sbci	r27, 0xFE	; 254
     afe:	50 96       	adiw	r26, 0x10	; 16
     b00:	cd 91       	ld	r28, X+
     b02:	dc 91       	ld	r29, X
     b04:	51 97       	sbiw	r26, 0x11	; 17
     b06:	c9 01       	movw	r24, r18
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	41 e0       	ldi	r20, 0x01	; 1
     b0c:	50 e0       	ldi	r21, 0x00	; 0
     b0e:	01 c0       	rjmp	.+2      	; 0xb12 <pwm_lld_enable_channel+0xf4>
     b10:	44 0f       	add	r20, r20
     b12:	8a 95       	dec	r24
     b14:	ea f7       	brpl	.-6      	; 0xb10 <pwm_lld_enable_channel+0xf2>
     b16:	48 83       	st	Y, r20
  if (pwmp->config->channels[channel].callback != NULL)
     b18:	01 80       	ldd	r0, Z+1	; 0x01
     b1a:	f2 81       	ldd	r31, Z+2	; 0x02
     b1c:	e0 2d       	mov	r30, r0
     b1e:	20 0f       	add	r18, r16
     b20:	31 1f       	adc	r19, r17
     b22:	e2 0f       	add	r30, r18
     b24:	f3 1f       	adc	r31, r19
     b26:	81 85       	ldd	r24, Z+9	; 0x09
     b28:	92 85       	ldd	r25, Z+10	; 0x0a
     b2a:	89 2b       	or	r24, r25
     b2c:	39 f0       	breq	.+14     	; 0xb3c <pwm_lld_enable_channel+0x11e>
    *regs_table[i].timsk |= (1 << (channel + 1));
     b2e:	52 96       	adiw	r26, 0x12	; 18
     b30:	ed 91       	ld	r30, X+
     b32:	fc 91       	ld	r31, X
     b34:	53 97       	sbiw	r26, 0x13	; 19
     b36:	80 81       	ld	r24, Z
     b38:	48 2b       	or	r20, r24
     b3a:	40 83       	st	Z, r20
}
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	df 90       	pop	r13
     b4a:	cf 90       	pop	r12
     b4c:	bf 90       	pop	r11
     b4e:	af 90       	pop	r10
     b50:	08 95       	ret
  case 1:
    ocrh = regs_table[i].ocrbh;
    ocrl = regs_table[i].ocrbl;
    break;
  case 2:
    ocrh = regs_table[i].ocrch;
     b52:	86 e1       	ldi	r24, 0x16	; 22
     b54:	8c 9f       	mul	r24, r28
     b56:	d0 01       	movw	r26, r0
     b58:	8d 9f       	mul	r24, r29
     b5a:	b0 0d       	add	r27, r0
     b5c:	11 24       	eor	r1, r1
     b5e:	a3 5d       	subi	r26, 0xD3	; 211
     b60:	be 4f       	sbci	r27, 0xFE	; 254
     b62:	1c 96       	adiw	r26, 0x0c	; 12
     b64:	8d 91       	ld	r24, X+
     b66:	9c 91       	ld	r25, X
     b68:	1d 97       	sbiw	r26, 0x0d	; 13
    ocrl = regs_table[i].ocrcl;
     b6a:	1e 96       	adiw	r26, 0x0e	; 14
     b6c:	6d 91       	ld	r22, X+
     b6e:	7c 91       	ld	r23, X
     b70:	1f 97       	sbiw	r26, 0x0f	; 15
    break;
     b72:	b9 cf       	rjmp	.-142    	; 0xae6 <pwm_lld_enable_channel+0xc8>
                 6 - 2*channel,
                 pwmp->config->channels[channel].mode);
  volatile uint8_t *ocrh, *ocrl;
  switch (channel) {
  case 1:
    ocrh = regs_table[i].ocrbh;
     b74:	86 e1       	ldi	r24, 0x16	; 22
     b76:	8c 9f       	mul	r24, r28
     b78:	d0 01       	movw	r26, r0
     b7a:	8d 9f       	mul	r24, r29
     b7c:	b0 0d       	add	r27, r0
     b7e:	11 24       	eor	r1, r1
     b80:	a3 5d       	subi	r26, 0xD3	; 211
     b82:	be 4f       	sbci	r27, 0xFE	; 254
     b84:	18 96       	adiw	r26, 0x08	; 8
     b86:	8d 91       	ld	r24, X+
     b88:	9c 91       	ld	r25, X
     b8a:	19 97       	sbiw	r26, 0x09	; 9
    ocrl = regs_table[i].ocrbl;
     b8c:	1a 96       	adiw	r26, 0x0a	; 10
     b8e:	6d 91       	ld	r22, X+
     b90:	7c 91       	ld	r23, X
     b92:	1b 97       	sbiw	r26, 0x0b	; 11
    break;
     b94:	a8 cf       	rjmp	.-176    	; 0xae6 <pwm_lld_enable_channel+0xc8>
                           uint8_t com0,
                           pwmmode_t mode) {

  *tccra &= ~((1 << com1) | (1 << com0));
  if (mode == PWM_OUTPUT_ACTIVE_HIGH)
    *tccra |= ((1 << com1) | (0 << com0)); /* Non inverting mode. */
     b96:	8c 91       	ld	r24, X
     b98:	c8 2a       	or	r12, r24
     b9a:	cc 92       	st	X, r12
     b9c:	8e cf       	rjmp	.-228    	; 0xaba <pwm_lld_enable_channel+0x9c>
  else if (mode == PWM_OUTPUT_ACTIVE_LOW)
    *tccra |= (1 << com1) | (1 << com0);   /* Inverting mode.     */
     b9e:	d7 01       	movw	r26, r14
     ba0:	8c 91       	ld	r24, X
     ba2:	8b 29       	or	r24, r11
     ba4:	8c 93       	st	X, r24
     ba6:	89 cf       	rjmp	.-238    	; 0xaba <pwm_lld_enable_channel+0x9c>
    return;
  }
#endif

  uint8_t i = timer_index(pwmp);
  config_channel(regs_table[i].tccra,
     ba8:	c0 e0       	ldi	r28, 0x00	; 0
     baa:	d0 e0       	ldi	r29, 0x00	; 0
     bac:	58 cf       	rjmp	.-336    	; 0xa5e <pwm_lld_enable_channel+0x40>

00000bae <notify1>:

#if AVR_SERIAL_USE_USART0 || defined(__DOXYGEN__)
static void notify1(io_queue_t *qp) {

  (void)qp;
  UCSR0B |= (1 << UDRIE0);
     bae:	e1 ec       	ldi	r30, 0xC1	; 193
     bb0:	f0 e0       	ldi	r31, 0x00	; 0
     bb2:	80 81       	ld	r24, Z
     bb4:	80 62       	ori	r24, 0x20	; 32
     bb6:	80 83       	st	Z, r24
     bb8:	08 95       	ret

00000bba <__vector_18>:
/**
 * @brief   USART0 RX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_RX_VECT) {
     bba:	1f 92       	push	r1
     bbc:	0f 92       	push	r0
     bbe:	0f b6       	in	r0, 0x3f	; 63
     bc0:	0f 92       	push	r0
     bc2:	11 24       	eor	r1, r1
     bc4:	2f 93       	push	r18
     bc6:	3f 93       	push	r19
     bc8:	4f 93       	push	r20
     bca:	5f 93       	push	r21
     bcc:	6f 93       	push	r22
     bce:	7f 93       	push	r23
     bd0:	8f 93       	push	r24
     bd2:	9f 93       	push	r25
     bd4:	af 93       	push	r26
     bd6:	bf 93       	push	r27
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
  uint8_t sra;

  OSAL_IRQ_PROLOGUE();
     bdc:	81 e0       	ldi	r24, 0x01	; 1
     bde:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>

  sra = UCSR0A;
     be2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
     be6:	98 2f       	mov	r25, r24
     be8:	9c 71       	andi	r25, 0x1C	; 28
     bea:	41 f0       	breq	.+16     	; 0xbfc <__vector_18+0x42>
  }
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
     bec:	82 fd       	sbrc	r24, 2
     bee:	21 c0       	rjmp	.+66     	; 0xc32 <__vector_18+0x78>
     bf0:	60 e0       	ldi	r22, 0x00	; 0
    sts |= SD_PARITY_ERROR;
  if (sra & fe)
     bf2:	84 fd       	sbrc	r24, 4
    sts |= SD_FRAMING_ERROR;
     bf4:	60 64       	ori	r22, 0x40	; 64
 * @iclass
 */
static inline void osalEventBroadcastFlagsI(event_source_t *esp,
                                            eventflags_t flags) {

  chEvtBroadcastFlagsI(esp, flags);
     bf6:	82 e8       	ldi	r24, 0x82	; 130
     bf8:	92 e0       	ldi	r25, 0x02	; 2
     bfa:	05 d4       	rcall	.+2058   	; 0x1406 <chEvtBroadcastFlagsI>

  sra = UCSR0A;
  if (sra & ((1 << DOR0) | (1 << UPE0) | (1 << FE0)))
    set_error(sra, &SD1);
  osalSysLockFromISR();
  sdIncomingDataI(&SD1, UDR0);
     bfc:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     c00:	80 e8       	ldi	r24, 0x80	; 128
     c02:	92 e0       	ldi	r25, 0x02	; 2
     c04:	5d dd       	rcall	.-1350   	; 0x6c0 <sdIncomingDataI>
  osalSysUnlockFromISR();

  OSAL_IRQ_EPILOGUE();
     c06:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     c0a:	0a d2       	rcall	.+1044   	; 0x1020 <chSchIsPreemptionRequired>
     c0c:	81 11       	cpse	r24, r1
     c0e:	18 d2       	rcall	.+1072   	; 0x1040 <chSchDoPreemption>
}
     c10:	ff 91       	pop	r31
     c12:	ef 91       	pop	r30
     c14:	bf 91       	pop	r27
     c16:	af 91       	pop	r26
     c18:	9f 91       	pop	r25
     c1a:	8f 91       	pop	r24
     c1c:	7f 91       	pop	r23
     c1e:	6f 91       	pop	r22
     c20:	5f 91       	pop	r21
     c22:	4f 91       	pop	r20
     c24:	3f 91       	pop	r19
     c26:	2f 91       	pop	r18
     c28:	0f 90       	pop	r0
     c2a:	0f be       	out	0x3f, r0	; 63
     c2c:	0f 90       	pop	r0
     c2e:	1f 90       	pop	r1
     c30:	18 95       	reti
#endif

  if (sra & dor)
    sts |= SD_OVERRUN_ERROR;
  if (sra & upe)
    sts |= SD_PARITY_ERROR;
     c32:	60 e2       	ldi	r22, 0x20	; 32
     c34:	de cf       	rjmp	.-68     	; 0xbf2 <__vector_18+0x38>

00000c36 <__vector_19>:
/**
 * @brief   USART0 TX interrupt handler.
 *
 * @isr
 */
OSAL_IRQ_HANDLER(AVR_SD1_TX_VECT) {
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
  msg_t b;

  OSAL_IRQ_PROLOGUE();
     c58:	81 e0       	ldi	r24, 0x01	; 1
     c5a:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <__avr_in_isr>

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
     c5e:	80 e8       	ldi	r24, 0x80	; 128
     c60:	92 e0       	ldi	r25, 0x02	; 2
     c62:	52 dd       	rcall	.-1372   	; 0x708 <sdRequestDataI>
  osalSysUnlockFromISR();
  if (b < MSG_OK)
     c64:	97 fd       	sbrc	r25, 7
     c66:	18 c0       	rjmp	.+48     	; 0xc98 <__vector_19+0x62>
    UCSR0B &= ~(1 << UDRIE0);
  else
    UDR0 = b;
     c68:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>

  OSAL_IRQ_EPILOGUE();
     c6c:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <__avr_in_isr>
     c70:	d7 d1       	rcall	.+942    	; 0x1020 <chSchIsPreemptionRequired>
     c72:	81 11       	cpse	r24, r1
     c74:	e5 d1       	rcall	.+970    	; 0x1040 <chSchDoPreemption>
}
     c76:	ff 91       	pop	r31
     c78:	ef 91       	pop	r30
     c7a:	bf 91       	pop	r27
     c7c:	af 91       	pop	r26
     c7e:	9f 91       	pop	r25
     c80:	8f 91       	pop	r24
     c82:	7f 91       	pop	r23
     c84:	6f 91       	pop	r22
     c86:	5f 91       	pop	r21
     c88:	4f 91       	pop	r20
     c8a:	3f 91       	pop	r19
     c8c:	2f 91       	pop	r18
     c8e:	0f 90       	pop	r0
     c90:	0f be       	out	0x3f, r0	; 63
     c92:	0f 90       	pop	r0
     c94:	1f 90       	pop	r1
     c96:	18 95       	reti

  osalSysLockFromISR();
  b = sdRequestDataI(&SD1);
  osalSysUnlockFromISR();
  if (b < MSG_OK)
    UCSR0B &= ~(1 << UDRIE0);
     c98:	80 91 c1 00 	lds	r24, 0x00C1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     c9c:	8f 7d       	andi	r24, 0xDF	; 223
     c9e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
     ca2:	e4 cf       	rjmp	.-56     	; 0xc6c <__vector_19+0x36>

00000ca4 <sd_lld_init>:
 * @notapi
 */
void sd_lld_init(void) {

#if AVR_SERIAL_USE_USART0
  sdObjectInit(&SD1, NULL, notify1);
     ca4:	47 ed       	ldi	r20, 0xD7	; 215
     ca6:	55 e0       	ldi	r21, 0x05	; 5
     ca8:	60 e0       	ldi	r22, 0x00	; 0
     caa:	70 e0       	ldi	r23, 0x00	; 0
     cac:	80 e8       	ldi	r24, 0x80	; 128
     cae:	92 e0       	ldi	r25, 0x02	; 2
     cb0:	d7 cc       	rjmp	.-1618   	; 0x660 <sdObjectInit>

00000cb2 <chSysInit>:
    /* Registry header, access to this list depends on the current
       kernel configuration.*/
    rqp = REG_HEADER(oip);

    /* Scanning the ready list forward.*/
    n = (cnt_t)0;
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	c9 ec       	ldi	r28, 0xC9	; 201
     cb8:	d2 e0       	ldi	r29, 0x02	; 2
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	88 83       	st	Y, r24
     cbe:	1a 82       	std	Y+2, r1	; 0x02
     cc0:	19 82       	std	Y+1, r1	; 0x01
     cc2:	c6 d3       	rcall	.+1932   	; 0x1450 <__core_init>
     cc4:	06 d4       	rcall	.+2060   	; 0x14d2 <__heap_init>
     cc6:	66 e4       	ldi	r22, 0x46	; 70
     cc8:	71 e0       	ldi	r23, 0x01	; 1
     cca:	8c ec       	ldi	r24, 0xCC	; 204
     ccc:	92 e0       	ldi	r25, 0x02	; 2
     cce:	f8 d1       	rcall	.+1008   	; 0x10c0 <chInstanceObjectInit>
     cd0:	82 e0       	ldi	r24, 0x02	; 2
     cd2:	88 83       	st	Y, r24
     cd4:	78 94       	sei
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	08 95       	ret

00000cdc <chSysTimerHandlerI>:
  }
#endif
#if CH_DBG_THREADS_PROFILING == TRUE
  currtp->time++;
#endif
  chVTDoTickI();
     cdc:	68 c0       	rjmp	.+208    	; 0xdae <chVTDoTickI>

00000cde <chVTDoSetI>:
    dlp = dlp->next;
  } while (dlp != &vtlp->dlist);

  chDbgAssert(false, "timer not in list");

  return (sysinterval_t)-1;
     cde:	cf 93       	push	r28
     ce0:	df 93       	push	r29
     ce2:	dc 01       	movw	r26, r24
     ce4:	19 96       	adiw	r26, 0x09	; 9
     ce6:	3c 93       	st	X, r19
     ce8:	2e 93       	st	-X, r18
     cea:	18 97       	sbiw	r26, 0x08	; 8
     cec:	17 96       	adiw	r26, 0x07	; 7
     cee:	5c 93       	st	X, r21
     cf0:	4e 93       	st	-X, r20
     cf2:	16 97       	sbiw	r26, 0x06	; 6
     cf4:	1b 96       	adiw	r26, 0x0b	; 11
     cf6:	1c 92       	st	X, r1
     cf8:	1e 92       	st	-X, r1
     cfa:	1a 97       	sbiw	r26, 0x0a	; 10
     cfc:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <ch0+0x7>
     d00:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <ch0+0x8>
     d04:	24 81       	ldd	r18, Z+4	; 0x04
     d06:	35 81       	ldd	r19, Z+5	; 0x05
     d08:	26 17       	cp	r18, r22
     d0a:	37 07       	cpc	r19, r23
     d0c:	50 f4       	brcc	.+20     	; 0xd22 <chVTDoSetI+0x44>
     d0e:	62 1b       	sub	r22, r18
     d10:	73 0b       	sbc	r23, r19
     d12:	01 90       	ld	r0, Z+
     d14:	f0 81       	ld	r31, Z
     d16:	e0 2d       	mov	r30, r0
     d18:	24 81       	ldd	r18, Z+4	; 0x04
     d1a:	35 81       	ldd	r19, Z+5	; 0x05
     d1c:	26 17       	cp	r18, r22
     d1e:	37 07       	cpc	r19, r23
     d20:	b0 f3       	brcs	.-20     	; 0xd0e <chVTDoSetI+0x30>
     d22:	15 96       	adiw	r26, 0x05	; 5
     d24:	7c 93       	st	X, r23
     d26:	6e 93       	st	-X, r22
     d28:	14 97       	sbiw	r26, 0x04	; 4
     d2a:	11 96       	adiw	r26, 0x01	; 1
     d2c:	fc 93       	st	X, r31
     d2e:	ee 93       	st	-X, r30
     d30:	c2 81       	ldd	r28, Z+2	; 0x02
     d32:	d3 81       	ldd	r29, Z+3	; 0x03
     d34:	13 96       	adiw	r26, 0x03	; 3
     d36:	dc 93       	st	X, r29
     d38:	ce 93       	st	-X, r28
     d3a:	12 97       	sbiw	r26, 0x02	; 2
     d3c:	b9 83       	std	Y+1, r27	; 0x01
     d3e:	a8 83       	st	Y, r26
     d40:	b3 83       	std	Z+3, r27	; 0x03
     d42:	a2 83       	std	Z+2, r26	; 0x02
     d44:	84 81       	ldd	r24, Z+4	; 0x04
     d46:	95 81       	ldd	r25, Z+5	; 0x05
     d48:	86 1b       	sub	r24, r22
     d4a:	97 0b       	sbc	r25, r23
     d4c:	95 83       	std	Z+5, r25	; 0x05
     d4e:	84 83       	std	Z+4, r24	; 0x04
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	9f ef       	ldi	r25, 0xFF	; 255
     d54:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ch0+0xc>
     d58:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ch0+0xb>
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	08 95       	ret

00000d62 <chVTDoResetI>:
     d62:	cf 93       	push	r28
     d64:	df 93       	push	r29
     d66:	fc 01       	movw	r30, r24
     d68:	a0 81       	ld	r26, Z
     d6a:	b1 81       	ldd	r27, Z+1	; 0x01
     d6c:	14 96       	adiw	r26, 0x04	; 4
     d6e:	2d 91       	ld	r18, X+
     d70:	3c 91       	ld	r19, X
     d72:	15 97       	sbiw	r26, 0x05	; 5
     d74:	84 81       	ldd	r24, Z+4	; 0x04
     d76:	95 81       	ldd	r25, Z+5	; 0x05
     d78:	82 0f       	add	r24, r18
     d7a:	93 1f       	adc	r25, r19
     d7c:	15 96       	adiw	r26, 0x05	; 5
     d7e:	9c 93       	st	X, r25
     d80:	8e 93       	st	-X, r24
     d82:	14 97       	sbiw	r26, 0x04	; 4
     d84:	c2 81       	ldd	r28, Z+2	; 0x02
     d86:	d3 81       	ldd	r29, Z+3	; 0x03
     d88:	b9 83       	std	Y+1, r27	; 0x01
     d8a:	a8 83       	st	Y, r26
     d8c:	a0 81       	ld	r26, Z
     d8e:	b1 81       	ldd	r27, Z+1	; 0x01
     d90:	13 96       	adiw	r26, 0x03	; 3
     d92:	dc 93       	st	X, r29
     d94:	ce 93       	st	-X, r28
     d96:	12 97       	sbiw	r26, 0x02	; 2
     d98:	11 82       	std	Z+1, r1	; 0x01
     d9a:	10 82       	st	Z, r1
     d9c:	8f ef       	ldi	r24, 0xFF	; 255
     d9e:	9f ef       	ldi	r25, 0xFF	; 255
     da0:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <ch0+0xc>
     da4:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <ch0+0xb>
     da8:	df 91       	pop	r29
     daa:	cf 91       	pop	r28
     dac:	08 95       	ret

00000dae <chVTDoTickI>:
 *          to acquire the lock if needed. This is done in order to reduce
 *          interrupts jitter when many timers are in use.
 *
 * @iclass
 */
void chVTDoTickI(void) {
     dae:	0f 93       	push	r16
     db0:	1f 93       	push	r17
     db2:	cf 93       	push	r28
     db4:	df 93       	push	r29
  virtual_timers_list_t *vtlp = &currcore->vtlist;

  chDbgCheckClassI();

#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
     db6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <ch0+0xd>
     dba:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <ch0+0xe>
     dbe:	01 96       	adiw	r24, 0x01	; 1
     dc0:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <ch0+0xe>
     dc4:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <ch0+0xd>
 *
 * @notapi
 */
static inline bool ch_dlist_notempty(ch_delta_list_t *dlhp) {

  return (bool)(dlhp != dlhp->next);
     dc8:	c0 91 d3 02 	lds	r28, 0x02D3	; 0x8002d3 <ch0+0x7>
     dcc:	d0 91 d4 02 	lds	r29, 0x02D4	; 0x8002d4 <ch0+0x8>
  if (ch_dlist_notempty(&vtlp->dlist)) {
     dd0:	42 e0       	ldi	r20, 0x02	; 2
     dd2:	c3 3d       	cpi	r28, 0xD3	; 211
     dd4:	d4 07       	cpc	r29, r20
     dd6:	41 f1       	breq	.+80     	; 0xe28 <chVTDoTickI+0x7a>
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	9d 81       	ldd	r25, Y+5	; 0x05
     ddc:	01 97       	sbiw	r24, 0x01	; 1
     dde:	9d 83       	std	Y+5, r25	; 0x05
     de0:	8c 83       	std	Y+4, r24	; 0x04
  dlp->delta -= delta;

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     de2:	0f ef       	ldi	r16, 0xFF	; 255
     de4:	1f ef       	ldi	r17, 0xFF	; 255
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     de6:	1e c0       	rjmp	.+60     	; 0xe24 <chVTDoTickI+0x76>
 *
 * @notapi
 */
static inline ch_delta_list_t *ch_dlist_dequeue(ch_delta_list_t *dlp) {

  dlp->prev->next = dlp->next;
     de8:	ea 81       	ldd	r30, Y+2	; 0x02
     dea:	fb 81       	ldd	r31, Y+3	; 0x03
     dec:	88 81       	ld	r24, Y
     dee:	99 81       	ldd	r25, Y+1	; 0x01
     df0:	91 83       	std	Z+1, r25	; 0x01
     df2:	80 83       	st	Z, r24
  dlp->next->prev = dlp->prev;
     df4:	a8 81       	ld	r26, Y
     df6:	b9 81       	ldd	r27, Y+1	; 0x01
     df8:	13 96       	adiw	r26, 0x03	; 3
     dfa:	fc 93       	st	X, r31
     dfc:	ee 93       	st	-X, r30
     dfe:	12 97       	sbiw	r26, 0x02	; 2
      /* Triggered timer.*/
      vtp = (virtual_timer_t *)vtlp->dlist.next;

      /* Removing the element from the delta list, marking it as not armed.*/
      (void) ch_dlist_dequeue(&vtp->dlist);
      vtp->dlist.next = NULL;
     e00:	19 82       	std	Y+1, r1	; 0x01
     e02:	18 82       	st	Y, r1

      chSysUnlockFromISR();
      vtp->func(vtp, vtp->par);
     e04:	68 85       	ldd	r22, Y+8	; 0x08
     e06:	79 85       	ldd	r23, Y+9	; 0x09
     e08:	ee 81       	ldd	r30, Y+6	; 0x06
     e0a:	ff 81       	ldd	r31, Y+7	; 0x07
     e0c:	ce 01       	movw	r24, r28
     e0e:	09 95       	icall
      chSysLockFromISR();

      /* If a reload is defined the timer needs to be restarted.*/
      if (vtp->reload > (sysinterval_t)0) {
     e10:	8a 85       	ldd	r24, Y+10	; 0x0a
     e12:	9b 85       	ldd	r25, Y+11	; 0x0b
     e14:	00 97       	sbiw	r24, 0x00	; 0
     e16:	69 f4       	brne	.+26     	; 0xe32 <chVTDoTickI+0x84>
     e18:	c0 91 d3 02 	lds	r28, 0x02D3	; 0x8002d3 <ch0+0x7>
     e1c:	d0 91 d4 02 	lds	r29, 0x02D4	; 0x8002d4 <ch0+0x8>
     e20:	8c 81       	ldd	r24, Y+4	; 0x04
     e22:	9d 81       	ldd	r25, Y+5	; 0x05
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime++;
  if (ch_dlist_notempty(&vtlp->dlist)) {
    /* The list is not empty, processing elements on top.*/
    --vtlp->dlist.next->delta;
    while (vtlp->dlist.next->delta == (sysinterval_t)0) {
     e24:	89 2b       	or	r24, r25
     e26:	01 f3       	breq	.-64     	; 0xde8 <chVTDoTickI+0x3a>
  vtp->dlist.delta -= nowdelta;

  /* Update alarm time to next timer.*/
  vt_set_alarm(vtlp, now, vtp->dlist.delta);
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
}
     e28:	df 91       	pop	r29
     e2a:	cf 91       	pop	r28
     e2c:	1f 91       	pop	r17
     e2e:	0f 91       	pop	r16
     e30:	08 95       	ret
     e32:	e0 91 d3 02 	lds	r30, 0x02D3	; 0x8002d3 <ch0+0x7>
     e36:	f0 91 d4 02 	lds	r31, 0x02D4	; 0x8002d4 <ch0+0x8>
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     e3a:	24 81       	ldd	r18, Z+4	; 0x04
     e3c:	35 81       	ldd	r19, Z+5	; 0x05
     e3e:	28 17       	cp	r18, r24
     e40:	39 07       	cpc	r19, r25
     e42:	50 f4       	brcc	.+20     	; 0xe58 <chVTDoTickI+0xaa>
    /* Debug assert if the element is already in the list.*/
    chDbgAssert(dlp != dlep, "element already in list");

    delta -= dlp->delta;
     e44:	82 1b       	sub	r24, r18
     e46:	93 0b       	sbc	r25, r19
    dlp = dlp->next;
     e48:	01 90       	ld	r0, Z+
     e4a:	f0 81       	ld	r31, Z
     e4c:	e0 2d       	mov	r30, r0
  ch_delta_list_t *dlp;

  /* The delta list is scanned in order to find the correct position for
     this element. */
  dlp = dlhp->next;
  while (likely(dlp->delta < delta)) {
     e4e:	24 81       	ldd	r18, Z+4	; 0x04
     e50:	35 81       	ldd	r19, Z+5	; 0x05
     e52:	28 17       	cp	r18, r24
     e54:	39 07       	cpc	r19, r25
     e56:	b0 f3       	brcs	.-20     	; 0xe44 <chVTDoTickI+0x96>
 */
static inline void ch_dlist_insert_before(ch_delta_list_t *dlhp,
                                          ch_delta_list_t *dlp,
                                          sysinterval_t delta) {

  dlp->delta      = delta;
     e58:	9d 83       	std	Y+5, r25	; 0x05
     e5a:	8c 83       	std	Y+4, r24	; 0x04
  dlp->next       = dlhp;
     e5c:	f9 83       	std	Y+1, r31	; 0x01
     e5e:	e8 83       	st	Y, r30
  dlp->prev       = dlp->next->prev;
     e60:	a2 81       	ldd	r26, Z+2	; 0x02
     e62:	b3 81       	ldd	r27, Z+3	; 0x03
     e64:	bb 83       	std	Y+3, r27	; 0x03
     e66:	aa 83       	std	Y+2, r26	; 0x02
  dlp->prev->next = dlp;
     e68:	cd 93       	st	X+, r28
     e6a:	dc 93       	st	X, r29
  dlhp->prev      = dlp;
     e6c:	d3 83       	std	Z+3, r29	; 0x03
     e6e:	c2 83       	std	Z+2, r28	; 0x02

  /* The timer is inserted in the delta list.*/
  ch_dlist_insert_before(dlp, dlep, delta);

  /* Adjusting delta for the following element.*/
  dlp->delta -= delta;
     e70:	24 81       	ldd	r18, Z+4	; 0x04
     e72:	35 81       	ldd	r19, Z+5	; 0x05
     e74:	a9 01       	movw	r20, r18
     e76:	48 1b       	sub	r20, r24
     e78:	59 0b       	sbc	r21, r25
     e7a:	55 83       	std	Z+5, r21	; 0x05
     e7c:	44 83       	std	Z+4, r20	; 0x04

  /* Special case when the inserted element is in last position in the list,
     the value in the header must be restored, just doing it is faster than
     checking then doing.*/
  dlhp->delta = (sysinterval_t)-1;
     e7e:	10 93 d8 02 	sts	0x02D8, r17	; 0x8002d8 <ch0+0xc>
     e82:	00 93 d7 02 	sts	0x02D7, r16	; 0x8002d7 <ch0+0xb>
     e86:	c8 cf       	rjmp	.-112    	; 0xe18 <chVTDoTickI+0x6a>

00000e88 <__sch_wakeup>:
    __instance_set_currthread(oip, ntp);

    /* Swap operation as tail call.*/
    chSysSwitch(ntp, otp);
  }
}
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	db 01       	movw	r26, r22
     e8e:	1f 96       	adiw	r26, 0x0f	; 15
     e90:	8c 91       	ld	r24, X
     e92:	1f 97       	sbiw	r26, 0x0f	; 15
     e94:	84 30       	cpi	r24, 0x04	; 4
     e96:	f1 f1       	breq	.+124    	; 0xf14 <__sch_wakeup+0x8c>
     e98:	80 f5       	brcc	.+96     	; 0xefa <__sch_wakeup+0x72>
     e9a:	88 23       	and	r24, r24
     e9c:	59 f1       	breq	.+86     	; 0xef4 <__sch_wakeup+0x6c>
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	31 f4       	brne	.+12     	; 0xeae <__sch_wakeup+0x26>
     ea2:	52 96       	adiw	r26, 0x12	; 18
     ea4:	ed 91       	ld	r30, X+
     ea6:	fc 91       	ld	r31, X
     ea8:	53 97       	sbiw	r26, 0x13	; 19
     eaa:	11 82       	std	Z+1, r1	; 0x01
     eac:	10 82       	st	Z, r1
     eae:	8f ef       	ldi	r24, 0xFF	; 255
     eb0:	9f ef       	ldi	r25, 0xFF	; 255
     eb2:	53 96       	adiw	r26, 0x13	; 19
     eb4:	9c 93       	st	X, r25
     eb6:	8e 93       	st	-X, r24
     eb8:	52 97       	sbiw	r26, 0x12	; 18
     eba:	1f 96       	adiw	r26, 0x0f	; 15
     ebc:	1c 92       	st	X, r1
     ebe:	1f 97       	sbiw	r26, 0x0f	; 15
     ec0:	1b 96       	adiw	r26, 0x0b	; 11
     ec2:	ed 91       	ld	r30, X+
     ec4:	fc 91       	ld	r31, X
     ec6:	1c 97       	sbiw	r26, 0x0c	; 12
     ec8:	14 96       	adiw	r26, 0x04	; 4
     eca:	9c 91       	ld	r25, X
     ecc:	14 97       	sbiw	r26, 0x04	; 4
     ece:	01 90       	ld	r0, Z+
     ed0:	f0 81       	ld	r31, Z
     ed2:	e0 2d       	mov	r30, r0
     ed4:	84 81       	ldd	r24, Z+4	; 0x04
     ed6:	89 17       	cp	r24, r25
     ed8:	d0 f7       	brcc	.-12     	; 0xece <__sch_wakeup+0x46>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	fc 93       	st	X, r31
     ede:	ee 93       	st	-X, r30
     ee0:	c2 81       	ldd	r28, Z+2	; 0x02
     ee2:	d3 81       	ldd	r29, Z+3	; 0x03
     ee4:	13 96       	adiw	r26, 0x03	; 3
     ee6:	dc 93       	st	X, r29
     ee8:	ce 93       	st	-X, r28
     eea:	12 97       	sbiw	r26, 0x02	; 2
     eec:	b9 83       	std	Y+1, r27	; 0x01
     eee:	a8 83       	st	Y, r26
     ef0:	b3 83       	std	Z+3, r27	; 0x03
     ef2:	a2 83       	std	Z+2, r26	; 0x02
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret
     efa:	87 30       	cpi	r24, 0x07	; 7
     efc:	59 f0       	breq	.+22     	; 0xf14 <__sch_wakeup+0x8c>
     efe:	8c 30       	cpi	r24, 0x0C	; 12
     f00:	49 f0       	breq	.+18     	; 0xf14 <__sch_wakeup+0x8c>
     f02:	85 30       	cpi	r24, 0x05	; 5
     f04:	a1 f6       	brne	.-88     	; 0xeae <__sch_wakeup+0x26>
     f06:	52 96       	adiw	r26, 0x12	; 18
     f08:	ed 91       	ld	r30, X+
     f0a:	fc 91       	ld	r31, X
     f0c:	53 97       	sbiw	r26, 0x13	; 19
     f0e:	84 81       	ldd	r24, Z+4	; 0x04
     f10:	8f 5f       	subi	r24, 0xFF	; 255
     f12:	84 83       	std	Z+4, r24	; 0x04
     f14:	12 96       	adiw	r26, 0x02	; 2
     f16:	ed 91       	ld	r30, X+
     f18:	fc 91       	ld	r31, X
     f1a:	13 97       	sbiw	r26, 0x03	; 3
     f1c:	8d 91       	ld	r24, X+
     f1e:	9c 91       	ld	r25, X
     f20:	11 97       	sbiw	r26, 0x01	; 1
     f22:	91 83       	std	Z+1, r25	; 0x01
     f24:	80 83       	st	Z, r24
     f26:	cd 91       	ld	r28, X+
     f28:	dc 91       	ld	r29, X
     f2a:	11 97       	sbiw	r26, 0x01	; 1
     f2c:	fb 83       	std	Y+3, r31	; 0x03
     f2e:	ea 83       	std	Y+2, r30	; 0x02
     f30:	be cf       	rjmp	.-132    	; 0xeae <__sch_wakeup+0x26>

00000f32 <chSchReadyI>:
     f32:	cf 93       	push	r28
     f34:	df 93       	push	r29
     f36:	dc 01       	movw	r26, r24
     f38:	1f 96       	adiw	r26, 0x0f	; 15
     f3a:	1c 92       	st	X, r1
     f3c:	1f 97       	sbiw	r26, 0x0f	; 15
     f3e:	1b 96       	adiw	r26, 0x0b	; 11
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	1c 97       	sbiw	r26, 0x0c	; 12
     f46:	14 96       	adiw	r26, 0x04	; 4
     f48:	2c 91       	ld	r18, X
     f4a:	14 97       	sbiw	r26, 0x04	; 4
     f4c:	01 90       	ld	r0, Z+
     f4e:	f0 81       	ld	r31, Z
     f50:	e0 2d       	mov	r30, r0
     f52:	94 81       	ldd	r25, Z+4	; 0x04
     f54:	92 17       	cp	r25, r18
     f56:	d0 f7       	brcc	.-12     	; 0xf4c <chSchReadyI+0x1a>
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	fc 93       	st	X, r31
     f5c:	ee 93       	st	-X, r30
     f5e:	c2 81       	ldd	r28, Z+2	; 0x02
     f60:	d3 81       	ldd	r29, Z+3	; 0x03
     f62:	13 96       	adiw	r26, 0x03	; 3
     f64:	dc 93       	st	X, r29
     f66:	ce 93       	st	-X, r28
     f68:	12 97       	sbiw	r26, 0x02	; 2
     f6a:	b9 83       	std	Y+1, r27	; 0x01
     f6c:	a8 83       	st	Y, r26
     f6e:	b3 83       	std	Z+3, r27	; 0x03
     f70:	a2 83       	std	Z+2, r26	; 0x02
     f72:	cd 01       	movw	r24, r26
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	08 95       	ret

00000f7a <chSchGoSleepS>:
     f7a:	cf 93       	push	r28
     f7c:	df 93       	push	r29
     f7e:	ec ec       	ldi	r30, 0xCC	; 204
     f80:	f2 e0       	ldi	r31, 0x02	; 2
     f82:	65 81       	ldd	r22, Z+5	; 0x05
     f84:	76 81       	ldd	r23, Z+6	; 0x06
     f86:	db 01       	movw	r26, r22
     f88:	1f 96       	adiw	r26, 0x0f	; 15
     f8a:	8c 93       	st	X, r24
     f8c:	80 81       	ld	r24, Z
     f8e:	91 81       	ldd	r25, Z+1	; 0x01
     f90:	ec 01       	movw	r28, r24
     f92:	a8 81       	ld	r26, Y
     f94:	b9 81       	ldd	r27, Y+1	; 0x01
     f96:	b1 83       	std	Z+1, r27	; 0x01
     f98:	a0 83       	st	Z, r26
     f9a:	13 96       	adiw	r26, 0x03	; 3
     f9c:	fc 93       	st	X, r31
     f9e:	ee 93       	st	-X, r30
     fa0:	12 97       	sbiw	r26, 0x02	; 2
     fa2:	21 e0       	ldi	r18, 0x01	; 1
     fa4:	2f 87       	std	Y+15, r18	; 0x0f
     fa6:	96 83       	std	Z+6, r25	; 0x06
     fa8:	85 83       	std	Z+5, r24	; 0x05
     faa:	a7 d2       	rcall	.+1358   	; 0x14fa <_port_switch>
     fac:	df 91       	pop	r29
     fae:	cf 91       	pop	r28
     fb0:	08 95       	ret

00000fb2 <chSchGoSleepTimeoutS>:
     fb2:	ff 92       	push	r15
     fb4:	0f 93       	push	r16
     fb6:	1f 93       	push	r17
     fb8:	cf 93       	push	r28
     fba:	df 93       	push	r29
     fbc:	cd b7       	in	r28, 0x3d	; 61
     fbe:	de b7       	in	r29, 0x3e	; 62
     fc0:	2c 97       	sbiw	r28, 0x0c	; 12
     fc2:	0f b6       	in	r0, 0x3f	; 63
     fc4:	f8 94       	cli
     fc6:	de bf       	out	0x3e, r29	; 62
     fc8:	0f be       	out	0x3f, r0	; 63
     fca:	cd bf       	out	0x3d, r28	; 61
     fcc:	f8 2e       	mov	r15, r24
     fce:	00 91 d1 02 	lds	r16, 0x02D1	; 0x8002d1 <ch0+0x5>
     fd2:	10 91 d2 02 	lds	r17, 0x02D2	; 0x8002d2 <ch0+0x6>
     fd6:	6f 3f       	cpi	r22, 0xFF	; 255
     fd8:	8f ef       	ldi	r24, 0xFF	; 255
     fda:	78 07       	cpc	r23, r24
     fdc:	f1 f0       	breq	.+60     	; 0x101a <chSchGoSleepTimeoutS+0x68>
     fde:	98 01       	movw	r18, r16
     fe0:	44 e4       	ldi	r20, 0x44	; 68
     fe2:	57 e0       	ldi	r21, 0x07	; 7
     fe4:	ce 01       	movw	r24, r28
     fe6:	01 96       	adiw	r24, 0x01	; 1
     fe8:	7a de       	rcall	.-780    	; 0xcde <chVTDoSetI>
     fea:	8f 2d       	mov	r24, r15
     fec:	c6 df       	rcall	.-116    	; 0xf7a <chSchGoSleepS>
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	9a 81       	ldd	r25, Y+2	; 0x02
     ff2:	89 2b       	or	r24, r25
     ff4:	19 f0       	breq	.+6      	; 0xffc <chSchGoSleepTimeoutS+0x4a>
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	b3 de       	rcall	.-666    	; 0xd62 <chVTDoResetI>
     ffc:	f8 01       	movw	r30, r16
     ffe:	82 89       	ldd	r24, Z+18	; 0x12
    1000:	93 89       	ldd	r25, Z+19	; 0x13
    1002:	2c 96       	adiw	r28, 0x0c	; 12
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	f8 94       	cli
    1008:	de bf       	out	0x3e, r29	; 62
    100a:	0f be       	out	0x3f, r0	; 63
    100c:	cd bf       	out	0x3d, r28	; 61
    100e:	df 91       	pop	r29
    1010:	cf 91       	pop	r28
    1012:	1f 91       	pop	r17
    1014:	0f 91       	pop	r16
    1016:	ff 90       	pop	r15
    1018:	08 95       	ret
    101a:	8f 2d       	mov	r24, r15
    101c:	ae df       	rcall	.-164    	; 0xf7a <chSchGoSleepS>
    101e:	ee cf       	rjmp	.-36     	; 0xffc <chSchGoSleepTimeoutS+0x4a>

00001020 <chSchIsPreemptionRequired>:
 */
bool chSchIsPreemptionRequired(void) {
  os_instance_t *oip = currcore;
  thread_t *tp = __instance_get_currthread(oip);

  tprio_t p1 = firstprio(&oip->rlist.pqueue);
    1020:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <ch0>
    1024:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <ch0+0x1>
  tprio_t p2 = tp->hdr.pqueue.prio;
    1028:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <ch0+0x5>
    102c:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <ch0+0x6>
     if the first thread on the ready queue has equal or higher priority.*/
  return (tp->ticks > (tslices_t)0) ? (p1 > p2) : (p1 >= p2);
#else
  /* If the round robin preemption feature is not enabled then performs a
     simpler comparison.*/
  return p1 > p2;
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	14 96       	adiw	r26, 0x04	; 4
    1034:	2c 91       	ld	r18, X
    1036:	94 81       	ldd	r25, Z+4	; 0x04
    1038:	92 17       	cp	r25, r18
    103a:	08 f0       	brcs	.+2      	; 0x103e <chSchIsPreemptionRequired+0x1e>
    103c:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    103e:	08 95       	ret

00001040 <chSchDoPreemption>:
 * @note    Not a user function, it is meant to be invoked from within
 *          the port layer in the IRQ-related preemption code.
 *
 * @special
 */
void chSchDoPreemption(void) {
    1040:	cf 93       	push	r28
    1042:	df 93       	push	r29
  os_instance_t *oip = currcore;
  thread_t *otp = __instance_get_currthread(oip);
    1044:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <ch0+0x5>
    1048:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <ch0+0x6>
 * @return              The removed element pointer.
 *
 * @notapi
 */
static inline ch_priority_queue_t *ch_pqueue_remove_highest(ch_priority_queue_t *pqp) {
  ch_priority_queue_t *p = pqp->next;
    104c:	40 91 cc 02 	lds	r20, 0x02CC	; 0x8002cc <ch0>
    1050:	50 91 cd 02 	lds	r21, 0x02CD	; 0x8002cd <ch0+0x1>

  pqp->next       = p->next;
    1054:	ea 01       	movw	r28, r20
    1056:	e8 81       	ld	r30, Y
    1058:	f9 81       	ldd	r31, Y+1	; 0x01
    105a:	f0 93 cd 02 	sts	0x02CD, r31	; 0x8002cd <ch0+0x1>
    105e:	e0 93 cc 02 	sts	0x02CC, r30	; 0x8002cc <ch0>
  pqp->next->prev = pqp;
    1062:	8c ec       	ldi	r24, 0xCC	; 204
    1064:	92 e0       	ldi	r25, 0x02	; 2
    1066:	93 83       	std	Z+3, r25	; 0x03
    1068:	82 83       	std	Z+2, r24	; 0x02
  thread_t *ntp;

  /* Picks the first thread from the ready queue and makes it current.*/
  ntp = threadref(ch_pqueue_remove_highest(&oip->rlist.pqueue));
  ntp->state = CH_STATE_CURRENT;
    106a:	81 e0       	ldi	r24, 0x01	; 1
    106c:	8f 87       	std	Y+15, r24	; 0x0f
  __instance_set_currthread(oip, ntp);
    106e:	50 93 d2 02 	sts	0x02D2, r21	; 0x8002d2 <ch0+0x6>
    1072:	40 93 d1 02 	sts	0x02D1, r20	; 0x8002d1 <ch0+0x5>

  /* Tracing the event.*/
  __trace_ready(tp, tp->u.rdymsg);

  /* The thread is marked ready.*/
  tp->state = CH_STATE_READY;
    1076:	1f 96       	adiw	r26, 0x0f	; 15
    1078:	1c 92       	st	X, r1
    107a:	1f 97       	sbiw	r26, 0x0f	; 15

  /* Insertion in the priority queue.*/
  return threadref(ch_pqueue_insert_ahead(&tp->owner->rlist.pqueue,
    107c:	1b 96       	adiw	r26, 0x0b	; 11
    107e:	ed 91       	ld	r30, X+
    1080:	fc 91       	ld	r31, X
    1082:	1c 97       	sbiw	r26, 0x0c	; 12
    1084:	14 96       	adiw	r26, 0x04	; 4
    1086:	2c 91       	ld	r18, X
    1088:	14 97       	sbiw	r26, 0x04	; 4
static inline ch_priority_queue_t *ch_pqueue_insert_ahead(ch_priority_queue_t *pqp,
                                                          ch_priority_queue_t *p) {

  /* Scanning priority queue, the list is assumed to be mostly empty.*/
  do {
    pqp = pqp->next;
    108a:	01 90       	ld	r0, Z+
    108c:	f0 81       	ld	r31, Z
    108e:	e0 2d       	mov	r30, r0
  } while (unlikely(pqp->prio > p->prio));
    1090:	94 81       	ldd	r25, Z+4	; 0x04
    1092:	29 17       	cp	r18, r25
    1094:	d0 f3       	brcs	.-12     	; 0x108a <chSchDoPreemption+0x4a>

  /* Insertion on prev.*/
  p->next       = pqp;
    1096:	11 96       	adiw	r26, 0x01	; 1
    1098:	fc 93       	st	X, r31
    109a:	ee 93       	st	-X, r30
  p->prev       = pqp->prev;
    109c:	82 81       	ldd	r24, Z+2	; 0x02
    109e:	93 81       	ldd	r25, Z+3	; 0x03
    10a0:	13 96       	adiw	r26, 0x03	; 3
    10a2:	9c 93       	st	X, r25
    10a4:	8e 93       	st	-X, r24
    10a6:	12 97       	sbiw	r26, 0x02	; 2
  p->prev->next = p;
    10a8:	ec 01       	movw	r28, r24
    10aa:	b9 83       	std	Y+1, r27	; 0x01
    10ac:	a8 83       	st	Y, r26
  pqp->prev     = p;
    10ae:	b3 83       	std	Z+3, r27	; 0x03
    10b0:	a2 83       	std	Z+2, r26	; 0x02
     ahead of its peers.*/
  otp = __sch_ready_ahead(otp);
#endif /* !(CH_CFG_TIME_QUANTUM > 0) */

  /* Swap operation as tail call.*/
  chSysSwitch(ntp, otp);
    10b2:	bd 01       	movw	r22, r26
    10b4:	ca 01       	movw	r24, r20
    10b6:	21 d2       	rcall	.+1090   	; 0x14fa <_port_switch>
}
    10b8:	df 91       	pop	r29
    10ba:	cf 91       	pop	r28
    10bc:	08 95       	ret

000010be <__idle_thread>:
 *          that this thread is executed only if there are no other ready
 *          threads in the system.
 *
 * @param[in] p         the thread parameter, unused in this scenario
 */
static void __idle_thread(void *p) {
    10be:	ff cf       	rjmp	.-2      	; 0x10be <__idle_thread>

000010c0 <chInstanceObjectInit>:
 * @param[in] oicp      pointer to an @p os_instance_config_t object
 *
 * @special
 */
void chInstanceObjectInit(os_instance_t *oip,
                          const os_instance_config_t *oicp) {
    10c0:	df 92       	push	r13
    10c2:	ef 92       	push	r14
    10c4:	ff 92       	push	r15
    10c6:	0f 93       	push	r16
    10c8:	1f 93       	push	r17
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
    10d2:	2b 97       	sbiw	r28, 0x0b	; 11
    10d4:	0f b6       	in	r0, 0x3f	; 63
    10d6:	f8 94       	cli
    10d8:	de bf       	out	0x3e, r29	; 62
    10da:	0f be       	out	0x3f, r0	; 63
    10dc:	cd bf       	out	0x3d, r28	; 61
    10de:	8c 01       	movw	r16, r24
    10e0:	7b 01       	movw	r14, r22
  core_id = port_get_core_id();
#else
  core_id = 0U;
#endif
  chDbgAssert(ch_system.instances[core_id] == NULL, "instance already registered");
  ch_system.instances[core_id] = oip;
    10e2:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <ch_system+0x2>
    10e6:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <ch_system+0x1>

  /* Core associated to this instance.*/
  oip->core_id = core_id;
    10ea:	fc 01       	movw	r30, r24
    10ec:	14 8e       	std	Z+28, r1	; 0x1c
    10ee:	13 8e       	std	Z+27, r1	; 0x1b

  /* Keeping a reference to the configuration data.*/
  oip->config = oicp;
    10f0:	72 a3       	std	Z+34, r23	; 0x22
    10f2:	61 a3       	std	Z+33, r22	; 0x21

  /* Port initialization for the current instance.*/
  port_init(oip);
    10f4:	dd 24       	eor	r13, r13
    10f6:	d3 94       	inc	r13
    10f8:	d0 92 13 03 	sts	0x0313, r13	; 0x800313 <__avr_in_isr>
 *
 * @notapi
 */
static inline void ch_pqueue_init(ch_priority_queue_t *pqp) {

  pqp->next = pqp;
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
  pqp->prev = pqp;
    1100:	93 83       	std	Z+3, r25	; 0x03
    1102:	82 83       	std	Z+2, r24	; 0x02
  pqp->prio = (tprio_t)0;
    1104:	14 82       	std	Z+4, r1	; 0x04
 *
 * @init
 */
static inline void __reg_object_init(registry_t *rp) {

  ch_queue_init(&rp->queue);
    1106:	47 96       	adiw	r24, 0x17	; 23
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    1108:	90 8f       	std	Z+24, r25	; 0x18
    110a:	87 8b       	std	Z+23, r24	; 0x17
  qp->prev = qp;
    110c:	92 8f       	std	Z+26, r25	; 0x1a
    110e:	81 8f       	std	Z+25, r24	; 0x19
 *
 * @notapi
 */
static inline void __rfcu_object_init(rfcu_t *rfcup) {

  rfcup->mask = (rfcu_mask_t)0;
    1110:	15 8e       	std	Z+29, r1	; 0x1d
    1112:	16 8e       	std	Z+30, r1	; 0x1e
    1114:	17 8e       	std	Z+31, r1	; 0x1f
    1116:	10 a2       	std	Z+32, r1	; 0x20
 *
 * @notapi
 */
static inline void __vt_object_init(virtual_timers_list_t *vtlp) {

  ch_dlist_init(&vtlp->dlist);
    1118:	40 97       	sbiw	r24, 0x10	; 16
 *
 * @notapi
 */
static inline void ch_dlist_init(ch_delta_list_t *dlhp) {

  dlhp->next  = dlhp;
    111a:	90 87       	std	Z+8, r25	; 0x08
    111c:	87 83       	std	Z+7, r24	; 0x07
  dlhp->prev  = dlhp;
    111e:	92 87       	std	Z+10, r25	; 0x0a
    1120:	81 87       	std	Z+9, r24	; 0x09
  dlhp->delta = (sysinterval_t)-1;
    1122:	8f ef       	ldi	r24, 0xFF	; 255
    1124:	9f ef       	ldi	r25, 0xFF	; 255
    1126:	94 87       	std	Z+12, r25	; 0x0c
    1128:	83 87       	std	Z+11, r24	; 0x0b
#if CH_CFG_ST_TIMEDELTA == 0
  vtlp->systime = (systime_t)0;
    112a:	16 86       	std	Z+14, r1	; 0x0e
    112c:	15 86       	std	Z+13, r1	; 0x0d
 * @xclass
 */
static inline systime_t chVTGetSystemTimeX(void) {

#if CH_CFG_ST_TIMEDELTA == 0
  return currcore->vtlist.systime;
    112e:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <ch0+0xd>
    1132:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <ch0+0xe>
#else /* CH_CFG_ST_TIMEDELTA > 0 */
  vtlp->lasttime = (systime_t)0;
  vtlp->lastdelta = (sysinterval_t)CH_CFG_ST_TIMEDELTA;
#endif /* CH_CFG_ST_TIMEDELTA > 0 */
#if CH_CFG_USE_TIMESTAMP == TRUE
  vtlp->laststamp = (systimestamp_t)chVTGetSystemTimeX();
    1136:	27 87       	std	Z+15, r18	; 0x0f
    1138:	30 8b       	std	Z+16, r19	; 0x10
    113a:	11 8a       	std	Z+17, r1	; 0x11
    113c:	12 8a       	std	Z+18, r1	; 0x12
    113e:	13 8a       	std	Z+19, r1	; 0x13
    1140:	14 8a       	std	Z+20, r1	; 0x14
    1142:	15 8a       	std	Z+21, r1	; 0x15
    1144:	16 8a       	std	Z+22, r1	; 0x16
 *
 * @notapi
 */
static inline void __dbg_object_init(system_debug_t *sdp) {

  sdp->panic_msg = NULL;
    1146:	ef 5b       	subi	r30, 0xBF	; 191
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	11 82       	std	Z+1, r1	; 0x01
    114c:	10 82       	st	Z, r1
#endif

#if CH_CFG_NO_IDLE_THREAD == FALSE
  /* Now this instructions flow becomes the main thread.*/
#if CH_CFG_USE_REGISTRY == TRUE
  oip->rlist.current = __thd_object_init(oip, &oip->mainthread,
    114e:	b8 01       	movw	r22, r16
    1150:	6d 5d       	subi	r22, 0xDD	; 221
    1152:	7f 4f       	sbci	r23, 0xFF	; 255
    1154:	20 e8       	ldi	r18, 0x80	; 128
    1156:	41 e5       	ldi	r20, 0x51	; 81
    1158:	51 e0       	ldi	r21, 0x01	; 1
    115a:	c8 01       	movw	r24, r16
    115c:	2a d0       	rcall	.+84     	; 0x11b2 <__thd_object_init>
    115e:	f8 01       	movw	r30, r16
    1160:	96 83       	std	Z+6, r25	; 0x06
    1162:	85 83       	std	Z+5, r24	; 0x05
  oip->rlist.current->wabase = oicp->mainthread_base;
  oip->rlist.current->waend  = oicp->mainthread_end;
#endif

  /* Setting up the caller as current thread.*/
  oip->rlist.current->state = CH_STATE_CURRENT;
    1164:	fc 01       	movw	r30, r24
    1166:	d7 86       	std	Z+15, r13	; 0x0f
  /* User instance initialization hook.*/
  CH_CFG_OS_INSTANCE_INIT_HOOK(oip);

#if CH_CFG_NO_IDLE_THREAD == FALSE
  {
    thread_descriptor_t idle_descriptor = {
    1168:	8c e4       	ldi	r24, 0x4C	; 76
    116a:	91 e0       	ldi	r25, 0x01	; 1
    116c:	9a 83       	std	Y+2, r25	; 0x02
    116e:	89 83       	std	Y+1, r24	; 0x01
    1170:	f7 01       	movw	r30, r14
    1172:	82 81       	ldd	r24, Z+2	; 0x02
    1174:	93 81       	ldd	r25, Z+3	; 0x03
    1176:	9c 83       	std	Y+4, r25	; 0x04
    1178:	8b 83       	std	Y+3, r24	; 0x03
    117a:	84 81       	ldd	r24, Z+4	; 0x04
    117c:	95 81       	ldd	r25, Z+5	; 0x05
    117e:	9e 83       	std	Y+6, r25	; 0x06
    1180:	8d 83       	std	Y+5, r24	; 0x05
    1182:	df 82       	std	Y+7, r13	; 0x07
    1184:	8f e5       	ldi	r24, 0x5F	; 95
    1186:	98 e0       	ldi	r25, 0x08	; 8
    1188:	99 87       	std	Y+9, r25	; 0x09
    118a:	88 87       	std	Y+8, r24	; 0x08
    118c:	1b 86       	std	Y+11, r1	; 0x0b
    118e:	1a 86       	std	Y+10, r1	; 0x0a
#endif

    /* This thread has the lowest priority in the system, its role is just to
       serve interrupts in its context while keeping the lowest energy saving
       mode compatible with the system status.*/
    (void) chThdCreateI(&idle_descriptor);
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	9e d0       	rcall	.+316    	; 0x12d2 <chThdCreateI>
  }
#endif
}
    1196:	2b 96       	adiw	r28, 0x0b	; 11
    1198:	0f b6       	in	r0, 0x3f	; 63
    119a:	f8 94       	cli
    119c:	de bf       	out	0x3e, r29	; 62
    119e:	0f be       	out	0x3f, r0	; 63
    11a0:	cd bf       	out	0x3d, r28	; 61
    11a2:	df 91       	pop	r29
    11a4:	cf 91       	pop	r28
    11a6:	1f 91       	pop	r17
    11a8:	0f 91       	pop	r16
    11aa:	ff 90       	pop	r15
    11ac:	ef 90       	pop	r14
    11ae:	df 90       	pop	r13
    11b0:	08 95       	ret

000011b2 <__thd_object_init>:
 *
 * @param[in] tqp       pointer to a @p threads_queue_t object
 *
 * @dispose
 */
void chThdQueueObjectDispose(threads_queue_t *tqp) {
    11b2:	cf 93       	push	r28
    11b4:	df 93       	push	r29
    11b6:	fb 01       	movw	r30, r22
    11b8:	24 83       	std	Z+4, r18	; 0x04
    11ba:	32 e0       	ldi	r19, 0x02	; 2
    11bc:	37 87       	std	Z+15, r19	; 0x0f
    11be:	10 8a       	std	Z+16, r1	; 0x10
    11c0:	94 87       	std	Z+12, r25	; 0x0c
    11c2:	83 87       	std	Z+11, r24	; 0x0b
    11c4:	25 8f       	std	Z+29, r18	; 0x1d
    11c6:	14 8e       	std	Z+28, r1	; 0x1c
    11c8:	13 8e       	std	Z+27, r1	; 0x1b
    11ca:	12 8e       	std	Z+26, r1	; 0x1a
    11cc:	21 e0       	ldi	r18, 0x01	; 1
    11ce:	21 8b       	std	Z+17, r18	; 0x11
    11d0:	56 87       	std	Z+14, r21	; 0x0e
    11d2:	45 87       	std	Z+13, r20	; 0x0d
    11d4:	9b 01       	movw	r18, r22
    11d6:	29 5f       	subi	r18, 0xF9	; 249
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	ac 01       	movw	r20, r24
    11dc:	49 5e       	subi	r20, 0xE9	; 233
    11de:	5f 4f       	sbci	r21, 0xFF	; 255
    11e0:	50 87       	std	Z+8, r21	; 0x08
    11e2:	47 83       	std	Z+7, r20	; 0x07
    11e4:	ec 01       	movw	r28, r24
    11e6:	a9 8d       	ldd	r26, Y+25	; 0x19
    11e8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    11ea:	b2 87       	std	Z+10, r27	; 0x0a
    11ec:	a1 87       	std	Z+9, r26	; 0x09
    11ee:	2d 93       	st	X+, r18
    11f0:	3c 93       	st	X, r19
    11f2:	3a 8f       	std	Y+26, r19	; 0x1a
    11f4:	29 8f       	std	Y+25, r18	; 0x19
    11f6:	cb 01       	movw	r24, r22
    11f8:	44 96       	adiw	r24, 0x14	; 20
    11fa:	95 8b       	std	Z+21, r25	; 0x15
    11fc:	84 8b       	std	Z+20, r24	; 0x14
    11fe:	02 96       	adiw	r24, 0x02	; 2
    1200:	97 8b       	std	Z+23, r25	; 0x17
    1202:	86 8b       	std	Z+22, r24	; 0x16
    1204:	91 8f       	std	Z+25, r25	; 0x19
    1206:	80 8f       	std	Z+24, r24	; 0x18
    1208:	cb 01       	movw	r24, r22
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <chThdCreateSuspendedI>:
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	dc 01       	movw	r26, r24
    1216:	14 96       	adiw	r26, 0x04	; 4
    1218:	2d 91       	ld	r18, X+
    121a:	3c 91       	ld	r19, X
    121c:	15 97       	sbiw	r26, 0x05	; 5
    121e:	f9 01       	movw	r30, r18
    1220:	7e 97       	sbiw	r30, 0x1e	; 30
    1222:	e9 01       	movw	r28, r18
    1224:	e3 97       	sbiw	r28, 0x33	; 51
    1226:	d6 83       	std	Z+6, r29	; 0x06
    1228:	c5 83       	std	Z+5, r28	; 0x05
    122a:	17 96       	adiw	r26, 0x07	; 7
    122c:	8c 91       	ld	r24, X
    122e:	17 97       	sbiw	r26, 0x07	; 7
    1230:	8a 8b       	std	Y+18, r24	; 0x12
    1232:	18 96       	adiw	r26, 0x08	; 8
    1234:	8c 91       	ld	r24, X
    1236:	18 97       	sbiw	r26, 0x08	; 8
    1238:	89 8b       	std	Y+17, r24	; 0x11
    123a:	19 96       	adiw	r26, 0x09	; 9
    123c:	8c 91       	ld	r24, X
    123e:	19 97       	sbiw	r26, 0x09	; 9
    1240:	88 8b       	std	Y+16, r24	; 0x10
    1242:	1a 96       	adiw	r26, 0x0a	; 10
    1244:	8c 91       	ld	r24, X
    1246:	1a 97       	sbiw	r26, 0x0a	; 10
    1248:	8f 87       	std	Y+15, r24	; 0x0f
    124a:	8c ea       	ldi	r24, 0xAC	; 172
    124c:	9a e0       	ldi	r25, 0x0A	; 10
    124e:	9b 8b       	std	Y+19, r25	; 0x13
    1250:	8c 8b       	std	Y+20, r24	; 0x14
    1252:	16 96       	adiw	r26, 0x06	; 6
    1254:	8c 91       	ld	r24, X
    1256:	16 97       	sbiw	r26, 0x06	; 6
    1258:	4d 91       	ld	r20, X+
    125a:	5c 91       	ld	r21, X
    125c:	84 83       	std	Z+4, r24	; 0x04
    125e:	92 e0       	ldi	r25, 0x02	; 2
    1260:	97 87       	std	Z+15, r25	; 0x0f
    1262:	10 8a       	std	Z+16, r1	; 0x10
    1264:	6c ec       	ldi	r22, 0xCC	; 204
    1266:	72 e0       	ldi	r23, 0x02	; 2
    1268:	74 87       	std	Z+12, r23	; 0x0c
    126a:	63 87       	std	Z+11, r22	; 0x0b
    126c:	85 8f       	std	Z+29, r24	; 0x1d
    126e:	14 8e       	std	Z+28, r1	; 0x1c
    1270:	13 8e       	std	Z+27, r1	; 0x1b
    1272:	12 8e       	std	Z+26, r1	; 0x1a
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	81 8b       	std	Z+17, r24	; 0x11
    1278:	56 87       	std	Z+14, r21	; 0x0e
    127a:	45 87       	std	Z+13, r20	; 0x0d
    127c:	d9 01       	movw	r26, r18
    127e:	57 97       	sbiw	r26, 0x17	; 23
    1280:	83 ee       	ldi	r24, 0xE3	; 227
    1282:	92 e0       	ldi	r25, 0x02	; 2
    1284:	11 96       	adiw	r26, 0x01	; 1
    1286:	9c 93       	st	X, r25
    1288:	8e 93       	st	-X, r24
    128a:	eb 01       	movw	r28, r22
    128c:	89 8d       	ldd	r24, Y+25	; 0x19
    128e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1290:	13 96       	adiw	r26, 0x03	; 3
    1292:	9c 93       	st	X, r25
    1294:	8e 93       	st	-X, r24
    1296:	12 97       	sbiw	r26, 0x02	; 2
    1298:	ec 01       	movw	r28, r24
    129a:	b9 83       	std	Y+1, r27	; 0x01
    129c:	a8 83       	st	Y, r26
    129e:	eb 01       	movw	r28, r22
    12a0:	ba 8f       	std	Y+26, r27	; 0x1a
    12a2:	a9 8f       	std	Y+25, r26	; 0x19
    12a4:	1d 96       	adiw	r26, 0x0d	; 13
    12a6:	0b 2e       	mov	r0, r27
    12a8:	11 96       	adiw	r26, 0x01	; 1
    12aa:	0c 92       	st	X, r0
    12ac:	11 97       	sbiw	r26, 0x01	; 1
    12ae:	ac 93       	st	X, r26
    12b0:	12 96       	adiw	r26, 0x02	; 2
    12b2:	0b 2e       	mov	r0, r27
    12b4:	11 96       	adiw	r26, 0x01	; 1
    12b6:	0c 92       	st	X, r0
    12b8:	11 97       	sbiw	r26, 0x01	; 1
    12ba:	ac 93       	st	X, r26
    12bc:	0a 2e       	mov	r0, r26
    12be:	1b 2e       	mov	r1, r27
    12c0:	13 96       	adiw	r26, 0x03	; 3
    12c2:	1c 92       	st	X, r1
    12c4:	0e 92       	st	-X, r0
    12c6:	11 24       	eor	r1, r1
    12c8:	12 97       	sbiw	r26, 0x02	; 2
    12ca:	cf 01       	movw	r24, r30
    12cc:	df 91       	pop	r29
    12ce:	cf 91       	pop	r28
    12d0:	08 95       	ret

000012d2 <chThdCreateI>:
    12d2:	9e df       	rcall	.-196    	; 0x1210 <chThdCreateSuspendedI>
    12d4:	2e ce       	rjmp	.-932    	; 0xf32 <chSchReadyI>

000012d6 <chThdExitS>:
    12d6:	0f 93       	push	r16
    12d8:	1f 93       	push	r17
    12da:	cf 93       	push	r28
    12dc:	df 93       	push	r29
    12de:	c0 91 d1 02 	lds	r28, 0x02D1	; 0x8002d1 <ch0+0x5>
    12e2:	d0 91 d2 02 	lds	r29, 0x02D2	; 0x8002d2 <ch0+0x6>
    12e6:	9b 8b       	std	Y+19, r25	; 0x13
    12e8:	8a 8b       	std	Y+18, r24	; 0x12
    12ea:	8e 01       	movw	r16, r28
    12ec:	0c 5e       	subi	r16, 0xEC	; 236
    12ee:	1f 4f       	sbci	r17, 0xFF	; 255
    12f0:	8c 89       	ldd	r24, Y+20	; 0x14
    12f2:	9d 89       	ldd	r25, Y+21	; 0x15
    12f4:	08 17       	cp	r16, r24
    12f6:	19 07       	cpc	r17, r25
    12f8:	59 f0       	breq	.+22     	; 0x1310 <chThdExitS+0x3a>
    12fa:	fc 01       	movw	r30, r24
    12fc:	20 81       	ld	r18, Z
    12fe:	31 81       	ldd	r19, Z+1	; 0x01
    1300:	3d 8b       	std	Y+21, r19	; 0x15
    1302:	2c 8b       	std	Y+20, r18	; 0x14
    1304:	16 de       	rcall	.-980    	; 0xf32 <chSchReadyI>
    1306:	8c 89       	ldd	r24, Y+20	; 0x14
    1308:	9d 89       	ldd	r25, Y+21	; 0x15
    130a:	80 17       	cp	r24, r16
    130c:	91 07       	cpc	r25, r17
    130e:	a9 f7       	brne	.-22     	; 0x12fa <chThdExitS+0x24>
    1310:	89 89       	ldd	r24, Y+17	; 0x11
    1312:	81 11       	cpse	r24, r1
    1314:	0c c0       	rjmp	.+24     	; 0x132e <chThdExitS+0x58>
    1316:	e9 85       	ldd	r30, Y+9	; 0x09
    1318:	fa 85       	ldd	r31, Y+10	; 0x0a
    131a:	8f 81       	ldd	r24, Y+7	; 0x07
    131c:	98 85       	ldd	r25, Y+8	; 0x08
    131e:	91 83       	std	Z+1, r25	; 0x01
    1320:	80 83       	st	Z, r24
    1322:	af 81       	ldd	r26, Y+7	; 0x07
    1324:	b8 85       	ldd	r27, Y+8	; 0x08
    1326:	13 96       	adiw	r26, 0x03	; 3
    1328:	fc 93       	st	X, r31
    132a:	ee 93       	st	-X, r30
    132c:	12 97       	sbiw	r26, 0x02	; 2
    132e:	8f e0       	ldi	r24, 0x0F	; 15
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	20 ce       	rjmp	.-960    	; 0xf7a <chSchGoSleepS>

0000133a <chThdExit>:
    133a:	f8 94       	cli
    133c:	cc cf       	rjmp	.-104    	; 0x12d6 <chThdExitS>

0000133e <chThdSleep>:
    133e:	f8 94       	cli
    1340:	bc 01       	movw	r22, r24
    1342:	88 e0       	ldi	r24, 0x08	; 8
    1344:	36 de       	rcall	.-916    	; 0xfb2 <chSchGoSleepTimeoutS>
    1346:	78 94       	sei
    1348:	08 95       	ret

0000134a <chThdQueueObjectInit>:
    134a:	fc 01       	movw	r30, r24
    134c:	91 83       	std	Z+1, r25	; 0x01
    134e:	80 83       	st	Z, r24
    1350:	93 83       	std	Z+3, r25	; 0x03
    1352:	82 83       	std	Z+2, r24	; 0x02
    1354:	08 95       	ret

00001356 <chThdEnqueueTimeoutS>:
 *                      invoked with @p TIME_IMMEDIATE as timeout
 *                      specification.
 *
 * @sclass
 */
msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
    1356:	cf 93       	push	r28
    1358:	df 93       	push	r29
 *
 * @xclass
 */
static inline thread_t *chThdGetSelfX(void) {

  return __sch_get_currthread();
    135a:	e0 91 d1 02 	lds	r30, 0x02D1	; 0x8002d1 <ch0+0x5>
    135e:	f0 91 d2 02 	lds	r31, 0x02D2	; 0x8002d2 <ch0+0x6>
  thread_t *currtp = chThdGetSelfX();

  if (unlikely(TIME_IMMEDIATE == timeout)) {
    1362:	61 15       	cp	r22, r1
    1364:	71 05       	cpc	r23, r1
    1366:	79 f0       	breq	.+30     	; 0x1386 <chThdEnqueueTimeoutS+0x30>
 *
 * @notapi
 */
static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {

  p->next       = qp;
    1368:	91 83       	std	Z+1, r25	; 0x01
    136a:	80 83       	st	Z, r24
  p->prev       = qp->prev;
    136c:	ec 01       	movw	r28, r24
    136e:	aa 81       	ldd	r26, Y+2	; 0x02
    1370:	bb 81       	ldd	r27, Y+3	; 0x03
    1372:	b3 83       	std	Z+3, r27	; 0x03
    1374:	a2 83       	std	Z+2, r26	; 0x02
  p->prev->next = p;
    1376:	ed 93       	st	X+, r30
    1378:	fc 93       	st	X, r31
  qp->prev      = p;
    137a:	fb 83       	std	Y+3, r31	; 0x03
    137c:	ea 83       	std	Y+2, r30	; 0x02
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    137e:	84 e0       	ldi	r24, 0x04	; 4
}
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    return MSG_TIMEOUT;
  }

  ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);

  return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
    1384:	16 ce       	rjmp	.-980    	; 0xfb2 <chSchGoSleepTimeoutS>
}
    1386:	8f ef       	ldi	r24, 0xFF	; 255
    1388:	9f ef       	ldi	r25, 0xFF	; 255
    138a:	df 91       	pop	r29
    138c:	cf 91       	pop	r28
    138e:	08 95       	ret

00001390 <chThdDequeueNextI>:
 * @param[in] tqp       pointer to a @p threads_queue_t object
 * @param[in] msg       the message code
 *
 * @iclass
 */
void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline bool ch_queue_notempty(const ch_queue_t *qp) {

  return (bool)(qp->next != qp);
    1396:	80 81       	ld	r24, Z
    1398:	91 81       	ldd	r25, Z+1	; 0x01

  if (ch_queue_notempty(&tqp->queue)) {
    139a:	e8 17       	cp	r30, r24
    139c:	f9 07       	cpc	r31, r25
    139e:	71 f0       	breq	.+28     	; 0x13bc <chThdDequeueNextI+0x2c>
 * @notapi
 */
static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
  ch_queue_t *p = qp->next;

  qp->next       = p->next;
    13a0:	ec 01       	movw	r28, r24
    13a2:	a8 81       	ld	r26, Y
    13a4:	b9 81       	ldd	r27, Y+1	; 0x01
    13a6:	b1 83       	std	Z+1, r27	; 0x01
    13a8:	a0 83       	st	Z, r26
  qp->next->prev = qp;
    13aa:	13 96       	adiw	r26, 0x03	; 3
    13ac:	fc 93       	st	X, r31
    13ae:	ee 93       	st	-X, r30
    13b0:	12 97       	sbiw	r26, 0x02	; 2

  tp = threadref(ch_queue_fifo_remove(&tqp->queue));

  chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");

  tp->u.rdymsg = msg;
    13b2:	7b 8b       	std	Y+19, r23	; 0x13
    13b4:	6a 8b       	std	Y+18, r22	; 0x12
    chThdDoDequeueNextI(tqp, msg);
  }
}
    13b6:	df 91       	pop	r29
    13b8:	cf 91       	pop	r28
  (void) chSchReadyI(tp);
    13ba:	bb cd       	rjmp	.-1162   	; 0xf32 <chSchReadyI>
    13bc:	df 91       	pop	r29
    13be:	cf 91       	pop	r28
    13c0:	08 95       	ret

000013c2 <chMtxObjectInit>:
 *
 * @param[out] mp       pointer to a @p mutex_t object
 *
 * @init
 */
void chMtxObjectInit(mutex_t *mp) {
    13c2:	fc 01       	movw	r30, r24
 *
 * @notapi
 */
static inline void ch_queue_init(ch_queue_t *qp) {

  qp->next = qp;
    13c4:	91 83       	std	Z+1, r25	; 0x01
    13c6:	80 83       	st	Z, r24
  qp->prev = qp;
    13c8:	93 83       	std	Z+3, r25	; 0x03
    13ca:	82 83       	std	Z+2, r24	; 0x02

  chDbgCheck(mp != NULL);

  ch_queue_init(&mp->queue);
  mp->owner = NULL;
    13cc:	15 82       	std	Z+5, r1	; 0x05
    13ce:	14 82       	std	Z+4, r1	; 0x04
    13d0:	08 95       	ret

000013d2 <chEvtObjectInit>:
    13d2:	fc 01       	movw	r30, r24
    13d4:	91 83       	std	Z+1, r25	; 0x01
    13d6:	80 83       	st	Z, r24
    13d8:	08 95       	ret

000013da <chEvtSignalI>:
    13da:	fc 01       	movw	r30, r24
    13dc:	92 8d       	ldd	r25, Z+26	; 0x1a
    13de:	69 2b       	or	r22, r25
    13e0:	62 8f       	std	Z+26, r22	; 0x1a
    13e2:	87 85       	ldd	r24, Z+15	; 0x0f
    13e4:	8a 30       	cpi	r24, 0x0A	; 10
    13e6:	59 f0       	breq	.+22     	; 0x13fe <chEvtSignalI+0x24>
    13e8:	8b 30       	cpi	r24, 0x0B	; 11
    13ea:	09 f0       	breq	.+2      	; 0x13ee <chEvtSignalI+0x14>
    13ec:	08 95       	ret
    13ee:	82 89       	ldd	r24, Z+18	; 0x12
    13f0:	68 23       	and	r22, r24
    13f2:	86 13       	cpse	r24, r22
    13f4:	fb cf       	rjmp	.-10     	; 0x13ec <chEvtSignalI+0x12>
    13f6:	13 8a       	std	Z+19, r1	; 0x13
    13f8:	12 8a       	std	Z+18, r1	; 0x12
    13fa:	cf 01       	movw	r24, r30
    13fc:	9a cd       	rjmp	.-1228   	; 0xf32 <chSchReadyI>
    13fe:	82 89       	ldd	r24, Z+18	; 0x12
    1400:	68 23       	and	r22, r24
    1402:	c9 f7       	brne	.-14     	; 0x13f6 <chEvtSignalI+0x1c>
    1404:	08 95       	ret

00001406 <chEvtBroadcastFlagsI>:
 * @param[in] esp       pointer to an @p event_source_t object
 * @param[in] flags     the flags set to be added to the listener flags mask
 *
 * @iclass
 */
void chEvtBroadcastFlagsI(event_source_t *esp, eventflags_t flags) {
    1406:	ef 92       	push	r14
    1408:	ff 92       	push	r15
    140a:	1f 93       	push	r17
    140c:	cf 93       	push	r28
    140e:	df 93       	push	r29
    1410:	7c 01       	movw	r14, r24
    1412:	16 2f       	mov	r17, r22
  event_listener_t *elp;

  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
    1414:	fc 01       	movw	r30, r24
    1416:	c0 81       	ld	r28, Z
    1418:	d1 81       	ldd	r29, Z+1	; 0x01
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    141a:	8c 17       	cp	r24, r28
    141c:	9d 07       	cpc	r25, r29
    141e:	91 f0       	breq	.+36     	; 0x1444 <chEvtBroadcastFlagsI+0x3e>
  /*lint -restore*/
    elp->flags |= flags;
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	81 2b       	or	r24, r17
    1424:	8d 83       	std	Y+5, r24	; 0x05
    /* When flags == 0 the thread will always be signaled because the
       source does not emit any flag.*/
    if ((flags == (eventflags_t)0) ||
    1426:	11 23       	and	r17, r17
    1428:	19 f0       	breq	.+6      	; 0x1430 <chEvtBroadcastFlagsI+0x2a>
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	81 23       	and	r24, r17
    142e:	21 f0       	breq	.+8      	; 0x1438 <chEvtBroadcastFlagsI+0x32>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    1430:	6c 81       	ldd	r22, Y+4	; 0x04
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	9b 81       	ldd	r25, Y+3	; 0x03
    1436:	d1 df       	rcall	.-94     	; 0x13da <chEvtSignalI>
    }
    elp = elp->next;
    1438:	09 90       	ld	r0, Y+
    143a:	d8 81       	ld	r29, Y
    143c:	c0 2d       	mov	r28, r0
  chDbgCheckClassI();
  chDbgCheck(esp != NULL);

  elp = esp->next;
  /*lint -save -e9087 -e740 [11.3, 1.3] Cast required by list handling.*/
  while (elp != (event_listener_t *)esp) {
    143e:	ec 16       	cp	r14, r28
    1440:	fd 06       	cpc	r15, r29
    1442:	71 f7       	brne	.-36     	; 0x1420 <chEvtBroadcastFlagsI+0x1a>
        ((flags & elp->wflags) != (eventflags_t)0)) {
      chEvtSignalI(elp->listener, elp->events);
    }
    elp = elp->next;
  }
}
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	ff 90       	pop	r15
    144c:	ef 90       	pop	r14
    144e:	08 95       	ret

00001450 <__core_init>:
  chSysLock();
  p = chCoreAllocFromBaseI(size, align, offset);
  chSysUnlock();

  return p;
}
    1450:	ef e0       	ldi	r30, 0x0F	; 15
    1452:	f3 e0       	ldi	r31, 0x03	; 3
    1454:	87 ee       	ldi	r24, 0xE7	; 231
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	91 83       	std	Z+1, r25	; 0x01
    145a:	80 83       	st	Z, r24
    145c:	87 e6       	ldi	r24, 0x67	; 103
    145e:	92 e0       	ldi	r25, 0x02	; 2
    1460:	93 83       	std	Z+3, r25	; 0x03
    1462:	82 83       	std	Z+2, r24	; 0x02
    1464:	08 95       	ret

00001466 <chCoreAllocFromTop>:
 * @details Usually this function just disables interrupts but may perform more
 *          actions.
 */
static inline void port_lock(void) {

  asm volatile ("cli" : : : "memory");
    1466:	f8 94       	cli
  uint8_t *p, *prev;

  chDbgCheckClassI();
  chDbgCheck(MEM_IS_VALID_ALIGNMENT(align));

  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
    1468:	20 91 11 03 	lds	r18, 0x0311	; 0x800311 <ch_memcore+0x2>
    146c:	30 91 12 03 	lds	r19, 0x0312	; 0x800312 <ch_memcore+0x3>
    1470:	f9 01       	movw	r30, r18
    1472:	e8 1b       	sub	r30, r24
    1474:	f9 0b       	sbc	r31, r25
    1476:	71 95       	neg	r23
    1478:	61 95       	neg	r22
    147a:	71 09       	sbc	r23, r1
    147c:	6e 23       	and	r22, r30
    147e:	7f 23       	and	r23, r31
  prev = p - offset;
    1480:	cb 01       	movw	r24, r22
    1482:	84 1b       	sub	r24, r20
    1484:	95 0b       	sbc	r25, r21

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    1486:	40 91 0f 03 	lds	r20, 0x030F	; 0x80030f <ch_memcore>
    148a:	50 91 10 03 	lds	r21, 0x0310	; 0x800310 <ch_memcore+0x1>
    148e:	84 17       	cp	r24, r20
    1490:	95 07       	cpc	r25, r21
    1492:	50 f0       	brcs	.+20     	; 0x14a8 <chCoreAllocFromTop+0x42>
    1494:	28 17       	cp	r18, r24
    1496:	39 07       	cpc	r19, r25
    1498:	38 f0       	brcs	.+14     	; 0x14a8 <chCoreAllocFromTop+0x42>
    return NULL;
  }

  ch_memcore.topmem = prev;
    149a:	90 93 12 03 	sts	0x0312, r25	; 0x800312 <ch_memcore+0x3>
    149e:	80 93 11 03 	sts	0x0311, r24	; 0x800311 <ch_memcore+0x2>

  return p;
    14a2:	cb 01       	movw	r24, r22
 * @details Usually this function just enables interrupts but may perform more
 *          actions.
 */
static inline void port_unlock(void) {

  asm volatile ("sei" : : : "memory");
    14a4:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    14a6:	08 95       	ret
  p = (uint8_t *)MEM_ALIGN_PREV(ch_memcore.topmem - size, align);
  prev = p - offset;

  /* Considering also the case where there is numeric overflow.*/
  if ((prev < ch_memcore.basemem) || (prev > ch_memcore.topmem)) {
    return NULL;
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	90 e0       	ldi	r25, 0x00	; 0
    14ac:	78 94       	sei
  chSysLock();
  p = chCoreAllocFromTopI(size, align, offset);
  chSysUnlock();

  return p;
}
    14ae:	08 95       	ret

000014b0 <chCoreGetStatusX>:
 *
 * @xclass
 */
void chCoreGetStatusX(memory_area_t *map) {

  map->base = ch_memcore.basemem;
    14b0:	ef e0       	ldi	r30, 0x0F	; 15
    14b2:	f3 e0       	ldi	r31, 0x03	; 3
    14b4:	40 81       	ld	r20, Z
    14b6:	51 81       	ldd	r21, Z+1	; 0x01
    14b8:	dc 01       	movw	r26, r24
    14ba:	11 96       	adiw	r26, 0x01	; 1
    14bc:	5c 93       	st	X, r21
    14be:	4e 93       	st	-X, r20
  /*lint -save -e9033 [10.8] The cast is safe.*/
  map->size = (size_t)(ch_memcore.topmem - ch_memcore.basemem);
    14c0:	22 81       	ldd	r18, Z+2	; 0x02
    14c2:	33 81       	ldd	r19, Z+3	; 0x03
    14c4:	24 1b       	sub	r18, r20
    14c6:	35 0b       	sbc	r19, r21
    14c8:	13 96       	adiw	r26, 0x03	; 3
    14ca:	3c 93       	st	X, r19
    14cc:	2e 93       	st	-X, r18
    14ce:	12 97       	sbiw	r26, 0x02	; 2
    14d0:	08 95       	ret

000014d2 <__heap_init>:
/**
 * @brief   Initializes the default heap.
 *
 * @notapi
 */
void __heap_init(void) {
    14d2:	cf 93       	push	r28
    14d4:	df 93       	push	r29

  default_heap.provider = chCoreAllocAlignedWithOffset;
    14d6:	c7 e6       	ldi	r28, 0x67	; 103
    14d8:	d2 e0       	ldi	r29, 0x02	; 2
    14da:	83 e3       	ldi	r24, 0x33	; 51
    14dc:	9a e0       	ldi	r25, 0x0A	; 10
    14de:	99 83       	std	Y+1, r25	; 0x01
    14e0:	88 83       	st	Y, r24
  chCoreGetStatusX(&default_heap.area);
    14e2:	89 e6       	ldi	r24, 0x69	; 105
    14e4:	92 e0       	ldi	r25, 0x02	; 2
    14e6:	e4 df       	rcall	.-56     	; 0x14b0 <chCoreGetStatusX>
  H_FREE_NEXT(&default_heap.header) = NULL;
    14e8:	1f 82       	std	Y+7, r1	; 0x07
    14ea:	1e 82       	std	Y+6, r1	; 0x06
  H_FREE_PAGES(&default_heap.header) = 0;
    14ec:	19 86       	std	Y+9, r1	; 0x09
    14ee:	18 86       	std	Y+8, r1	; 0x08
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
    14f0:	81 e7       	ldi	r24, 0x71	; 113
    14f2:	92 e0       	ldi	r25, 0x02	; 2
#else
  chSemObjectInit(&default_heap.sem, (cnt_t)1);
#endif
}
    14f4:	df 91       	pop	r29
  default_heap.provider = chCoreAllocAlignedWithOffset;
  chCoreGetStatusX(&default_heap.area);
  H_FREE_NEXT(&default_heap.header) = NULL;
  H_FREE_PAGES(&default_heap.header) = 0;
#if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  chMtxObjectInit(&default_heap.mtx);
    14f6:	cf 91       	pop	r28
    14f8:	64 cf       	rjmp	.-312    	; 0x13c2 <chMtxObjectInit>

000014fa <_port_switch>:
void _port_switch(thread_t *ntp, thread_t *otp) {

  (void)ntp;
  (void)otp;

  asm volatile ("push    r2");
    14fa:	2f 92       	push	r2
  asm volatile ("push    r3");
    14fc:	3f 92       	push	r3
  asm volatile ("push    r4");
    14fe:	4f 92       	push	r4
  asm volatile ("push    r5");
    1500:	5f 92       	push	r5
  asm volatile ("push    r6");
    1502:	6f 92       	push	r6
  asm volatile ("push    r7");
    1504:	7f 92       	push	r7
  asm volatile ("push    r8");
    1506:	8f 92       	push	r8
  asm volatile ("push    r9");
    1508:	9f 92       	push	r9
  asm volatile ("push    r10");
    150a:	af 92       	push	r10
  asm volatile ("push    r11");
    150c:	bf 92       	push	r11
  asm volatile ("push    r12");
    150e:	cf 92       	push	r12
  asm volatile ("push    r13");
    1510:	df 92       	push	r13
  asm volatile ("push    r14");
    1512:	ef 92       	push	r14
  asm volatile ("push    r15");
    1514:	ff 92       	push	r15
  asm volatile ("push    r16");
    1516:	0f 93       	push	r16
  asm volatile ("push    r17");
    1518:	1f 93       	push	r17
  asm volatile ("push    r28");
    151a:	cf 93       	push	r28
  asm volatile ("push    r29");
    151c:	df 93       	push	r29

#if defined(__CHIBIOS_RT__)
  asm volatile ("movw    r30, r22");
    151e:	fb 01       	movw	r30, r22
  asm volatile ("in      r0, 0x3d");
    1520:	0d b6       	in	r0, 0x3d	; 61
  asm volatile ("std     Z+5, r0");
    1522:	05 82       	std	Z+5, r0	; 0x05
  asm volatile ("in      r0, 0x3e");
    1524:	0e b6       	in	r0, 0x3e	; 62
  asm volatile ("std     Z+6, r0");
    1526:	06 82       	std	Z+6, r0	; 0x06

  asm volatile ("movw    r30, r24");
    1528:	fc 01       	movw	r30, r24
  asm volatile ("ldd     r0, Z+5");
    152a:	05 80       	ldd	r0, Z+5	; 0x05
  asm volatile ("out     0x3d, r0");
    152c:	0d be       	out	0x3d, r0	; 61
  asm volatile ("ldd     r0, Z+6");
    152e:	06 80       	ldd	r0, Z+6	; 0x06
  asm volatile ("out     0x3e, r0");
    1530:	0e be       	out	0x3e, r0	; 62
  asm volatile ("out     0x3d, r0");
  asm volatile ("ldd     r0, Z+1");
  asm volatile ("out     0x3e, r0");
#endif

  asm volatile ("pop     r29");
    1532:	df 91       	pop	r29
  asm volatile ("pop     r28");
    1534:	cf 91       	pop	r28
  asm volatile ("pop     r17");
    1536:	1f 91       	pop	r17
  asm volatile ("pop     r16");
    1538:	0f 91       	pop	r16
  asm volatile ("pop     r15");
    153a:	ff 90       	pop	r15
  asm volatile ("pop     r14");
    153c:	ef 90       	pop	r14
  asm volatile ("pop     r13");
    153e:	df 90       	pop	r13
  asm volatile ("pop     r12");
    1540:	cf 90       	pop	r12
  asm volatile ("pop     r11");
    1542:	bf 90       	pop	r11
  asm volatile ("pop     r10");
    1544:	af 90       	pop	r10
  asm volatile ("pop     r9");
    1546:	9f 90       	pop	r9
  asm volatile ("pop     r8");
    1548:	8f 90       	pop	r8
  asm volatile ("pop     r7");
    154a:	7f 90       	pop	r7
  asm volatile ("pop     r6");
    154c:	6f 90       	pop	r6
  asm volatile ("pop     r5");
    154e:	5f 90       	pop	r5
  asm volatile ("pop     r4");
    1550:	4f 90       	pop	r4
  asm volatile ("pop     r3");
    1552:	3f 90       	pop	r3
  asm volatile ("pop     r2");
    1554:	2f 90       	pop	r2
  asm volatile ("ret");
    1556:	08 95       	ret

00001558 <_port_thread_start>:
    1558:	78 94       	sei
 *          invoked.
 */
void _port_thread_start(void) {

  chSysUnlock();
  asm volatile ("movw    r24, r4");
    155a:	c2 01       	movw	r24, r4
  asm volatile ("movw    r30, r2");
    155c:	f1 01       	movw	r30, r2
  asm volatile ("icall");
    155e:	09 95       	icall
  asm volatile ("call    chThdExit");  /* Used for avr5 Architecture. */
    1560:	ec ce       	rjmp	.-552    	; 0x133a <chThdExit>

00001562 <main>:
                                              {PWM_OUTPUT_ACTIVE_LOW,0}}
}; 


int main(void) {
  halInit();
    1562:	0e 94 63 00 	call	0xc6	; 0xc6 <halInit>
  chSysInit();
    1566:	a5 db       	rcall	.-2230   	; 0xcb2 <chSysInit>
  DDRB |= (1 << DDB1); // Ou DDRB |= (1 << PB5)           // Configurando os pinos como saída
    1568:	21 9a       	sbi	0x04, 1	; 4
  PORTB |= (1 << PB1); // Definindo os pinos como nível lógico alto 
    156a:	29 9a       	sbi	0x05, 1	; 5

  //palSetPadMode(IOPORT2, 1, PAL_MODE_OUTPUT_PUSHPULL);
  //palWritePad(IOPORT2, 1, PAL_HIGH);
  pwmStart(&PWMD1,&driver_config);
    156c:	60 e0       	ldi	r22, 0x00	; 0
    156e:	71 e0       	ldi	r23, 0x01	; 1
    1570:	89 e7       	ldi	r24, 0x79	; 121
    1572:	92 e0       	ldi	r25, 0x02	; 2
    1574:	2e d8       	rcall	.-4004   	; 0x5d2 <pwmStart>
  pwmEnableChannel(&PWMD1, 0, PWM_PERCENTAGE_TO_WIDTH(&PWMD1, 5000));
    1576:	40 91 7c 02 	lds	r20, 0x027C	; 0x80027c <PWMD1+0x3>
    157a:	50 91 7d 02 	lds	r21, 0x027D	; 0x80027d <PWMD1+0x4>
    157e:	88 e8       	ldi	r24, 0x88	; 136
    1580:	93 e1       	ldi	r25, 0x13	; 19
    1582:	48 9f       	mul	r20, r24
    1584:	90 01       	movw	r18, r0
    1586:	49 9f       	mul	r20, r25
    1588:	30 0d       	add	r19, r0
    158a:	58 9f       	mul	r21, r24
    158c:	30 0d       	add	r19, r0
    158e:	11 24       	eor	r1, r1
    1590:	32 95       	swap	r19
    1592:	22 95       	swap	r18
    1594:	2f 70       	andi	r18, 0x0F	; 15
    1596:	23 27       	eor	r18, r19
    1598:	3f 70       	andi	r19, 0x0F	; 15
    159a:	23 27       	eor	r18, r19
    159c:	a7 e4       	ldi	r26, 0x47	; 71
    159e:	b3 e0       	ldi	r27, 0x03	; 3
    15a0:	e3 d2       	rcall	.+1478   	; 0x1b68 <__umulhisi3>
    15a2:	ac 01       	movw	r20, r24
    15a4:	56 95       	lsr	r21
    15a6:	47 95       	ror	r20
    15a8:	56 95       	lsr	r21
    15aa:	47 95       	ror	r20
    15ac:	56 95       	lsr	r21
    15ae:	47 95       	ror	r20
    15b0:	60 e0       	ldi	r22, 0x00	; 0
    15b2:	89 e7       	ldi	r24, 0x79	; 121
    15b4:	92 e0       	ldi	r25, 0x02	; 2
    15b6:	23 d8       	rcall	.-4026   	; 0x5fe <pwmEnableChannel>

  while (true) {
    chThdSleepMilliseconds(1000);
    15b8:	88 e0       	ldi	r24, 0x08	; 8
    15ba:	9d e3       	ldi	r25, 0x3D	; 61
    15bc:	c0 de       	rcall	.-640    	; 0x133e <chThdSleep>
    15be:	fc cf       	rjmp	.-8      	; 0x15b8 <main+0x56>

000015c0 <vfprintf>:
    15c0:	ab e0       	ldi	r26, 0x0B	; 11
    15c2:	b0 e0       	ldi	r27, 0x00	; 0
    15c4:	e5 ee       	ldi	r30, 0xE5	; 229
    15c6:	fa e0       	ldi	r31, 0x0A	; 10
    15c8:	e2 c2       	rjmp	.+1476   	; 0x1b8e <__prologue_saves__+0x8>
    15ca:	6c 01       	movw	r12, r24
    15cc:	7b 01       	movw	r14, r22
    15ce:	3a 01       	movw	r6, r20
    15d0:	fc 01       	movw	r30, r24
    15d2:	17 82       	std	Z+7, r1	; 0x07
    15d4:	16 82       	std	Z+6, r1	; 0x06
    15d6:	83 81       	ldd	r24, Z+3	; 0x03
    15d8:	81 ff       	sbrs	r24, 1
    15da:	f9 c0       	rjmp	.+498    	; 0x17ce <vfprintf+0x20e>
    15dc:	ce 01       	movw	r24, r28
    15de:	01 96       	adiw	r24, 0x01	; 1
    15e0:	4c 01       	movw	r8, r24
    15e2:	f6 01       	movw	r30, r12
    15e4:	b3 80       	ldd	r11, Z+3	; 0x03
    15e6:	f7 01       	movw	r30, r14
    15e8:	b3 fc       	sbrc	r11, 3
    15ea:	05 91       	lpm	r16, Z+
    15ec:	b3 fe       	sbrs	r11, 3
    15ee:	01 91       	ld	r16, Z+
    15f0:	7f 01       	movw	r14, r30
    15f2:	00 23       	and	r16, r16
    15f4:	09 f4       	brne	.+2      	; 0x15f8 <vfprintf+0x38>
    15f6:	e7 c0       	rjmp	.+462    	; 0x17c6 <vfprintf+0x206>
    15f8:	05 32       	cpi	r16, 0x25	; 37
    15fa:	49 f4       	brne	.+18     	; 0x160e <vfprintf+0x4e>
    15fc:	b3 fc       	sbrc	r11, 3
    15fe:	05 91       	lpm	r16, Z+
    1600:	b3 fe       	sbrs	r11, 3
    1602:	01 91       	ld	r16, Z+
    1604:	7f 01       	movw	r14, r30
    1606:	05 32       	cpi	r16, 0x25	; 37
    1608:	11 f0       	breq	.+4      	; 0x160e <vfprintf+0x4e>
    160a:	10 e0       	ldi	r17, 0x00	; 0
    160c:	17 c0       	rjmp	.+46     	; 0x163c <vfprintf+0x7c>
    160e:	b6 01       	movw	r22, r12
    1610:	80 2f       	mov	r24, r16
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	49 d3       	rcall	.+1682   	; 0x1ca8 <fputc>
    1616:	53 01       	movw	r10, r6
    1618:	35 01       	movw	r6, r10
    161a:	e3 cf       	rjmp	.-58     	; 0x15e2 <vfprintf+0x22>
    161c:	00 23       	and	r16, r16
    161e:	09 f4       	brne	.+2      	; 0x1622 <vfprintf+0x62>
    1620:	d2 c0       	rjmp	.+420    	; 0x17c6 <vfprintf+0x206>
    1622:	60 2f       	mov	r22, r16
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	8f e6       	ldi	r24, 0x6F	; 111
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	ec d2       	rcall	.+1496   	; 0x1c04 <strchr_P>
    162c:	89 2b       	or	r24, r25
    162e:	49 f0       	breq	.+18     	; 0x1642 <vfprintf+0x82>
    1630:	f7 01       	movw	r30, r14
    1632:	b3 fc       	sbrc	r11, 3
    1634:	05 91       	lpm	r16, Z+
    1636:	b3 fe       	sbrs	r11, 3
    1638:	01 91       	ld	r16, Z+
    163a:	7f 01       	movw	r14, r30
    163c:	17 ff       	sbrs	r17, 7
    163e:	ee cf       	rjmp	.-36     	; 0x161c <vfprintf+0x5c>
    1640:	04 c0       	rjmp	.+8      	; 0x164a <vfprintf+0x8a>
    1642:	03 32       	cpi	r16, 0x23	; 35
    1644:	39 f0       	breq	.+14     	; 0x1654 <vfprintf+0x94>
    1646:	0c 36       	cpi	r16, 0x6C	; 108
    1648:	19 f0       	breq	.+6      	; 0x1650 <vfprintf+0x90>
    164a:	01 11       	cpse	r16, r1
    164c:	05 c0       	rjmp	.+10     	; 0x1658 <vfprintf+0x98>
    164e:	bb c0       	rjmp	.+374    	; 0x17c6 <vfprintf+0x206>
    1650:	10 68       	ori	r17, 0x80	; 128
    1652:	ee cf       	rjmp	.-36     	; 0x1630 <vfprintf+0x70>
    1654:	10 e1       	ldi	r17, 0x10	; 16
    1656:	ec cf       	rjmp	.-40     	; 0x1630 <vfprintf+0x70>
    1658:	60 2f       	mov	r22, r16
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	88 e6       	ldi	r24, 0x68	; 104
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	d1 d2       	rcall	.+1442   	; 0x1c04 <strchr_P>
    1662:	89 2b       	or	r24, r25
    1664:	41 f0       	breq	.+16     	; 0x1676 <vfprintf+0xb6>
    1666:	53 01       	movw	r10, r6
    1668:	f4 e0       	ldi	r31, 0x04	; 4
    166a:	af 0e       	add	r10, r31
    166c:	b1 1c       	adc	r11, r1
    166e:	b6 01       	movw	r22, r12
    1670:	8f e3       	ldi	r24, 0x3F	; 63
    1672:	90 e0       	ldi	r25, 0x00	; 0
    1674:	10 c0       	rjmp	.+32     	; 0x1696 <vfprintf+0xd6>
    1676:	03 36       	cpi	r16, 0x63	; 99
    1678:	31 f0       	breq	.+12     	; 0x1686 <vfprintf+0xc6>
    167a:	03 37       	cpi	r16, 0x73	; 115
    167c:	71 f0       	breq	.+28     	; 0x169a <vfprintf+0xda>
    167e:	03 35       	cpi	r16, 0x53	; 83
    1680:	01 f5       	brne	.+64     	; 0x16c2 <vfprintf+0x102>
    1682:	11 60       	ori	r17, 0x01	; 1
    1684:	0a c0       	rjmp	.+20     	; 0x169a <vfprintf+0xda>
    1686:	53 01       	movw	r10, r6
    1688:	82 e0       	ldi	r24, 0x02	; 2
    168a:	a8 0e       	add	r10, r24
    168c:	b1 1c       	adc	r11, r1
    168e:	b6 01       	movw	r22, r12
    1690:	f3 01       	movw	r30, r6
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	08 d3       	rcall	.+1552   	; 0x1ca8 <fputc>
    1698:	bf cf       	rjmp	.-130    	; 0x1618 <vfprintf+0x58>
    169a:	53 01       	movw	r10, r6
    169c:	f2 e0       	ldi	r31, 0x02	; 2
    169e:	af 0e       	add	r10, r31
    16a0:	b1 1c       	adc	r11, r1
    16a2:	f3 01       	movw	r30, r6
    16a4:	60 80       	ld	r6, Z
    16a6:	71 80       	ldd	r7, Z+1	; 0x01
    16a8:	f3 01       	movw	r30, r6
    16aa:	10 fd       	sbrc	r17, 0
    16ac:	85 91       	lpm	r24, Z+
    16ae:	10 ff       	sbrs	r17, 0
    16b0:	81 91       	ld	r24, Z+
    16b2:	3f 01       	movw	r6, r30
    16b4:	88 23       	and	r24, r24
    16b6:	09 f4       	brne	.+2      	; 0x16ba <vfprintf+0xfa>
    16b8:	af cf       	rjmp	.-162    	; 0x1618 <vfprintf+0x58>
    16ba:	b6 01       	movw	r22, r12
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	f4 d2       	rcall	.+1512   	; 0x1ca8 <fputc>
    16c0:	f3 cf       	rjmp	.-26     	; 0x16a8 <vfprintf+0xe8>
    16c2:	04 36       	cpi	r16, 0x64	; 100
    16c4:	11 f0       	breq	.+4      	; 0x16ca <vfprintf+0x10a>
    16c6:	09 36       	cpi	r16, 0x69	; 105
    16c8:	21 f5       	brne	.+72     	; 0x1712 <vfprintf+0x152>
    16ca:	53 01       	movw	r10, r6
    16cc:	17 ff       	sbrs	r17, 7
    16ce:	09 c0       	rjmp	.+18     	; 0x16e2 <vfprintf+0x122>
    16d0:	f4 e0       	ldi	r31, 0x04	; 4
    16d2:	af 0e       	add	r10, r31
    16d4:	b1 1c       	adc	r11, r1
    16d6:	f3 01       	movw	r30, r6
    16d8:	60 81       	ld	r22, Z
    16da:	71 81       	ldd	r23, Z+1	; 0x01
    16dc:	82 81       	ldd	r24, Z+2	; 0x02
    16de:	93 81       	ldd	r25, Z+3	; 0x03
    16e0:	0a c0       	rjmp	.+20     	; 0x16f6 <vfprintf+0x136>
    16e2:	f2 e0       	ldi	r31, 0x02	; 2
    16e4:	af 0e       	add	r10, r31
    16e6:	b1 1c       	adc	r11, r1
    16e8:	f3 01       	movw	r30, r6
    16ea:	60 81       	ld	r22, Z
    16ec:	71 81       	ldd	r23, Z+1	; 0x01
    16ee:	07 2e       	mov	r0, r23
    16f0:	00 0c       	add	r0, r0
    16f2:	88 0b       	sbc	r24, r24
    16f4:	99 0b       	sbc	r25, r25
    16f6:	1f 7e       	andi	r17, 0xEF	; 239
    16f8:	97 ff       	sbrs	r25, 7
    16fa:	08 c0       	rjmp	.+16     	; 0x170c <vfprintf+0x14c>
    16fc:	90 95       	com	r25
    16fe:	80 95       	com	r24
    1700:	70 95       	com	r23
    1702:	61 95       	neg	r22
    1704:	7f 4f       	sbci	r23, 0xFF	; 255
    1706:	8f 4f       	sbci	r24, 0xFF	; 255
    1708:	9f 4f       	sbci	r25, 0xFF	; 255
    170a:	10 64       	ori	r17, 0x40	; 64
    170c:	2a e0       	ldi	r18, 0x0A	; 10
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	30 c0       	rjmp	.+96     	; 0x1772 <vfprintf+0x1b2>
    1712:	00 37       	cpi	r16, 0x70	; 112
    1714:	91 f0       	breq	.+36     	; 0x173a <vfprintf+0x17a>
    1716:	40 f4       	brcc	.+16     	; 0x1728 <vfprintf+0x168>
    1718:	08 35       	cpi	r16, 0x58	; 88
    171a:	a1 f0       	breq	.+40     	; 0x1744 <vfprintf+0x184>
    171c:	0f 36       	cpi	r16, 0x6F	; 111
    171e:	09 f0       	breq	.+2      	; 0x1722 <vfprintf+0x162>
    1720:	52 c0       	rjmp	.+164    	; 0x17c6 <vfprintf+0x206>
    1722:	28 e0       	ldi	r18, 0x08	; 8
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	11 c0       	rjmp	.+34     	; 0x174a <vfprintf+0x18a>
    1728:	05 37       	cpi	r16, 0x75	; 117
    172a:	19 f0       	breq	.+6      	; 0x1732 <vfprintf+0x172>
    172c:	08 37       	cpi	r16, 0x78	; 120
    172e:	31 f0       	breq	.+12     	; 0x173c <vfprintf+0x17c>
    1730:	4a c0       	rjmp	.+148    	; 0x17c6 <vfprintf+0x206>
    1732:	1f 7e       	andi	r17, 0xEF	; 239
    1734:	2a e0       	ldi	r18, 0x0A	; 10
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	08 c0       	rjmp	.+16     	; 0x174a <vfprintf+0x18a>
    173a:	10 61       	ori	r17, 0x10	; 16
    173c:	14 62       	ori	r17, 0x24	; 36
    173e:	20 e1       	ldi	r18, 0x10	; 16
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	03 c0       	rjmp	.+6      	; 0x174a <vfprintf+0x18a>
    1744:	14 60       	ori	r17, 0x04	; 4
    1746:	20 e1       	ldi	r18, 0x10	; 16
    1748:	32 e0       	ldi	r19, 0x02	; 2
    174a:	53 01       	movw	r10, r6
    174c:	17 ff       	sbrs	r17, 7
    174e:	09 c0       	rjmp	.+18     	; 0x1762 <vfprintf+0x1a2>
    1750:	f4 e0       	ldi	r31, 0x04	; 4
    1752:	af 0e       	add	r10, r31
    1754:	b1 1c       	adc	r11, r1
    1756:	f3 01       	movw	r30, r6
    1758:	60 81       	ld	r22, Z
    175a:	71 81       	ldd	r23, Z+1	; 0x01
    175c:	82 81       	ldd	r24, Z+2	; 0x02
    175e:	93 81       	ldd	r25, Z+3	; 0x03
    1760:	08 c0       	rjmp	.+16     	; 0x1772 <vfprintf+0x1b2>
    1762:	f2 e0       	ldi	r31, 0x02	; 2
    1764:	af 0e       	add	r10, r31
    1766:	b1 1c       	adc	r11, r1
    1768:	f3 01       	movw	r30, r6
    176a:	60 81       	ld	r22, Z
    176c:	71 81       	ldd	r23, Z+1	; 0x01
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a4 01       	movw	r20, r8
    1774:	ee d2       	rcall	.+1500   	; 0x1d52 <__ultoa_invert>
    1776:	08 2f       	mov	r16, r24
    1778:	08 19       	sub	r16, r8
    177a:	16 ff       	sbrs	r17, 6
    177c:	04 c0       	rjmp	.+8      	; 0x1786 <vfprintf+0x1c6>
    177e:	b6 01       	movw	r22, r12
    1780:	8d e2       	ldi	r24, 0x2D	; 45
    1782:	90 e0       	ldi	r25, 0x00	; 0
    1784:	91 d2       	rcall	.+1314   	; 0x1ca8 <fputc>
    1786:	14 ff       	sbrs	r17, 4
    1788:	13 c0       	rjmp	.+38     	; 0x17b0 <vfprintf+0x1f0>
    178a:	fe 01       	movw	r30, r28
    178c:	e0 0f       	add	r30, r16
    178e:	f1 1d       	adc	r31, r1
    1790:	80 81       	ld	r24, Z
    1792:	80 33       	cpi	r24, 0x30	; 48
    1794:	69 f0       	breq	.+26     	; 0x17b0 <vfprintf+0x1f0>
    1796:	b6 01       	movw	r22, r12
    1798:	80 e3       	ldi	r24, 0x30	; 48
    179a:	90 e0       	ldi	r25, 0x00	; 0
    179c:	85 d2       	rcall	.+1290   	; 0x1ca8 <fputc>
    179e:	12 ff       	sbrs	r17, 2
    17a0:	07 c0       	rjmp	.+14     	; 0x17b0 <vfprintf+0x1f0>
    17a2:	10 72       	andi	r17, 0x20	; 32
    17a4:	81 2f       	mov	r24, r17
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	b6 01       	movw	r22, r12
    17aa:	88 5a       	subi	r24, 0xA8	; 168
    17ac:	9f 4f       	sbci	r25, 0xFF	; 255
    17ae:	7c d2       	rcall	.+1272   	; 0x1ca8 <fputc>
    17b0:	01 50       	subi	r16, 0x01	; 1
    17b2:	f4 01       	movw	r30, r8
    17b4:	e0 0f       	add	r30, r16
    17b6:	f1 1d       	adc	r31, r1
    17b8:	80 81       	ld	r24, Z
    17ba:	b6 01       	movw	r22, r12
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	74 d2       	rcall	.+1256   	; 0x1ca8 <fputc>
    17c0:	01 11       	cpse	r16, r1
    17c2:	f6 cf       	rjmp	.-20     	; 0x17b0 <vfprintf+0x1f0>
    17c4:	29 cf       	rjmp	.-430    	; 0x1618 <vfprintf+0x58>
    17c6:	f6 01       	movw	r30, r12
    17c8:	86 81       	ldd	r24, Z+6	; 0x06
    17ca:	97 81       	ldd	r25, Z+7	; 0x07
    17cc:	02 c0       	rjmp	.+4      	; 0x17d2 <vfprintf+0x212>
    17ce:	8f ef       	ldi	r24, 0xFF	; 255
    17d0:	9f ef       	ldi	r25, 0xFF	; 255
    17d2:	2b 96       	adiw	r28, 0x0b	; 11
    17d4:	ee e0       	ldi	r30, 0x0E	; 14
    17d6:	f7 c1       	rjmp	.+1006   	; 0x1bc6 <__epilogue_restores__+0x8>

000017d8 <putval>:
    17d8:	20 fd       	sbrc	r18, 0
    17da:	09 c0       	rjmp	.+18     	; 0x17ee <putval+0x16>
    17dc:	fc 01       	movw	r30, r24
    17de:	23 fd       	sbrc	r18, 3
    17e0:	05 c0       	rjmp	.+10     	; 0x17ec <putval+0x14>
    17e2:	22 ff       	sbrs	r18, 2
    17e4:	02 c0       	rjmp	.+4      	; 0x17ea <putval+0x12>
    17e6:	73 83       	std	Z+3, r23	; 0x03
    17e8:	62 83       	std	Z+2, r22	; 0x02
    17ea:	51 83       	std	Z+1, r21	; 0x01
    17ec:	40 83       	st	Z, r20
    17ee:	08 95       	ret

000017f0 <mulacc>:
    17f0:	44 fd       	sbrc	r20, 4
    17f2:	17 c0       	rjmp	.+46     	; 0x1822 <mulacc+0x32>
    17f4:	46 fd       	sbrc	r20, 6
    17f6:	17 c0       	rjmp	.+46     	; 0x1826 <mulacc+0x36>
    17f8:	ab 01       	movw	r20, r22
    17fa:	bc 01       	movw	r22, r24
    17fc:	da 01       	movw	r26, r20
    17fe:	fb 01       	movw	r30, r22
    1800:	aa 0f       	add	r26, r26
    1802:	bb 1f       	adc	r27, r27
    1804:	ee 1f       	adc	r30, r30
    1806:	ff 1f       	adc	r31, r31
    1808:	10 94       	com	r1
    180a:	d1 f7       	brne	.-12     	; 0x1800 <mulacc+0x10>
    180c:	4a 0f       	add	r20, r26
    180e:	5b 1f       	adc	r21, r27
    1810:	6e 1f       	adc	r22, r30
    1812:	7f 1f       	adc	r23, r31
    1814:	cb 01       	movw	r24, r22
    1816:	ba 01       	movw	r22, r20
    1818:	66 0f       	add	r22, r22
    181a:	77 1f       	adc	r23, r23
    181c:	88 1f       	adc	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	09 c0       	rjmp	.+18     	; 0x1834 <mulacc+0x44>
    1822:	33 e0       	ldi	r19, 0x03	; 3
    1824:	01 c0       	rjmp	.+2      	; 0x1828 <mulacc+0x38>
    1826:	34 e0       	ldi	r19, 0x04	; 4
    1828:	66 0f       	add	r22, r22
    182a:	77 1f       	adc	r23, r23
    182c:	88 1f       	adc	r24, r24
    182e:	99 1f       	adc	r25, r25
    1830:	31 50       	subi	r19, 0x01	; 1
    1832:	d1 f7       	brne	.-12     	; 0x1828 <mulacc+0x38>
    1834:	62 0f       	add	r22, r18
    1836:	71 1d       	adc	r23, r1
    1838:	81 1d       	adc	r24, r1
    183a:	91 1d       	adc	r25, r1
    183c:	08 95       	ret

0000183e <skip_spaces>:
    183e:	0f 93       	push	r16
    1840:	1f 93       	push	r17
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	8c 01       	movw	r16, r24
    1848:	c8 01       	movw	r24, r16
    184a:	f0 d1       	rcall	.+992    	; 0x1c2c <fgetc>
    184c:	ec 01       	movw	r28, r24
    184e:	97 fd       	sbrc	r25, 7
    1850:	06 c0       	rjmp	.+12     	; 0x185e <skip_spaces+0x20>
    1852:	d0 d1       	rcall	.+928    	; 0x1bf4 <isspace>
    1854:	89 2b       	or	r24, r25
    1856:	c1 f7       	brne	.-16     	; 0x1848 <skip_spaces+0xa>
    1858:	b8 01       	movw	r22, r16
    185a:	ce 01       	movw	r24, r28
    185c:	61 d2       	rcall	.+1218   	; 0x1d20 <ungetc>
    185e:	ce 01       	movw	r24, r28
    1860:	df 91       	pop	r29
    1862:	cf 91       	pop	r28
    1864:	1f 91       	pop	r17
    1866:	0f 91       	pop	r16
    1868:	08 95       	ret

0000186a <conv_int>:
    186a:	8f 92       	push	r8
    186c:	9f 92       	push	r9
    186e:	af 92       	push	r10
    1870:	bf 92       	push	r11
    1872:	ef 92       	push	r14
    1874:	ff 92       	push	r15
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
    187e:	8c 01       	movw	r16, r24
    1880:	d6 2f       	mov	r29, r22
    1882:	7a 01       	movw	r14, r20
    1884:	b2 2e       	mov	r11, r18
    1886:	d2 d1       	rcall	.+932    	; 0x1c2c <fgetc>
    1888:	9c 01       	movw	r18, r24
    188a:	33 27       	eor	r19, r19
    188c:	2b 32       	cpi	r18, 0x2B	; 43
    188e:	31 05       	cpc	r19, r1
    1890:	31 f0       	breq	.+12     	; 0x189e <conv_int+0x34>
    1892:	2d 32       	cpi	r18, 0x2D	; 45
    1894:	31 05       	cpc	r19, r1
    1896:	59 f4       	brne	.+22     	; 0x18ae <conv_int+0x44>
    1898:	8b 2d       	mov	r24, r11
    189a:	80 68       	ori	r24, 0x80	; 128
    189c:	b8 2e       	mov	r11, r24
    189e:	d1 50       	subi	r29, 0x01	; 1
    18a0:	11 f4       	brne	.+4      	; 0x18a6 <conv_int+0x3c>
    18a2:	80 e0       	ldi	r24, 0x00	; 0
    18a4:	61 c0       	rjmp	.+194    	; 0x1968 <conv_int+0xfe>
    18a6:	c8 01       	movw	r24, r16
    18a8:	c1 d1       	rcall	.+898    	; 0x1c2c <fgetc>
    18aa:	97 fd       	sbrc	r25, 7
    18ac:	fa cf       	rjmp	.-12     	; 0x18a2 <conv_int+0x38>
    18ae:	cb 2d       	mov	r28, r11
    18b0:	cd 7f       	andi	r28, 0xFD	; 253
    18b2:	2b 2d       	mov	r18, r11
    18b4:	20 73       	andi	r18, 0x30	; 48
    18b6:	f9 f4       	brne	.+62     	; 0x18f6 <conv_int+0x8c>
    18b8:	80 33       	cpi	r24, 0x30	; 48
    18ba:	e9 f4       	brne	.+58     	; 0x18f6 <conv_int+0x8c>
    18bc:	aa 24       	eor	r10, r10
    18be:	aa 94       	dec	r10
    18c0:	ad 0e       	add	r10, r29
    18c2:	09 f4       	brne	.+2      	; 0x18c6 <conv_int+0x5c>
    18c4:	3e c0       	rjmp	.+124    	; 0x1942 <conv_int+0xd8>
    18c6:	c8 01       	movw	r24, r16
    18c8:	b1 d1       	rcall	.+866    	; 0x1c2c <fgetc>
    18ca:	97 fd       	sbrc	r25, 7
    18cc:	3a c0       	rjmp	.+116    	; 0x1942 <conv_int+0xd8>
    18ce:	9c 01       	movw	r18, r24
    18d0:	2f 7d       	andi	r18, 0xDF	; 223
    18d2:	33 27       	eor	r19, r19
    18d4:	28 35       	cpi	r18, 0x58	; 88
    18d6:	31 05       	cpc	r19, r1
    18d8:	41 f4       	brne	.+16     	; 0x18ea <conv_int+0x80>
    18da:	c2 64       	ori	r28, 0x42	; 66
    18dc:	d2 50       	subi	r29, 0x02	; 2
    18de:	89 f1       	breq	.+98     	; 0x1942 <conv_int+0xd8>
    18e0:	c8 01       	movw	r24, r16
    18e2:	a4 d1       	rcall	.+840    	; 0x1c2c <fgetc>
    18e4:	97 ff       	sbrs	r25, 7
    18e6:	07 c0       	rjmp	.+14     	; 0x18f6 <conv_int+0x8c>
    18e8:	2c c0       	rjmp	.+88     	; 0x1942 <conv_int+0xd8>
    18ea:	b6 fe       	sbrs	r11, 6
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <conv_int+0x88>
    18ee:	c2 60       	ori	r28, 0x02	; 2
    18f0:	01 c0       	rjmp	.+2      	; 0x18f4 <conv_int+0x8a>
    18f2:	c2 61       	ori	r28, 0x12	; 18
    18f4:	da 2d       	mov	r29, r10
    18f6:	81 2c       	mov	r8, r1
    18f8:	91 2c       	mov	r9, r1
    18fa:	54 01       	movw	r10, r8
    18fc:	20 ed       	ldi	r18, 0xD0	; 208
    18fe:	28 0f       	add	r18, r24
    1900:	28 30       	cpi	r18, 0x08	; 8
    1902:	78 f0       	brcs	.+30     	; 0x1922 <conv_int+0xb8>
    1904:	c4 ff       	sbrs	r28, 4
    1906:	03 c0       	rjmp	.+6      	; 0x190e <conv_int+0xa4>
    1908:	b8 01       	movw	r22, r16
    190a:	0a d2       	rcall	.+1044   	; 0x1d20 <ungetc>
    190c:	17 c0       	rjmp	.+46     	; 0x193c <conv_int+0xd2>
    190e:	2a 30       	cpi	r18, 0x0A	; 10
    1910:	40 f0       	brcs	.+16     	; 0x1922 <conv_int+0xb8>
    1912:	c6 ff       	sbrs	r28, 6
    1914:	f9 cf       	rjmp	.-14     	; 0x1908 <conv_int+0x9e>
    1916:	2f 7d       	andi	r18, 0xDF	; 223
    1918:	3f ee       	ldi	r19, 0xEF	; 239
    191a:	32 0f       	add	r19, r18
    191c:	36 30       	cpi	r19, 0x06	; 6
    191e:	a0 f7       	brcc	.-24     	; 0x1908 <conv_int+0x9e>
    1920:	27 50       	subi	r18, 0x07	; 7
    1922:	4c 2f       	mov	r20, r28
    1924:	c5 01       	movw	r24, r10
    1926:	b4 01       	movw	r22, r8
    1928:	63 df       	rcall	.-314    	; 0x17f0 <mulacc>
    192a:	4b 01       	movw	r8, r22
    192c:	5c 01       	movw	r10, r24
    192e:	c2 60       	ori	r28, 0x02	; 2
    1930:	d1 50       	subi	r29, 0x01	; 1
    1932:	51 f0       	breq	.+20     	; 0x1948 <conv_int+0xde>
    1934:	c8 01       	movw	r24, r16
    1936:	7a d1       	rcall	.+756    	; 0x1c2c <fgetc>
    1938:	97 ff       	sbrs	r25, 7
    193a:	e0 cf       	rjmp	.-64     	; 0x18fc <conv_int+0x92>
    193c:	c1 fd       	sbrc	r28, 1
    193e:	04 c0       	rjmp	.+8      	; 0x1948 <conv_int+0xde>
    1940:	b0 cf       	rjmp	.-160    	; 0x18a2 <conv_int+0x38>
    1942:	81 2c       	mov	r8, r1
    1944:	91 2c       	mov	r9, r1
    1946:	54 01       	movw	r10, r8
    1948:	c7 ff       	sbrs	r28, 7
    194a:	08 c0       	rjmp	.+16     	; 0x195c <conv_int+0xf2>
    194c:	b0 94       	com	r11
    194e:	a0 94       	com	r10
    1950:	90 94       	com	r9
    1952:	80 94       	com	r8
    1954:	81 1c       	adc	r8, r1
    1956:	91 1c       	adc	r9, r1
    1958:	a1 1c       	adc	r10, r1
    195a:	b1 1c       	adc	r11, r1
    195c:	2c 2f       	mov	r18, r28
    195e:	b5 01       	movw	r22, r10
    1960:	a4 01       	movw	r20, r8
    1962:	c7 01       	movw	r24, r14
    1964:	39 df       	rcall	.-398    	; 0x17d8 <putval>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	df 91       	pop	r29
    196a:	cf 91       	pop	r28
    196c:	1f 91       	pop	r17
    196e:	0f 91       	pop	r16
    1970:	ff 90       	pop	r15
    1972:	ef 90       	pop	r14
    1974:	bf 90       	pop	r11
    1976:	af 90       	pop	r10
    1978:	9f 90       	pop	r9
    197a:	8f 90       	pop	r8
    197c:	08 95       	ret

0000197e <vfscanf>:
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	e4 ec       	ldi	r30, 0xC4	; 196
    1984:	fc e0       	ldi	r31, 0x0C	; 12
    1986:	02 c1       	rjmp	.+516    	; 0x1b8c <__prologue_saves__+0x6>
    1988:	6c 01       	movw	r12, r24
    198a:	eb 01       	movw	r28, r22
    198c:	5a 01       	movw	r10, r20
    198e:	fc 01       	movw	r30, r24
    1990:	17 82       	std	Z+7, r1	; 0x07
    1992:	16 82       	std	Z+6, r1	; 0x06
    1994:	51 2c       	mov	r5, r1
    1996:	f6 01       	movw	r30, r12
    1998:	f3 80       	ldd	r15, Z+3	; 0x03
    199a:	fe 01       	movw	r30, r28
    199c:	f3 fc       	sbrc	r15, 3
    199e:	85 91       	lpm	r24, Z+
    19a0:	f3 fe       	sbrs	r15, 3
    19a2:	81 91       	ld	r24, Z+
    19a4:	18 2f       	mov	r17, r24
    19a6:	ef 01       	movw	r28, r30
    19a8:	88 23       	and	r24, r24
    19aa:	09 f4       	brne	.+2      	; 0x19ae <vfscanf+0x30>
    19ac:	d4 c0       	rjmp	.+424    	; 0x1b56 <vfscanf+0x1d8>
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	21 d1       	rcall	.+578    	; 0x1bf4 <isspace>
    19b2:	89 2b       	or	r24, r25
    19b4:	19 f0       	breq	.+6      	; 0x19bc <vfscanf+0x3e>
    19b6:	c6 01       	movw	r24, r12
    19b8:	42 df       	rcall	.-380    	; 0x183e <skip_spaces>
    19ba:	ed cf       	rjmp	.-38     	; 0x1996 <vfscanf+0x18>
    19bc:	15 32       	cpi	r17, 0x25	; 37
    19be:	41 f4       	brne	.+16     	; 0x19d0 <vfscanf+0x52>
    19c0:	fe 01       	movw	r30, r28
    19c2:	f3 fc       	sbrc	r15, 3
    19c4:	15 91       	lpm	r17, Z+
    19c6:	f3 fe       	sbrs	r15, 3
    19c8:	11 91       	ld	r17, Z+
    19ca:	ef 01       	movw	r28, r30
    19cc:	15 32       	cpi	r17, 0x25	; 37
    19ce:	71 f4       	brne	.+28     	; 0x19ec <vfscanf+0x6e>
    19d0:	c6 01       	movw	r24, r12
    19d2:	2c d1       	rcall	.+600    	; 0x1c2c <fgetc>
    19d4:	97 fd       	sbrc	r25, 7
    19d6:	bd c0       	rjmp	.+378    	; 0x1b52 <vfscanf+0x1d4>
    19d8:	41 2f       	mov	r20, r17
    19da:	50 e0       	ldi	r21, 0x00	; 0
    19dc:	9c 01       	movw	r18, r24
    19de:	33 27       	eor	r19, r19
    19e0:	24 17       	cp	r18, r20
    19e2:	35 07       	cpc	r19, r21
    19e4:	c1 f2       	breq	.-80     	; 0x1996 <vfscanf+0x18>
    19e6:	b6 01       	movw	r22, r12
    19e8:	9b d1       	rcall	.+822    	; 0x1d20 <ungetc>
    19ea:	b5 c0       	rjmp	.+362    	; 0x1b56 <vfscanf+0x1d8>
    19ec:	1a 32       	cpi	r17, 0x2A	; 42
    19ee:	39 f4       	brne	.+14     	; 0x19fe <vfscanf+0x80>
    19f0:	f3 fc       	sbrc	r15, 3
    19f2:	15 91       	lpm	r17, Z+
    19f4:	f3 fe       	sbrs	r15, 3
    19f6:	11 91       	ld	r17, Z+
    19f8:	ef 01       	movw	r28, r30
    19fa:	01 e0       	ldi	r16, 0x01	; 1
    19fc:	01 c0       	rjmp	.+2      	; 0x1a00 <vfscanf+0x82>
    19fe:	00 e0       	ldi	r16, 0x00	; 0
    1a00:	e1 2c       	mov	r14, r1
    1a02:	20 ed       	ldi	r18, 0xD0	; 208
    1a04:	21 0f       	add	r18, r17
    1a06:	2a 30       	cpi	r18, 0x0A	; 10
    1a08:	78 f4       	brcc	.+30     	; 0x1a28 <vfscanf+0xaa>
    1a0a:	02 60       	ori	r16, 0x02	; 2
    1a0c:	6e 2d       	mov	r22, r14
    1a0e:	70 e0       	ldi	r23, 0x00	; 0
    1a10:	80 e0       	ldi	r24, 0x00	; 0
    1a12:	90 e0       	ldi	r25, 0x00	; 0
    1a14:	40 e2       	ldi	r20, 0x20	; 32
    1a16:	ec de       	rcall	.-552    	; 0x17f0 <mulacc>
    1a18:	e6 2e       	mov	r14, r22
    1a1a:	fe 01       	movw	r30, r28
    1a1c:	f3 fc       	sbrc	r15, 3
    1a1e:	15 91       	lpm	r17, Z+
    1a20:	f3 fe       	sbrs	r15, 3
    1a22:	11 91       	ld	r17, Z+
    1a24:	ef 01       	movw	r28, r30
    1a26:	ed cf       	rjmp	.-38     	; 0x1a02 <vfscanf+0x84>
    1a28:	01 ff       	sbrs	r16, 1
    1a2a:	03 c0       	rjmp	.+6      	; 0x1a32 <vfscanf+0xb4>
    1a2c:	e1 10       	cpse	r14, r1
    1a2e:	03 c0       	rjmp	.+6      	; 0x1a36 <vfscanf+0xb8>
    1a30:	92 c0       	rjmp	.+292    	; 0x1b56 <vfscanf+0x1d8>
    1a32:	ee 24       	eor	r14, r14
    1a34:	ea 94       	dec	r14
    1a36:	18 36       	cpi	r17, 0x68	; 104
    1a38:	19 f0       	breq	.+6      	; 0x1a40 <vfscanf+0xc2>
    1a3a:	1c 36       	cpi	r17, 0x6C	; 108
    1a3c:	51 f0       	breq	.+20     	; 0x1a52 <vfscanf+0xd4>
    1a3e:	10 c0       	rjmp	.+32     	; 0x1a60 <vfscanf+0xe2>
    1a40:	fe 01       	movw	r30, r28
    1a42:	f3 fc       	sbrc	r15, 3
    1a44:	15 91       	lpm	r17, Z+
    1a46:	f3 fe       	sbrs	r15, 3
    1a48:	11 91       	ld	r17, Z+
    1a4a:	ef 01       	movw	r28, r30
    1a4c:	18 36       	cpi	r17, 0x68	; 104
    1a4e:	41 f4       	brne	.+16     	; 0x1a60 <vfscanf+0xe2>
    1a50:	08 60       	ori	r16, 0x08	; 8
    1a52:	04 60       	ori	r16, 0x04	; 4
    1a54:	fe 01       	movw	r30, r28
    1a56:	f3 fc       	sbrc	r15, 3
    1a58:	15 91       	lpm	r17, Z+
    1a5a:	f3 fe       	sbrs	r15, 3
    1a5c:	11 91       	ld	r17, Z+
    1a5e:	ef 01       	movw	r28, r30
    1a60:	11 23       	and	r17, r17
    1a62:	09 f4       	brne	.+2      	; 0x1a66 <vfscanf+0xe8>
    1a64:	78 c0       	rjmp	.+240    	; 0x1b56 <vfscanf+0x1d8>
    1a66:	61 2f       	mov	r22, r17
    1a68:	70 e0       	ldi	r23, 0x00	; 0
    1a6a:	8f e7       	ldi	r24, 0x7F	; 127
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	ca d0       	rcall	.+404    	; 0x1c04 <strchr_P>
    1a70:	89 2b       	or	r24, r25
    1a72:	09 f4       	brne	.+2      	; 0x1a76 <vfscanf+0xf8>
    1a74:	70 c0       	rjmp	.+224    	; 0x1b56 <vfscanf+0x1d8>
    1a76:	00 fd       	sbrc	r16, 0
    1a78:	07 c0       	rjmp	.+14     	; 0x1a88 <vfscanf+0x10a>
    1a7a:	f5 01       	movw	r30, r10
    1a7c:	80 80       	ld	r8, Z
    1a7e:	91 80       	ldd	r9, Z+1	; 0x01
    1a80:	c5 01       	movw	r24, r10
    1a82:	02 96       	adiw	r24, 0x02	; 2
    1a84:	5c 01       	movw	r10, r24
    1a86:	02 c0       	rjmp	.+4      	; 0x1a8c <vfscanf+0x10e>
    1a88:	81 2c       	mov	r8, r1
    1a8a:	91 2c       	mov	r9, r1
    1a8c:	1e 36       	cpi	r17, 0x6E	; 110
    1a8e:	49 f4       	brne	.+18     	; 0x1aa2 <vfscanf+0x124>
    1a90:	f6 01       	movw	r30, r12
    1a92:	46 81       	ldd	r20, Z+6	; 0x06
    1a94:	57 81       	ldd	r21, Z+7	; 0x07
    1a96:	60 e0       	ldi	r22, 0x00	; 0
    1a98:	70 e0       	ldi	r23, 0x00	; 0
    1a9a:	20 2f       	mov	r18, r16
    1a9c:	c4 01       	movw	r24, r8
    1a9e:	9c de       	rcall	.-712    	; 0x17d8 <putval>
    1aa0:	7a cf       	rjmp	.-268    	; 0x1996 <vfscanf+0x18>
    1aa2:	13 36       	cpi	r17, 0x63	; 99
    1aa4:	a1 f4       	brne	.+40     	; 0x1ace <vfscanf+0x150>
    1aa6:	01 fd       	sbrc	r16, 1
    1aa8:	02 c0       	rjmp	.+4      	; 0x1aae <vfscanf+0x130>
    1aaa:	ee 24       	eor	r14, r14
    1aac:	e3 94       	inc	r14
    1aae:	c6 01       	movw	r24, r12
    1ab0:	bd d0       	rcall	.+378    	; 0x1c2c <fgetc>
    1ab2:	97 fd       	sbrc	r25, 7
    1ab4:	4e c0       	rjmp	.+156    	; 0x1b52 <vfscanf+0x1d4>
    1ab6:	81 14       	cp	r8, r1
    1ab8:	91 04       	cpc	r9, r1
    1aba:	29 f0       	breq	.+10     	; 0x1ac6 <vfscanf+0x148>
    1abc:	f4 01       	movw	r30, r8
    1abe:	80 83       	st	Z, r24
    1ac0:	c4 01       	movw	r24, r8
    1ac2:	01 96       	adiw	r24, 0x01	; 1
    1ac4:	4c 01       	movw	r8, r24
    1ac6:	ea 94       	dec	r14
    1ac8:	e1 10       	cpse	r14, r1
    1aca:	f1 cf       	rjmp	.-30     	; 0x1aae <vfscanf+0x130>
    1acc:	3e c0       	rjmp	.+124    	; 0x1b4a <vfscanf+0x1cc>
    1ace:	c6 01       	movw	r24, r12
    1ad0:	b6 de       	rcall	.-660    	; 0x183e <skip_spaces>
    1ad2:	97 fd       	sbrc	r25, 7
    1ad4:	3e c0       	rjmp	.+124    	; 0x1b52 <vfscanf+0x1d4>
    1ad6:	1f 36       	cpi	r17, 0x6F	; 111
    1ad8:	49 f1       	breq	.+82     	; 0x1b2c <vfscanf+0x1ae>
    1ada:	28 f4       	brcc	.+10     	; 0x1ae6 <vfscanf+0x168>
    1adc:	14 36       	cpi	r17, 0x64	; 100
    1ade:	21 f1       	breq	.+72     	; 0x1b28 <vfscanf+0x1aa>
    1ae0:	19 36       	cpi	r17, 0x69	; 105
    1ae2:	39 f1       	breq	.+78     	; 0x1b32 <vfscanf+0x1b4>
    1ae4:	25 c0       	rjmp	.+74     	; 0x1b30 <vfscanf+0x1b2>
    1ae6:	13 37       	cpi	r17, 0x73	; 115
    1ae8:	71 f0       	breq	.+28     	; 0x1b06 <vfscanf+0x188>
    1aea:	15 37       	cpi	r17, 0x75	; 117
    1aec:	e9 f0       	breq	.+58     	; 0x1b28 <vfscanf+0x1aa>
    1aee:	20 c0       	rjmp	.+64     	; 0x1b30 <vfscanf+0x1b2>
    1af0:	81 14       	cp	r8, r1
    1af2:	91 04       	cpc	r9, r1
    1af4:	29 f0       	breq	.+10     	; 0x1b00 <vfscanf+0x182>
    1af6:	f4 01       	movw	r30, r8
    1af8:	60 82       	st	Z, r6
    1afa:	c4 01       	movw	r24, r8
    1afc:	01 96       	adiw	r24, 0x01	; 1
    1afe:	4c 01       	movw	r8, r24
    1b00:	ea 94       	dec	r14
    1b02:	ee 20       	and	r14, r14
    1b04:	59 f0       	breq	.+22     	; 0x1b1c <vfscanf+0x19e>
    1b06:	c6 01       	movw	r24, r12
    1b08:	91 d0       	rcall	.+290    	; 0x1c2c <fgetc>
    1b0a:	3c 01       	movw	r6, r24
    1b0c:	97 fd       	sbrc	r25, 7
    1b0e:	06 c0       	rjmp	.+12     	; 0x1b1c <vfscanf+0x19e>
    1b10:	71 d0       	rcall	.+226    	; 0x1bf4 <isspace>
    1b12:	89 2b       	or	r24, r25
    1b14:	69 f3       	breq	.-38     	; 0x1af0 <vfscanf+0x172>
    1b16:	b6 01       	movw	r22, r12
    1b18:	c3 01       	movw	r24, r6
    1b1a:	02 d1       	rcall	.+516    	; 0x1d20 <ungetc>
    1b1c:	81 14       	cp	r8, r1
    1b1e:	91 04       	cpc	r9, r1
    1b20:	a1 f0       	breq	.+40     	; 0x1b4a <vfscanf+0x1cc>
    1b22:	f4 01       	movw	r30, r8
    1b24:	10 82       	st	Z, r1
    1b26:	11 c0       	rjmp	.+34     	; 0x1b4a <vfscanf+0x1cc>
    1b28:	00 62       	ori	r16, 0x20	; 32
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <vfscanf+0x1b4>
    1b2c:	00 61       	ori	r16, 0x10	; 16
    1b2e:	01 c0       	rjmp	.+2      	; 0x1b32 <vfscanf+0x1b4>
    1b30:	00 64       	ori	r16, 0x40	; 64
    1b32:	20 2f       	mov	r18, r16
    1b34:	a4 01       	movw	r20, r8
    1b36:	6e 2d       	mov	r22, r14
    1b38:	c6 01       	movw	r24, r12
    1b3a:	97 de       	rcall	.-722    	; 0x186a <conv_int>
    1b3c:	81 11       	cpse	r24, r1
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <vfscanf+0x1cc>
    1b40:	f6 01       	movw	r30, r12
    1b42:	83 81       	ldd	r24, Z+3	; 0x03
    1b44:	80 73       	andi	r24, 0x30	; 48
    1b46:	29 f4       	brne	.+10     	; 0x1b52 <vfscanf+0x1d4>
    1b48:	06 c0       	rjmp	.+12     	; 0x1b56 <vfscanf+0x1d8>
    1b4a:	00 fd       	sbrc	r16, 0
    1b4c:	24 cf       	rjmp	.-440    	; 0x1996 <vfscanf+0x18>
    1b4e:	53 94       	inc	r5
    1b50:	22 cf       	rjmp	.-444    	; 0x1996 <vfscanf+0x18>
    1b52:	55 20       	and	r5, r5
    1b54:	19 f0       	breq	.+6      	; 0x1b5c <vfscanf+0x1de>
    1b56:	85 2d       	mov	r24, r5
    1b58:	90 e0       	ldi	r25, 0x00	; 0
    1b5a:	02 c0       	rjmp	.+4      	; 0x1b60 <vfscanf+0x1e2>
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	9f ef       	ldi	r25, 0xFF	; 255
    1b60:	cd b7       	in	r28, 0x3d	; 61
    1b62:	de b7       	in	r29, 0x3e	; 62
    1b64:	ef e0       	ldi	r30, 0x0F	; 15
    1b66:	2e c0       	rjmp	.+92     	; 0x1bc4 <__epilogue_restores__+0x6>

00001b68 <__umulhisi3>:
    1b68:	a2 9f       	mul	r26, r18
    1b6a:	b0 01       	movw	r22, r0
    1b6c:	b3 9f       	mul	r27, r19
    1b6e:	c0 01       	movw	r24, r0
    1b70:	a3 9f       	mul	r26, r19
    1b72:	70 0d       	add	r23, r0
    1b74:	81 1d       	adc	r24, r1
    1b76:	11 24       	eor	r1, r1
    1b78:	91 1d       	adc	r25, r1
    1b7a:	b2 9f       	mul	r27, r18
    1b7c:	70 0d       	add	r23, r0
    1b7e:	81 1d       	adc	r24, r1
    1b80:	11 24       	eor	r1, r1
    1b82:	91 1d       	adc	r25, r1
    1b84:	08 95       	ret

00001b86 <__prologue_saves__>:
    1b86:	2f 92       	push	r2
    1b88:	3f 92       	push	r3
    1b8a:	4f 92       	push	r4
    1b8c:	5f 92       	push	r5
    1b8e:	6f 92       	push	r6
    1b90:	7f 92       	push	r7
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	cf 93       	push	r28
    1ba8:	df 93       	push	r29
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	ca 1b       	sub	r28, r26
    1bb0:	db 0b       	sbc	r29, r27
    1bb2:	0f b6       	in	r0, 0x3f	; 63
    1bb4:	f8 94       	cli
    1bb6:	de bf       	out	0x3e, r29	; 62
    1bb8:	0f be       	out	0x3f, r0	; 63
    1bba:	cd bf       	out	0x3d, r28	; 61
    1bbc:	09 94       	ijmp

00001bbe <__epilogue_restores__>:
    1bbe:	2a 88       	ldd	r2, Y+18	; 0x12
    1bc0:	39 88       	ldd	r3, Y+17	; 0x11
    1bc2:	48 88       	ldd	r4, Y+16	; 0x10
    1bc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    1bc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    1bc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    1bca:	8c 84       	ldd	r8, Y+12	; 0x0c
    1bcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    1bce:	aa 84       	ldd	r10, Y+10	; 0x0a
    1bd0:	b9 84       	ldd	r11, Y+9	; 0x09
    1bd2:	c8 84       	ldd	r12, Y+8	; 0x08
    1bd4:	df 80       	ldd	r13, Y+7	; 0x07
    1bd6:	ee 80       	ldd	r14, Y+6	; 0x06
    1bd8:	fd 80       	ldd	r15, Y+5	; 0x05
    1bda:	0c 81       	ldd	r16, Y+4	; 0x04
    1bdc:	1b 81       	ldd	r17, Y+3	; 0x03
    1bde:	aa 81       	ldd	r26, Y+2	; 0x02
    1be0:	b9 81       	ldd	r27, Y+1	; 0x01
    1be2:	ce 0f       	add	r28, r30
    1be4:	d1 1d       	adc	r29, r1
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	de bf       	out	0x3e, r29	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	cd bf       	out	0x3d, r28	; 61
    1bf0:	ed 01       	movw	r28, r26
    1bf2:	08 95       	ret

00001bf4 <isspace>:
    1bf4:	91 11       	cpse	r25, r1
    1bf6:	0b c1       	rjmp	.+534    	; 0x1e0e <__ctype_isfalse>
    1bf8:	80 32       	cpi	r24, 0x20	; 32
    1bfa:	19 f0       	breq	.+6      	; 0x1c02 <isspace+0xe>
    1bfc:	89 50       	subi	r24, 0x09	; 9
    1bfe:	85 50       	subi	r24, 0x05	; 5
    1c00:	d0 f7       	brcc	.-12     	; 0x1bf6 <isspace+0x2>
    1c02:	08 95       	ret

00001c04 <strchr_P>:
    1c04:	fc 01       	movw	r30, r24
    1c06:	05 90       	lpm	r0, Z+
    1c08:	06 16       	cp	r0, r22
    1c0a:	21 f0       	breq	.+8      	; 0x1c14 <strchr_P+0x10>
    1c0c:	00 20       	and	r0, r0
    1c0e:	d9 f7       	brne	.-10     	; 0x1c06 <strchr_P+0x2>
    1c10:	c0 01       	movw	r24, r0
    1c12:	08 95       	ret
    1c14:	31 97       	sbiw	r30, 0x01	; 1
    1c16:	cf 01       	movw	r24, r30
    1c18:	08 95       	ret

00001c1a <memcpy>:
    1c1a:	fb 01       	movw	r30, r22
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <memcpy+0xa>
    1c20:	01 90       	ld	r0, Z+
    1c22:	0d 92       	st	X+, r0
    1c24:	41 50       	subi	r20, 0x01	; 1
    1c26:	50 40       	sbci	r21, 0x00	; 0
    1c28:	d8 f7       	brcc	.-10     	; 0x1c20 <memcpy+0x6>
    1c2a:	08 95       	ret

00001c2c <fgetc>:
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	ec 01       	movw	r28, r24
    1c32:	2b 81       	ldd	r18, Y+3	; 0x03
    1c34:	20 ff       	sbrs	r18, 0
    1c36:	33 c0       	rjmp	.+102    	; 0x1c9e <fgetc+0x72>
    1c38:	26 ff       	sbrs	r18, 6
    1c3a:	0a c0       	rjmp	.+20     	; 0x1c50 <fgetc+0x24>
    1c3c:	2f 7b       	andi	r18, 0xBF	; 191
    1c3e:	2b 83       	std	Y+3, r18	; 0x03
    1c40:	8e 81       	ldd	r24, Y+6	; 0x06
    1c42:	9f 81       	ldd	r25, Y+7	; 0x07
    1c44:	01 96       	adiw	r24, 0x01	; 1
    1c46:	9f 83       	std	Y+7, r25	; 0x07
    1c48:	8e 83       	std	Y+6, r24	; 0x06
    1c4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	29 c0       	rjmp	.+82     	; 0x1ca2 <fgetc+0x76>
    1c50:	22 ff       	sbrs	r18, 2
    1c52:	0f c0       	rjmp	.+30     	; 0x1c72 <fgetc+0x46>
    1c54:	e8 81       	ld	r30, Y
    1c56:	f9 81       	ldd	r31, Y+1	; 0x01
    1c58:	80 81       	ld	r24, Z
    1c5a:	08 2e       	mov	r0, r24
    1c5c:	00 0c       	add	r0, r0
    1c5e:	99 0b       	sbc	r25, r25
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	19 f4       	brne	.+6      	; 0x1c6a <fgetc+0x3e>
    1c64:	20 62       	ori	r18, 0x20	; 32
    1c66:	2b 83       	std	Y+3, r18	; 0x03
    1c68:	1a c0       	rjmp	.+52     	; 0x1c9e <fgetc+0x72>
    1c6a:	31 96       	adiw	r30, 0x01	; 1
    1c6c:	f9 83       	std	Y+1, r31	; 0x01
    1c6e:	e8 83       	st	Y, r30
    1c70:	0e c0       	rjmp	.+28     	; 0x1c8e <fgetc+0x62>
    1c72:	ea 85       	ldd	r30, Y+10	; 0x0a
    1c74:	fb 85       	ldd	r31, Y+11	; 0x0b
    1c76:	09 95       	icall
    1c78:	97 ff       	sbrs	r25, 7
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <fgetc+0x62>
    1c7c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7e:	01 96       	adiw	r24, 0x01	; 1
    1c80:	11 f0       	breq	.+4      	; 0x1c86 <fgetc+0x5a>
    1c82:	80 e2       	ldi	r24, 0x20	; 32
    1c84:	01 c0       	rjmp	.+2      	; 0x1c88 <fgetc+0x5c>
    1c86:	80 e1       	ldi	r24, 0x10	; 16
    1c88:	82 2b       	or	r24, r18
    1c8a:	8b 83       	std	Y+3, r24	; 0x03
    1c8c:	08 c0       	rjmp	.+16     	; 0x1c9e <fgetc+0x72>
    1c8e:	2e 81       	ldd	r18, Y+6	; 0x06
    1c90:	3f 81       	ldd	r19, Y+7	; 0x07
    1c92:	2f 5f       	subi	r18, 0xFF	; 255
    1c94:	3f 4f       	sbci	r19, 0xFF	; 255
    1c96:	3f 83       	std	Y+7, r19	; 0x07
    1c98:	2e 83       	std	Y+6, r18	; 0x06
    1c9a:	99 27       	eor	r25, r25
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <fgetc+0x76>
    1c9e:	8f ef       	ldi	r24, 0xFF	; 255
    1ca0:	9f ef       	ldi	r25, 0xFF	; 255
    1ca2:	df 91       	pop	r29
    1ca4:	cf 91       	pop	r28
    1ca6:	08 95       	ret

00001ca8 <fputc>:
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	fb 01       	movw	r30, r22
    1cb2:	23 81       	ldd	r18, Z+3	; 0x03
    1cb4:	21 fd       	sbrc	r18, 1
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <fputc+0x16>
    1cb8:	8f ef       	ldi	r24, 0xFF	; 255
    1cba:	9f ef       	ldi	r25, 0xFF	; 255
    1cbc:	2c c0       	rjmp	.+88     	; 0x1d16 <fputc+0x6e>
    1cbe:	22 ff       	sbrs	r18, 2
    1cc0:	16 c0       	rjmp	.+44     	; 0x1cee <fputc+0x46>
    1cc2:	46 81       	ldd	r20, Z+6	; 0x06
    1cc4:	57 81       	ldd	r21, Z+7	; 0x07
    1cc6:	24 81       	ldd	r18, Z+4	; 0x04
    1cc8:	35 81       	ldd	r19, Z+5	; 0x05
    1cca:	42 17       	cp	r20, r18
    1ccc:	53 07       	cpc	r21, r19
    1cce:	44 f4       	brge	.+16     	; 0x1ce0 <fputc+0x38>
    1cd0:	a0 81       	ld	r26, Z
    1cd2:	b1 81       	ldd	r27, Z+1	; 0x01
    1cd4:	9d 01       	movw	r18, r26
    1cd6:	2f 5f       	subi	r18, 0xFF	; 255
    1cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    1cda:	31 83       	std	Z+1, r19	; 0x01
    1cdc:	20 83       	st	Z, r18
    1cde:	8c 93       	st	X, r24
    1ce0:	26 81       	ldd	r18, Z+6	; 0x06
    1ce2:	37 81       	ldd	r19, Z+7	; 0x07
    1ce4:	2f 5f       	subi	r18, 0xFF	; 255
    1ce6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ce8:	37 83       	std	Z+7, r19	; 0x07
    1cea:	26 83       	std	Z+6, r18	; 0x06
    1cec:	14 c0       	rjmp	.+40     	; 0x1d16 <fputc+0x6e>
    1cee:	8b 01       	movw	r16, r22
    1cf0:	ec 01       	movw	r28, r24
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	00 84       	ldd	r0, Z+8	; 0x08
    1cf6:	f1 85       	ldd	r31, Z+9	; 0x09
    1cf8:	e0 2d       	mov	r30, r0
    1cfa:	09 95       	icall
    1cfc:	89 2b       	or	r24, r25
    1cfe:	e1 f6       	brne	.-72     	; 0x1cb8 <fputc+0x10>
    1d00:	d8 01       	movw	r26, r16
    1d02:	16 96       	adiw	r26, 0x06	; 6
    1d04:	8d 91       	ld	r24, X+
    1d06:	9c 91       	ld	r25, X
    1d08:	17 97       	sbiw	r26, 0x07	; 7
    1d0a:	01 96       	adiw	r24, 0x01	; 1
    1d0c:	17 96       	adiw	r26, 0x07	; 7
    1d0e:	9c 93       	st	X, r25
    1d10:	8e 93       	st	-X, r24
    1d12:	16 97       	sbiw	r26, 0x06	; 6
    1d14:	ce 01       	movw	r24, r28
    1d16:	df 91       	pop	r29
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <ungetc>:
    1d20:	fb 01       	movw	r30, r22
    1d22:	23 81       	ldd	r18, Z+3	; 0x03
    1d24:	20 ff       	sbrs	r18, 0
    1d26:	12 c0       	rjmp	.+36     	; 0x1d4c <ungetc+0x2c>
    1d28:	26 fd       	sbrc	r18, 6
    1d2a:	10 c0       	rjmp	.+32     	; 0x1d4c <ungetc+0x2c>
    1d2c:	8f 3f       	cpi	r24, 0xFF	; 255
    1d2e:	3f ef       	ldi	r19, 0xFF	; 255
    1d30:	93 07       	cpc	r25, r19
    1d32:	61 f0       	breq	.+24     	; 0x1d4c <ungetc+0x2c>
    1d34:	82 83       	std	Z+2, r24	; 0x02
    1d36:	2f 7d       	andi	r18, 0xDF	; 223
    1d38:	20 64       	ori	r18, 0x40	; 64
    1d3a:	23 83       	std	Z+3, r18	; 0x03
    1d3c:	26 81       	ldd	r18, Z+6	; 0x06
    1d3e:	37 81       	ldd	r19, Z+7	; 0x07
    1d40:	21 50       	subi	r18, 0x01	; 1
    1d42:	31 09       	sbc	r19, r1
    1d44:	37 83       	std	Z+7, r19	; 0x07
    1d46:	26 83       	std	Z+6, r18	; 0x06
    1d48:	99 27       	eor	r25, r25
    1d4a:	08 95       	ret
    1d4c:	8f ef       	ldi	r24, 0xFF	; 255
    1d4e:	9f ef       	ldi	r25, 0xFF	; 255
    1d50:	08 95       	ret

00001d52 <__ultoa_invert>:
    1d52:	fa 01       	movw	r30, r20
    1d54:	aa 27       	eor	r26, r26
    1d56:	28 30       	cpi	r18, 0x08	; 8
    1d58:	51 f1       	breq	.+84     	; 0x1dae <__ultoa_invert+0x5c>
    1d5a:	20 31       	cpi	r18, 0x10	; 16
    1d5c:	81 f1       	breq	.+96     	; 0x1dbe <__ultoa_invert+0x6c>
    1d5e:	e8 94       	clt
    1d60:	6f 93       	push	r22
    1d62:	6e 7f       	andi	r22, 0xFE	; 254
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	7f 4f       	sbci	r23, 0xFF	; 255
    1d68:	8f 4f       	sbci	r24, 0xFF	; 255
    1d6a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d6c:	af 4f       	sbci	r26, 0xFF	; 255
    1d6e:	b1 e0       	ldi	r27, 0x01	; 1
    1d70:	3e d0       	rcall	.+124    	; 0x1dee <__ultoa_invert+0x9c>
    1d72:	b4 e0       	ldi	r27, 0x04	; 4
    1d74:	3c d0       	rcall	.+120    	; 0x1dee <__ultoa_invert+0x9c>
    1d76:	67 0f       	add	r22, r23
    1d78:	78 1f       	adc	r23, r24
    1d7a:	89 1f       	adc	r24, r25
    1d7c:	9a 1f       	adc	r25, r26
    1d7e:	a1 1d       	adc	r26, r1
    1d80:	68 0f       	add	r22, r24
    1d82:	79 1f       	adc	r23, r25
    1d84:	8a 1f       	adc	r24, r26
    1d86:	91 1d       	adc	r25, r1
    1d88:	a1 1d       	adc	r26, r1
    1d8a:	6a 0f       	add	r22, r26
    1d8c:	71 1d       	adc	r23, r1
    1d8e:	81 1d       	adc	r24, r1
    1d90:	91 1d       	adc	r25, r1
    1d92:	a1 1d       	adc	r26, r1
    1d94:	20 d0       	rcall	.+64     	; 0x1dd6 <__ultoa_invert+0x84>
    1d96:	09 f4       	brne	.+2      	; 0x1d9a <__ultoa_invert+0x48>
    1d98:	68 94       	set
    1d9a:	3f 91       	pop	r19
    1d9c:	2a e0       	ldi	r18, 0x0A	; 10
    1d9e:	26 9f       	mul	r18, r22
    1da0:	11 24       	eor	r1, r1
    1da2:	30 19       	sub	r19, r0
    1da4:	30 5d       	subi	r19, 0xD0	; 208
    1da6:	31 93       	st	Z+, r19
    1da8:	de f6       	brtc	.-74     	; 0x1d60 <__ultoa_invert+0xe>
    1daa:	cf 01       	movw	r24, r30
    1dac:	08 95       	ret
    1dae:	46 2f       	mov	r20, r22
    1db0:	47 70       	andi	r20, 0x07	; 7
    1db2:	40 5d       	subi	r20, 0xD0	; 208
    1db4:	41 93       	st	Z+, r20
    1db6:	b3 e0       	ldi	r27, 0x03	; 3
    1db8:	0f d0       	rcall	.+30     	; 0x1dd8 <__ultoa_invert+0x86>
    1dba:	c9 f7       	brne	.-14     	; 0x1dae <__ultoa_invert+0x5c>
    1dbc:	f6 cf       	rjmp	.-20     	; 0x1daa <__ultoa_invert+0x58>
    1dbe:	46 2f       	mov	r20, r22
    1dc0:	4f 70       	andi	r20, 0x0F	; 15
    1dc2:	40 5d       	subi	r20, 0xD0	; 208
    1dc4:	4a 33       	cpi	r20, 0x3A	; 58
    1dc6:	18 f0       	brcs	.+6      	; 0x1dce <__ultoa_invert+0x7c>
    1dc8:	49 5d       	subi	r20, 0xD9	; 217
    1dca:	31 fd       	sbrc	r19, 1
    1dcc:	40 52       	subi	r20, 0x20	; 32
    1dce:	41 93       	st	Z+, r20
    1dd0:	02 d0       	rcall	.+4      	; 0x1dd6 <__ultoa_invert+0x84>
    1dd2:	a9 f7       	brne	.-22     	; 0x1dbe <__ultoa_invert+0x6c>
    1dd4:	ea cf       	rjmp	.-44     	; 0x1daa <__ultoa_invert+0x58>
    1dd6:	b4 e0       	ldi	r27, 0x04	; 4
    1dd8:	a6 95       	lsr	r26
    1dda:	97 95       	ror	r25
    1ddc:	87 95       	ror	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	ba 95       	dec	r27
    1de4:	c9 f7       	brne	.-14     	; 0x1dd8 <__ultoa_invert+0x86>
    1de6:	00 97       	sbiw	r24, 0x00	; 0
    1de8:	61 05       	cpc	r22, r1
    1dea:	71 05       	cpc	r23, r1
    1dec:	08 95       	ret
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	0a 2e       	mov	r0, r26
    1df4:	06 94       	lsr	r0
    1df6:	57 95       	ror	r21
    1df8:	47 95       	ror	r20
    1dfa:	37 95       	ror	r19
    1dfc:	27 95       	ror	r18
    1dfe:	ba 95       	dec	r27
    1e00:	c9 f7       	brne	.-14     	; 0x1df4 <__ultoa_invert+0xa2>
    1e02:	62 0f       	add	r22, r18
    1e04:	73 1f       	adc	r23, r19
    1e06:	84 1f       	adc	r24, r20
    1e08:	95 1f       	adc	r25, r21
    1e0a:	a0 1d       	adc	r26, r0
    1e0c:	08 95       	ret

00001e0e <__ctype_isfalse>:
    1e0e:	99 27       	eor	r25, r25
    1e10:	88 27       	eor	r24, r24

00001e12 <__ctype_istrue>:
    1e12:	08 95       	ret

00001e14 <_exit>:
    1e14:	f8 94       	cli

00001e16 <__stop_program>:
    1e16:	ff cf       	rjmp	.-2      	; 0x1e16 <__stop_program>
