   1               		.file	"chthreads.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__thd_object_init,"ax",@progbits
  11               	.global	__thd_object_init
  13               	__thd_object_init:
  14               	.LFB198:
  15               		.file 1 "../../../os/rt/src/chthreads.c"
   1:../../../os/rt/src/chthreads.c **** /*
   2:../../../os/rt/src/chthreads.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chthreads.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chthreads.c **** 
   5:../../../os/rt/src/chthreads.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chthreads.c **** 
   7:../../../os/rt/src/chthreads.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chthreads.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chthreads.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chthreads.c **** 
  11:../../../os/rt/src/chthreads.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chthreads.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chthreads.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chthreads.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chthreads.c **** 
  16:../../../os/rt/src/chthreads.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chthreads.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chthreads.c **** */
  19:../../../os/rt/src/chthreads.c **** 
  20:../../../os/rt/src/chthreads.c **** /**
  21:../../../os/rt/src/chthreads.c ****  * @file    rt/src/chthreads.c
  22:../../../os/rt/src/chthreads.c ****  * @brief   Threads code.
  23:../../../os/rt/src/chthreads.c ****  *
  24:../../../os/rt/src/chthreads.c ****  * @addtogroup threads
  25:../../../os/rt/src/chthreads.c ****  * @details Threads related APIs and services.
  26:../../../os/rt/src/chthreads.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chthreads.c ****  *          A thread is an abstraction of an independent instructions flow.
  28:../../../os/rt/src/chthreads.c ****  *          In ChibiOS/RT a thread is represented by a "C" function owning
  29:../../../os/rt/src/chthreads.c ****  *          a processor context, state informations and a dedicated stack
  30:../../../os/rt/src/chthreads.c ****  *          area. In this scenario static variables are shared among all
  31:../../../os/rt/src/chthreads.c ****  *          threads while automatic variables are local to the thread.<br>
  32:../../../os/rt/src/chthreads.c ****  *          Operations defined for threads:
  33:../../../os/rt/src/chthreads.c ****  *          - <b>Create</b>, a thread is started on the specified thread
  34:../../../os/rt/src/chthreads.c ****  *            function. This operation is available in multiple variants,
  35:../../../os/rt/src/chthreads.c ****  *            both static and dynamic.
  36:../../../os/rt/src/chthreads.c ****  *          - <b>Exit</b>, a thread terminates by returning from its top
  37:../../../os/rt/src/chthreads.c ****  *            level function or invoking a specific API, the thread can
  38:../../../os/rt/src/chthreads.c ****  *            return a value that can be retrieved by other threads.
  39:../../../os/rt/src/chthreads.c ****  *          - <b>Wait</b>, a thread waits for the termination of another
  40:../../../os/rt/src/chthreads.c ****  *            thread and retrieves its return value.
  41:../../../os/rt/src/chthreads.c ****  *          - <b>Resume</b>, a thread created in suspended state is started.
  42:../../../os/rt/src/chthreads.c ****  *          - <b>Sleep</b>, the execution of a thread is suspended for the
  43:../../../os/rt/src/chthreads.c ****  *            specified amount of time or the specified future absolute time
  44:../../../os/rt/src/chthreads.c ****  *            is reached.
  45:../../../os/rt/src/chthreads.c ****  *          - <b>SetPriority</b>, a thread changes its own priority level.
  46:../../../os/rt/src/chthreads.c ****  *          - <b>Yield</b>, a thread voluntarily renounces to its time slot.
  47:../../../os/rt/src/chthreads.c ****  *          .
  48:../../../os/rt/src/chthreads.c ****  * @{
  49:../../../os/rt/src/chthreads.c ****  */
  50:../../../os/rt/src/chthreads.c **** 
  51:../../../os/rt/src/chthreads.c **** #include <string.h>
  52:../../../os/rt/src/chthreads.c **** 
  53:../../../os/rt/src/chthreads.c **** #include "ch.h"
  54:../../../os/rt/src/chthreads.c **** 
  55:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  56:../../../os/rt/src/chthreads.c **** /* Module local definitions.                                                 */
  57:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  58:../../../os/rt/src/chthreads.c **** 
  59:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  60:../../../os/rt/src/chthreads.c **** /* Module exported variables.                                                */
  61:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  62:../../../os/rt/src/chthreads.c **** 
  63:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  64:../../../os/rt/src/chthreads.c **** /* Module local types.                                                       */
  65:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  66:../../../os/rt/src/chthreads.c **** 
  67:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  68:../../../os/rt/src/chthreads.c **** /* Module local variables.                                                   */
  69:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  70:../../../os/rt/src/chthreads.c **** 
  71:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  72:../../../os/rt/src/chthreads.c **** /* Module local functions.                                                   */
  73:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  74:../../../os/rt/src/chthreads.c **** 
  75:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  76:../../../os/rt/src/chthreads.c **** /* Module exported functions.                                                */
  77:../../../os/rt/src/chthreads.c **** /*===========================================================================*/
  78:../../../os/rt/src/chthreads.c **** 
  79:../../../os/rt/src/chthreads.c **** /**
  80:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a thread structure.
  81:../../../os/rt/src/chthreads.c ****  * @note    This is an internal functions, do not use it in application code.
  82:../../../os/rt/src/chthreads.c ****  *
  83:../../../os/rt/src/chthreads.c ****  * @param[in] oip       pointer to the OS instance
  84:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
  85:../../../os/rt/src/chthreads.c ****  * @param[in] name      thread name
  86:../../../os/rt/src/chthreads.c ****  * @param[in] prio      the priority level for the new thread
  87:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter.
  88:../../../os/rt/src/chthreads.c ****  *
  89:../../../os/rt/src/chthreads.c ****  * @notapi
  90:../../../os/rt/src/chthreads.c ****  */
  91:../../../os/rt/src/chthreads.c **** thread_t *__thd_object_init(os_instance_t *oip,
  92:../../../os/rt/src/chthreads.c ****                             thread_t *tp,
  93:../../../os/rt/src/chthreads.c ****                             const char *name,
  94:../../../os/rt/src/chthreads.c ****                             tprio_t prio) {
  16               		.loc 1 94 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 FB01      		movw r30,r22
  95:../../../os/rt/src/chthreads.c **** 
  96:../../../os/rt/src/chthreads.c ****   tp->hdr.pqueue.prio   = prio;
  32               		.loc 1 96 0
  33 0006 2483      		std Z+4,r18
  97:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
  34               		.loc 1 97 0
  35 0008 32E0      		ldi r19,lo8(2)
  36 000a 3787      		std Z+15,r19
  98:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
  37               		.loc 1 98 0
  38 000c 108A      		std Z+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
  39               		.loc 1 99 0
  40 000e 9487      		std Z+12,r25
  41 0010 8387      		std Z+11,r24
 100:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 101:../../../os/rt/src/chthreads.c ****   tp->ticks             = (tslices_t)CH_CFG_TIME_QUANTUM;
 102:../../../os/rt/src/chthreads.c **** #endif
 103:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 104:../../../os/rt/src/chthreads.c ****   tp->realprio          = prio;
  42               		.loc 1 104 0
  43 0012 258F      		std Z+29,r18
 105:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
  44               		.loc 1 105 0
  45 0014 148E      		std Z+28,__zero_reg__
  46 0016 138E      		std Z+27,__zero_reg__
 106:../../../os/rt/src/chthreads.c **** #endif
 107:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_EVENTS == TRUE
 108:../../../os/rt/src/chthreads.c ****   tp->epending          = (eventmask_t)0;
  47               		.loc 1 108 0
  48 0018 128E      		std Z+26,__zero_reg__
 109:../../../os/rt/src/chthreads.c **** #endif
 110:../../../os/rt/src/chthreads.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 111:../../../os/rt/src/chthreads.c ****   tp->time              = (systime_t)0;
 112:../../../os/rt/src/chthreads.c **** #endif
 113:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 114:../../../os/rt/src/chthreads.c ****   tp->refs              = (trefs_t)1;
  49               		.loc 1 114 0
  50 001a 21E0      		ldi r18,lo8(1)
  51               	.LVL1:
  52 001c 218B      		std Z+17,r18
 115:../../../os/rt/src/chthreads.c ****   tp->name              = name;
  53               		.loc 1 115 0
  54 001e 5687      		std Z+14,r21
  55 0020 4587      		std Z+13,r20
 116:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
  56               		.loc 1 116 0
  57 0022 9B01      		movw r18,r22
  58 0024 295F      		subi r18,-7
  59 0026 3F4F      		sbci r19,-1
  60               	.LVL2:
  61 0028 AC01      		movw r20,r24
  62               	.LVL3:
  63 002a 475E      		subi r20,-25
  64 002c 5F4F      		sbci r21,-1
  65               	.LVL4:
  66               	.LBB228:
  67               	.LBB229:
  68               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
  69               		.loc 2 324 0
  70 002e 5087      		std Z+8,r21
  71 0030 4783      		std Z+7,r20
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
  72               		.loc 2 325 0
  73 0032 EC01      		movw r28,r24
  74 0034 AB8D      		ldd r26,Y+27
  75 0036 BC8D      		ldd r27,Y+28
  76 0038 B287      		std Z+10,r27
  77 003a A187      		std Z+9,r26
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
  78               		.loc 2 326 0
  79 003c 2D93      		st X+,r18
  80 003e 3C93      		st X,r19
  81               	.LVL5:
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
  82               		.loc 2 327 0
  83 0040 3C8F      		std Y+28,r19
  84 0042 2B8F      		std Y+27,r18
  85               	.LVL6:
  86               	.LBE229:
  87               	.LBE228:
 117:../../../os/rt/src/chthreads.c **** #else
 118:../../../os/rt/src/chthreads.c ****   (void)name;
 119:../../../os/rt/src/chthreads.c **** #endif
 120:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 121:../../../os/rt/src/chthreads.c ****   ch_list_init(&tp->waiting);
  88               		.loc 1 121 0
  89 0044 CB01      		movw r24,r22
  90               	.LVL7:
  91 0046 4496      		adiw r24,20
  92               	.LVL8:
  93               	.LBB230:
  94               	.LBB231:
 215:../../../os/rt/include/chlists.h **** }
  95               		.loc 2 215 0
  96 0048 958B      		std Z+21,r25
  97 004a 848B      		std Z+20,r24
  98               	.LVL9:
  99               	.LBE231:
 100               	.LBE230:
 122:../../../os/rt/src/chthreads.c **** #endif
 123:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MESSAGES == TRUE
 124:../../../os/rt/src/chthreads.c ****   ch_queue_init(&tp->msgqueue);
 101               		.loc 1 124 0
 102 004c 0296      		adiw r24,2
 103               	.LVL10:
 104               	.LBB232:
 105               	.LBB233:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 106               		.loc 2 284 0
 107 004e 978B      		std Z+23,r25
 108 0050 868B      		std Z+22,r24
 285:../../../os/rt/include/chlists.h **** }
 109               		.loc 2 285 0
 110 0052 918F      		std Z+25,r25
 111 0054 808F      		std Z+24,r24
 112               	.LVL11:
 113               	.LBE233:
 114               	.LBE232:
 125:../../../os/rt/src/chthreads.c **** #endif
 126:../../../os/rt/src/chthreads.c **** #if CH_DBG_STATISTICS == TRUE
 127:../../../os/rt/src/chthreads.c ****   chTMObjectInit(&tp->stats);
 128:../../../os/rt/src/chthreads.c **** #endif
 129:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_INIT_HOOK(tp);
 130:../../../os/rt/src/chthreads.c ****   return tp;
 131:../../../os/rt/src/chthreads.c **** }
 115               		.loc 1 131 0
 116 0056 CB01      		movw r24,r22
 117               	/* epilogue start */
 118 0058 DF91      		pop r29
 119 005a CF91      		pop r28
 120               	.LVL12:
 121 005c 0895      		ret
 122               		.cfi_endproc
 123               	.LFE198:
 125               		.section	.text.chThdCreateSuspendedI,"ax",@progbits
 126               	.global	chThdCreateSuspendedI
 128               	chThdCreateSuspendedI:
 129               	.LFB199:
 132:../../../os/rt/src/chthreads.c **** 
 133:../../../os/rt/src/chthreads.c **** #if (CH_DBG_FILL_THREADS == TRUE) || defined(__DOXYGEN__)
 134:../../../os/rt/src/chthreads.c **** /**
 135:../../../os/rt/src/chthreads.c ****  * @brief   Stack fill utility.
 136:../../../os/rt/src/chthreads.c ****  *
 137:../../../os/rt/src/chthreads.c ****  * @param[in] startp    first address to fill
 138:../../../os/rt/src/chthreads.c ****  * @param[in] endp      last address to fill +1
 139:../../../os/rt/src/chthreads.c ****  *
 140:../../../os/rt/src/chthreads.c ****  * @notapi
 141:../../../os/rt/src/chthreads.c ****  */
 142:../../../os/rt/src/chthreads.c **** void __thd_stackfill(uint8_t *startp, uint8_t *endp) {
 143:../../../os/rt/src/chthreads.c **** 
 144:../../../os/rt/src/chthreads.c ****   do {
 145:../../../os/rt/src/chthreads.c ****     *startp++ = CH_DBG_STACK_FILL_VALUE;
 146:../../../os/rt/src/chthreads.c ****   } while (likely(startp < endp));
 147:../../../os/rt/src/chthreads.c **** }
 148:../../../os/rt/src/chthreads.c **** #endif /* CH_DBG_FILL_THREADS */
 149:../../../os/rt/src/chthreads.c **** 
 150:../../../os/rt/src/chthreads.c **** /**
 151:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 152:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 153:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 154:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 155:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 156:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 157:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 158:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 159:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 160:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 161:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 162:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 163:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 164:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 165:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 166:../../../os/rt/src/chthreads.c ****  *
 167:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 168:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 169:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 170:../../../os/rt/src/chthreads.c ****  *
 171:../../../os/rt/src/chthreads.c ****  * @iclass
 172:../../../os/rt/src/chthreads.c ****  */
 173:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp) {
 130               		.loc 1 173 0
 131               		.cfi_startproc
 132               	.LVL13:
 133 0000 CF93      		push r28
 134               	.LCFI2:
 135               		.cfi_def_cfa_offset 3
 136               		.cfi_offset 28, -2
 137 0002 DF93      		push r29
 138               	.LCFI3:
 139               		.cfi_def_cfa_offset 4
 140               		.cfi_offset 29, -3
 141               	/* prologue: function */
 142               	/* frame size = 0 */
 143               	/* stack size = 2 */
 144               	.L__stack_usage = 2
 145 0004 DC01      		movw r26,r24
 174:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 175:../../../os/rt/src/chthreads.c **** 
 176:../../../os/rt/src/chthreads.c ****   chDbgCheckClassI();
 177:../../../os/rt/src/chthreads.c ****   chDbgCheck(tdp != NULL);
 178:../../../os/rt/src/chthreads.c ****   chDbgCheck(MEM_IS_ALIGNED(tdp->wbase, PORT_WORKING_AREA_ALIGN) &&
 179:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(tdp->wend, PORT_STACK_ALIGN) &&
 180:../../../os/rt/src/chthreads.c ****              (tdp->wend > tdp->wbase) &&
 181:../../../os/rt/src/chthreads.c ****              (((size_t)tdp->wend - (size_t)tdp->wbase) >= THD_WORKING_AREA_SIZE(0)));
 182:../../../os/rt/src/chthreads.c ****   chDbgCheck((tdp->prio <= HIGHPRIO) && (tdp->funcp != NULL));
 183:../../../os/rt/src/chthreads.c **** 
 184:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 185:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 186:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 187:../../../os/rt/src/chthreads.c ****   tp = threadref(((uint8_t *)tdp->wend -
 146               		.loc 1 187 0
 147 0006 1496      		adiw r26,4
 148 0008 2D91      		ld r18,X+
 149 000a 3C91      		ld r19,X
 150 000c 1597      		sbiw r26,4+1
 151               	.LVL14:
 188:../../../os/rt/src/chthreads.c ****                  MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));
 189:../../../os/rt/src/chthreads.c **** 
 190:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 191:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 192:../../../os/rt/src/chthreads.c ****   tp->wabase = tdp->wbase;
 193:../../../os/rt/src/chthreads.c ****   tp->waend  = tdp->wend;
 194:../../../os/rt/src/chthreads.c **** #endif
 195:../../../os/rt/src/chthreads.c **** 
 196:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 197:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, tdp->wbase, tp, tdp->funcp, tdp->arg);
 152               		.loc 1 197 0
 153 000e F901      		movw r30,r18
 154 0010 7E97      		sbiw r30,30
 155               	.LVL15:
 156 0012 E901      		movw r28,r18
 157 0014 E397      		sbiw r28,51
 158 0016 D683      		std Z+6,r29
 159 0018 C583      		std Z+5,r28
 160 001a 1796      		adiw r26,7
 161 001c 8C91      		ld r24,X
 162 001e 1797      		sbiw r26,7
 163               	.LVL16:
 164 0020 8A8B      		std Y+18,r24
 165 0022 1896      		adiw r26,8
 166 0024 8C91      		ld r24,X
 167 0026 1897      		sbiw r26,8
 168 0028 898B      		std Y+17,r24
 169 002a 1996      		adiw r26,9
 170 002c 8C91      		ld r24,X
 171 002e 1997      		sbiw r26,9
 172 0030 888B      		std Y+16,r24
 173 0032 1A96      		adiw r26,10
 174 0034 8C91      		ld r24,X
 175 0036 1A97      		sbiw r26,10
 176 0038 8F87      		std Y+15,r24
 177 003a 80E0      		ldi r24,lo8(gs(_port_thread_start))
 178 003c 90E0      		ldi r25,hi8(gs(_port_thread_start))
 179 003e 9B8B      		std Y+19,r25
 180 0040 8C8B      		std Y+20,r24
 198:../../../os/rt/src/chthreads.c **** 
 199:../../../os/rt/src/chthreads.c ****   /* The thread object is initialized but not started.*/
 200:../../../os/rt/src/chthreads.c **** #if CH_CFG_SMP_MODE != FALSE
 201:../../../os/rt/src/chthreads.c ****   if (tdp->instance != NULL) {
 202:../../../os/rt/src/chthreads.c ****     return __thd_object_init(tdp->instance, tp, tdp->name, tdp->prio);
 203:../../../os/rt/src/chthreads.c ****   }
 204:../../../os/rt/src/chthreads.c **** #endif
 205:../../../os/rt/src/chthreads.c **** 
 206:../../../os/rt/src/chthreads.c ****   return __thd_object_init(currcore, tp, tdp->name, tdp->prio);
 181               		.loc 1 206 0
 182 0042 1696      		adiw r26,6
 183 0044 8C91      		ld r24,X
 184 0046 1697      		sbiw r26,6
 185 0048 4D91      		ld r20,X+
 186 004a 5C91      		ld r21,X
 187               	.LVL17:
 188               	.LBB234:
 189               	.LBB235:
  96:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
 190               		.loc 1 96 0
 191 004c 8483      		std Z+4,r24
  97:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
 192               		.loc 1 97 0
 193 004e 92E0      		ldi r25,lo8(2)
 194 0050 9787      		std Z+15,r25
  98:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
 195               		.loc 1 98 0
 196 0052 108A      		std Z+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 197               		.loc 1 99 0
 198 0054 60E0      		ldi r22,lo8(ch0)
 199 0056 70E0      		ldi r23,hi8(ch0)
 200 0058 7487      		std Z+12,r23
 201 005a 6387      		std Z+11,r22
 104:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
 202               		.loc 1 104 0
 203 005c 858F      		std Z+29,r24
 105:../../../os/rt/src/chthreads.c **** #endif
 204               		.loc 1 105 0
 205 005e 148E      		std Z+28,__zero_reg__
 206 0060 138E      		std Z+27,__zero_reg__
 108:../../../os/rt/src/chthreads.c **** #endif
 207               		.loc 1 108 0
 208 0062 128E      		std Z+26,__zero_reg__
 114:../../../os/rt/src/chthreads.c ****   tp->name              = name;
 209               		.loc 1 114 0
 210 0064 81E0      		ldi r24,lo8(1)
 211               	.LVL18:
 212 0066 818B      		std Z+17,r24
 115:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
 213               		.loc 1 115 0
 214 0068 5687      		std Z+14,r21
 215 006a 4587      		std Z+13,r20
 116:../../../os/rt/src/chthreads.c **** #else
 216               		.loc 1 116 0
 217 006c D901      		movw r26,r18
 218               	.LVL19:
 219 006e 5797      		sbiw r26,23
 220               	.LVL20:
 221               	.LBB236:
 222               	.LBB237:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 223               		.loc 2 324 0
 224 0070 80E0      		ldi r24,lo8(ch0+25)
 225 0072 90E0      		ldi r25,hi8(ch0+25)
 226               	.LVL21:
 227 0074 1196      		adiw r26,1
 228 0076 9C93      		st X,r25
 229 0078 8E93      		st -X,r24
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 230               		.loc 2 325 0
 231 007a EB01      		movw r28,r22
 232 007c 8B8D      		ldd r24,Y+27
 233 007e 9C8D      		ldd r25,Y+28
 234               	.LVL22:
 235 0080 1396      		adiw r26,2+1
 236 0082 9C93      		st X,r25
 237 0084 8E93      		st -X,r24
 238 0086 1297      		sbiw r26,2
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 239               		.loc 2 326 0
 240 0088 EC01      		movw r28,r24
 241 008a B983      		std Y+1,r27
 242 008c A883      		st Y,r26
 243               	.LVL23:
 244               		.loc 2 327 0
 245 008e EB01      		movw r28,r22
 246 0090 BC8F      		std Y+28,r27
 247 0092 AB8F      		std Y+27,r26
 248               	.LVL24:
 249               	.LBE237:
 250               	.LBE236:
 251               	.LBB238:
 252               	.LBB239:
 215:../../../os/rt/include/chlists.h **** }
 253               		.loc 2 215 0
 254 0094 1D96      		adiw r26,13
 255 0096 0B2E      		mov __tmp_reg__,r27
 256 0098 1196      		adiw r26,1
 257 009a 0C92      		st X,__tmp_reg__
 258 009c 1197      		sbiw r26,1
 259 009e AC93      		st X,r26
 260               	.LBE239:
 261               	.LBE238:
 124:../../../os/rt/src/chthreads.c **** #endif
 262               		.loc 1 124 0
 263 00a0 1296      		adiw r26,2
 264               	.LVL25:
 265               	.LBB240:
 266               	.LBB241:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 267               		.loc 2 284 0
 268 00a2 0B2E      		mov __tmp_reg__,r27
 269 00a4 1196      		adiw r26,1
 270 00a6 0C92      		st X,__tmp_reg__
 271 00a8 1197      		sbiw r26,1
 272 00aa AC93      		st X,r26
 285:../../../os/rt/include/chlists.h **** }
 273               		.loc 2 285 0
 274 00ac 0A2E      		mov __tmp_reg__,r26
 275 00ae 1B2E      		mov __zero_reg__,r27
 276 00b0 1396      		adiw r26,2+1
 277 00b2 1C92      		st X,__zero_reg__
 278 00b4 0E92      		st -X,__tmp_reg__
 279 00b6 1124      		clr __zero_reg__
 280 00b8 1297      		sbiw r26,2
 281               	.LVL26:
 282               	.LBE241:
 283               	.LBE240:
 284               	.LBE235:
 285               	.LBE234:
 207:../../../os/rt/src/chthreads.c **** }
 286               		.loc 1 207 0
 287 00ba CF01      		movw r24,r30
 288               	/* epilogue start */
 289 00bc DF91      		pop r29
 290 00be CF91      		pop r28
 291 00c0 0895      		ret
 292               		.cfi_endproc
 293               	.LFE199:
 295               		.section	.text.chThdCreateSuspended,"ax",@progbits
 296               	.global	chThdCreateSuspended
 298               	chThdCreateSuspended:
 299               	.LFB200:
 208:../../../os/rt/src/chthreads.c **** 
 209:../../../os/rt/src/chthreads.c **** /**
 210:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 211:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized but not inserted in the ready list,
 212:../../../os/rt/src/chthreads.c ****  *          the initial state is @p CH_STATE_WTSTART.
 213:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 214:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 215:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 216:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 217:../../../os/rt/src/chthreads.c ****  * @post    The initialized thread can be subsequently started by invoking
 218:../../../os/rt/src/chthreads.c ****  *          @p chThdStart(), @p chThdStartI() or @p chSchWakeupS()
 219:../../../os/rt/src/chthreads.c ****  *          depending on the execution context.
 220:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 221:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 222:../../../os/rt/src/chthreads.c ****  *
 223:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 224:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 225:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 226:../../../os/rt/src/chthreads.c ****  *
 227:../../../os/rt/src/chthreads.c ****  * @api
 228:../../../os/rt/src/chthreads.c ****  */
 229:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp) {
 300               		.loc 1 229 0
 301               		.cfi_startproc
 302               	.LVL27:
 303               	/* prologue: function */
 304               	/* frame size = 0 */
 305               	/* stack size = 0 */
 306               	.L__stack_usage = 0
 307               	.LBB242:
 308               	.LBB243:
 309               	.LBB244:
 310               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 311               		.loc 3 430 0
 312               	/* #APP */
 313               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 314 0000 F894      		cli
 315               	 ;  0 "" 2
 316               	/* #NOAPP */
 317               	.LBE244:
 318               	.LBE243:
 319               	.LBE242:
 230:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 231:../../../os/rt/src/chthreads.c **** 
 232:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 233:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 234:../../../os/rt/src/chthreads.c ****               "working area in use");
 235:../../../os/rt/src/chthreads.c **** #endif
 236:../../../os/rt/src/chthreads.c **** 
 237:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 238:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)tdp->wbase, (uint8_t *)tdp->wend);
 239:../../../os/rt/src/chthreads.c **** #endif
 240:../../../os/rt/src/chthreads.c **** 
 241:../../../os/rt/src/chthreads.c ****   chSysLock();
 242:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 320               		.loc 1 242 0
 321 0002 0E94 0000 		call chThdCreateSuspendedI
 322               	.LVL28:
 323               	.LBB245:
 324               	.LBB246:
 325               	.LBB247:
 326               	.LBB248:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 327               		.loc 3 440 0
 328               	/* #APP */
 329               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 330 0006 7894      		sei
 331               	 ;  0 "" 2
 332               	/* #NOAPP */
 333               	.LBE248:
 334               	.LBE247:
 335               	.LBE246:
 336               	.LBE245:
 243:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 244:../../../os/rt/src/chthreads.c **** 
 245:../../../os/rt/src/chthreads.c ****   return tp;
 246:../../../os/rt/src/chthreads.c **** }
 337               		.loc 1 246 0
 338 0008 0895      		ret
 339               		.cfi_endproc
 340               	.LFE200:
 342               		.section	.text.chThdCreateI,"ax",@progbits
 343               	.global	chThdCreateI
 345               	chThdCreateI:
 346               	.LFB201:
 247:../../../os/rt/src/chthreads.c **** 
 248:../../../os/rt/src/chthreads.c **** /**
 249:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 250:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 251:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 252:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 253:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 254:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 255:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 256:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 257:../../../os/rt/src/chthreads.c ****  * @note    Threads created using this function do not obey to the
 258:../../../os/rt/src/chthreads.c ****  *          @p CH_DBG_FILL_THREADS debug option because it would keep
 259:../../../os/rt/src/chthreads.c ****  *          the kernel locked for too much time.
 260:../../../os/rt/src/chthreads.c ****  *
 261:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 262:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 263:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 264:../../../os/rt/src/chthreads.c ****  *
 265:../../../os/rt/src/chthreads.c ****  * @iclass
 266:../../../os/rt/src/chthreads.c ****  */
 267:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateI(const thread_descriptor_t *tdp) {
 347               		.loc 1 267 0
 348               		.cfi_startproc
 349               	.LVL29:
 350               	/* prologue: function */
 351               	/* frame size = 0 */
 352               	/* stack size = 0 */
 353               	.L__stack_usage = 0
 268:../../../os/rt/src/chthreads.c **** 
 269:../../../os/rt/src/chthreads.c ****   return chSchReadyI(chThdCreateSuspendedI(tdp));
 354               		.loc 1 269 0
 355 0000 0E94 0000 		call chThdCreateSuspendedI
 356               	.LVL30:
 357 0004 0C94 0000 		jmp chSchReadyI
 358               	.LVL31:
 359               		.cfi_endproc
 360               	.LFE201:
 362               		.section	.text.chThdCreate,"ax",@progbits
 363               	.global	chThdCreate
 365               	chThdCreate:
 366               	.LFB202:
 270:../../../os/rt/src/chthreads.c **** }
 271:../../../os/rt/src/chthreads.c **** 
 272:../../../os/rt/src/chthreads.c **** /**
 273:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 274:../../../os/rt/src/chthreads.c ****  * @details The new thread is initialized and make ready to execute.
 275:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 276:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 277:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 278:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 279:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 280:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 281:../../../os/rt/src/chthreads.c ****  *
 282:../../../os/rt/src/chthreads.c ****  * @param[in] tdp       pointer to the thread descriptor
 283:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 284:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 285:../../../os/rt/src/chthreads.c ****  *
 286:../../../os/rt/src/chthreads.c ****  * @iclass
 287:../../../os/rt/src/chthreads.c ****  */
 288:../../../os/rt/src/chthreads.c **** thread_t *chThdCreate(const thread_descriptor_t *tdp) {
 367               		.loc 1 288 0
 368               		.cfi_startproc
 369               	.LVL32:
 370 0000 CF93      		push r28
 371               	.LCFI4:
 372               		.cfi_def_cfa_offset 3
 373               		.cfi_offset 28, -2
 374 0002 DF93      		push r29
 375               	.LCFI5:
 376               		.cfi_def_cfa_offset 4
 377               		.cfi_offset 29, -3
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 2 */
 381               	.L__stack_usage = 2
 382               	.LBB249:
 383               	.LBB250:
 384               	.LBB251:
 430:../../../os/common/ports/AVR/chcore.h **** }
 385               		.loc 3 430 0
 386               	/* #APP */
 387               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 388 0004 F894      		cli
 389               	 ;  0 "" 2
 390               	/* #NOAPP */
 391               	.LBE251:
 392               	.LBE250:
 393               	.LBE249:
 289:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 290:../../../os/rt/src/chthreads.c **** 
 291:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 292:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 293:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(tdp->wbase) == NULL,
 294:../../../os/rt/src/chthreads.c ****               "working area in use");
 295:../../../os/rt/src/chthreads.c **** #endif
 296:../../../os/rt/src/chthreads.c **** 
 297:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 298:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)tdp->wbase, (uint8_t *)tdp->wend);
 299:../../../os/rt/src/chthreads.c **** #endif
 300:../../../os/rt/src/chthreads.c **** 
 301:../../../os/rt/src/chthreads.c ****   chSysLock();
 302:../../../os/rt/src/chthreads.c ****   tp = chThdCreateSuspendedI(tdp);
 394               		.loc 1 302 0
 395 0006 0E94 0000 		call chThdCreateSuspendedI
 396               	.LVL33:
 397 000a EC01      		movw r28,r24
 398               	.LVL34:
 303:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 399               		.loc 1 303 0
 400 000c 60E0      		ldi r22,0
 401 000e 70E0      		ldi r23,0
 402 0010 0E94 0000 		call chSchWakeupS
 403               	.LVL35:
 404               	.LBB252:
 405               	.LBB253:
 406               	.LBB254:
 407               	.LBB255:
 408               		.loc 3 440 0
 409               	/* #APP */
 410               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 411 0014 7894      		sei
 412               	 ;  0 "" 2
 413               	/* #NOAPP */
 414               	.LBE255:
 415               	.LBE254:
 416               	.LBE253:
 417               	.LBE252:
 304:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 305:../../../os/rt/src/chthreads.c **** 
 306:../../../os/rt/src/chthreads.c ****   return tp;
 307:../../../os/rt/src/chthreads.c **** }
 418               		.loc 1 307 0
 419 0016 CE01      		movw r24,r28
 420               	/* epilogue start */
 421 0018 DF91      		pop r29
 422 001a CF91      		pop r28
 423               	.LVL36:
 424 001c 0895      		ret
 425               		.cfi_endproc
 426               	.LFE202:
 428               		.section	.rodata.str1.1,"aMS",@progbits,1
 429               	.LC0:
 430 0000 6E6F 6E61 		.string	"noname"
 430      6D65 00
 431               		.section	.text.chThdCreateStatic,"ax",@progbits
 432               	.global	chThdCreateStatic
 434               	chThdCreateStatic:
 435               	.LFB203:
 308:../../../os/rt/src/chthreads.c **** 
 309:../../../os/rt/src/chthreads.c **** /**
 310:../../../os/rt/src/chthreads.c ****  * @brief   Creates a new thread.
 311:../../../os/rt/src/chthreads.c ****  * @post    The created thread has a reference counter set to one, it is
 312:../../../os/rt/src/chthreads.c ****  *          caller responsibility to call @p chThdRelease() or @p chthdWait()
 313:../../../os/rt/src/chthreads.c ****  *          in order to release the reference. The thread persists in the
 314:../../../os/rt/src/chthreads.c ****  *          registry until its reference counter reaches zero.
 315:../../../os/rt/src/chthreads.c ****  * @note    A thread can terminate by calling @p chThdExit() or by simply
 316:../../../os/rt/src/chthreads.c ****  *          returning from its main function.
 317:../../../os/rt/src/chthreads.c ****  *
 318:../../../os/rt/src/chthreads.c ****  * @param[out] wsp      pointer to a working area dedicated to the thread stack
 319:../../../os/rt/src/chthreads.c ****  * @param[in] size      size of the working area
 320:../../../os/rt/src/chthreads.c ****  * @param[in] prio      priority level for the new thread
 321:../../../os/rt/src/chthreads.c ****  * @param[in] pf        thread function
 322:../../../os/rt/src/chthreads.c ****  * @param[in] arg       an argument passed to the thread function. It can be
 323:../../../os/rt/src/chthreads.c ****  *                      @p NULL.
 324:../../../os/rt/src/chthreads.c ****  * @return              The pointer to the @p thread_t structure allocated for
 325:../../../os/rt/src/chthreads.c ****  *                      the thread into the working space area.
 326:../../../os/rt/src/chthreads.c ****  *
 327:../../../os/rt/src/chthreads.c ****  * @api
 328:../../../os/rt/src/chthreads.c ****  */
 329:../../../os/rt/src/chthreads.c **** thread_t *chThdCreateStatic(void *wsp, size_t size,
 330:../../../os/rt/src/chthreads.c ****                             tprio_t prio, tfunc_t pf, void *arg) {
 436               		.loc 1 330 0
 437               		.cfi_startproc
 438               	.LVL37:
 439 0000 0F93      		push r16
 440               	.LCFI6:
 441               		.cfi_def_cfa_offset 3
 442               		.cfi_offset 16, -2
 443 0002 1F93      		push r17
 444               	.LCFI7:
 445               		.cfi_def_cfa_offset 4
 446               		.cfi_offset 17, -3
 447 0004 CF93      		push r28
 448               	.LCFI8:
 449               		.cfi_def_cfa_offset 5
 450               		.cfi_offset 28, -4
 451 0006 DF93      		push r29
 452               	.LCFI9:
 453               		.cfi_def_cfa_offset 6
 454               		.cfi_offset 29, -5
 455               	/* prologue: function */
 456               	/* frame size = 0 */
 457               	/* stack size = 4 */
 458               	.L__stack_usage = 4
 459               	.LBB256:
 460               	.LBB257:
 461               	.LBB258:
 430:../../../os/common/ports/AVR/chcore.h **** }
 462               		.loc 3 430 0
 463               	/* #APP */
 464               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 465 0008 F894      		cli
 466               	 ;  0 "" 2
 467               	/* #NOAPP */
 468               	.LBE258:
 469               	.LBE257:
 470               	.LBE256:
 331:../../../os/rt/src/chthreads.c ****   thread_t *tp;
 332:../../../os/rt/src/chthreads.c **** 
 333:../../../os/rt/src/chthreads.c ****   chDbgCheck((wsp != NULL) &&
 334:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(wsp, PORT_WORKING_AREA_ALIGN) &&
 335:../../../os/rt/src/chthreads.c ****              (size >= THD_WORKING_AREA_SIZE(0)) &&
 336:../../../os/rt/src/chthreads.c ****              MEM_IS_ALIGNED(size, PORT_STACK_ALIGN) &&
 337:../../../os/rt/src/chthreads.c ****              (prio <= HIGHPRIO) && (pf != NULL));
 338:../../../os/rt/src/chthreads.c **** 
 339:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) &&                                        \
 340:../../../os/rt/src/chthreads.c ****     ((CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE))
 341:../../../os/rt/src/chthreads.c ****   chDbgAssert(chRegFindThreadByWorkingArea(wsp) == NULL,
 342:../../../os/rt/src/chthreads.c ****               "working area in use");
 343:../../../os/rt/src/chthreads.c **** #endif
 344:../../../os/rt/src/chthreads.c **** 
 345:../../../os/rt/src/chthreads.c **** #if CH_DBG_FILL_THREADS == TRUE
 346:../../../os/rt/src/chthreads.c ****   __thd_stackfill((uint8_t *)wsp, (uint8_t *)wsp + size);
 347:../../../os/rt/src/chthreads.c **** #endif
 348:../../../os/rt/src/chthreads.c **** 
 349:../../../os/rt/src/chthreads.c ****   chSysLock();
 350:../../../os/rt/src/chthreads.c **** 
 351:../../../os/rt/src/chthreads.c ****   /* The thread structure is laid out in the upper part of the thread
 352:../../../os/rt/src/chthreads.c ****      workspace. The thread position structure is aligned to the required
 353:../../../os/rt/src/chthreads.c ****      stack alignment because it represents the stack top.*/
 354:../../../os/rt/src/chthreads.c ****   tp = threadref(((uint8_t *)wsp + size -
 471               		.loc 1 354 0
 472 000a 6E51      		subi r22,30
 473 000c 7109      		sbc r23,__zero_reg__
 474               	.LVL38:
 475 000e EC01      		movw r28,r24
 476 0010 C60F      		add r28,r22
 477 0012 D71F      		adc r29,r23
 478               	.LVL39:
 355:../../../os/rt/src/chthreads.c ****                  MEM_ALIGN_NEXT(sizeof (thread_t), PORT_STACK_ALIGN)));
 356:../../../os/rt/src/chthreads.c **** 
 357:../../../os/rt/src/chthreads.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
 358:../../../os/rt/src/chthreads.c ****   /* Stack boundary.*/
 359:../../../os/rt/src/chthreads.c ****   tp->wabase = (stkalign_t *)wsp;
 360:../../../os/rt/src/chthreads.c ****   tp->waend  = (stkalign_t *)wsp + (size / sizeof (stkalign_t));
 361:../../../os/rt/src/chthreads.c **** #endif
 362:../../../os/rt/src/chthreads.c **** 
 363:../../../os/rt/src/chthreads.c ****   /* Setting up the port-dependent part of the working area.*/
 364:../../../os/rt/src/chthreads.c ****   PORT_SETUP_CONTEXT(tp, wsp, tp, pf, arg);
 479               		.loc 1 364 0
 480 0014 FE01      		movw r30,r28
 481 0016 7597      		sbiw r30,21
 482 0018 FE83      		std Y+6,r31
 483 001a ED83      		std Y+5,r30
 484 001c 228B      		std Z+18,r18
 485 001e 318B      		std Z+17,r19
 486 0020 008B      		std Z+16,r16
 487 0022 1787      		std Z+15,r17
 488 0024 80E0      		ldi r24,lo8(gs(_port_thread_start))
 489 0026 90E0      		ldi r25,hi8(gs(_port_thread_start))
 490               	.LVL40:
 491 0028 938B      		std Z+19,r25
 492 002a 848B      		std Z+20,r24
 493               	.LVL41:
 494               	.LBB259:
 495               	.LBB260:
  96:../../../os/rt/src/chthreads.c ****   tp->state             = CH_STATE_WTSTART;
 496               		.loc 1 96 0
 497 002c 4C83      		std Y+4,r20
  97:../../../os/rt/src/chthreads.c ****   tp->flags             = CH_FLAG_MODE_STATIC;
 498               		.loc 1 97 0
 499 002e 82E0      		ldi r24,lo8(2)
 500 0030 8F87      		std Y+15,r24
  98:../../../os/rt/src/chthreads.c ****   tp->owner             = oip;
 501               		.loc 1 98 0
 502 0032 188A      		std Y+16,__zero_reg__
  99:../../../os/rt/src/chthreads.c **** #if CH_CFG_TIME_QUANTUM > 0
 503               		.loc 1 99 0
 504 0034 E0E0      		ldi r30,lo8(ch0)
 505 0036 F0E0      		ldi r31,hi8(ch0)
 506 0038 FC87      		std Y+12,r31
 507 003a EB87      		std Y+11,r30
 104:../../../os/rt/src/chthreads.c ****   tp->mtxlist           = NULL;
 508               		.loc 1 104 0
 509 003c 4D8F      		std Y+29,r20
 105:../../../os/rt/src/chthreads.c **** #endif
 510               		.loc 1 105 0
 511 003e 1C8E      		std Y+28,__zero_reg__
 512 0040 1B8E      		std Y+27,__zero_reg__
 108:../../../os/rt/src/chthreads.c **** #endif
 513               		.loc 1 108 0
 514 0042 1A8E      		std Y+26,__zero_reg__
 114:../../../os/rt/src/chthreads.c ****   tp->name              = name;
 515               		.loc 1 114 0
 516 0044 81E0      		ldi r24,lo8(1)
 517 0046 898B      		std Y+17,r24
 115:../../../os/rt/src/chthreads.c ****   REG_INSERT(oip, tp);
 518               		.loc 1 115 0
 519 0048 80E0      		ldi r24,lo8(.LC0)
 520 004a 90E0      		ldi r25,hi8(.LC0)
 521 004c 9E87      		std Y+14,r25
 522 004e 8D87      		std Y+13,r24
 116:../../../os/rt/src/chthreads.c **** #else
 523               		.loc 1 116 0
 524 0050 CE01      		movw r24,r28
 525 0052 0796      		adiw r24,7
 526               	.LVL42:
 527               	.LBB261:
 528               	.LBB262:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 529               		.loc 2 324 0
 530 0054 20E0      		ldi r18,lo8(ch0+25)
 531 0056 30E0      		ldi r19,hi8(ch0+25)
 532               	.LVL43:
 533 0058 3887      		std Y+8,r19
 534 005a 2F83      		std Y+7,r18
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 535               		.loc 2 325 0
 536 005c A38D      		ldd r26,Z+27
 537 005e B48D      		ldd r27,Z+28
 538 0060 BA87      		std Y+10,r27
 539 0062 A987      		std Y+9,r26
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 540               		.loc 2 326 0
 541 0064 8D93      		st X+,r24
 542 0066 9C93      		st X,r25
 543               		.loc 2 327 0
 544 0068 948F      		std Z+28,r25
 545 006a 838F      		std Z+27,r24
 546               	.LVL44:
 547               	.LBE262:
 548               	.LBE261:
 121:../../../os/rt/src/chthreads.c **** #endif
 549               		.loc 1 121 0
 550 006c 0D96      		adiw r24,13
 551               	.LBB263:
 552               	.LBB264:
 215:../../../os/rt/include/chlists.h **** }
 553               		.loc 2 215 0
 554 006e 9D8B      		std Y+21,r25
 555 0070 8C8B      		std Y+20,r24
 556               	.LVL45:
 557               	.LBE264:
 558               	.LBE263:
 124:../../../os/rt/src/chthreads.c **** #endif
 559               		.loc 1 124 0
 560 0072 0296      		adiw r24,2
 561               	.LVL46:
 562               	.LBB265:
 563               	.LBB266:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 564               		.loc 2 284 0
 565 0074 9F8B      		std Y+23,r25
 566 0076 8E8B      		std Y+22,r24
 285:../../../os/rt/include/chlists.h **** }
 567               		.loc 2 285 0
 568 0078 998F      		std Y+25,r25
 569 007a 888F      		std Y+24,r24
 570               	.LVL47:
 571               	.LBE266:
 572               	.LBE265:
 573               	.LBE260:
 574               	.LBE259:
 365:../../../os/rt/src/chthreads.c **** 
 366:../../../os/rt/src/chthreads.c ****   tp = __thd_object_init(currcore, tp, "noname", prio);
 367:../../../os/rt/src/chthreads.c **** 
 368:../../../os/rt/src/chthreads.c ****   /* Starting the thread immediately.*/
 369:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 575               		.loc 1 369 0
 576 007c 60E0      		ldi r22,0
 577 007e 70E0      		ldi r23,0
 578               	.LVL48:
 579 0080 CE01      		movw r24,r28
 580 0082 0E94 0000 		call chSchWakeupS
 581               	.LVL49:
 582               	.LBB267:
 583               	.LBB268:
 584               	.LBB269:
 585               	.LBB270:
 586               		.loc 3 440 0
 587               	/* #APP */
 588               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 589 0086 7894      		sei
 590               	 ;  0 "" 2
 591               	/* #NOAPP */
 592               	.LBE270:
 593               	.LBE269:
 594               	.LBE268:
 595               	.LBE267:
 370:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 371:../../../os/rt/src/chthreads.c **** 
 372:../../../os/rt/src/chthreads.c ****   return tp;
 373:../../../os/rt/src/chthreads.c **** }
 596               		.loc 1 373 0
 597 0088 CE01      		movw r24,r28
 598               	/* epilogue start */
 599 008a DF91      		pop r29
 600 008c CF91      		pop r28
 601 008e 1F91      		pop r17
 602 0090 0F91      		pop r16
 603               	.LVL50:
 604 0092 0895      		ret
 605               		.cfi_endproc
 606               	.LFE203:
 608               		.section	.text.chThdStart,"ax",@progbits
 609               	.global	chThdStart
 611               	chThdStart:
 612               	.LFB204:
 374:../../../os/rt/src/chthreads.c **** 
 375:../../../os/rt/src/chthreads.c **** /**
 376:../../../os/rt/src/chthreads.c ****  * @brief   Starts a thread created with @p chThdCreateSuspended().
 377:../../../os/rt/src/chthreads.c ****  *
 378:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 379:../../../os/rt/src/chthreads.c ****  * @return              Thread to be started.
 380:../../../os/rt/src/chthreads.c ****  *
 381:../../../os/rt/src/chthreads.c ****  * @api
 382:../../../os/rt/src/chthreads.c ****  */
 383:../../../os/rt/src/chthreads.c **** thread_t *chThdStart(thread_t *tp) {
 613               		.loc 1 383 0
 614               		.cfi_startproc
 615               	.LVL51:
 616 0000 CF93      		push r28
 617               	.LCFI10:
 618               		.cfi_def_cfa_offset 3
 619               		.cfi_offset 28, -2
 620 0002 DF93      		push r29
 621               	.LCFI11:
 622               		.cfi_def_cfa_offset 4
 623               		.cfi_offset 29, -3
 624               	/* prologue: function */
 625               	/* frame size = 0 */
 626               	/* stack size = 2 */
 627               	.L__stack_usage = 2
 628 0004 EC01      		movw r28,r24
 629               	.LBB271:
 630               	.LBB272:
 631               	.LBB273:
 430:../../../os/common/ports/AVR/chcore.h **** }
 632               		.loc 3 430 0
 633               	/* #APP */
 634               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 635 0006 F894      		cli
 636               	 ;  0 "" 2
 637               	/* #NOAPP */
 638               	.LBE273:
 639               	.LBE272:
 640               	.LBE271:
 384:../../../os/rt/src/chthreads.c **** 
 385:../../../os/rt/src/chthreads.c ****   chSysLock();
 386:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 387:../../../os/rt/src/chthreads.c ****   chSchWakeupS(tp, MSG_OK);
 641               		.loc 1 387 0
 642 0008 60E0      		ldi r22,0
 643 000a 70E0      		ldi r23,0
 644 000c 0E94 0000 		call chSchWakeupS
 645               	.LVL52:
 646               	.LBB274:
 647               	.LBB275:
 648               	.LBB276:
 649               	.LBB277:
 650               		.loc 3 440 0
 651               	/* #APP */
 652               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 653 0010 7894      		sei
 654               	 ;  0 "" 2
 655               	/* #NOAPP */
 656               	.LBE277:
 657               	.LBE276:
 658               	.LBE275:
 659               	.LBE274:
 388:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 389:../../../os/rt/src/chthreads.c **** 
 390:../../../os/rt/src/chthreads.c ****   return tp;
 391:../../../os/rt/src/chthreads.c **** }
 660               		.loc 1 391 0
 661 0012 CE01      		movw r24,r28
 662               	/* epilogue start */
 663 0014 DF91      		pop r29
 664 0016 CF91      		pop r28
 665               	.LVL53:
 666 0018 0895      		ret
 667               		.cfi_endproc
 668               	.LFE204:
 670               		.section	.text.chThdAddRef,"ax",@progbits
 671               	.global	chThdAddRef
 673               	chThdAddRef:
 674               	.LFB205:
 392:../../../os/rt/src/chthreads.c **** 
 393:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
 394:../../../os/rt/src/chthreads.c **** /**
 395:../../../os/rt/src/chthreads.c ****  * @brief   Adds a reference to a thread object.
 396:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 397:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 398:../../../os/rt/src/chthreads.c ****  *
 399:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 400:../../../os/rt/src/chthreads.c ****  * @return              The same thread pointer passed as parameter
 401:../../../os/rt/src/chthreads.c ****  *                      representing the new reference.
 402:../../../os/rt/src/chthreads.c ****  *
 403:../../../os/rt/src/chthreads.c ****  * @api
 404:../../../os/rt/src/chthreads.c ****  */
 405:../../../os/rt/src/chthreads.c **** thread_t *chThdAddRef(thread_t *tp) {
 675               		.loc 1 405 0
 676               		.cfi_startproc
 677               	.LVL54:
 678               	/* prologue: function */
 679               	/* frame size = 0 */
 680               	/* stack size = 0 */
 681               	.L__stack_usage = 0
 682               	.LBB278:
 683               	.LBB279:
 684               	.LBB280:
 430:../../../os/common/ports/AVR/chcore.h **** }
 685               		.loc 3 430 0
 686               	/* #APP */
 687               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 688 0000 F894      		cli
 689               	 ;  0 "" 2
 690               	/* #NOAPP */
 691               	.LBE280:
 692               	.LBE279:
 693               	.LBE278:
 406:../../../os/rt/src/chthreads.c **** 
 407:../../../os/rt/src/chthreads.c ****   chSysLock();
 408:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs < (trefs_t)255, "too many references");
 409:../../../os/rt/src/chthreads.c ****   tp->refs++;
 694               		.loc 1 409 0
 695 0002 FC01      		movw r30,r24
 696 0004 2189      		ldd r18,Z+17
 697 0006 2F5F      		subi r18,lo8(-(1))
 698 0008 218B      		std Z+17,r18
 699               	.LBB281:
 700               	.LBB282:
 701               	.LBB283:
 702               	.LBB284:
 703               		.loc 3 440 0
 704               	/* #APP */
 705               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 706 000a 7894      		sei
 707               	 ;  0 "" 2
 708               	/* #NOAPP */
 709               	.LBE284:
 710               	.LBE283:
 711               	.LBE282:
 712               	.LBE281:
 410:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 411:../../../os/rt/src/chthreads.c **** 
 412:../../../os/rt/src/chthreads.c ****   return tp;
 413:../../../os/rt/src/chthreads.c **** }
 713               		.loc 1 413 0
 714 000c 0895      		ret
 715               		.cfi_endproc
 716               	.LFE205:
 718               		.section	.text.chThdRelease,"ax",@progbits
 719               	.global	chThdRelease
 721               	chThdRelease:
 722               	.LFB206:
 414:../../../os/rt/src/chthreads.c **** 
 415:../../../os/rt/src/chthreads.c **** /**
 416:../../../os/rt/src/chthreads.c ****  * @brief   Releases a reference to a thread object.
 417:../../../os/rt/src/chthreads.c ****  * @details If the references counter reaches zero <b>and</b> the thread
 418:../../../os/rt/src/chthreads.c ****  *          is in the @p CH_STATE_FINAL state then the thread's memory is
 419:../../../os/rt/src/chthreads.c ****  *          returned to the proper allocator and the thread is removed
 420:../../../os/rt/src/chthreads.c ****  *          from the registry.<br>
 421:../../../os/rt/src/chthreads.c ****  *          Threads whose counter reaches zero and are still active become
 422:../../../os/rt/src/chthreads.c ****  *          "detached" and will be removed from registry on termination.
 423:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_REGISTRY must be enabled in
 424:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 425:../../../os/rt/src/chthreads.c ****  * @note    Static threads are not affected.
 426:../../../os/rt/src/chthreads.c ****  *
 427:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 428:../../../os/rt/src/chthreads.c ****  *
 429:../../../os/rt/src/chthreads.c ****  * @api
 430:../../../os/rt/src/chthreads.c ****  */
 431:../../../os/rt/src/chthreads.c **** void chThdRelease(thread_t *tp) {
 723               		.loc 1 431 0
 724               		.cfi_startproc
 725               	.LVL55:
 726               	/* prologue: function */
 727               	/* frame size = 0 */
 728               	/* stack size = 0 */
 729               	.L__stack_usage = 0
 730 0000 FC01      		movw r30,r24
 731               	.LBB307:
 732               	.LBB308:
 733               	.LBB309:
 430:../../../os/common/ports/AVR/chcore.h **** }
 734               		.loc 3 430 0
 735               	/* #APP */
 736               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 737 0002 F894      		cli
 738               	 ;  0 "" 2
 739               	/* #NOAPP */
 740               	.LBE309:
 741               	.LBE308:
 742               	.LBE307:
 432:../../../os/rt/src/chthreads.c **** 
 433:../../../os/rt/src/chthreads.c ****   chSysLock();
 434:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "not referenced");
 435:../../../os/rt/src/chthreads.c ****   tp->refs--;
 743               		.loc 1 435 0
 744 0004 9189      		ldd r25,Z+17
 745 0006 9150      		subi r25,lo8(-(-1))
 746 0008 918B      		std Z+17,r25
 436:../../../os/rt/src/chthreads.c **** 
 437:../../../os/rt/src/chthreads.c ****   /* If the references counter reaches zero and the thread is in its
 438:../../../os/rt/src/chthreads.c ****      terminated state then the memory can be returned to the proper
 439:../../../os/rt/src/chthreads.c ****      allocator.*/
 440:../../../os/rt/src/chthreads.c ****   if ((tp->refs == (trefs_t)0) && (tp->state == CH_STATE_FINAL)) {
 747               		.loc 1 440 0
 748 000a 9111      		cpse r25,__zero_reg__
 749 000c 00C0      		rjmp .L10
 750               		.loc 1 440 0 is_stmt 0 discriminator 1
 751 000e 8785      		ldd r24,Z+15
 752               	.LVL56:
 753 0010 8F30      		cpi r24,lo8(15)
 754 0012 01F0      		breq .L13
 755               	.L10:
 756               	.LBB310:
 757               	.LBB311:
 758               	.LBB312:
 759               	.LBB313:
 760               		.loc 3 440 0 is_stmt 1
 761               	/* #APP */
 762               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 763 0014 7894      		sei
 764               	 ;  0 "" 2
 765               	/* #NOAPP */
 766 0016 0895      		ret
 767               	.L13:
 768               	.LVL57:
 769               	.LBE313:
 770               	.LBE312:
 771               	.LBE311:
 772               	.LBE310:
 773               	.LBB314:
 774               	.LBB315:
 775               	.LBB316:
 776               	.LBB317:
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 345:../../../os/rt/include/chlists.h **** 
 346:../../../os/rt/include/chlists.h ****   return p;
 347:../../../os/rt/include/chlists.h **** }
 348:../../../os/rt/include/chlists.h **** 
 349:../../../os/rt/include/chlists.h **** /**
 350:../../../os/rt/include/chlists.h ****  * @brief   Removes the last-out element from a queue and returns it.
 351:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 352:../../../os/rt/include/chlists.h ****  *          element with the lowest priority.
 353:../../../os/rt/include/chlists.h ****  *
 354:../../../os/rt/include/chlists.h ****  * @param[in] qp    the pointer to the queue list header
 355:../../../os/rt/include/chlists.h ****  * @return          The removed element pointer.
 356:../../../os/rt/include/chlists.h ****  *
 357:../../../os/rt/include/chlists.h ****  * @notapi
 358:../../../os/rt/include/chlists.h ****  */
 359:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_lifo_remove(ch_queue_t *qp) {
 360:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->prev;
 361:../../../os/rt/include/chlists.h **** 
 362:../../../os/rt/include/chlists.h ****   qp->prev       = p->prev;
 363:../../../os/rt/include/chlists.h ****   qp->prev->next = qp;
 364:../../../os/rt/include/chlists.h **** 
 365:../../../os/rt/include/chlists.h ****   return p;
 366:../../../os/rt/include/chlists.h **** }
 367:../../../os/rt/include/chlists.h **** 
 368:../../../os/rt/include/chlists.h **** /**
 369:../../../os/rt/include/chlists.h ****  * @brief   Removes an element from a queue and returns it.
 370:../../../os/rt/include/chlists.h ****  * @details The element is removed from the queue regardless of its relative
 371:../../../os/rt/include/chlists.h ****  *          position and regardless the used insertion method.
 372:../../../os/rt/include/chlists.h ****  *
 373:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be removed from the queue
 374:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 375:../../../os/rt/include/chlists.h ****  *
 376:../../../os/rt/include/chlists.h ****  * @notapi
 377:../../../os/rt/include/chlists.h ****  */
 378:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_dequeue(ch_queue_t *p) {
 379:../../../os/rt/include/chlists.h **** 
 380:../../../os/rt/include/chlists.h ****   p->prev->next = p->next;
 777               		.loc 2 380 0
 778 0018 A185      		ldd r26,Z+9
 779 001a B285      		ldd r27,Z+10
 780 001c 8781      		ldd r24,Z+7
 781 001e 9085      		ldd r25,Z+8
 782 0020 1196      		adiw r26,1
 783 0022 9C93      		st X,r25
 784 0024 8E93      		st -X,r24
 381:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 785               		.loc 2 381 0
 786 0026 0780      		ldd __tmp_reg__,Z+7
 787 0028 F085      		ldd r31,Z+8
 788 002a E02D      		mov r30,__tmp_reg__
 789               	.LVL58:
 790 002c B383      		std Z+3,r27
 791 002e A283      		std Z+2,r26
 792               	.LVL59:
 793               	.LBE317:
 794               	.LBE316:
 795               	.LBB318:
 796               	.LBB319:
 797               	.LBB320:
 798               	.LBB321:
 799               		.loc 3 440 0
 800               	/* #APP */
 801               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 802 0030 7894      		sei
 803               	 ;  0 "" 2
 804               	/* #NOAPP */
 805 0032 0895      		ret
 806               	.LBE321:
 807               	.LBE320:
 808               	.LBE319:
 809               	.LBE318:
 810               	.LBE315:
 811               	.LBE314:
 812               		.cfi_endproc
 813               	.LFE206:
 815               		.section	.text.chThdExitS,"ax",@progbits
 816               	.global	chThdExitS
 818               	chThdExitS:
 819               	.LFB208:
 441:../../../os/rt/src/chthreads.c ****     REG_REMOVE(tp);
 442:../../../os/rt/src/chthreads.c ****     chSysUnlock();
 443:../../../os/rt/src/chthreads.c **** 
 444:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 445:../../../os/rt/src/chthreads.c ****     switch (tp->flags & CH_FLAG_MODE_MASK) {
 446:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_HEAP == TRUE
 447:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_HEAP:
 448:../../../os/rt/src/chthreads.c ****       chHeapFree(chThdGetWorkingAreaX(tp));
 449:../../../os/rt/src/chthreads.c ****       break;
 450:../../../os/rt/src/chthreads.c **** #endif
 451:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MEMPOOLS == TRUE
 452:../../../os/rt/src/chthreads.c ****     case CH_FLAG_MODE_MPOOL:
 453:../../../os/rt/src/chthreads.c ****       chPoolFree(tp->mpool, chThdGetWorkingAreaX(tp));
 454:../../../os/rt/src/chthreads.c ****       break;
 455:../../../os/rt/src/chthreads.c **** #endif
 456:../../../os/rt/src/chthreads.c ****     default:
 457:../../../os/rt/src/chthreads.c ****       /* Nothing else to do for static threads.*/
 458:../../../os/rt/src/chthreads.c ****       break;
 459:../../../os/rt/src/chthreads.c ****     }
 460:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_DYNAMIC == TRUE */
 461:../../../os/rt/src/chthreads.c ****     return;
 462:../../../os/rt/src/chthreads.c ****   }
 463:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 464:../../../os/rt/src/chthreads.c **** }
 465:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_REGISTRY == TRUE */
 466:../../../os/rt/src/chthreads.c **** 
 467:../../../os/rt/src/chthreads.c **** /**
 468:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 469:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 470:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 471:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 472:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 473:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 474:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 475:../../../os/rt/src/chthreads.c ****  *          the dead code.
 476:../../../os/rt/src/chthreads.c ****  *
 477:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 478:../../../os/rt/src/chthreads.c ****  *
 479:../../../os/rt/src/chthreads.c ****  * @api
 480:../../../os/rt/src/chthreads.c ****  */
 481:../../../os/rt/src/chthreads.c **** void chThdExit(msg_t msg) {
 482:../../../os/rt/src/chthreads.c **** 
 483:../../../os/rt/src/chthreads.c ****   chSysLock();
 484:../../../os/rt/src/chthreads.c ****   chThdExitS(msg);
 485:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 486:../../../os/rt/src/chthreads.c **** }
 487:../../../os/rt/src/chthreads.c **** 
 488:../../../os/rt/src/chthreads.c **** /**
 489:../../../os/rt/src/chthreads.c ****  * @brief   Terminates the current thread.
 490:../../../os/rt/src/chthreads.c ****  * @details The thread goes in the @p CH_STATE_FINAL state holding the
 491:../../../os/rt/src/chthreads.c ****  *          specified exit status code, other threads can retrieve the
 492:../../../os/rt/src/chthreads.c ****  *          exit status code by invoking the function @p chThdWait().
 493:../../../os/rt/src/chthreads.c ****  * @post    Exiting a non-static thread that does not have references
 494:../../../os/rt/src/chthreads.c ****  *          (detached) causes the thread to remain in the registry.
 495:../../../os/rt/src/chthreads.c ****  *          It can only be removed by performing a registry scan operation.
 496:../../../os/rt/src/chthreads.c ****  * @post    Eventual code after this function will never be executed,
 497:../../../os/rt/src/chthreads.c ****  *          this function never returns. The compiler has no way to
 498:../../../os/rt/src/chthreads.c ****  *          know this so do not assume that the compiler would remove
 499:../../../os/rt/src/chthreads.c ****  *          the dead code.
 500:../../../os/rt/src/chthreads.c ****  *
 501:../../../os/rt/src/chthreads.c ****  * @param[in] msg       thread exit code
 502:../../../os/rt/src/chthreads.c ****  *
 503:../../../os/rt/src/chthreads.c ****  * @sclass
 504:../../../os/rt/src/chthreads.c ****  */
 505:../../../os/rt/src/chthreads.c **** void chThdExitS(msg_t msg) {
 820               		.loc 1 505 0
 821               		.cfi_startproc
 822               	.LVL60:
 823 0000 0F93      		push r16
 824               	.LCFI12:
 825               		.cfi_def_cfa_offset 3
 826               		.cfi_offset 16, -2
 827 0002 1F93      		push r17
 828               	.LCFI13:
 829               		.cfi_def_cfa_offset 4
 830               		.cfi_offset 17, -3
 831 0004 CF93      		push r28
 832               	.LCFI14:
 833               		.cfi_def_cfa_offset 5
 834               		.cfi_offset 28, -4
 835 0006 DF93      		push r29
 836               	.LCFI15:
 837               		.cfi_def_cfa_offset 6
 838               		.cfi_offset 29, -5
 839               	/* prologue: function */
 840               	/* frame size = 0 */
 841               	/* stack size = 4 */
 842               	.L__stack_usage = 4
 843               	.LBB322:
 844               	.LBB323:
 845               		.file 4 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 846               		.loc 4 375 0
 847 0008 C091 0000 		lds r28,ch0+5
 848 000c D091 0000 		lds r29,ch0+5+1
 849               	.LBE323:
 850               	.LBE322:
 506:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 507:../../../os/rt/src/chthreads.c **** 
 508:../../../os/rt/src/chthreads.c ****   /* Storing exit message.*/
 509:../../../os/rt/src/chthreads.c ****   currtp->u.exitcode = msg;
 851               		.loc 1 509 0
 852 0010 9B8B      		std Y+19,r25
 853 0012 8A8B      		std Y+18,r24
 510:../../../os/rt/src/chthreads.c **** 
 511:../../../os/rt/src/chthreads.c ****   /* Exit handler hook.*/
 512:../../../os/rt/src/chthreads.c ****   CH_CFG_THREAD_EXIT_HOOK(currtp);
 513:../../../os/rt/src/chthreads.c **** 
 514:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_WAITEXIT == TRUE
 515:../../../os/rt/src/chthreads.c ****   /* Waking up any waiting thread.*/
 516:../../../os/rt/src/chthreads.c ****   while (unlikely(ch_list_notempty(&currtp->waiting))) {
 854               		.loc 1 516 0
 855 0014 8E01      		movw r16,r28
 856 0016 0C5E      		subi r16,-20
 857 0018 1F4F      		sbci r17,-1
 858               	.LVL61:
 859               	.LBB324:
 860               	.LBB325:
 241:../../../os/rt/include/chlists.h **** }
 861               		.loc 2 241 0
 862 001a 8C89      		ldd r24,Y+20
 863 001c 9D89      		ldd r25,Y+21
 864               	.LVL62:
 865               	.LBE325:
 866               	.LBE324:
 867               		.loc 1 516 0
 868 001e 0817      		cp r16,r24
 869 0020 1907      		cpc r17,r25
 870 0022 01F0      		breq .L19
 871               	.LVL63:
 872               	.L20:
 873               	.LBB327:
 874               	.LBB328:
 270:../../../os/rt/include/chlists.h **** 
 875               		.loc 2 270 0
 876 0024 FC01      		movw r30,r24
 877 0026 2081      		ld r18,Z
 878 0028 3181      		ldd r19,Z+1
 879 002a 3D8B      		std Y+21,r19
 880 002c 2C8B      		std Y+20,r18
 881               	.LVL64:
 882               	.LBE328:
 883               	.LBE327:
 517:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 884               		.loc 1 517 0
 885 002e 0E94 0000 		call chSchReadyI
 886               	.LVL65:
 887               	.LBB329:
 888               	.LBB326:
 241:../../../os/rt/include/chlists.h **** }
 889               		.loc 2 241 0
 890 0032 8C89      		ldd r24,Y+20
 891 0034 9D89      		ldd r25,Y+21
 892               	.LVL66:
 893               	.LBE326:
 894               	.LBE329:
 516:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(threadref(ch_list_unlink(&currtp->waiting)));
 895               		.loc 1 516 0
 896 0036 8017      		cp r24,r16
 897 0038 9107      		cpc r25,r17
 898 003a 01F4      		brne .L20
 899               	.L19:
 518:../../../os/rt/src/chthreads.c ****   }
 519:../../../os/rt/src/chthreads.c **** #endif
 520:../../../os/rt/src/chthreads.c **** 
 521:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 522:../../../os/rt/src/chthreads.c ****   if (unlikely(currtp->refs == (trefs_t)0)) {
 900               		.loc 1 522 0
 901 003c 8989      		ldd r24,Y+17
 902 003e 8111      		cpse r24,__zero_reg__
 903 0040 00C0      		rjmp .L17
 904               	.LVL67:
 905               	.LBB330:
 906               	.LBB331:
 380:../../../os/rt/include/chlists.h ****   p->next->prev = p->prev;
 907               		.loc 2 380 0
 908 0042 E985      		ldd r30,Y+9
 909 0044 FA85      		ldd r31,Y+10
 910 0046 8F81      		ldd r24,Y+7
 911 0048 9885      		ldd r25,Y+8
 912 004a 9183      		std Z+1,r25
 913 004c 8083      		st Z,r24
 914               		.loc 2 381 0
 915 004e AF81      		ldd r26,Y+7
 916 0050 B885      		ldd r27,Y+8
 917 0052 1396      		adiw r26,2+1
 918 0054 FC93      		st X,r31
 919 0056 EE93      		st -X,r30
 920 0058 1297      		sbiw r26,2
 921               	.LVL68:
 922               	.L17:
 923               	.LBE331:
 924               	.LBE330:
 523:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 524:../../../os/rt/src/chthreads.c ****     /* Static threads are immediately removed from the registry because there
 525:../../../os/rt/src/chthreads.c ****        is no memory to recover.*/
 526:../../../os/rt/src/chthreads.c ****     if (unlikely(((currtp->flags & CH_FLAG_MODE_MASK) == CH_FLAG_MODE_STATIC))) {
 527:../../../os/rt/src/chthreads.c ****       REG_REMOVE(currtp);
 528:../../../os/rt/src/chthreads.c ****     }
 529:../../../os/rt/src/chthreads.c **** #else
 530:../../../os/rt/src/chthreads.c ****     REG_REMOVE(currtp);
 531:../../../os/rt/src/chthreads.c **** #endif
 532:../../../os/rt/src/chthreads.c ****   }
 533:../../../os/rt/src/chthreads.c **** #endif
 534:../../../os/rt/src/chthreads.c **** 
 535:../../../os/rt/src/chthreads.c ****   /* Going into final state.*/
 536:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_FINAL);
 925               		.loc 1 536 0
 926 005a 8FE0      		ldi r24,lo8(15)
 927               	/* epilogue start */
 537:../../../os/rt/src/chthreads.c **** 
 538:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 539:../../../os/rt/src/chthreads.c ****   chDbgAssert(false, "zombies apocalypse");
 540:../../../os/rt/src/chthreads.c **** }
 928               		.loc 1 540 0
 929 005c DF91      		pop r29
 930 005e CF91      		pop r28
 931 0060 1F91      		pop r17
 932 0062 0F91      		pop r16
 536:../../../os/rt/src/chthreads.c **** 
 933               		.loc 1 536 0
 934 0064 0C94 0000 		jmp chSchGoSleepS
 935               	.LVL69:
 936               		.cfi_endproc
 937               	.LFE208:
 939               		.section	.text.chThdExit,"ax",@progbits
 940               	.global	chThdExit
 942               	chThdExit:
 943               	.LFB207:
 481:../../../os/rt/src/chthreads.c **** 
 944               		.loc 1 481 0
 945               		.cfi_startproc
 946               	.LVL70:
 947               	/* prologue: function */
 948               	/* frame size = 0 */
 949               	/* stack size = 0 */
 950               	.L__stack_usage = 0
 951               	.LBB332:
 952               	.LBB333:
 953               	.LBB334:
 430:../../../os/common/ports/AVR/chcore.h **** }
 954               		.loc 3 430 0
 955               	/* #APP */
 956               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 957 0000 F894      		cli
 958               	 ;  0 "" 2
 959               	/* #NOAPP */
 960               	.LBE334:
 961               	.LBE333:
 962               	.LBE332:
 484:../../../os/rt/src/chthreads.c ****   /* The thread never returns here.*/
 963               		.loc 1 484 0
 964 0002 0C94 0000 		jmp chThdExitS
 965               	.LVL71:
 966               		.cfi_endproc
 967               	.LFE207:
 969               		.section	.text.chThdWait,"ax",@progbits
 970               	.global	chThdWait
 972               	chThdWait:
 973               	.LFB209:
 541:../../../os/rt/src/chthreads.c **** 
 542:../../../os/rt/src/chthreads.c **** #if (CH_CFG_USE_WAITEXIT == TRUE) || defined(__DOXYGEN__)
 543:../../../os/rt/src/chthreads.c **** /**
 544:../../../os/rt/src/chthreads.c ****  * @brief   Blocks the execution of the invoking thread until the specified
 545:../../../os/rt/src/chthreads.c ****  *          thread terminates then the exit code is returned.
 546:../../../os/rt/src/chthreads.c ****  * @details This function waits for the specified thread to terminate then
 547:../../../os/rt/src/chthreads.c ****  *          decrements its reference counter, if the counter reaches zero then
 548:../../../os/rt/src/chthreads.c ****  *          the thread working area is returned to the proper allocator and
 549:../../../os/rt/src/chthreads.c ****  *          the thread is removed from registry.
 550:../../../os/rt/src/chthreads.c ****  * @pre     The configuration option @p CH_CFG_USE_WAITEXIT must be enabled in
 551:../../../os/rt/src/chthreads.c ****  *          order to use this function.
 552:../../../os/rt/src/chthreads.c ****  * @post    Enabling @p chThdWait() requires 2-4 (depending on the
 553:../../../os/rt/src/chthreads.c ****  *          architecture) extra bytes in the @p thread_t structure.
 554:../../../os/rt/src/chthreads.c ****  * @note    If @p CH_CFG_USE_DYNAMIC is not specified this function just waits
 555:../../../os/rt/src/chthreads.c ****  *          for the thread termination, no memory allocators are involved.
 556:../../../os/rt/src/chthreads.c ****  *
 557:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 558:../../../os/rt/src/chthreads.c ****  * @return              The exit code from the terminated thread.
 559:../../../os/rt/src/chthreads.c ****  *
 560:../../../os/rt/src/chthreads.c ****  * @api
 561:../../../os/rt/src/chthreads.c ****  */
 562:../../../os/rt/src/chthreads.c **** msg_t chThdWait(thread_t *tp) {
 974               		.loc 1 562 0
 975               		.cfi_startproc
 976               	.LVL72:
 977 0000 0F93      		push r16
 978               	.LCFI16:
 979               		.cfi_def_cfa_offset 3
 980               		.cfi_offset 16, -2
 981 0002 1F93      		push r17
 982               	.LCFI17:
 983               		.cfi_def_cfa_offset 4
 984               		.cfi_offset 17, -3
 985 0004 CF93      		push r28
 986               	.LCFI18:
 987               		.cfi_def_cfa_offset 5
 988               		.cfi_offset 28, -4
 989 0006 DF93      		push r29
 990               	.LCFI19:
 991               		.cfi_def_cfa_offset 6
 992               		.cfi_offset 29, -5
 993               	/* prologue: function */
 994               	/* frame size = 0 */
 995               	/* stack size = 4 */
 996               	.L__stack_usage = 4
 997 0008 EC01      		movw r28,r24
 998               	.LBB335:
 999               	.LBB336:
 1000               		.loc 4 375 0
 1001 000a E091 0000 		lds r30,ch0+5
 1002 000e F091 0000 		lds r31,ch0+5+1
 1003               	.LBE336:
 1004               	.LBE335:
 1005               	.LBB337:
 1006               	.LBB338:
 1007               	.LBB339:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1008               		.loc 3 430 0
 1009               	/* #APP */
 1010               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1011 0012 F894      		cli
 1012               	 ;  0 "" 2
 1013               	/* #NOAPP */
 1014               	.LBE339:
 1015               	.LBE338:
 1016               	.LBE337:
 563:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 564:../../../os/rt/src/chthreads.c ****   msg_t msg;
 565:../../../os/rt/src/chthreads.c **** 
 566:../../../os/rt/src/chthreads.c ****   chDbgCheck(tp != NULL);
 567:../../../os/rt/src/chthreads.c **** 
 568:../../../os/rt/src/chthreads.c ****   chSysLock();
 569:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp != currtp, "waiting self");
 570:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 571:../../../os/rt/src/chthreads.c ****   chDbgAssert(tp->refs > (trefs_t)0, "no references");
 572:../../../os/rt/src/chthreads.c **** #endif
 573:../../../os/rt/src/chthreads.c **** 
 574:../../../os/rt/src/chthreads.c ****   if (likely(tp->state != CH_STATE_FINAL)) {
 1017               		.loc 1 574 0
 1018 0014 8F85      		ldd r24,Y+15
 1019               	.LVL73:
 1020 0016 8F30      		cpi r24,lo8(15)
 1021 0018 01F0      		breq .L24
 1022               	.LVL74:
 1023               	.LBB340:
 1024               	.LBB341:
 254:../../../os/rt/include/chlists.h ****   lp->next = p;
 1025               		.loc 2 254 0
 1026 001a 8C89      		ldd r24,Y+20
 1027 001c 9D89      		ldd r25,Y+21
 1028 001e 9183      		std Z+1,r25
 1029 0020 8083      		st Z,r24
 255:../../../os/rt/include/chlists.h **** }
 1030               		.loc 2 255 0
 1031 0022 FD8B      		std Y+21,r31
 1032 0024 EC8B      		std Y+20,r30
 1033               	.LVL75:
 1034               	.LBE341:
 1035               	.LBE340:
 575:../../../os/rt/src/chthreads.c ****     ch_list_link(&tp->waiting, &currtp->hdr.list);
 576:../../../os/rt/src/chthreads.c ****     chSchGoSleepS(CH_STATE_WTEXIT);
 1036               		.loc 1 576 0
 1037 0026 89E0      		ldi r24,lo8(9)
 1038 0028 0E94 0000 		call chSchGoSleepS
 1039               	.LVL76:
 1040               	.L24:
 577:../../../os/rt/src/chthreads.c ****   }
 578:../../../os/rt/src/chthreads.c ****   msg = tp->u.exitcode;
 1041               		.loc 1 578 0
 1042 002c 0A89      		ldd r16,Y+18
 1043 002e 1B89      		ldd r17,Y+19
 1044               	.LVL77:
 1045               	.LBB342:
 1046               	.LBB343:
 1047               	.LBB344:
 1048               	.LBB345:
 1049               		.loc 3 440 0
 1050               	/* #APP */
 1051               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1052 0030 7894      		sei
 1053               	 ;  0 "" 2
 1054               	/* #NOAPP */
 1055               	.LBE345:
 1056               	.LBE344:
 1057               	.LBE343:
 1058               	.LBE342:
 579:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 580:../../../os/rt/src/chthreads.c **** 
 581:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_REGISTRY == TRUE
 582:../../../os/rt/src/chthreads.c ****   /* Releasing a reference to the thread.*/
 583:../../../os/rt/src/chthreads.c ****   chThdRelease(tp);
 1059               		.loc 1 583 0
 1060 0032 CE01      		movw r24,r28
 1061 0034 0E94 0000 		call chThdRelease
 1062               	.LVL78:
 584:../../../os/rt/src/chthreads.c **** #endif
 585:../../../os/rt/src/chthreads.c **** 
 586:../../../os/rt/src/chthreads.c ****   return msg;
 587:../../../os/rt/src/chthreads.c **** }
 1063               		.loc 1 587 0
 1064 0038 C801      		movw r24,r16
 1065               	/* epilogue start */
 1066 003a DF91      		pop r29
 1067 003c CF91      		pop r28
 1068               	.LVL79:
 1069 003e 1F91      		pop r17
 1070 0040 0F91      		pop r16
 1071               	.LVL80:
 1072 0042 0895      		ret
 1073               		.cfi_endproc
 1074               	.LFE209:
 1076               		.section	.text.chThdSetPriority,"ax",@progbits
 1077               	.global	chThdSetPriority
 1079               	chThdSetPriority:
 1080               	.LFB210:
 588:../../../os/rt/src/chthreads.c **** #endif /* CH_CFG_USE_WAITEXIT */
 589:../../../os/rt/src/chthreads.c **** 
 590:../../../os/rt/src/chthreads.c **** /**
 591:../../../os/rt/src/chthreads.c ****  * @brief   Changes the running thread priority level then reschedules if
 592:../../../os/rt/src/chthreads.c ****  *          necessary.
 593:../../../os/rt/src/chthreads.c ****  * @note    The function returns the real thread priority regardless of the
 594:../../../os/rt/src/chthreads.c ****  *          current priority that could be higher than the real priority
 595:../../../os/rt/src/chthreads.c ****  *          because the priority inheritance mechanism.
 596:../../../os/rt/src/chthreads.c ****  *
 597:../../../os/rt/src/chthreads.c ****  * @param[in] newprio   the new priority level of the running thread
 598:../../../os/rt/src/chthreads.c ****  * @return              The old priority level.
 599:../../../os/rt/src/chthreads.c ****  *
 600:../../../os/rt/src/chthreads.c ****  * @api
 601:../../../os/rt/src/chthreads.c ****  */
 602:../../../os/rt/src/chthreads.c **** tprio_t chThdSetPriority(tprio_t newprio) {
 1081               		.loc 1 602 0
 1082               		.cfi_startproc
 1083               	.LVL81:
 1084 0000 CF93      		push r28
 1085               	.LCFI20:
 1086               		.cfi_def_cfa_offset 3
 1087               		.cfi_offset 28, -2
 1088               	/* prologue: function */
 1089               	/* frame size = 0 */
 1090               	/* stack size = 1 */
 1091               	.L__stack_usage = 1
 1092               	.LBB346:
 1093               	.LBB347:
 1094               		.loc 4 375 0
 1095 0002 E091 0000 		lds r30,ch0+5
 1096 0006 F091 0000 		lds r31,ch0+5+1
 1097               	.LBE347:
 1098               	.LBE346:
 1099               	.LBB348:
 1100               	.LBB349:
 1101               	.LBB350:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1102               		.loc 3 430 0
 1103               	/* #APP */
 1104               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1105 000a F894      		cli
 1106               	 ;  0 "" 2
 1107               	/* #NOAPP */
 1108               	.LBE350:
 1109               	.LBE349:
 1110               	.LBE348:
 603:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 604:../../../os/rt/src/chthreads.c ****   tprio_t oldprio;
 605:../../../os/rt/src/chthreads.c **** 
 606:../../../os/rt/src/chthreads.c ****   chDbgCheck(newprio <= HIGHPRIO);
 607:../../../os/rt/src/chthreads.c **** 
 608:../../../os/rt/src/chthreads.c ****   chSysLock();
 609:../../../os/rt/src/chthreads.c **** #if CH_CFG_USE_MUTEXES == TRUE
 610:../../../os/rt/src/chthreads.c ****   oldprio = currtp->realprio;
 1111               		.loc 1 610 0
 1112 000c C58D      		ldd r28,Z+29
 1113               	.LVL82:
 611:../../../os/rt/src/chthreads.c ****   if ((currtp->hdr.pqueue.prio == currtp->realprio) ||
 1114               		.loc 1 611 0
 1115 000e 9481      		ldd r25,Z+4
 1116 0010 C917      		cp r28,r25
 1117 0012 01F0      		breq .L29
 1118               		.loc 1 611 0 is_stmt 0 discriminator 1
 1119 0014 9817      		cp r25,r24
 1120 0016 00F4      		brsh .L30
 1121               	.L29:
 612:../../../os/rt/src/chthreads.c ****       (newprio > currtp->hdr.pqueue.prio)) {
 613:../../../os/rt/src/chthreads.c ****     currtp->hdr.pqueue.prio = newprio;
 1122               		.loc 1 613 0 is_stmt 1
 1123 0018 8483      		std Z+4,r24
 1124               	.L30:
 614:../../../os/rt/src/chthreads.c ****   }
 615:../../../os/rt/src/chthreads.c ****   currtp->realprio = newprio;
 1125               		.loc 1 615 0
 1126 001a 858F      		std Z+29,r24
 616:../../../os/rt/src/chthreads.c **** #else
 617:../../../os/rt/src/chthreads.c ****   oldprio = currtp->hdr.pqueue.prio;
 618:../../../os/rt/src/chthreads.c ****   currtp->hdr.pqueue.prio = newprio;
 619:../../../os/rt/src/chthreads.c **** #endif
 620:../../../os/rt/src/chthreads.c ****   chSchRescheduleS();
 1127               		.loc 1 620 0
 1128 001c 0E94 0000 		call chSchRescheduleS
 1129               	.LVL83:
 1130               	.LBB351:
 1131               	.LBB352:
 1132               	.LBB353:
 1133               	.LBB354:
 1134               		.loc 3 440 0
 1135               	/* #APP */
 1136               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1137 0020 7894      		sei
 1138               	 ;  0 "" 2
 1139               	/* #NOAPP */
 1140               	.LBE354:
 1141               	.LBE353:
 1142               	.LBE352:
 1143               	.LBE351:
 621:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 622:../../../os/rt/src/chthreads.c **** 
 623:../../../os/rt/src/chthreads.c ****   return oldprio;
 624:../../../os/rt/src/chthreads.c **** }
 1144               		.loc 1 624 0
 1145 0022 8C2F      		mov r24,r28
 1146               	/* epilogue start */
 1147 0024 CF91      		pop r28
 1148               	.LVL84:
 1149 0026 0895      		ret
 1150               		.cfi_endproc
 1151               	.LFE210:
 1153               		.section	.text.chThdTerminate,"ax",@progbits
 1154               	.global	chThdTerminate
 1156               	chThdTerminate:
 1157               	.LFB211:
 625:../../../os/rt/src/chthreads.c **** 
 626:../../../os/rt/src/chthreads.c **** /**
 627:../../../os/rt/src/chthreads.c ****  * @brief   Requests a thread termination.
 628:../../../os/rt/src/chthreads.c ****  * @pre     The target thread must be written to invoke periodically
 629:../../../os/rt/src/chthreads.c ****  *          @p chThdShouldTerminate() and terminate cleanly if it returns
 630:../../../os/rt/src/chthreads.c ****  *          @p true.
 631:../../../os/rt/src/chthreads.c ****  * @post    The specified thread will terminate after detecting the termination
 632:../../../os/rt/src/chthreads.c ****  *          condition.
 633:../../../os/rt/src/chthreads.c ****  *
 634:../../../os/rt/src/chthreads.c ****  * @param[in] tp        pointer to the thread
 635:../../../os/rt/src/chthreads.c ****  *
 636:../../../os/rt/src/chthreads.c ****  * @api
 637:../../../os/rt/src/chthreads.c ****  */
 638:../../../os/rt/src/chthreads.c **** void chThdTerminate(thread_t *tp) {
 1158               		.loc 1 638 0
 1159               		.cfi_startproc
 1160               	.LVL85:
 1161               	/* prologue: function */
 1162               	/* frame size = 0 */
 1163               	/* stack size = 0 */
 1164               	.L__stack_usage = 0
 1165 0000 FC01      		movw r30,r24
 1166               	.LBB355:
 1167               	.LBB356:
 1168               	.LBB357:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1169               		.loc 3 430 0
 1170               	/* #APP */
 1171               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1172 0002 F894      		cli
 1173               	 ;  0 "" 2
 1174               	/* #NOAPP */
 1175               	.LBE357:
 1176               	.LBE356:
 1177               	.LBE355:
 639:../../../os/rt/src/chthreads.c **** 
 640:../../../os/rt/src/chthreads.c ****   chSysLock();
 641:../../../os/rt/src/chthreads.c ****   tp->flags |= CH_FLAG_TERMINATE;
 1178               		.loc 1 641 0
 1179 0004 9089      		ldd r25,Z+16
 1180 0006 9460      		ori r25,lo8(4)
 1181 0008 908B      		std Z+16,r25
 1182               	.LBB358:
 1183               	.LBB359:
 1184               	.LBB360:
 1185               	.LBB361:
 1186               		.loc 3 440 0
 1187               	/* #APP */
 1188               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1189 000a 7894      		sei
 1190               	 ;  0 "" 2
 1191               	/* #NOAPP */
 1192 000c 0895      		ret
 1193               	.LBE361:
 1194               	.LBE360:
 1195               	.LBE359:
 1196               	.LBE358:
 1197               		.cfi_endproc
 1198               	.LFE211:
 1200               		.section	.text.chThdSleep,"ax",@progbits
 1201               	.global	chThdSleep
 1203               	chThdSleep:
 1204               	.LFB212:
 642:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 643:../../../os/rt/src/chthreads.c **** }
 644:../../../os/rt/src/chthreads.c **** 
 645:../../../os/rt/src/chthreads.c **** /**
 646:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread for the specified time.
 647:../../../os/rt/src/chthreads.c ****  *
 648:../../../os/rt/src/chthreads.c ****  * @param[in] time      the delay in system ticks, the special values are
 649:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 650:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 651:../../../os/rt/src/chthreads.c ****  *                        state.
 652:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 653:../../../os/rt/src/chthreads.c ****  *
 654:../../../os/rt/src/chthreads.c ****  * @api
 655:../../../os/rt/src/chthreads.c ****  */
 656:../../../os/rt/src/chthreads.c **** void chThdSleep(sysinterval_t time) {
 1205               		.loc 1 656 0
 1206               		.cfi_startproc
 1207               	.LVL86:
 1208               	/* prologue: function */
 1209               	/* frame size = 0 */
 1210               	/* stack size = 0 */
 1211               	.L__stack_usage = 0
 1212               	.LBB362:
 1213               	.LBB363:
 1214               	.LBB364:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1215               		.loc 3 430 0
 1216               	/* #APP */
 1217               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1218 0000 F894      		cli
 1219               	 ;  0 "" 2
 1220               	.LVL87:
 1221               	/* #NOAPP */
 1222               	.LBE364:
 1223               	.LBE363:
 1224               	.LBE362:
 1225               	.LBB365:
 1226               	.LBB366:
 376:../../../os/rt/include/chthreads.h **** }
 377:../../../os/rt/include/chthreads.h **** 
 378:../../../os/rt/include/chthreads.h **** /**
 379:../../../os/rt/include/chthreads.h ****  * @brief   Returns the current thread priority.
 380:../../../os/rt/include/chthreads.h ****  * @note    Can be invoked in any context.
 381:../../../os/rt/include/chthreads.h ****  *
 382:../../../os/rt/include/chthreads.h ****  * @return              The current thread priority.
 383:../../../os/rt/include/chthreads.h ****  *
 384:../../../os/rt/include/chthreads.h ****  * @xclass
 385:../../../os/rt/include/chthreads.h ****  */
 386:../../../os/rt/include/chthreads.h **** static inline tprio_t chThdGetPriorityX(void) {
 387:../../../os/rt/include/chthreads.h **** 
 388:../../../os/rt/include/chthreads.h ****   return chThdGetSelfX()->hdr.pqueue.prio;
 389:../../../os/rt/include/chthreads.h **** }
 390:../../../os/rt/include/chthreads.h **** 
 391:../../../os/rt/include/chthreads.h **** /**
 392:../../../os/rt/include/chthreads.h ****  * @brief   Returns the number of ticks consumed by the specified thread.
 393:../../../os/rt/include/chthreads.h ****  * @note    This function is only available when the
 394:../../../os/rt/include/chthreads.h ****  *          @p CH_DBG_THREADS_PROFILING configuration option is enabled.
 395:../../../os/rt/include/chthreads.h ****  *
 396:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 397:../../../os/rt/include/chthreads.h ****  * @return              The number of consumed system ticks.
 398:../../../os/rt/include/chthreads.h ****  *
 399:../../../os/rt/include/chthreads.h ****  * @xclass
 400:../../../os/rt/include/chthreads.h ****  */
 401:../../../os/rt/include/chthreads.h **** #if (CH_DBG_THREADS_PROFILING == TRUE) || defined(__DOXYGEN__)
 402:../../../os/rt/include/chthreads.h **** static inline systime_t chThdGetTicksX(thread_t *tp) {
 403:../../../os/rt/include/chthreads.h **** 
 404:../../../os/rt/include/chthreads.h ****   return tp->time;
 405:../../../os/rt/include/chthreads.h **** }
 406:../../../os/rt/include/chthreads.h **** #endif
 407:../../../os/rt/include/chthreads.h **** 
 408:../../../os/rt/include/chthreads.h **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE) ||  \
 409:../../../os/rt/include/chthreads.h ****     defined(__DOXYGEN__)
 410:../../../os/rt/include/chthreads.h **** /**
 411:../../../os/rt/include/chthreads.h ****  * @brief   Returns the working area base of the specified thread.
 412:../../../os/rt/include/chthreads.h ****  *
 413:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 414:../../../os/rt/include/chthreads.h ****  * @return              The working area base pointer.
 415:../../../os/rt/include/chthreads.h ****  *
 416:../../../os/rt/include/chthreads.h ****  * @xclass
 417:../../../os/rt/include/chthreads.h ****  */
 418:../../../os/rt/include/chthreads.h **** static inline stkalign_t *chThdGetWorkingAreaX(thread_t *tp) {
 419:../../../os/rt/include/chthreads.h **** 
 420:../../../os/rt/include/chthreads.h ****   return tp->wabase;
 421:../../../os/rt/include/chthreads.h **** }
 422:../../../os/rt/include/chthreads.h **** #endif /* CH_DBG_ENABLE_STACK_CHECK == TRUE */
 423:../../../os/rt/include/chthreads.h **** 
 424:../../../os/rt/include/chthreads.h **** /**
 425:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the specified thread is in the @p CH_STATE_FINAL state.
 426:../../../os/rt/include/chthreads.h ****  *
 427:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 428:../../../os/rt/include/chthreads.h ****  * @retval true         thread terminated.
 429:../../../os/rt/include/chthreads.h ****  * @retval false        thread not terminated.
 430:../../../os/rt/include/chthreads.h ****  *
 431:../../../os/rt/include/chthreads.h ****  * @xclass
 432:../../../os/rt/include/chthreads.h ****  */
 433:../../../os/rt/include/chthreads.h **** static inline bool chThdTerminatedX(thread_t *tp) {
 434:../../../os/rt/include/chthreads.h **** 
 435:../../../os/rt/include/chthreads.h ****   return (bool)(tp->state == CH_STATE_FINAL);
 436:../../../os/rt/include/chthreads.h **** }
 437:../../../os/rt/include/chthreads.h **** 
 438:../../../os/rt/include/chthreads.h **** /**
 439:../../../os/rt/include/chthreads.h ****  * @brief   Verifies if the current thread has a termination request pending.
 440:../../../os/rt/include/chthreads.h ****  *
 441:../../../os/rt/include/chthreads.h ****  * @retval true         termination request pending.
 442:../../../os/rt/include/chthreads.h ****  * @retval false        termination request not pending.
 443:../../../os/rt/include/chthreads.h ****  *
 444:../../../os/rt/include/chthreads.h ****  * @xclass
 445:../../../os/rt/include/chthreads.h ****  */
 446:../../../os/rt/include/chthreads.h **** static inline bool chThdShouldTerminateX(void) {
 447:../../../os/rt/include/chthreads.h **** 
 448:../../../os/rt/include/chthreads.h ****   return (bool)((chThdGetSelfX()->flags & CH_FLAG_TERMINATE) != (tmode_t)0);
 449:../../../os/rt/include/chthreads.h **** }
 450:../../../os/rt/include/chthreads.h **** 
 451:../../../os/rt/include/chthreads.h **** /**
 452:../../../os/rt/include/chthreads.h ****  * @brief   Resumes a thread created with @p chThdCreateI().
 453:../../../os/rt/include/chthreads.h ****  *
 454:../../../os/rt/include/chthreads.h ****  * @param[in] tp        pointer to the thread
 455:../../../os/rt/include/chthreads.h ****  * @return              The pointer to the @p thread_t structure allocated for
 456:../../../os/rt/include/chthreads.h ****  *                      the thread into the working space area.
 457:../../../os/rt/include/chthreads.h ****  *
 458:../../../os/rt/include/chthreads.h ****  * @iclass
 459:../../../os/rt/include/chthreads.h ****  */
 460:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdStartI(thread_t *tp) {
 461:../../../os/rt/include/chthreads.h **** 
 462:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_WTSTART, "wrong state");
 463:../../../os/rt/include/chthreads.h **** 
 464:../../../os/rt/include/chthreads.h ****   return chSchReadyI(tp);
 465:../../../os/rt/include/chthreads.h **** }
 466:../../../os/rt/include/chthreads.h **** 
 467:../../../os/rt/include/chthreads.h **** /**
 468:../../../os/rt/include/chthreads.h ****  * @brief   Suspends the invoking thread for the specified number of ticks.
 469:../../../os/rt/include/chthreads.h ****  *
 470:../../../os/rt/include/chthreads.h ****  * @param[in] ticks     the delay in system ticks, the special values are
 471:../../../os/rt/include/chthreads.h ****  *                      handled as follow:
 472:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 473:../../../os/rt/include/chthreads.h ****  *                        state.
 474:../../../os/rt/include/chthreads.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 475:../../../os/rt/include/chthreads.h ****  *
 476:../../../os/rt/include/chthreads.h ****  * @sclass
 477:../../../os/rt/include/chthreads.h ****  */
 478:../../../os/rt/include/chthreads.h **** static inline void chThdSleepS(sysinterval_t ticks) {
 479:../../../os/rt/include/chthreads.h **** 
 480:../../../os/rt/include/chthreads.h ****   chDbgCheck(ticks != TIME_IMMEDIATE);
 481:../../../os/rt/include/chthreads.h **** 
 482:../../../os/rt/include/chthreads.h ****   (void) chSchGoSleepTimeoutS(CH_STATE_SLEEPING, ticks);
 1227               		.loc 4 482 0
 1228 0002 BC01      		movw r22,r24
 1229 0004 88E0      		ldi r24,lo8(8)
 1230               	.LVL88:
 1231 0006 0E94 0000 		call chSchGoSleepTimeoutS
 1232               	.LVL89:
 1233               	.LBE366:
 1234               	.LBE365:
 1235               	.LBB367:
 1236               	.LBB368:
 1237               	.LBB369:
 1238               	.LBB370:
 1239               		.loc 3 440 0
 1240               	/* #APP */
 1241               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1242 000a 7894      		sei
 1243               	 ;  0 "" 2
 1244               	/* #NOAPP */
 1245 000c 0895      		ret
 1246               	.LBE370:
 1247               	.LBE369:
 1248               	.LBE368:
 1249               	.LBE367:
 1250               		.cfi_endproc
 1251               	.LFE212:
 1253               		.section	.text.chThdSleepUntil,"ax",@progbits
 1254               	.global	chThdSleepUntil
 1256               	chThdSleepUntil:
 1257               	.LFB213:
 657:../../../os/rt/src/chthreads.c **** 
 658:../../../os/rt/src/chthreads.c ****   chSysLock();
 659:../../../os/rt/src/chthreads.c ****   chThdSleepS(time);
 660:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 661:../../../os/rt/src/chthreads.c **** }
 662:../../../os/rt/src/chthreads.c **** 
 663:../../../os/rt/src/chthreads.c **** /**
 664:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 665:../../../os/rt/src/chthreads.c ****  *          specified value.
 666:../../../os/rt/src/chthreads.c ****  * @note    The function has no concept of "past", all specifiable times
 667:../../../os/rt/src/chthreads.c ****  *          are in the future, this means that if you call this function
 668:../../../os/rt/src/chthreads.c ****  *          exceeding your calculated intervals then the function will
 669:../../../os/rt/src/chthreads.c ****  *          return in a far future time, not immediately.
 670:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntilWindowed()
 671:../../../os/rt/src/chthreads.c ****  *
 672:../../../os/rt/src/chthreads.c ****  * @param[in] time      absolute system time
 673:../../../os/rt/src/chthreads.c ****  *
 674:../../../os/rt/src/chthreads.c ****  * @api
 675:../../../os/rt/src/chthreads.c ****  */
 676:../../../os/rt/src/chthreads.c **** void chThdSleepUntil(systime_t time) {
 1258               		.loc 1 676 0
 1259               		.cfi_startproc
 1260               	.LVL90:
 1261 0000 CF93      		push r28
 1262               	.LCFI21:
 1263               		.cfi_def_cfa_offset 3
 1264               		.cfi_offset 28, -2
 1265 0002 DF93      		push r29
 1266               	.LCFI22:
 1267               		.cfi_def_cfa_offset 4
 1268               		.cfi_offset 29, -3
 1269               	/* prologue: function */
 1270               	/* frame size = 0 */
 1271               	/* stack size = 2 */
 1272               	.L__stack_usage = 2
 1273 0004 EC01      		movw r28,r24
 1274               	.LBB371:
 1275               	.LBB372:
 1276               	.LBB373:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1277               		.loc 3 430 0
 1278               	/* #APP */
 1279               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1280 0006 F894      		cli
 1281               	 ;  0 "" 2
 1282               	/* #NOAPP */
 1283               	.LBE373:
 1284               	.LBE372:
 1285               	.LBE371:
 1286               	.LBB374:
 1287               	.LBB375:
 1288               	.LBB376:
 1289               		.file 5 "../../../os/hal/osal/rt-nil/chcore_timer.h"
   1:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*
   2:../../../os/hal/osal/rt-nil/chcore_timer.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   4:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/chcore_timer.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/chcore_timer.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
   8:../../../os/hal/osal/rt-nil/chcore_timer.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  10:../../../os/hal/osal/rt-nil/chcore_timer.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/chcore_timer.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/chcore_timer.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/chcore_timer.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/chcore_timer.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/chcore_timer.h **** */
  16:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  17:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  18:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @file    osal/rt-nil//chcore_timer.h
  19:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   System Timer bindings header file.
  20:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  21:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @addtogroup OSAL_CHCORE_TIMER
  22:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @{
  23:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  24:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  25:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifndef CHCORE_TIMER_H
  26:../../../os/hal/osal/rt-nil/chcore_timer.h **** #define CHCORE_TIMER_H
  27:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  28:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  29:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module constants.                                                         */
  30:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  31:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  32:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  33:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module pre-compile time settings.                                         */
  34:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  36:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Derived constants and error checks.                                       */
  38:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  39:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  40:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  41:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module data structures and types.                                         */
  42:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  43:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  44:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  45:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module macros.                                                            */
  46:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  47:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  48:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  49:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* External declarations.                                                    */
  50:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  51:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  52:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  53:../../../os/hal/osal/rt-nil/chcore_timer.h **** extern "C" {
  54:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  55:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStartAlarm(systime_t time);
  56:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stStopAlarm(void);
  57:../../../os/hal/osal/rt-nil/chcore_timer.h ****   void stSetAlarm(systime_t time);
  58:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetCounter(void);
  59:../../../os/hal/osal/rt-nil/chcore_timer.h ****   systime_t stGetAlarm(void);
  60:../../../os/hal/osal/rt-nil/chcore_timer.h **** #ifdef __cplusplus
  61:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  62:../../../os/hal/osal/rt-nil/chcore_timer.h **** #endif
  63:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  64:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  65:../../../os/hal/osal/rt-nil/chcore_timer.h **** /* Module inline functions.                                                  */
  66:../../../os/hal/osal/rt-nil/chcore_timer.h **** /*===========================================================================*/
  67:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  68:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  69:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Starts the alarm.
  70:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @note    Makes sure that no spurious alarms are triggered after
  71:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *          this call.
  72:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  73:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the first alarm
  74:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  75:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  76:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  77:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_start_alarm(systime_t time) {
  78:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  79:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStartAlarm(time);
  80:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  81:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  82:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  83:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Stops the alarm interrupt.
  84:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  85:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  86:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  87:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_stop_alarm(void) {
  88:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  89:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stStopAlarm();
  90:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
  91:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
  92:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
  93:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Sets the alarm time.
  94:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  95:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @param[in] time      the time to be set for the next alarm
  96:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
  97:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
  98:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
  99:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline void port_timer_set_alarm(systime_t time) {
 100:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 101:../../../os/hal/osal/rt-nil/chcore_timer.h ****   stSetAlarm(time);
 102:../../../os/hal/osal/rt-nil/chcore_timer.h **** }
 103:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 104:../../../os/hal/osal/rt-nil/chcore_timer.h **** /**
 105:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @brief   Returns the system time.
 106:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 107:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @return              The system time.
 108:../../../os/hal/osal/rt-nil/chcore_timer.h ****  *
 109:../../../os/hal/osal/rt-nil/chcore_timer.h ****  * @notapi
 110:../../../os/hal/osal/rt-nil/chcore_timer.h ****  */
 111:../../../os/hal/osal/rt-nil/chcore_timer.h **** static inline systime_t port_timer_get_time(void) {
 112:../../../os/hal/osal/rt-nil/chcore_timer.h **** 
 113:../../../os/hal/osal/rt-nil/chcore_timer.h ****   return stGetCounter();
 1290               		.loc 5 113 0
 1291 0008 0E94 0000 		call stGetCounter
 1292               	.LVL91:
 1293               	.LBE376:
 1294               	.LBE375:
 1295               	.LBE374:
 1296               	.LBB377:
 1297               	.LBB378:
 1298               		.file 6 "../../../os/rt/include/chtime.h"
   1:../../../os/rt/include/chtime.h **** /*
   2:../../../os/rt/include/chtime.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chtime.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chtime.h **** 
   5:../../../os/rt/include/chtime.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chtime.h **** 
   7:../../../os/rt/include/chtime.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chtime.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chtime.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chtime.h **** 
  11:../../../os/rt/include/chtime.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chtime.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chtime.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chtime.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chtime.h **** 
  16:../../../os/rt/include/chtime.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chtime.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chtime.h **** */
  19:../../../os/rt/include/chtime.h **** 
  20:../../../os/rt/include/chtime.h **** /**
  21:../../../os/rt/include/chtime.h ****  * @file    rt/include/chtime.h
  22:../../../os/rt/include/chtime.h ****  * @brief   Time and intervals macros and structures.
  23:../../../os/rt/include/chtime.h ****  *
  24:../../../os/rt/include/chtime.h ****  * @addtogroup time_intervals
  25:../../../os/rt/include/chtime.h ****  * @details This module is responsible for handling of system time and time
  26:../../../os/rt/include/chtime.h ****  *          intervals.
  27:../../../os/rt/include/chtime.h ****  * @{
  28:../../../os/rt/include/chtime.h ****  */
  29:../../../os/rt/include/chtime.h **** 
  30:../../../os/rt/include/chtime.h **** #ifndef CHTIME_H
  31:../../../os/rt/include/chtime.h **** #define CHTIME_H
  32:../../../os/rt/include/chtime.h **** 
  33:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  34:../../../os/rt/include/chtime.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  36:../../../os/rt/include/chtime.h **** 
  37:../../../os/rt/include/chtime.h **** /**
  38:../../../os/rt/include/chtime.h ****  * @name    Special time constants
  39:../../../os/rt/include/chtime.h ****  * @{
  40:../../../os/rt/include/chtime.h ****  */
  41:../../../os/rt/include/chtime.h **** /**
  42:../../../os/rt/include/chtime.h ****  * @brief   Zero interval specification for some functions with a timeout
  43:../../../os/rt/include/chtime.h ****  *          specification.
  44:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_IMMEDIATE as timeout parameter,
  45:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  46:../../../os/rt/include/chtime.h ****  */
  47:../../../os/rt/include/chtime.h **** #define TIME_IMMEDIATE      ((sysinterval_t)0)
  48:../../../os/rt/include/chtime.h **** 
  49:../../../os/rt/include/chtime.h **** /**
  50:../../../os/rt/include/chtime.h ****  * @brief   Infinite interval specification for all functions with a timeout
  51:../../../os/rt/include/chtime.h ****  *          specification.
  52:../../../os/rt/include/chtime.h ****  * @note    Not all functions accept @p TIME_INFINITE as timeout parameter,
  53:../../../os/rt/include/chtime.h ****  *          see the specific function documentation.
  54:../../../os/rt/include/chtime.h ****  */
  55:../../../os/rt/include/chtime.h **** #define TIME_INFINITE       ((sysinterval_t)-1)
  56:../../../os/rt/include/chtime.h **** 
  57:../../../os/rt/include/chtime.h **** /**
  58:../../../os/rt/include/chtime.h ****  * @brief   Maximum interval constant usable as timeout.
  59:../../../os/rt/include/chtime.h ****  */
  60:../../../os/rt/include/chtime.h **** #define TIME_MAX_INTERVAL   ((sysinterval_t)-2)
  61:../../../os/rt/include/chtime.h **** 
  62:../../../os/rt/include/chtime.h **** /**
  63:../../../os/rt/include/chtime.h ****  * @brief   Maximum system of system time before it wraps.
  64:../../../os/rt/include/chtime.h ****  */
  65:../../../os/rt/include/chtime.h **** #define TIME_MAX_SYSTIME    ((systime_t)-1)
  66:../../../os/rt/include/chtime.h **** /** @} */
  67:../../../os/rt/include/chtime.h **** 
  68:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  69:../../../os/rt/include/chtime.h **** /* Module pre-compile time settings.                                         */
  70:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  71:../../../os/rt/include/chtime.h **** 
  72:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  73:../../../os/rt/include/chtime.h **** /* Derived constants and error checks.                                       */
  74:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  75:../../../os/rt/include/chtime.h **** 
  76:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION != 16) && (CH_CFG_ST_RESOLUTION != 32) &&         \
  77:../../../os/rt/include/chtime.h ****     (CH_CFG_ST_RESOLUTION != 64)
  78:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_RESOLUTION specified, must be 16, 32 or 64"
  79:../../../os/rt/include/chtime.h **** #endif
  80:../../../os/rt/include/chtime.h **** 
  81:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_FREQUENCY < 10
  82:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_ST_FREQUENCY specified, must be >= 10"
  83:../../../os/rt/include/chtime.h **** #endif
  84:../../../os/rt/include/chtime.h **** 
  85:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE != 16) && (CH_CFG_INTERVALS_SIZE != 32) &&       \
  86:../../../os/rt/include/chtime.h ****     (CH_CFG_INTERVALS_SIZE != 64)
  87:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_INTERVALS_SIZE specified, must be 16, 32 or 64"
  88:../../../os/rt/include/chtime.h **** #endif
  89:../../../os/rt/include/chtime.h **** 
  90:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE != 16) && (CH_CFG_TIME_TYPES_SIZE != 32)
  91:../../../os/rt/include/chtime.h **** #error "invalid CH_CFG_TIME_TYPES_SIZE specified, must be 16 or 32"
  92:../../../os/rt/include/chtime.h **** #endif
  93:../../../os/rt/include/chtime.h **** 
  94:../../../os/rt/include/chtime.h **** #if CH_CFG_INTERVALS_SIZE < CH_CFG_ST_RESOLUTION
  95:../../../os/rt/include/chtime.h **** #error "CH_CFG_INTERVALS_SIZE must be >= CH_CFG_ST_RESOLUTION"
  96:../../../os/rt/include/chtime.h **** #endif
  97:../../../os/rt/include/chtime.h **** 
  98:../../../os/rt/include/chtime.h **** /*===========================================================================*/
  99:../../../os/rt/include/chtime.h **** /* Module data structures and types.                                         */
 100:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 101:../../../os/rt/include/chtime.h **** 
 102:../../../os/rt/include/chtime.h **** /**
 103:../../../os/rt/include/chtime.h ****  * @brief   Type of system time.
 104:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 105:../../../os/rt/include/chtime.h ****  */
 106:../../../os/rt/include/chtime.h **** #if (CH_CFG_ST_RESOLUTION == 64) || defined(__DOXYGEN__)
 107:../../../os/rt/include/chtime.h **** typedef uint64_t systime_t;
 108:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 32
 109:../../../os/rt/include/chtime.h **** typedef uint32_t systime_t;
 110:../../../os/rt/include/chtime.h **** #elif CH_CFG_ST_RESOLUTION == 16
 111:../../../os/rt/include/chtime.h **** typedef uint16_t systime_t;
 112:../../../os/rt/include/chtime.h **** #endif
 113:../../../os/rt/include/chtime.h **** 
 114:../../../os/rt/include/chtime.h **** /**
 115:../../../os/rt/include/chtime.h ****  * @brief   Type of time interval.
 116:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16, 32 or 64 bits.
 117:../../../os/rt/include/chtime.h ****  */
 118:../../../os/rt/include/chtime.h **** #if (CH_CFG_INTERVALS_SIZE == 64) || defined(__DOXYGEN__)
 119:../../../os/rt/include/chtime.h **** typedef uint64_t sysinterval_t;
 120:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 32
 121:../../../os/rt/include/chtime.h **** typedef uint32_t sysinterval_t;
 122:../../../os/rt/include/chtime.h **** #elif CH_CFG_INTERVALS_SIZE == 16
 123:../../../os/rt/include/chtime.h **** typedef uint16_t sysinterval_t;
 124:../../../os/rt/include/chtime.h **** #endif
 125:../../../os/rt/include/chtime.h **** 
 126:../../../os/rt/include/chtime.h **** /**
 127:../../../os/rt/include/chtime.h ****  * @brief   Type of a time stamp.
 128:../../../os/rt/include/chtime.h ****  */
 129:../../../os/rt/include/chtime.h **** typedef uint64_t systimestamp_t;
 130:../../../os/rt/include/chtime.h **** 
 131:../../../os/rt/include/chtime.h **** #if (CH_CFG_TIME_TYPES_SIZE == 32) || defined(__DOXYGEN__)
 132:../../../os/rt/include/chtime.h **** /**
 133:../../../os/rt/include/chtime.h ****  * @brief   Type of seconds.
 134:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 135:../../../os/rt/include/chtime.h ****  */
 136:../../../os/rt/include/chtime.h **** typedef uint32_t time_secs_t;
 137:../../../os/rt/include/chtime.h **** 
 138:../../../os/rt/include/chtime.h **** /**
 139:../../../os/rt/include/chtime.h ****  * @brief   Type of milliseconds.
 140:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 141:../../../os/rt/include/chtime.h ****  */
 142:../../../os/rt/include/chtime.h **** typedef uint32_t time_msecs_t;
 143:../../../os/rt/include/chtime.h **** 
 144:../../../os/rt/include/chtime.h **** /**
 145:../../../os/rt/include/chtime.h ****  * @brief   Type of microseconds.
 146:../../../os/rt/include/chtime.h ****  * @note    It is selectable in configuration between 16 or 32 bits.
 147:../../../os/rt/include/chtime.h ****  */
 148:../../../os/rt/include/chtime.h **** typedef uint32_t time_usecs_t;
 149:../../../os/rt/include/chtime.h **** 
 150:../../../os/rt/include/chtime.h **** /**
 151:../../../os/rt/include/chtime.h ****  * @brief   Type of time conversion variable.
 152:../../../os/rt/include/chtime.h ****  * @note    This type must have double width than other time types, it is
 153:../../../os/rt/include/chtime.h ****  *          only used internally for conversions.
 154:../../../os/rt/include/chtime.h ****  */
 155:../../../os/rt/include/chtime.h **** typedef uint64_t time_conv_t;
 156:../../../os/rt/include/chtime.h **** 
 157:../../../os/rt/include/chtime.h **** #else
 158:../../../os/rt/include/chtime.h **** typedef uint16_t time_secs_t;
 159:../../../os/rt/include/chtime.h **** typedef uint16_t time_msecs_t;
 160:../../../os/rt/include/chtime.h **** typedef uint16_t time_usecs_t;
 161:../../../os/rt/include/chtime.h **** typedef uint32_t time_conv_t;
 162:../../../os/rt/include/chtime.h **** #endif
 163:../../../os/rt/include/chtime.h **** 
 164:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 165:../../../os/rt/include/chtime.h **** /* Module macros.                                                            */
 166:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 167:../../../os/rt/include/chtime.h **** 
 168:../../../os/rt/include/chtime.h **** /**
 169:../../../os/rt/include/chtime.h ****  * @name    Fast time conversion utilities
 170:../../../os/rt/include/chtime.h ****  * @{
 171:../../../os/rt/include/chtime.h ****  */
 172:../../../os/rt/include/chtime.h **** /**
 173:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 174:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 175:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 176:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 177:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 178:../../../os/rt/include/chtime.h ****  *          converted.
 179:../../../os/rt/include/chtime.h ****  *
 180:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 181:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 182:../../../os/rt/include/chtime.h ****  *
 183:../../../os/rt/include/chtime.h ****  * @api
 184:../../../os/rt/include/chtime.h ****  */
 185:../../../os/rt/include/chtime.h **** #define TIME_S2I(secs)                                                      \
 186:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((time_conv_t)(secs) * (time_conv_t)CH_CFG_ST_FREQUENCY))
 187:../../../os/rt/include/chtime.h **** 
 188:../../../os/rt/include/chtime.h **** /**
 189:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 190:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 191:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 192:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 193:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 194:../../../os/rt/include/chtime.h ****  *          converted.
 195:../../../os/rt/include/chtime.h ****  *
 196:../../../os/rt/include/chtime.h ****  * @param[in] msecs     number of milliseconds
 197:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 198:../../../os/rt/include/chtime.h ****  *
 199:../../../os/rt/include/chtime.h ****  * @api
 200:../../../os/rt/include/chtime.h ****  */
 201:../../../os/rt/include/chtime.h **** #define TIME_MS2I(msecs)                                                    \
 202:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(msecs) *                                 \
 203:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 204:../../../os/rt/include/chtime.h ****                     (time_conv_t)999) / (time_conv_t)1000))
 205:../../../os/rt/include/chtime.h **** 
 206:../../../os/rt/include/chtime.h **** /**
 207:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 208:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 209:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 210:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 211:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 212:../../../os/rt/include/chtime.h ****  *          converted.
 213:../../../os/rt/include/chtime.h ****  *
 214:../../../os/rt/include/chtime.h ****  * @param[in] usecs     number of microseconds
 215:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 216:../../../os/rt/include/chtime.h ****  *
 217:../../../os/rt/include/chtime.h ****  * @api
 218:../../../os/rt/include/chtime.h ****  */
 219:../../../os/rt/include/chtime.h **** #define TIME_US2I(usecs)                                                    \
 220:../../../os/rt/include/chtime.h ****   ((sysinterval_t)((((time_conv_t)(usecs) *                                 \
 221:../../../os/rt/include/chtime.h ****                      (time_conv_t)CH_CFG_ST_FREQUENCY) +                    \
 222:../../../os/rt/include/chtime.h ****                     (time_conv_t)999999) / (time_conv_t)1000000))
 223:../../../os/rt/include/chtime.h **** 
 224:../../../os/rt/include/chtime.h **** /**
 225:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 226:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to seconds.
 227:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 228:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 229:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 230:../../../os/rt/include/chtime.h ****  *          converted.
 231:../../../os/rt/include/chtime.h ****  *
 232:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 233:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 234:../../../os/rt/include/chtime.h ****  *
 235:../../../os/rt/include/chtime.h ****  * @api
 236:../../../os/rt/include/chtime.h ****  */
 237:../../../os/rt/include/chtime.h **** #define TIME_I2S(interval)                                                  \
 238:../../../os/rt/include/chtime.h ****   (time_secs_t)(((time_conv_t)(interval) +                                  \
 239:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY -                         \
 240:../../../os/rt/include/chtime.h ****                  (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY)
 241:../../../os/rt/include/chtime.h **** 
 242:../../../os/rt/include/chtime.h **** /**
 243:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 244:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to milliseconds.
 245:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 246:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 247:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 248:../../../os/rt/include/chtime.h ****  *          converted.
 249:../../../os/rt/include/chtime.h ****  *
 250:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 251:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 252:../../../os/rt/include/chtime.h ****  *
 253:../../../os/rt/include/chtime.h ****  * @api
 254:../../../os/rt/include/chtime.h ****  */
 255:../../../os/rt/include/chtime.h **** #define TIME_I2MS(interval)                                                 \
 256:../../../os/rt/include/chtime.h ****   (time_msecs_t)((((time_conv_t)(interval) * (time_conv_t)1000) +           \
 257:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 258:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 259:../../../os/rt/include/chtime.h **** 
 260:../../../os/rt/include/chtime.h **** /**
 261:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 262:../../../os/rt/include/chtime.h ****  * @details Converts from system ticks number to microseconds.
 263:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 264:../../../os/rt/include/chtime.h ****  * @note    Use of this macro for large values is not secure because
 265:../../../os/rt/include/chtime.h ****  *          integer overflows, make sure your value can be correctly
 266:../../../os/rt/include/chtime.h ****  *          converted.
 267:../../../os/rt/include/chtime.h ****  *
 268:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 269:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 270:../../../os/rt/include/chtime.h ****  *
 271:../../../os/rt/include/chtime.h ****  * @api
 272:../../../os/rt/include/chtime.h ****  */
 273:../../../os/rt/include/chtime.h **** #define TIME_I2US(interval)                                                 \
 274:../../../os/rt/include/chtime.h ****   (time_usecs_t)((((time_conv_t)(interval) * (time_conv_t)1000000) +        \
 275:../../../os/rt/include/chtime.h ****                   (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /      \
 276:../../../os/rt/include/chtime.h ****                  (time_conv_t)CH_CFG_ST_FREQUENCY)
 277:../../../os/rt/include/chtime.h **** /** @} */
 278:../../../os/rt/include/chtime.h **** 
 279:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 280:../../../os/rt/include/chtime.h **** /* External declarations.                                                    */
 281:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 282:../../../os/rt/include/chtime.h **** 
 283:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 284:../../../os/rt/include/chtime.h **** extern "C" {
 285:../../../os/rt/include/chtime.h **** #endif
 286:../../../os/rt/include/chtime.h **** 
 287:../../../os/rt/include/chtime.h **** #ifdef __cplusplus
 288:../../../os/rt/include/chtime.h **** }
 289:../../../os/rt/include/chtime.h **** #endif
 290:../../../os/rt/include/chtime.h **** 
 291:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 292:../../../os/rt/include/chtime.h **** /* Module inline functions.                                                  */
 293:../../../os/rt/include/chtime.h **** /*===========================================================================*/
 294:../../../os/rt/include/chtime.h **** 
 295:../../../os/rt/include/chtime.h **** /**
 296:../../../os/rt/include/chtime.h ****  * @name    Secure time conversion utilities
 297:../../../os/rt/include/chtime.h ****  * @{
 298:../../../os/rt/include/chtime.h ****  */
 299:../../../os/rt/include/chtime.h **** /**
 300:../../../os/rt/include/chtime.h ****  * @brief   Seconds to time interval.
 301:../../../os/rt/include/chtime.h ****  * @details Converts from seconds to system ticks number.
 302:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 303:../../../os/rt/include/chtime.h ****  *
 304:../../../os/rt/include/chtime.h ****  * @param[in] secs      number of seconds
 305:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 306:../../../os/rt/include/chtime.h ****  *
 307:../../../os/rt/include/chtime.h ****  * @special
 308:../../../os/rt/include/chtime.h ****  */
 309:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeS2I(time_secs_t secs) {
 310:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 311:../../../os/rt/include/chtime.h **** 
 312:../../../os/rt/include/chtime.h ****   ticks = (time_conv_t)secs * (time_conv_t)CH_CFG_ST_FREQUENCY;
 313:../../../os/rt/include/chtime.h **** 
 314:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 315:../../../os/rt/include/chtime.h ****               "conversion overflow");
 316:../../../os/rt/include/chtime.h **** 
 317:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 318:../../../os/rt/include/chtime.h **** }
 319:../../../os/rt/include/chtime.h **** 
 320:../../../os/rt/include/chtime.h **** /**
 321:../../../os/rt/include/chtime.h ****  * @brief   Milliseconds to time interval.
 322:../../../os/rt/include/chtime.h ****  * @details Converts from milliseconds to system ticks number.
 323:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 324:../../../os/rt/include/chtime.h ****  *
 325:../../../os/rt/include/chtime.h ****  * @param[in] msec      number of milliseconds
 326:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 327:../../../os/rt/include/chtime.h ****  *
 328:../../../os/rt/include/chtime.h ****  * @special
 329:../../../os/rt/include/chtime.h ****  */
 330:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeMS2I(time_msecs_t msec) {
 331:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 332:../../../os/rt/include/chtime.h **** 
 333:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)msec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 334:../../../os/rt/include/chtime.h ****            (time_conv_t)999) / (time_conv_t)1000;
 335:../../../os/rt/include/chtime.h **** 
 336:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 337:../../../os/rt/include/chtime.h ****               "conversion overflow");
 338:../../../os/rt/include/chtime.h **** 
 339:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 340:../../../os/rt/include/chtime.h **** }
 341:../../../os/rt/include/chtime.h **** 
 342:../../../os/rt/include/chtime.h **** /**
 343:../../../os/rt/include/chtime.h ****  * @brief   Microseconds to time interval.
 344:../../../os/rt/include/chtime.h ****  * @details Converts from microseconds to system ticks number.
 345:../../../os/rt/include/chtime.h ****  * @note    The result is rounded upward to the next tick boundary.
 346:../../../os/rt/include/chtime.h ****  *
 347:../../../os/rt/include/chtime.h ****  * @param[in] usec      number of microseconds
 348:../../../os/rt/include/chtime.h ****  * @return              The number of ticks.
 349:../../../os/rt/include/chtime.h ****  *
 350:../../../os/rt/include/chtime.h ****  * @special
 351:../../../os/rt/include/chtime.h ****  */
 352:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeUS2I(time_usecs_t usec) {
 353:../../../os/rt/include/chtime.h ****   time_conv_t ticks;
 354:../../../os/rt/include/chtime.h **** 
 355:../../../os/rt/include/chtime.h ****   ticks = (((time_conv_t)usec * (time_conv_t)CH_CFG_ST_FREQUENCY) +
 356:../../../os/rt/include/chtime.h ****            (time_conv_t)999999) / (time_conv_t)1000000;
 357:../../../os/rt/include/chtime.h **** 
 358:../../../os/rt/include/chtime.h ****   chDbgAssert(ticks <= (time_conv_t)TIME_MAX_INTERVAL,
 359:../../../os/rt/include/chtime.h ****               "conversion overflow");
 360:../../../os/rt/include/chtime.h **** 
 361:../../../os/rt/include/chtime.h ****   return (sysinterval_t)ticks;
 362:../../../os/rt/include/chtime.h **** }
 363:../../../os/rt/include/chtime.h **** 
 364:../../../os/rt/include/chtime.h **** /**
 365:../../../os/rt/include/chtime.h ****  * @brief   Time interval to seconds.
 366:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to seconds.
 367:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next second boundary.
 368:../../../os/rt/include/chtime.h ****  *
 369:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 370:../../../os/rt/include/chtime.h ****  * @return              The number of seconds.
 371:../../../os/rt/include/chtime.h ****  *
 372:../../../os/rt/include/chtime.h ****  * @special
 373:../../../os/rt/include/chtime.h ****  */
 374:../../../os/rt/include/chtime.h **** static inline time_secs_t chTimeI2S(sysinterval_t interval) {
 375:../../../os/rt/include/chtime.h ****   time_conv_t secs;
 376:../../../os/rt/include/chtime.h **** 
 377:../../../os/rt/include/chtime.h ****   secs = ((time_conv_t)interval +
 378:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY -
 379:../../../os/rt/include/chtime.h ****           (time_conv_t)1) / (time_conv_t)CH_CFG_ST_FREQUENCY;
 380:../../../os/rt/include/chtime.h **** 
 381:../../../os/rt/include/chtime.h ****   chDbgAssert(secs < (time_conv_t)((time_secs_t)-1),
 382:../../../os/rt/include/chtime.h ****               "conversion overflow");
 383:../../../os/rt/include/chtime.h **** 
 384:../../../os/rt/include/chtime.h ****   return (time_secs_t)secs;
 385:../../../os/rt/include/chtime.h **** }
 386:../../../os/rt/include/chtime.h **** 
 387:../../../os/rt/include/chtime.h **** /**
 388:../../../os/rt/include/chtime.h ****  * @brief   Time interval to milliseconds.
 389:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to milliseconds.
 390:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next millisecond boundary.
 391:../../../os/rt/include/chtime.h ****  *
 392:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 393:../../../os/rt/include/chtime.h ****  * @return              The number of milliseconds.
 394:../../../os/rt/include/chtime.h ****  *
 395:../../../os/rt/include/chtime.h ****  * @special
 396:../../../os/rt/include/chtime.h ****  */
 397:../../../os/rt/include/chtime.h **** static inline time_msecs_t chTimeI2MS(sysinterval_t interval) {
 398:../../../os/rt/include/chtime.h ****   time_conv_t msecs;
 399:../../../os/rt/include/chtime.h **** 
 400:../../../os/rt/include/chtime.h ****   msecs = (((time_conv_t)interval * (time_conv_t)1000) +
 401:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 402:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 403:../../../os/rt/include/chtime.h **** 
 404:../../../os/rt/include/chtime.h ****   chDbgAssert(msecs < (time_conv_t)((time_msecs_t)-1),
 405:../../../os/rt/include/chtime.h ****               "conversion overflow");
 406:../../../os/rt/include/chtime.h **** 
 407:../../../os/rt/include/chtime.h ****   return (time_msecs_t)msecs;
 408:../../../os/rt/include/chtime.h **** }
 409:../../../os/rt/include/chtime.h **** 
 410:../../../os/rt/include/chtime.h **** /**
 411:../../../os/rt/include/chtime.h ****  * @brief   Time interval to microseconds.
 412:../../../os/rt/include/chtime.h ****  * @details Converts from system interval to microseconds.
 413:../../../os/rt/include/chtime.h ****  * @note    The result is rounded up to the next microsecond boundary.
 414:../../../os/rt/include/chtime.h ****  *
 415:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval in ticks
 416:../../../os/rt/include/chtime.h ****  * @return              The number of microseconds.
 417:../../../os/rt/include/chtime.h ****  *
 418:../../../os/rt/include/chtime.h ****  * @special
 419:../../../os/rt/include/chtime.h ****  */
 420:../../../os/rt/include/chtime.h **** static inline time_usecs_t chTimeI2US(sysinterval_t interval) {
 421:../../../os/rt/include/chtime.h ****   time_conv_t usecs;
 422:../../../os/rt/include/chtime.h **** 
 423:../../../os/rt/include/chtime.h ****   usecs = (((time_conv_t)interval * (time_conv_t)1000000) +
 424:../../../os/rt/include/chtime.h ****            (time_conv_t)CH_CFG_ST_FREQUENCY - (time_conv_t)1) /
 425:../../../os/rt/include/chtime.h ****           (time_conv_t)CH_CFG_ST_FREQUENCY;
 426:../../../os/rt/include/chtime.h **** 
 427:../../../os/rt/include/chtime.h ****   chDbgAssert(usecs <= (time_conv_t)((time_usecs_t)-1),
 428:../../../os/rt/include/chtime.h ****               "conversion overflow");
 429:../../../os/rt/include/chtime.h **** 
 430:../../../os/rt/include/chtime.h ****   return (time_usecs_t)usecs;
 431:../../../os/rt/include/chtime.h **** }
 432:../../../os/rt/include/chtime.h **** 
 433:../../../os/rt/include/chtime.h **** /**
 434:../../../os/rt/include/chtime.h ****  * @brief   Adds an interval to a system time returning a system time.
 435:../../../os/rt/include/chtime.h ****  *
 436:../../../os/rt/include/chtime.h ****  * @param[in] systime   base system time
 437:../../../os/rt/include/chtime.h ****  * @param[in] interval  interval to be added
 438:../../../os/rt/include/chtime.h ****  * @return              The new system time.
 439:../../../os/rt/include/chtime.h ****  *
 440:../../../os/rt/include/chtime.h ****  * @xclass
 441:../../../os/rt/include/chtime.h ****  */
 442:../../../os/rt/include/chtime.h **** static inline systime_t chTimeAddX(systime_t systime,
 443:../../../os/rt/include/chtime.h ****                                    sysinterval_t interval) {
 444:../../../os/rt/include/chtime.h **** 
 445:../../../os/rt/include/chtime.h **** #if CH_CFG_ST_RESOLUTION != CH_CFG_INTERVALS_SIZE
 446:../../../os/rt/include/chtime.h ****   chDbgCheck(interval <= (sysinterval_t)TIME_MAX_SYSTIME);
 447:../../../os/rt/include/chtime.h **** #endif
 448:../../../os/rt/include/chtime.h **** 
 449:../../../os/rt/include/chtime.h ****   return systime + (systime_t)interval;
 450:../../../os/rt/include/chtime.h **** }
 451:../../../os/rt/include/chtime.h **** 
 452:../../../os/rt/include/chtime.h **** /**
 453:../../../os/rt/include/chtime.h ****  * @brief   Subtracts two system times returning an interval.
 454:../../../os/rt/include/chtime.h ****  *
 455:../../../os/rt/include/chtime.h ****  * @param[in] start     first system time
 456:../../../os/rt/include/chtime.h ****  * @param[in] end       second system time
 457:../../../os/rt/include/chtime.h ****  * @return              The interval representing the time difference.
 458:../../../os/rt/include/chtime.h ****  *
 459:../../../os/rt/include/chtime.h ****  * @xclass
 460:../../../os/rt/include/chtime.h ****  */
 461:../../../os/rt/include/chtime.h **** static inline sysinterval_t chTimeDiffX(systime_t start, systime_t end) {
 462:../../../os/rt/include/chtime.h **** 
 463:../../../os/rt/include/chtime.h ****   /*lint -save -e9033 [10.8] This cast is required by the operation, it is
 464:../../../os/rt/include/chtime.h ****     known that the destination type can be wider.*/
 465:../../../os/rt/include/chtime.h ****   return (sysinterval_t)((systime_t)(end - start));
 1299               		.loc 6 465 0
 1300 000c BE01      		movw r22,r28
 1301 000e 681B      		sub r22,r24
 1302 0010 790B      		sbc r23,r25
 1303               	.LVL92:
 1304               	.LBE378:
 1305               	.LBE377:
 677:../../../os/rt/src/chthreads.c ****   sysinterval_t interval;
 678:../../../os/rt/src/chthreads.c **** 
 679:../../../os/rt/src/chthreads.c ****   chSysLock();
 680:../../../os/rt/src/chthreads.c ****   interval = chTimeDiffX(chVTGetSystemTimeX(), time);
 681:../../../os/rt/src/chthreads.c ****   if (likely(interval > (sysinterval_t)0)) {
 1306               		.loc 1 681 0
 1307 0012 01F0      		breq .L34
 1308               	.LVL93:
 1309               	.LBB379:
 1310               	.LBB380:
 1311               		.loc 4 482 0
 1312 0014 88E0      		ldi r24,lo8(8)
 1313 0016 0E94 0000 		call chSchGoSleepTimeoutS
 1314               	.LVL94:
 1315               	.L34:
 1316               	.LBE380:
 1317               	.LBE379:
 1318               	.LBB381:
 1319               	.LBB382:
 1320               	.LBB383:
 1321               	.LBB384:
 1322               		.loc 3 440 0
 1323               	/* #APP */
 1324               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1325 001a 7894      		sei
 1326               	 ;  0 "" 2
 1327               	/* epilogue start */
 1328               	/* #NOAPP */
 1329               	.LBE384:
 1330               	.LBE383:
 1331               	.LBE382:
 1332               	.LBE381:
 682:../../../os/rt/src/chthreads.c ****     chThdSleepS(interval);
 683:../../../os/rt/src/chthreads.c ****   }
 684:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 685:../../../os/rt/src/chthreads.c **** }
 1333               		.loc 1 685 0
 1334 001c DF91      		pop r29
 1335 001e CF91      		pop r28
 1336               	.LVL95:
 1337 0020 0895      		ret
 1338               		.cfi_endproc
 1339               	.LFE213:
 1341               		.section	.text.chThdSleepUntilWindowed,"ax",@progbits
 1342               	.global	chThdSleepUntilWindowed
 1344               	chThdSleepUntilWindowed:
 1345               	.LFB214:
 686:../../../os/rt/src/chthreads.c **** 
 687:../../../os/rt/src/chthreads.c **** /**
 688:../../../os/rt/src/chthreads.c ****  * @brief   Suspends the invoking thread until the system time arrives to the
 689:../../../os/rt/src/chthreads.c ****  *          specified value.
 690:../../../os/rt/src/chthreads.c ****  * @note    The system time is assumed to be between @p prev and @p next
 691:../../../os/rt/src/chthreads.c ****  *          else the call is assumed to have been called outside the
 692:../../../os/rt/src/chthreads.c ****  *          allowed time interval, in this case no sleep is performed.
 693:../../../os/rt/src/chthreads.c ****  * @see     chThdSleepUntil()
 694:../../../os/rt/src/chthreads.c ****  *
 695:../../../os/rt/src/chthreads.c ****  * @param[in] prev      absolute system time of the previous deadline
 696:../../../os/rt/src/chthreads.c ****  * @param[in] next      absolute system time of the next deadline
 697:../../../os/rt/src/chthreads.c ****  * @return              the @p next parameter
 698:../../../os/rt/src/chthreads.c ****  *
 699:../../../os/rt/src/chthreads.c ****  * @api
 700:../../../os/rt/src/chthreads.c ****  */
 701:../../../os/rt/src/chthreads.c **** systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next) {
 1346               		.loc 1 701 0
 1347               		.cfi_startproc
 1348               	.LVL96:
 1349 0000 0F93      		push r16
 1350               	.LCFI23:
 1351               		.cfi_def_cfa_offset 3
 1352               		.cfi_offset 16, -2
 1353 0002 1F93      		push r17
 1354               	.LCFI24:
 1355               		.cfi_def_cfa_offset 4
 1356               		.cfi_offset 17, -3
 1357 0004 CF93      		push r28
 1358               	.LCFI25:
 1359               		.cfi_def_cfa_offset 5
 1360               		.cfi_offset 28, -4
 1361 0006 DF93      		push r29
 1362               	.LCFI26:
 1363               		.cfi_def_cfa_offset 6
 1364               		.cfi_offset 29, -5
 1365               	/* prologue: function */
 1366               	/* frame size = 0 */
 1367               	/* stack size = 4 */
 1368               	.L__stack_usage = 4
 1369 0008 8C01      		movw r16,r24
 1370 000a EB01      		movw r28,r22
 1371               	.LBB385:
 1372               	.LBB386:
 1373               	.LBB387:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1374               		.loc 3 430 0
 1375               	/* #APP */
 1376               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1377 000c F894      		cli
 1378               	 ;  0 "" 2
 1379               	/* #NOAPP */
 1380               	.LBE387:
 1381               	.LBE386:
 1382               	.LBE385:
 1383               	.LBB388:
 1384               	.LBB389:
 1385               	.LBB390:
 1386               		.loc 5 113 0
 1387 000e 0E94 0000 		call stGetCounter
 1388               	.LVL97:
 1389               	.LBE390:
 1390               	.LBE389:
 1391               	.LBE388:
 702:../../../os/rt/src/chthreads.c ****   systime_t time;
 703:../../../os/rt/src/chthreads.c **** 
 704:../../../os/rt/src/chthreads.c ****   chSysLock();
 705:../../../os/rt/src/chthreads.c ****   time = chVTGetSystemTimeX();
 706:../../../os/rt/src/chthreads.c ****   if (likely(chTimeIsInRangeX(time, prev, next))) {
 1392               		.loc 1 706 0
 1393 0012 AE01      		movw r20,r28
 1394 0014 401B      		sub r20,r16
 1395 0016 510B      		sbc r21,r17
 1396 0018 9C01      		movw r18,r24
 1397 001a 201B      		sub r18,r16
 1398 001c 310B      		sbc r19,r17
 1399 001e 2417      		cp r18,r20
 1400 0020 3507      		cpc r19,r21
 1401 0022 00F4      		brsh .L39
 1402               	.LBB391:
 1403               	.LBB392:
 1404               		.loc 4 482 0
 1405 0024 BE01      		movw r22,r28
 1406 0026 681B      		sub r22,r24
 1407 0028 790B      		sbc r23,r25
 1408 002a 88E0      		ldi r24,lo8(8)
 1409 002c 0E94 0000 		call chSchGoSleepTimeoutS
 1410               	.LVL98:
 1411               	.L39:
 1412               	.LBE392:
 1413               	.LBE391:
 1414               	.LBB393:
 1415               	.LBB394:
 1416               	.LBB395:
 1417               	.LBB396:
 1418               		.loc 3 440 0
 1419               	/* #APP */
 1420               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1421 0030 7894      		sei
 1422               	 ;  0 "" 2
 1423               	/* #NOAPP */
 1424               	.LBE396:
 1425               	.LBE395:
 1426               	.LBE394:
 1427               	.LBE393:
 707:../../../os/rt/src/chthreads.c ****     chThdSleepS(chTimeDiffX(time, next));
 708:../../../os/rt/src/chthreads.c ****   }
 709:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 710:../../../os/rt/src/chthreads.c **** 
 711:../../../os/rt/src/chthreads.c ****   return next;
 712:../../../os/rt/src/chthreads.c **** }
 1428               		.loc 1 712 0
 1429 0032 CE01      		movw r24,r28
 1430               	/* epilogue start */
 1431 0034 DF91      		pop r29
 1432 0036 CF91      		pop r28
 1433               	.LVL99:
 1434 0038 1F91      		pop r17
 1435 003a 0F91      		pop r16
 1436               	.LVL100:
 1437 003c 0895      		ret
 1438               		.cfi_endproc
 1439               	.LFE214:
 1441               		.section	.text.chThdYield,"ax",@progbits
 1442               	.global	chThdYield
 1444               	chThdYield:
 1445               	.LFB215:
 713:../../../os/rt/src/chthreads.c **** 
 714:../../../os/rt/src/chthreads.c **** /**
 715:../../../os/rt/src/chthreads.c ****  * @brief   Yields the time slot.
 716:../../../os/rt/src/chthreads.c ****  * @details Yields the CPU control to the next thread in the ready list with
 717:../../../os/rt/src/chthreads.c ****  *          equal priority, if any.
 718:../../../os/rt/src/chthreads.c ****  *
 719:../../../os/rt/src/chthreads.c ****  * @api
 720:../../../os/rt/src/chthreads.c ****  */
 721:../../../os/rt/src/chthreads.c **** void chThdYield(void) {
 1446               		.loc 1 721 0
 1447               		.cfi_startproc
 1448               	/* prologue: function */
 1449               	/* frame size = 0 */
 1450               	/* stack size = 0 */
 1451               	.L__stack_usage = 0
 1452               	.LBB397:
 1453               	.LBB398:
 1454               	.LBB399:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1455               		.loc 3 430 0
 1456               	/* #APP */
 1457               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1458 0000 F894      		cli
 1459               	 ;  0 "" 2
 1460               	/* #NOAPP */
 1461               	.LBE399:
 1462               	.LBE398:
 1463               	.LBE397:
 722:../../../os/rt/src/chthreads.c **** 
 723:../../../os/rt/src/chthreads.c ****   chSysLock();
 724:../../../os/rt/src/chthreads.c ****   chSchDoYieldS();
 1464               		.loc 1 724 0
 1465 0002 0E94 0000 		call chSchDoYieldS
 1466               	.LVL101:
 1467               	.LBB400:
 1468               	.LBB401:
 1469               	.LBB402:
 1470               	.LBB403:
 1471               		.loc 3 440 0
 1472               	/* #APP */
 1473               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1474 0006 7894      		sei
 1475               	 ;  0 "" 2
 1476               	/* #NOAPP */
 1477 0008 0895      		ret
 1478               	.LBE403:
 1479               	.LBE402:
 1480               	.LBE401:
 1481               	.LBE400:
 1482               		.cfi_endproc
 1483               	.LFE215:
 1485               		.section	.text.chThdSuspendS,"ax",@progbits
 1486               	.global	chThdSuspendS
 1488               	chThdSuspendS:
 1489               	.LFB216:
 725:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 726:../../../os/rt/src/chthreads.c **** }
 727:../../../os/rt/src/chthreads.c **** 
 728:../../../os/rt/src/chthreads.c **** /**
 729:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 730:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 731:../../../os/rt/src/chthreads.c ****  *          context.
 732:../../../os/rt/src/chthreads.c ****  *
 733:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 734:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 735:../../../os/rt/src/chthreads.c ****  *
 736:../../../os/rt/src/chthreads.c ****  * @sclass
 737:../../../os/rt/src/chthreads.c ****  */
 738:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendS(thread_reference_t *trp) {
 1490               		.loc 1 738 0
 1491               		.cfi_startproc
 1492               	.LVL102:
 1493 0000 CF93      		push r28
 1494               	.LCFI27:
 1495               		.cfi_def_cfa_offset 3
 1496               		.cfi_offset 28, -2
 1497 0002 DF93      		push r29
 1498               	.LCFI28:
 1499               		.cfi_def_cfa_offset 4
 1500               		.cfi_offset 29, -3
 1501               	/* prologue: function */
 1502               	/* frame size = 0 */
 1503               	/* stack size = 2 */
 1504               	.L__stack_usage = 2
 1505               	.LBB404:
 1506               	.LBB405:
 375:../../../os/rt/include/chthreads.h **** }
 1507               		.loc 4 375 0
 1508 0004 C0E0      		ldi r28,lo8(ch0)
 1509 0006 D0E0      		ldi r29,hi8(ch0)
 1510 0008 ED81      		ldd r30,Y+5
 1511 000a FE81      		ldd r31,Y+6
 1512               	.LBE405:
 1513               	.LBE404:
 739:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 740:../../../os/rt/src/chthreads.c **** 
 741:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 742:../../../os/rt/src/chthreads.c **** 
 743:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1514               		.loc 1 743 0
 1515 000c DC01      		movw r26,r24
 1516 000e ED93      		st X+,r30
 1517 0010 FC93      		st X,r31
 744:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1518               		.loc 1 744 0
 1519 0012 938B      		std Z+19,r25
 1520 0014 828B      		std Z+18,r24
 745:../../../os/rt/src/chthreads.c ****   chSchGoSleepS(CH_STATE_SUSPENDED);
 1521               		.loc 1 745 0
 1522 0016 83E0      		ldi r24,lo8(3)
 1523               	.LVL103:
 1524 0018 0E94 0000 		call chSchGoSleepS
 1525               	.LVL104:
 746:../../../os/rt/src/chthreads.c **** 
 747:../../../os/rt/src/chthreads.c ****   return chThdGetSelfX()->u.rdymsg;
 1526               		.loc 1 747 0
 1527 001c ED81      		ldd r30,Y+5
 1528 001e FE81      		ldd r31,Y+6
 748:../../../os/rt/src/chthreads.c **** }
 1529               		.loc 1 748 0
 1530 0020 8289      		ldd r24,Z+18
 1531 0022 9389      		ldd r25,Z+19
 1532               	/* epilogue start */
 1533 0024 DF91      		pop r29
 1534 0026 CF91      		pop r28
 1535 0028 0895      		ret
 1536               		.cfi_endproc
 1537               	.LFE216:
 1539               		.section	.text.chThdSuspendTimeoutS,"ax",@progbits
 1540               	.global	chThdSuspendTimeoutS
 1542               	chThdSuspendTimeoutS:
 1543               	.LFB217:
 749:../../../os/rt/src/chthreads.c **** 
 750:../../../os/rt/src/chthreads.c **** /**
 751:../../../os/rt/src/chthreads.c ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 752:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 753:../../../os/rt/src/chthreads.c ****  *          context.
 754:../../../os/rt/src/chthreads.c ****  *
 755:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 756:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 757:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 758:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 759:../../../os/rt/src/chthreads.c ****  *                        state.
 760:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not suspended and
 761:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 762:../../../os/rt/src/chthreads.c ****  *                        occurred.
 763:../../../os/rt/src/chthreads.c ****  * @return              The wake up message.
 764:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the operation timed out.
 765:../../../os/rt/src/chthreads.c ****  *
 766:../../../os/rt/src/chthreads.c ****  * @sclass
 767:../../../os/rt/src/chthreads.c ****  */
 768:../../../os/rt/src/chthreads.c **** msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout) {
 1544               		.loc 1 768 0
 1545               		.cfi_startproc
 1546               	.LVL105:
 1547               	/* prologue: function */
 1548               	/* frame size = 0 */
 1549               	/* stack size = 0 */
 1550               	.L__stack_usage = 0
 1551               	.LBB406:
 1552               	.LBB407:
 375:../../../os/rt/include/chthreads.h **** }
 1553               		.loc 4 375 0
 1554 0000 E091 0000 		lds r30,ch0+5
 1555 0004 F091 0000 		lds r31,ch0+5+1
 1556               	.LBE407:
 1557               	.LBE406:
 769:../../../os/rt/src/chthreads.c ****   thread_t *tp = chThdGetSelfX();
 770:../../../os/rt/src/chthreads.c **** 
 771:../../../os/rt/src/chthreads.c ****   chDbgAssert(*trp == NULL, "not NULL");
 772:../../../os/rt/src/chthreads.c **** 
 773:../../../os/rt/src/chthreads.c ****   if (unlikely(TIME_IMMEDIATE == timeout)) {
 1558               		.loc 1 773 0
 1559 0008 6115      		cp r22,__zero_reg__
 1560 000a 7105      		cpc r23,__zero_reg__
 1561 000c 01F0      		breq .L43
 774:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 775:../../../os/rt/src/chthreads.c ****   }
 776:../../../os/rt/src/chthreads.c **** 
 777:../../../os/rt/src/chthreads.c ****   *trp = tp;
 1562               		.loc 1 777 0
 1563 000e DC01      		movw r26,r24
 1564 0010 ED93      		st X+,r30
 1565 0012 FC93      		st X,r31
 778:../../../os/rt/src/chthreads.c ****   tp->u.wttrp = trp;
 1566               		.loc 1 778 0
 1567 0014 938B      		std Z+19,r25
 1568 0016 828B      		std Z+18,r24
 779:../../../os/rt/src/chthreads.c **** 
 780:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_SUSPENDED, timeout);
 1569               		.loc 1 780 0
 1570 0018 83E0      		ldi r24,lo8(3)
 1571               	.LVL106:
 1572 001a 0C94 0000 		jmp chSchGoSleepTimeoutS
 1573               	.LVL107:
 1574               	.L43:
 781:../../../os/rt/src/chthreads.c **** }
 1575               		.loc 1 781 0
 1576 001e 8FEF      		ldi r24,lo8(-1)
 1577 0020 9FEF      		ldi r25,lo8(-1)
 1578               	.LVL108:
 1579 0022 0895      		ret
 1580               		.cfi_endproc
 1581               	.LFE217:
 1583               		.section	.text.chThdResumeI,"ax",@progbits
 1584               	.global	chThdResumeI
 1586               	chThdResumeI:
 1587               	.LFB218:
 782:../../../os/rt/src/chthreads.c **** 
 783:../../../os/rt/src/chthreads.c **** /**
 784:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 785:../../../os/rt/src/chthreads.c ****  * @note    This function must not reschedule because it can be called from
 786:../../../os/rt/src/chthreads.c ****  *          ISR context.
 787:../../../os/rt/src/chthreads.c ****  *
 788:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 789:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 790:../../../os/rt/src/chthreads.c ****  *
 791:../../../os/rt/src/chthreads.c ****  * @iclass
 792:../../../os/rt/src/chthreads.c ****  */
 793:../../../os/rt/src/chthreads.c **** void chThdResumeI(thread_reference_t *trp, msg_t msg) {
 1588               		.loc 1 793 0
 1589               		.cfi_startproc
 1590               	.LVL109:
 1591               	/* prologue: function */
 1592               	/* frame size = 0 */
 1593               	/* stack size = 0 */
 1594               	.L__stack_usage = 0
 794:../../../os/rt/src/chthreads.c **** 
 795:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1595               		.loc 1 795 0
 1596 0000 DC01      		movw r26,r24
 1597 0002 ED91      		ld r30,X+
 1598 0004 FC91      		ld r31,X
 1599 0006 1197      		sbiw r26,1
 1600 0008 3097      		sbiw r30,0
 1601 000a 01F0      		breq .L44
 1602               	.LVL110:
 1603               	.LBB408:
 796:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 797:../../../os/rt/src/chthreads.c **** 
 798:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 799:../../../os/rt/src/chthreads.c **** 
 800:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1604               		.loc 1 800 0
 1605 000c 1D92      		st X+,__zero_reg__
 1606 000e 1C92      		st X,__zero_reg__
 801:../../../os/rt/src/chthreads.c ****     tp->u.rdymsg = msg;
 1607               		.loc 1 801 0
 1608 0010 738B      		std Z+19,r23
 1609 0012 628B      		std Z+18,r22
 802:../../../os/rt/src/chthreads.c ****     (void) chSchReadyI(tp);
 1610               		.loc 1 802 0
 1611 0014 CF01      		movw r24,r30
 1612               	.LVL111:
 1613 0016 0C94 0000 		jmp chSchReadyI
 1614               	.LVL112:
 1615               	.L44:
 1616 001a 0895      		ret
 1617               	.LBE408:
 1618               		.cfi_endproc
 1619               	.LFE218:
 1621               		.section	.text.chThdResumeS,"ax",@progbits
 1622               	.global	chThdResumeS
 1624               	chThdResumeS:
 1625               	.LFB219:
 803:../../../os/rt/src/chthreads.c ****   }
 804:../../../os/rt/src/chthreads.c **** }
 805:../../../os/rt/src/chthreads.c **** 
 806:../../../os/rt/src/chthreads.c **** /**
 807:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 808:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 809:../../../os/rt/src/chthreads.c ****  *          context.
 810:../../../os/rt/src/chthreads.c ****  *
 811:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 812:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 813:../../../os/rt/src/chthreads.c ****  *
 814:../../../os/rt/src/chthreads.c ****  * @iclass
 815:../../../os/rt/src/chthreads.c ****  */
 816:../../../os/rt/src/chthreads.c **** void chThdResumeS(thread_reference_t *trp, msg_t msg) {
 1626               		.loc 1 816 0
 1627               		.cfi_startproc
 1628               	.LVL113:
 1629               	/* prologue: function */
 1630               	/* frame size = 0 */
 1631               	/* stack size = 0 */
 1632               	.L__stack_usage = 0
 817:../../../os/rt/src/chthreads.c **** 
 818:../../../os/rt/src/chthreads.c ****   if (*trp != NULL) {
 1633               		.loc 1 818 0
 1634 0000 FC01      		movw r30,r24
 1635 0002 2081      		ld r18,Z
 1636 0004 3181      		ldd r19,Z+1
 1637 0006 2115      		cp r18,__zero_reg__
 1638 0008 3105      		cpc r19,__zero_reg__
 1639 000a 01F0      		breq .L46
 1640               	.LVL114:
 1641               	.LBB409:
 819:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 820:../../../os/rt/src/chthreads.c **** 
 821:../../../os/rt/src/chthreads.c ****     chDbgAssert(tp->state == CH_STATE_SUSPENDED, "not CH_STATE_SUSPENDED");
 822:../../../os/rt/src/chthreads.c **** 
 823:../../../os/rt/src/chthreads.c ****     *trp = NULL;
 1642               		.loc 1 823 0
 1643 000c 1182      		std Z+1,__zero_reg__
 1644 000e 1082      		st Z,__zero_reg__
 824:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1645               		.loc 1 824 0
 1646 0010 C901      		movw r24,r18
 1647               	.LVL115:
 1648 0012 0C94 0000 		jmp chSchWakeupS
 1649               	.LVL116:
 1650               	.L46:
 1651 0016 0895      		ret
 1652               	.LBE409:
 1653               		.cfi_endproc
 1654               	.LFE219:
 1656               		.section	.text.chThdResume,"ax",@progbits
 1657               	.global	chThdResume
 1659               	chThdResume:
 1660               	.LFB220:
 825:../../../os/rt/src/chthreads.c ****   }
 826:../../../os/rt/src/chthreads.c **** }
 827:../../../os/rt/src/chthreads.c **** 
 828:../../../os/rt/src/chthreads.c **** /**
 829:../../../os/rt/src/chthreads.c ****  * @brief   Wakes up a thread waiting on a thread reference object.
 830:../../../os/rt/src/chthreads.c ****  * @note    This function must reschedule, it can only be called from thread
 831:../../../os/rt/src/chthreads.c ****  *          context.
 832:../../../os/rt/src/chthreads.c ****  *
 833:../../../os/rt/src/chthreads.c ****  * @param[in] trp       a pointer to a thread reference object
 834:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 835:../../../os/rt/src/chthreads.c ****  *
 836:../../../os/rt/src/chthreads.c ****  * @api
 837:../../../os/rt/src/chthreads.c ****  */
 838:../../../os/rt/src/chthreads.c **** void chThdResume(thread_reference_t *trp, msg_t msg) {
 1661               		.loc 1 838 0
 1662               		.cfi_startproc
 1663               	.LVL117:
 1664               	/* prologue: function */
 1665               	/* frame size = 0 */
 1666               	/* stack size = 0 */
 1667               	.L__stack_usage = 0
 1668 0000 FC01      		movw r30,r24
 1669               	.LBB410:
 1670               	.LBB411:
 1671               	.LBB412:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1672               		.loc 3 430 0
 1673               	/* #APP */
 1674               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1675 0002 F894      		cli
 1676               	 ;  0 "" 2
 1677               	.LVL118:
 1678               	/* #NOAPP */
 1679               	.LBE412:
 1680               	.LBE411:
 1681               	.LBE410:
 1682               	.LBB413:
 1683               	.LBB414:
 818:../../../os/rt/src/chthreads.c ****     thread_t *tp = *trp;
 1684               		.loc 1 818 0
 1685 0004 8081      		ld r24,Z
 1686 0006 9181      		ldd r25,Z+1
 1687               	.LVL119:
 1688 0008 0097      		sbiw r24,0
 1689 000a 01F0      		breq .L49
 1690               	.LVL120:
 1691               	.LBB415:
 823:../../../os/rt/src/chthreads.c ****     chSchWakeupS(tp, msg);
 1692               		.loc 1 823 0
 1693 000c 1182      		std Z+1,__zero_reg__
 1694 000e 1082      		st Z,__zero_reg__
 824:../../../os/rt/src/chthreads.c ****   }
 1695               		.loc 1 824 0
 1696 0010 0E94 0000 		call chSchWakeupS
 1697               	.LVL121:
 1698               	.L49:
 1699               	.LBE415:
 1700               	.LBE414:
 1701               	.LBE413:
 1702               	.LBB416:
 1703               	.LBB417:
 1704               	.LBB418:
 1705               	.LBB419:
 1706               		.loc 3 440 0
 1707               	/* #APP */
 1708               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1709 0014 7894      		sei
 1710               	 ;  0 "" 2
 1711               	/* #NOAPP */
 1712 0016 0895      		ret
 1713               	.LBE419:
 1714               	.LBE418:
 1715               	.LBE417:
 1716               	.LBE416:
 1717               		.cfi_endproc
 1718               	.LFE220:
 1720               		.section	.text.chThdQueueObjectInit,"ax",@progbits
 1721               	.global	chThdQueueObjectInit
 1723               	chThdQueueObjectInit:
 1724               	.LFB221:
 839:../../../os/rt/src/chthreads.c **** 
 840:../../../os/rt/src/chthreads.c ****   chSysLock();
 841:../../../os/rt/src/chthreads.c ****   chThdResumeS(trp, msg);
 842:../../../os/rt/src/chthreads.c ****   chSysUnlock();
 843:../../../os/rt/src/chthreads.c **** }
 844:../../../os/rt/src/chthreads.c **** 
 845:../../../os/rt/src/chthreads.c **** /**
 846:../../../os/rt/src/chthreads.c ****  * @brief   Initializes a threads queue object.
 847:../../../os/rt/src/chthreads.c ****  *
 848:../../../os/rt/src/chthreads.c ****  * @param[out] tqp      pointer to a @p threads_queue_t object
 849:../../../os/rt/src/chthreads.c ****  *
 850:../../../os/rt/src/chthreads.c ****  * @init
 851:../../../os/rt/src/chthreads.c ****  */
 852:../../../os/rt/src/chthreads.c **** void chThdQueueObjectInit(threads_queue_t *tqp) {
 1725               		.loc 1 852 0
 1726               		.cfi_startproc
 1727               	.LVL122:
 1728               	/* prologue: function */
 1729               	/* frame size = 0 */
 1730               	/* stack size = 0 */
 1731               	.L__stack_usage = 0
 1732               	.LBB420:
 1733               	.LBB421:
 284:../../../os/rt/include/chlists.h ****   qp->prev = qp;
 1734               		.loc 2 284 0
 1735 0000 FC01      		movw r30,r24
 1736 0002 9183      		std Z+1,r25
 1737 0004 8083      		st Z,r24
 285:../../../os/rt/include/chlists.h **** }
 1738               		.loc 2 285 0
 1739 0006 9383      		std Z+3,r25
 1740 0008 8283      		std Z+2,r24
 1741               	.LVL123:
 1742 000a 0895      		ret
 1743               	.LBE421:
 1744               	.LBE420:
 1745               		.cfi_endproc
 1746               	.LFE221:
 1748               		.section	.text.chThdQueueObjectDispose,"ax",@progbits
 1749               	.global	chThdQueueObjectDispose
 1751               	chThdQueueObjectDispose:
 1752               	.LFB222:
 853:../../../os/rt/src/chthreads.c **** 
 854:../../../os/rt/src/chthreads.c ****   chDbgCheck(tqp);
 855:../../../os/rt/src/chthreads.c **** 
 856:../../../os/rt/src/chthreads.c ****   ch_queue_init(&tqp->queue);
 857:../../../os/rt/src/chthreads.c **** }
 858:../../../os/rt/src/chthreads.c **** 
 859:../../../os/rt/src/chthreads.c **** /**
 860:../../../os/rt/src/chthreads.c ****  * @brief   Disposes a threads queue.
 861:../../../os/rt/src/chthreads.c ****  * @note    Objects disposing does not involve freeing memory but just
 862:../../../os/rt/src/chthreads.c ****  *          performing checks that make sure that the object is in a
 863:../../../os/rt/src/chthreads.c ****  *          state compatible with operations stop.
 864:../../../os/rt/src/chthreads.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 865:../../../os/rt/src/chthreads.c ****  *          the object is also cleared, attempts to use the object would likely
 866:../../../os/rt/src/chthreads.c ****  *          result in a clean memory access violation because dereferencing
 867:../../../os/rt/src/chthreads.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 868:../../../os/rt/src/chthreads.c ****  *          pointers.
 869:../../../os/rt/src/chthreads.c ****  *
 870:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 871:../../../os/rt/src/chthreads.c ****  *
 872:../../../os/rt/src/chthreads.c ****  * @dispose
 873:../../../os/rt/src/chthreads.c ****  */
 874:../../../os/rt/src/chthreads.c **** void chThdQueueObjectDispose(threads_queue_t *tqp) {
 1753               		.loc 1 874 0
 1754               		.cfi_startproc
 1755               	.LVL124:
 1756               	/* prologue: function */
 1757               	/* frame size = 0 */
 1758               	/* stack size = 0 */
 1759               	.L__stack_usage = 0
 1760 0000 0895      		ret
 1761               		.cfi_endproc
 1762               	.LFE222:
 1764               		.section	.text.chThdEnqueueTimeoutS,"ax",@progbits
 1765               	.global	chThdEnqueueTimeoutS
 1767               	chThdEnqueueTimeoutS:
 1768               	.LFB223:
 875:../../../os/rt/src/chthreads.c **** 
 876:../../../os/rt/src/chthreads.c ****   chDbgCheck(tqp != NULL);
 877:../../../os/rt/src/chthreads.c ****   chDbgAssert(ch_queue_isempty(&tqp->queue),
 878:../../../os/rt/src/chthreads.c ****               "object in use");
 879:../../../os/rt/src/chthreads.c **** 
 880:../../../os/rt/src/chthreads.c **** #if CH_CFG_HARDENING_LEVEL > 0
 881:../../../os/rt/src/chthreads.c ****   memset((void *)tqp, 0, sizeof (threads_queue_t));
 882:../../../os/rt/src/chthreads.c **** #endif
 883:../../../os/rt/src/chthreads.c **** }
 884:../../../os/rt/src/chthreads.c **** 
 885:../../../os/rt/src/chthreads.c **** /**
 886:../../../os/rt/src/chthreads.c ****  * @brief   Enqueues the caller thread on a threads queue object.
 887:../../../os/rt/src/chthreads.c ****  * @details The caller thread is enqueued and put to sleep until it is
 888:../../../os/rt/src/chthreads.c ****  *          dequeued or the specified timeouts expires.
 889:../../../os/rt/src/chthreads.c ****  *
 890:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 891:../../../os/rt/src/chthreads.c ****  * @param[in] timeout   the timeout in system ticks, the special values are
 892:../../../os/rt/src/chthreads.c ****  *                      handled as follow:
 893:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 894:../../../os/rt/src/chthreads.c ****  *                        state.
 895:../../../os/rt/src/chthreads.c ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 896:../../../os/rt/src/chthreads.c ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 897:../../../os/rt/src/chthreads.c ****  *                        occurred.
 898:../../../os/rt/src/chthreads.c ****  * @return              The message from @p osalQueueWakeupOneI() or
 899:../../../os/rt/src/chthreads.c ****  *                      @p osalQueueWakeupAllI() functions.
 900:../../../os/rt/src/chthreads.c ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 901:../../../os/rt/src/chthreads.c ****  *                      specified timeout or if the function has been
 902:../../../os/rt/src/chthreads.c ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 903:../../../os/rt/src/chthreads.c ****  *                      specification.
 904:../../../os/rt/src/chthreads.c ****  *
 905:../../../os/rt/src/chthreads.c ****  * @sclass
 906:../../../os/rt/src/chthreads.c ****  */
 907:../../../os/rt/src/chthreads.c **** msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout) {
 1769               		.loc 1 907 0
 1770               		.cfi_startproc
 1771               	.LVL125:
 1772               		.loc 1 907 0
 1773 0000 CF93      		push r28
 1774               	.LCFI29:
 1775               		.cfi_def_cfa_offset 3
 1776               		.cfi_offset 28, -2
 1777 0002 DF93      		push r29
 1778               	.LCFI30:
 1779               		.cfi_def_cfa_offset 4
 1780               		.cfi_offset 29, -3
 1781               	/* prologue: function */
 1782               	/* frame size = 0 */
 1783               	/* stack size = 2 */
 1784               	.L__stack_usage = 2
 1785               	.LBB422:
 1786               	.LBB423:
 375:../../../os/rt/include/chthreads.h **** }
 1787               		.loc 4 375 0
 1788 0004 E091 0000 		lds r30,ch0+5
 1789 0008 F091 0000 		lds r31,ch0+5+1
 1790               	.LBE423:
 1791               	.LBE422:
 908:../../../os/rt/src/chthreads.c ****   thread_t *currtp = chThdGetSelfX();
 909:../../../os/rt/src/chthreads.c **** 
 910:../../../os/rt/src/chthreads.c ****   if (unlikely(TIME_IMMEDIATE == timeout)) {
 1792               		.loc 1 910 0
 1793 000c 6115      		cp r22,__zero_reg__
 1794 000e 7105      		cpc r23,__zero_reg__
 1795 0010 01F0      		breq .L56
 1796               	.LVL126:
 1797               	.LBB424:
 1798               	.LBB425:
 324:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 1799               		.loc 2 324 0
 1800 0012 9183      		std Z+1,r25
 1801 0014 8083      		st Z,r24
 325:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 1802               		.loc 2 325 0
 1803 0016 EC01      		movw r28,r24
 1804 0018 AA81      		ldd r26,Y+2
 1805 001a BB81      		ldd r27,Y+3
 1806 001c B383      		std Z+3,r27
 1807 001e A283      		std Z+2,r26
 326:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 1808               		.loc 2 326 0
 1809 0020 ED93      		st X+,r30
 1810 0022 FC93      		st X,r31
 327:../../../os/rt/include/chlists.h **** }
 1811               		.loc 2 327 0
 1812 0024 FB83      		std Y+3,r31
 1813 0026 EA83      		std Y+2,r30
 1814               	.LVL127:
 1815               	.LBE425:
 1816               	.LBE424:
 911:../../../os/rt/src/chthreads.c ****     return MSG_TIMEOUT;
 912:../../../os/rt/src/chthreads.c ****   }
 913:../../../os/rt/src/chthreads.c **** 
 914:../../../os/rt/src/chthreads.c ****   ch_queue_insert(&tqp->queue, (ch_queue_t *)currtp);
 915:../../../os/rt/src/chthreads.c **** 
 916:../../../os/rt/src/chthreads.c ****   return chSchGoSleepTimeoutS(CH_STATE_QUEUED, timeout);
 1817               		.loc 1 916 0
 1818 0028 84E0      		ldi r24,lo8(4)
 1819               	.LVL128:
 1820               	/* epilogue start */
 917:../../../os/rt/src/chthreads.c **** }
 1821               		.loc 1 917 0
 1822 002a DF91      		pop r29
 1823 002c CF91      		pop r28
 1824               	.LVL129:
 916:../../../os/rt/src/chthreads.c **** }
 1825               		.loc 1 916 0
 1826 002e 0C94 0000 		jmp chSchGoSleepTimeoutS
 1827               	.LVL130:
 1828               	.L56:
 1829               		.loc 1 917 0
 1830 0032 8FEF      		ldi r24,lo8(-1)
 1831 0034 9FEF      		ldi r25,lo8(-1)
 1832               	.LVL131:
 1833               	/* epilogue start */
 1834 0036 DF91      		pop r29
 1835 0038 CF91      		pop r28
 1836 003a 0895      		ret
 1837               		.cfi_endproc
 1838               	.LFE223:
 1840               		.section	.text.chThdDequeueNextI,"ax",@progbits
 1841               	.global	chThdDequeueNextI
 1843               	chThdDequeueNextI:
 1844               	.LFB224:
 918:../../../os/rt/src/chthreads.c **** 
 919:../../../os/rt/src/chthreads.c **** /**
 920:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up one thread from the threads queue object,
 921:../../../os/rt/src/chthreads.c ****  *          if any.
 922:../../../os/rt/src/chthreads.c ****  *
 923:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 924:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 925:../../../os/rt/src/chthreads.c ****  *
 926:../../../os/rt/src/chthreads.c ****  * @iclass
 927:../../../os/rt/src/chthreads.c ****  */
 928:../../../os/rt/src/chthreads.c **** void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 1845               		.loc 1 928 0
 1846               		.cfi_startproc
 1847               	.LVL132:
 1848 0000 CF93      		push r28
 1849               	.LCFI31:
 1850               		.cfi_def_cfa_offset 3
 1851               		.cfi_offset 28, -2
 1852 0002 DF93      		push r29
 1853               	.LCFI32:
 1854               		.cfi_def_cfa_offset 4
 1855               		.cfi_offset 29, -3
 1856               	/* prologue: function */
 1857               	/* frame size = 0 */
 1858               	/* stack size = 2 */
 1859               	.L__stack_usage = 2
 1860 0004 FC01      		movw r30,r24
 1861               	.LVL133:
 1862               	.LBB426:
 1863               	.LBB427:
 311:../../../os/rt/include/chlists.h **** }
 1864               		.loc 2 311 0
 1865 0006 8081      		ld r24,Z
 1866 0008 9181      		ldd r25,Z+1
 1867               	.LVL134:
 1868               	.LBE427:
 1869               	.LBE426:
 929:../../../os/rt/src/chthreads.c **** 
 930:../../../os/rt/src/chthreads.c ****   if (ch_queue_notempty(&tqp->queue)) {
 1870               		.loc 1 930 0
 1871 000a E817      		cp r30,r24
 1872 000c F907      		cpc r31,r25
 1873 000e 01F0      		breq .L57
 1874               	.LVL135:
 1875               	.LBB428:
 1876               	.LBB429:
 1877               	.LBB430:
 1878               	.LBB431:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1879               		.loc 2 343 0
 1880 0010 EC01      		movw r28,r24
 1881 0012 A881      		ld r26,Y
 1882 0014 B981      		ldd r27,Y+1
 1883 0016 B183      		std Z+1,r27
 1884 0018 A083      		st Z,r26
 344:../../../os/rt/include/chlists.h **** 
 1885               		.loc 2 344 0
 1886 001a 1396      		adiw r26,2+1
 1887 001c FC93      		st X,r31
 1888 001e EE93      		st -X,r30
 1889 0020 1297      		sbiw r26,2
 1890               	.LVL136:
 1891               	.LBE431:
 1892               	.LBE430:
 483:../../../os/rt/include/chthreads.h **** }
 484:../../../os/rt/include/chthreads.h **** 
 485:../../../os/rt/include/chthreads.h **** /**
 486:../../../os/rt/include/chthreads.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 487:../../../os/rt/include/chthreads.h ****  *
 488:../../../os/rt/include/chthreads.h ****  * @param[out] tqp      pointer to a @p threads_queue_t object
 489:../../../os/rt/include/chthreads.h ****  * @return              The queue status.
 490:../../../os/rt/include/chthreads.h ****  * @retval false        if the queue is not empty.
 491:../../../os/rt/include/chthreads.h ****  * @retval true         if the queue is empty.
 492:../../../os/rt/include/chthreads.h ****  *
 493:../../../os/rt/include/chthreads.h ****  * @iclass
 494:../../../os/rt/include/chthreads.h ****  */
 495:../../../os/rt/include/chthreads.h **** static inline bool chThdQueueIsEmptyI(threads_queue_t *tqp) {
 496:../../../os/rt/include/chthreads.h **** 
 497:../../../os/rt/include/chthreads.h ****   chDbgCheckClassI();
 498:../../../os/rt/include/chthreads.h **** 
 499:../../../os/rt/include/chthreads.h ****   return ch_queue_isempty(&tqp->queue);
 500:../../../os/rt/include/chthreads.h **** }
 501:../../../os/rt/include/chthreads.h **** 
 502:../../../os/rt/include/chthreads.h **** /**
 503:../../../os/rt/include/chthreads.h ****  * @brief   Dequeues and wakes up one thread from the threads queue object.
 504:../../../os/rt/include/chthreads.h ****  * @details Dequeues one thread from the queue without checking if the queue
 505:../../../os/rt/include/chthreads.h ****  *          is empty.
 506:../../../os/rt/include/chthreads.h ****  * @pre     The queue must contain at least an object.
 507:../../../os/rt/include/chthreads.h ****  *
 508:../../../os/rt/include/chthreads.h ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 509:../../../os/rt/include/chthreads.h ****  * @param[in] msg       the message code
 510:../../../os/rt/include/chthreads.h ****  *
 511:../../../os/rt/include/chthreads.h ****  * @iclass
 512:../../../os/rt/include/chthreads.h ****  */
 513:../../../os/rt/include/chthreads.h **** static inline void chThdDoDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 514:../../../os/rt/include/chthreads.h ****   thread_t *tp;
 515:../../../os/rt/include/chthreads.h **** 
 516:../../../os/rt/include/chthreads.h ****   chDbgAssert(ch_queue_notempty(&tqp->queue), "empty queue");
 517:../../../os/rt/include/chthreads.h **** 
 518:../../../os/rt/include/chthreads.h ****   tp = threadref(ch_queue_fifo_remove(&tqp->queue));
 519:../../../os/rt/include/chthreads.h **** 
 520:../../../os/rt/include/chthreads.h ****   chDbgAssert(tp->state == CH_STATE_QUEUED, "invalid state");
 521:../../../os/rt/include/chthreads.h **** 
 522:../../../os/rt/include/chthreads.h ****   tp->u.rdymsg = msg;
 1893               		.loc 4 522 0
 1894 0022 7B8B      		std Y+19,r23
 1895 0024 6A8B      		std Y+18,r22
 1896               	/* epilogue start */
 1897               	.LBE429:
 1898               	.LBE428:
 931:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 932:../../../os/rt/src/chthreads.c ****   }
 933:../../../os/rt/src/chthreads.c **** }
 1899               		.loc 1 933 0
 1900 0026 DF91      		pop r29
 1901 0028 CF91      		pop r28
 1902               	.LBB433:
 1903               	.LBB432:
 523:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1904               		.loc 4 523 0
 1905 002a 0C94 0000 		jmp chSchReadyI
 1906               	.LVL137:
 1907               	.L57:
 1908               	/* epilogue start */
 1909               	.LBE432:
 1910               	.LBE433:
 1911               		.loc 1 933 0
 1912 002e DF91      		pop r29
 1913 0030 CF91      		pop r28
 1914 0032 0895      		ret
 1915               		.cfi_endproc
 1916               	.LFE224:
 1918               		.section	.text.chThdDequeueAllI,"ax",@progbits
 1919               	.global	chThdDequeueAllI
 1921               	chThdDequeueAllI:
 1922               	.LFB225:
 934:../../../os/rt/src/chthreads.c **** 
 935:../../../os/rt/src/chthreads.c **** /**
 936:../../../os/rt/src/chthreads.c ****  * @brief   Dequeues and wakes up all threads from the threads queue object.
 937:../../../os/rt/src/chthreads.c ****  *
 938:../../../os/rt/src/chthreads.c ****  * @param[in] tqp       pointer to a @p threads_queue_t object
 939:../../../os/rt/src/chthreads.c ****  * @param[in] msg       the message code
 940:../../../os/rt/src/chthreads.c ****  *
 941:../../../os/rt/src/chthreads.c ****  * @iclass
 942:../../../os/rt/src/chthreads.c ****  */
 943:../../../os/rt/src/chthreads.c **** void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 1923               		.loc 1 943 0
 1924               		.cfi_startproc
 1925               	.LVL138:
 1926 0000 0F93      		push r16
 1927               	.LCFI33:
 1928               		.cfi_def_cfa_offset 3
 1929               		.cfi_offset 16, -2
 1930 0002 1F93      		push r17
 1931               	.LCFI34:
 1932               		.cfi_def_cfa_offset 4
 1933               		.cfi_offset 17, -3
 1934 0004 CF93      		push r28
 1935               	.LCFI35:
 1936               		.cfi_def_cfa_offset 5
 1937               		.cfi_offset 28, -4
 1938 0006 DF93      		push r29
 1939               	.LCFI36:
 1940               		.cfi_def_cfa_offset 6
 1941               		.cfi_offset 29, -5
 1942               	/* prologue: function */
 1943               	/* frame size = 0 */
 1944               	/* stack size = 4 */
 1945               	.L__stack_usage = 4
 1946 0008 EC01      		movw r28,r24
 1947 000a 8B01      		movw r16,r22
 1948               	.LVL139:
 1949               	.LBB434:
 1950               	.LBB435:
 311:../../../os/rt/include/chlists.h **** }
 1951               		.loc 2 311 0
 1952 000c 8881      		ld r24,Y
 1953 000e 9981      		ldd r25,Y+1
 1954               	.LVL140:
 1955               	.LBE435:
 1956               	.LBE434:
 944:../../../os/rt/src/chthreads.c **** 
 945:../../../os/rt/src/chthreads.c ****   while (ch_queue_notempty(&tqp->queue)) {
 1957               		.loc 1 945 0
 1958 0010 C817      		cp r28,r24
 1959 0012 D907      		cpc r29,r25
 1960 0014 01F0      		breq .L59
 1961               	.LVL141:
 1962               	.L63:
 1963               	.LBB437:
 1964               	.LBB438:
 1965               	.LBB439:
 1966               	.LBB440:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 1967               		.loc 2 343 0
 1968 0016 DC01      		movw r26,r24
 1969 0018 ED91      		ld r30,X+
 1970 001a FC91      		ld r31,X
 1971 001c 1197      		sbiw r26,1
 1972 001e F983      		std Y+1,r31
 1973 0020 E883      		st Y,r30
 344:../../../os/rt/include/chlists.h **** 
 1974               		.loc 2 344 0
 1975 0022 D383      		std Z+3,r29
 1976 0024 C283      		std Z+2,r28
 1977               	.LVL142:
 1978               	.LBE440:
 1979               	.LBE439:
 522:../../../os/rt/include/chthreads.h ****   (void) chSchReadyI(tp);
 1980               		.loc 4 522 0
 1981 0026 5396      		adiw r26,18+1
 1982 0028 1C93      		st X,r17
 1983 002a 0E93      		st -X,r16
 1984 002c 5297      		sbiw r26,18
 1985               		.loc 4 523 0
 1986 002e 0E94 0000 		call chSchReadyI
 1987               	.LVL143:
 1988               	.LBE438:
 1989               	.LBE437:
 1990               	.LBB441:
 1991               	.LBB436:
 311:../../../os/rt/include/chlists.h **** }
 1992               		.loc 2 311 0
 1993 0032 8881      		ld r24,Y
 1994 0034 9981      		ldd r25,Y+1
 1995               	.LVL144:
 1996               	.LBE436:
 1997               	.LBE441:
 1998               		.loc 1 945 0
 1999 0036 8C17      		cp r24,r28
 2000 0038 9D07      		cpc r25,r29
 2001 003a 01F4      		brne .L63
 2002               	.LVL145:
 2003               	.L59:
 2004               	/* epilogue start */
 946:../../../os/rt/src/chthreads.c ****     chThdDoDequeueNextI(tqp, msg);
 947:../../../os/rt/src/chthreads.c ****   }
 948:../../../os/rt/src/chthreads.c **** }
 2005               		.loc 1 948 0
 2006 003c DF91      		pop r29
 2007 003e CF91      		pop r28
 2008               	.LVL146:
 2009 0040 1F91      		pop r17
 2010 0042 0F91      		pop r16
 2011               	.LVL147:
 2012 0044 0895      		ret
 2013               		.cfi_endproc
 2014               	.LFE225:
 2016               		.text
 2017               	.Letext0:
 2018               		.file 7 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2019               		.file 8 "/usr/lib/avr/include/stdint.h"
 2020               		.file 9 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2021               		.file 10 "../../../os/rt/include/chearly.h"
 2022               		.file 11 "../../../os/rt/include/chobjects.h"
 2023               		.file 12 "../../../os/rt/include/chrfcu.h"
 2024               		.file 13 "../../../os/rt/include/chdebug.h"
 2025               		.file 14 "../../../os/rt/include/chsem.h"
 2026               		.file 15 "../../../os/rt/include/chmtx.h"
 2027               		.file 16 "../../../os/rt/include/chsys.h"
 2028               		.file 17 "../../../os/rt/include/chvt.h"
 2029               		.file 18 "../../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chthreads.c
     /tmp/cct3YejP.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cct3YejP.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cct3YejP.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cct3YejP.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cct3YejP.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cct3YejP.s:13     .text.__thd_object_init:0000000000000000 __thd_object_init
     /tmp/cct3YejP.s:128    .text.chThdCreateSuspendedI:0000000000000000 chThdCreateSuspendedI
     /tmp/cct3YejP.s:298    .text.chThdCreateSuspended:0000000000000000 chThdCreateSuspended
     /tmp/cct3YejP.s:345    .text.chThdCreateI:0000000000000000 chThdCreateI
     /tmp/cct3YejP.s:365    .text.chThdCreate:0000000000000000 chThdCreate
     /tmp/cct3YejP.s:434    .text.chThdCreateStatic:0000000000000000 chThdCreateStatic
     /tmp/cct3YejP.s:611    .text.chThdStart:0000000000000000 chThdStart
     /tmp/cct3YejP.s:673    .text.chThdAddRef:0000000000000000 chThdAddRef
     /tmp/cct3YejP.s:721    .text.chThdRelease:0000000000000000 chThdRelease
     /tmp/cct3YejP.s:818    .text.chThdExitS:0000000000000000 chThdExitS
     /tmp/cct3YejP.s:942    .text.chThdExit:0000000000000000 chThdExit
     /tmp/cct3YejP.s:972    .text.chThdWait:0000000000000000 chThdWait
     /tmp/cct3YejP.s:1079   .text.chThdSetPriority:0000000000000000 chThdSetPriority
     /tmp/cct3YejP.s:1156   .text.chThdTerminate:0000000000000000 chThdTerminate
     /tmp/cct3YejP.s:1203   .text.chThdSleep:0000000000000000 chThdSleep
     /tmp/cct3YejP.s:1256   .text.chThdSleepUntil:0000000000000000 chThdSleepUntil
     /tmp/cct3YejP.s:1344   .text.chThdSleepUntilWindowed:0000000000000000 chThdSleepUntilWindowed
     /tmp/cct3YejP.s:1444   .text.chThdYield:0000000000000000 chThdYield
     /tmp/cct3YejP.s:1488   .text.chThdSuspendS:0000000000000000 chThdSuspendS
     /tmp/cct3YejP.s:1542   .text.chThdSuspendTimeoutS:0000000000000000 chThdSuspendTimeoutS
     /tmp/cct3YejP.s:1586   .text.chThdResumeI:0000000000000000 chThdResumeI
     /tmp/cct3YejP.s:1624   .text.chThdResumeS:0000000000000000 chThdResumeS
     /tmp/cct3YejP.s:1659   .text.chThdResume:0000000000000000 chThdResume
     /tmp/cct3YejP.s:1723   .text.chThdQueueObjectInit:0000000000000000 chThdQueueObjectInit
     /tmp/cct3YejP.s:1751   .text.chThdQueueObjectDispose:0000000000000000 chThdQueueObjectDispose
     /tmp/cct3YejP.s:1767   .text.chThdEnqueueTimeoutS:0000000000000000 chThdEnqueueTimeoutS
     /tmp/cct3YejP.s:1843   .text.chThdDequeueNextI:0000000000000000 chThdDequeueNextI
     /tmp/cct3YejP.s:1921   .text.chThdDequeueAllI:0000000000000000 chThdDequeueAllI

UNDEFINED SYMBOLS
_port_thread_start
ch0
chSchReadyI
chSchWakeupS
chSchGoSleepS
chSchRescheduleS
chSchGoSleepTimeoutS
stGetCounter
chSchDoYieldS
__do_copy_data
