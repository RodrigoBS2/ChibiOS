   1               		.file	"chregistry.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chRegFirstThread,"ax",@progbits
  11               	.global	chRegFirstThread
  13               	chRegFirstThread:
  14               	.LFB198:
  15               		.file 1 "../../../os/rt/src/chregistry.c"
   1:../../../os/rt/src/chregistry.c **** /*
   2:../../../os/rt/src/chregistry.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chregistry.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chregistry.c **** 
   5:../../../os/rt/src/chregistry.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chregistry.c **** 
   7:../../../os/rt/src/chregistry.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chregistry.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chregistry.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chregistry.c **** 
  11:../../../os/rt/src/chregistry.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chregistry.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chregistry.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chregistry.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chregistry.c **** 
  16:../../../os/rt/src/chregistry.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chregistry.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chregistry.c **** */
  19:../../../os/rt/src/chregistry.c **** 
  20:../../../os/rt/src/chregistry.c **** /**
  21:../../../os/rt/src/chregistry.c ****  * @file    rt/src/chregistry.c
  22:../../../os/rt/src/chregistry.c ****  * @brief   Threads registry code.
  23:../../../os/rt/src/chregistry.c ****  *
  24:../../../os/rt/src/chregistry.c ****  * @addtogroup registry
  25:../../../os/rt/src/chregistry.c ****  * @details Threads Registry related APIs and services.
  26:../../../os/rt/src/chregistry.c ****  *          <h2>Operation mode</h2>
  27:../../../os/rt/src/chregistry.c ****  *          The Threads Registry is a double linked list that holds all the
  28:../../../os/rt/src/chregistry.c ****  *          active threads in the system.<br>
  29:../../../os/rt/src/chregistry.c ****  *          Operations defined for the registry:
  30:../../../os/rt/src/chregistry.c ****  *          - <b>First</b>, returns the first, in creation order, active thread
  31:../../../os/rt/src/chregistry.c ****  *            in the system.
  32:../../../os/rt/src/chregistry.c ****  *          - <b>Next</b>, returns the next, in creation order, active thread
  33:../../../os/rt/src/chregistry.c ****  *            in the system.
  34:../../../os/rt/src/chregistry.c ****  *          .
  35:../../../os/rt/src/chregistry.c ****  *          The registry is meant to be mainly a debug feature, for example,
  36:../../../os/rt/src/chregistry.c ****  *          using the registry a debugger can enumerate the active threads
  37:../../../os/rt/src/chregistry.c ****  *          in any given moment or the shell can print the active threads
  38:../../../os/rt/src/chregistry.c ****  *          and their state.<br>
  39:../../../os/rt/src/chregistry.c ****  *          Another possible use is for centralized threads memory management,
  40:../../../os/rt/src/chregistry.c ****  *          terminating threads can pulse an event source and an event handler
  41:../../../os/rt/src/chregistry.c ****  *          can perform a scansion of the registry in order to recover the
  42:../../../os/rt/src/chregistry.c ****  *          memory.
  43:../../../os/rt/src/chregistry.c ****  * @pre     In order to use the threads registry the @p CH_CFG_USE_REGISTRY
  44:../../../os/rt/src/chregistry.c ****  *          option must be enabled in @p chconf.h.
  45:../../../os/rt/src/chregistry.c ****  * @{
  46:../../../os/rt/src/chregistry.c ****  */
  47:../../../os/rt/src/chregistry.c **** 
  48:../../../os/rt/src/chregistry.c **** #include <string.h>
  49:../../../os/rt/src/chregistry.c **** 
  50:../../../os/rt/src/chregistry.c **** #include "ch.h"
  51:../../../os/rt/src/chregistry.c **** 
  52:../../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) || defined(__DOXYGEN__)
  53:../../../os/rt/src/chregistry.c **** 
  54:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  55:../../../os/rt/src/chregistry.c **** /* Module exported variables.                                                */
  56:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  57:../../../os/rt/src/chregistry.c **** 
  58:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  59:../../../os/rt/src/chregistry.c **** /* Module local types.                                                       */
  60:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  61:../../../os/rt/src/chregistry.c **** 
  62:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  63:../../../os/rt/src/chregistry.c **** /* Module local variables.                                                   */
  64:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  65:../../../os/rt/src/chregistry.c **** 
  66:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  67:../../../os/rt/src/chregistry.c **** /* Module local functions.                                                   */
  68:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  69:../../../os/rt/src/chregistry.c **** 
  70:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  71:../../../os/rt/src/chregistry.c **** /* Module exported functions.                                                */
  72:../../../os/rt/src/chregistry.c **** /*===========================================================================*/
  73:../../../os/rt/src/chregistry.c **** 
  74:../../../os/rt/src/chregistry.c **** /*
  75:../../../os/rt/src/chregistry.c ****  * OS signature in ROM plus debug-related information.
  76:../../../os/rt/src/chregistry.c ****  */
  77:../../../os/rt/src/chregistry.c **** ROMCONST chdebug_t ch_debug = {
  78:../../../os/rt/src/chregistry.c ****   .identifier               = {'m', 'a', 'i', 'n'},
  79:../../../os/rt/src/chregistry.c ****   .zero                     = (uint8_t)0,
  80:../../../os/rt/src/chregistry.c ****   .size                     = (uint8_t)sizeof (chdebug_t),
  81:../../../os/rt/src/chregistry.c ****   .version                  = (uint16_t)(((unsigned)CH_KERNEL_MAJOR << 11U) |
  82:../../../os/rt/src/chregistry.c ****                                          ((unsigned)CH_KERNEL_MINOR << 6U) |
  83:../../../os/rt/src/chregistry.c ****                                          ((unsigned)CH_KERNEL_PATCH << 0U)),
  84:../../../os/rt/src/chregistry.c ****   .ptrsize                  = (uint8_t)sizeof (void *),
  85:../../../os/rt/src/chregistry.c ****   .timesize                 = (uint8_t)sizeof (systime_t),
  86:../../../os/rt/src/chregistry.c ****   .intervalsize             = (uint8_t)sizeof (sysinterval_t),
  87:../../../os/rt/src/chregistry.c ****   .threadsize               = (uint8_t)sizeof (thread_t),
  88:../../../os/rt/src/chregistry.c ****   .intctxsize               = (uint8_t)sizeof (struct port_intctx),
  89:../../../os/rt/src/chregistry.c ****   .off_prio                 = (uint8_t)__CH_OFFSETOF(thread_t, hdr.pqueue.prio),
  90:../../../os/rt/src/chregistry.c ****   .off_ctx                  = (uint8_t)__CH_OFFSETOF(thread_t, ctx),
  91:../../../os/rt/src/chregistry.c ****   .off_newer                = (uint8_t)__CH_OFFSETOF(thread_t, rqueue.next),
  92:../../../os/rt/src/chregistry.c ****   .off_older                = (uint8_t)__CH_OFFSETOF(thread_t, rqueue.prev),
  93:../../../os/rt/src/chregistry.c ****   .off_name                 = (uint8_t)__CH_OFFSETOF(thread_t, name),
  94:../../../os/rt/src/chregistry.c **** #if (CH_DBG_ENABLE_STACK_CHECK == TRUE) || (CH_CFG_USE_DYNAMIC == TRUE)
  95:../../../os/rt/src/chregistry.c ****   .off_stklimit             = (uint8_t)__CH_OFFSETOF(thread_t, wabase),
  96:../../../os/rt/src/chregistry.c **** #else
  97:../../../os/rt/src/chregistry.c ****   .off_stklimit             = (uint8_t)0,
  98:../../../os/rt/src/chregistry.c **** #endif
  99:../../../os/rt/src/chregistry.c ****   .off_state                = (uint8_t)__CH_OFFSETOF(thread_t, state),
 100:../../../os/rt/src/chregistry.c ****   .off_flags                = (uint8_t)__CH_OFFSETOF(thread_t, flags),
 101:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 102:../../../os/rt/src/chregistry.c ****   .off_refs                 = (uint8_t)__CH_OFFSETOF(thread_t, refs),
 103:../../../os/rt/src/chregistry.c **** #else
 104:../../../os/rt/src/chregistry.c ****   .off_refs                 = (uint8_t)0,
 105:../../../os/rt/src/chregistry.c **** #endif
 106:../../../os/rt/src/chregistry.c **** #if CH_CFG_TIME_QUANTUM > 0
 107:../../../os/rt/src/chregistry.c ****   .off_preempt              = (uint8_t)__CH_OFFSETOF(thread_t, ticks),
 108:../../../os/rt/src/chregistry.c **** #else
 109:../../../os/rt/src/chregistry.c ****   .off_preempt              = (uint8_t)0,
 110:../../../os/rt/src/chregistry.c **** #endif
 111:../../../os/rt/src/chregistry.c **** #if CH_DBG_THREADS_PROFILING == TRUE
 112:../../../os/rt/src/chregistry.c ****   .off_time                 = (uint8_t)__CH_OFFSETOF(thread_t, time),
 113:../../../os/rt/src/chregistry.c **** #else
 114:../../../os/rt/src/chregistry.c ****   .off_time                 = (uint8_t)0,
 115:../../../os/rt/src/chregistry.c **** #endif
 116:../../../os/rt/src/chregistry.c ****   .off_reserved             = {(uint8_t)0, (uint8_t)0, (uint8_t)0, (uint8_t)0},
 117:../../../os/rt/src/chregistry.c ****   .instancesnum             = (uint8_t)PORT_CORES_NUMBER,
 118:../../../os/rt/src/chregistry.c ****   .off_sys_state            = (uint8_t)__CH_OFFSETOF(ch_system_t, state),
 119:../../../os/rt/src/chregistry.c ****   .off_sys_instances        = (uint8_t)__CH_OFFSETOF(ch_system_t, instances[0]),
 120:../../../os/rt/src/chregistry.c **** #if (CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == TRUE)
 121:../../../os/rt/src/chregistry.c ****   .off_sys_reglist          = (uint8_t)__CH_OFFSETOF(ch_system_t, reglist),
 122:../../../os/rt/src/chregistry.c **** #else
 123:../../../os/rt/src/chregistry.c ****   .off_sys_reglist          = (uint8_t)0,
 124:../../../os/rt/src/chregistry.c **** #endif
 125:../../../os/rt/src/chregistry.c **** #if CH_CFG_SMP_MODE == TRUE
 126:../../../os/rt/src/chregistry.c ****   .off_sys_rfcu             = (uint8_t)__CH_OFFSETOF(ch_system_t, rfcu),
 127:../../../os/rt/src/chregistry.c **** #else
 128:../../../os/rt/src/chregistry.c ****   .off_sys_rfcu             = (uint8_t)0,
 129:../../../os/rt/src/chregistry.c **** #endif
 130:../../../os/rt/src/chregistry.c ****   .off_sys_reserved         = {(uint8_t)0, (uint8_t)0, (uint8_t)0, (uint8_t)0},
 131:../../../os/rt/src/chregistry.c ****   .off_inst_rlist_current   = (uint8_t)__CH_OFFSETOF(os_instance_t, rlist.current),
 132:../../../os/rt/src/chregistry.c ****   .off_inst_rlist           = (uint8_t)__CH_OFFSETOF(os_instance_t, rlist),
 133:../../../os/rt/src/chregistry.c ****   .off_inst_vtlist          = (uint8_t)__CH_OFFSETOF(os_instance_t, vtlist),
 134:../../../os/rt/src/chregistry.c **** #if ((CH_CFG_USE_REGISTRY == TRUE) && (CH_CFG_SMP_MODE == FALSE))
 135:../../../os/rt/src/chregistry.c ****   .off_inst_reglist         = (uint8_t)__CH_OFFSETOF(os_instance_t, reglist),
 136:../../../os/rt/src/chregistry.c **** #else
 137:../../../os/rt/src/chregistry.c ****   .off_inst_reglist         = (uint8_t)0,
 138:../../../os/rt/src/chregistry.c **** #endif
 139:../../../os/rt/src/chregistry.c ****   .off_inst_core_id         = (uint8_t)__CH_OFFSETOF(os_instance_t, core_id),
 140:../../../os/rt/src/chregistry.c **** #if CH_CFG_SMP_MODE == FALSE
 141:../../../os/rt/src/chregistry.c ****   .off_inst_rfcu            = (uint8_t)__CH_OFFSETOF(os_instance_t, rfcu)
 142:../../../os/rt/src/chregistry.c **** #else
 143:../../../os/rt/src/chregistry.c ****   .off_inst_rfcu            = (uint8_t)0
 144:../../../os/rt/src/chregistry.c **** #endif
 145:../../../os/rt/src/chregistry.c **** };
 146:../../../os/rt/src/chregistry.c **** 
 147:../../../os/rt/src/chregistry.c **** /**
 148:../../../os/rt/src/chregistry.c ****  * @brief   Returns the first thread in the system.
 149:../../../os/rt/src/chregistry.c ****  * @details Returns the most ancient thread in the system, usually this is
 150:../../../os/rt/src/chregistry.c ****  *          the main thread unless it terminated. A reference is added to the
 151:../../../os/rt/src/chregistry.c ****  *          returned thread in order to make sure its status is not lost.
 152:../../../os/rt/src/chregistry.c ****  * @note    This function cannot return @p NULL because there is always at
 153:../../../os/rt/src/chregistry.c ****  *          least one thread in the system.
 154:../../../os/rt/src/chregistry.c ****  *
 155:../../../os/rt/src/chregistry.c ****  * @return              A reference to the most ancient thread.
 156:../../../os/rt/src/chregistry.c ****  *
 157:../../../os/rt/src/chregistry.c ****  * @api
 158:../../../os/rt/src/chregistry.c ****  */
 159:../../../os/rt/src/chregistry.c **** thread_t *chRegFirstThread(void) {
  16               		.loc 1 159 0
  17               		.cfi_startproc
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22               	.LBB63:
  23               	.LBB64:
  24               	.LBB65:
  25               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  26               		.loc 2 430 0
  27               	/* #APP */
  28               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  29 0000 F894      		cli
  30               	 ;  0 "" 2
  31               	.LVL0:
  32               	/* #NOAPP */
  33               	.LBE65:
  34               	.LBE64:
  35               	.LBE63:
 160:../../../os/rt/src/chregistry.c ****   thread_t *tp;
 161:../../../os/rt/src/chregistry.c ****   uint8_t *p;
 162:../../../os/rt/src/chregistry.c **** 
 163:../../../os/rt/src/chregistry.c ****   chSysLock();
 164:../../../os/rt/src/chregistry.c ****   p = (uint8_t *)REG_HEADER(currcore)->next;
 165:../../../os/rt/src/chregistry.c ****   /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
 166:../../../os/rt/src/chregistry.c ****   tp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  36               		.loc 1 166 0
  37 0002 8091 0000 		lds r24,ch0+25
  38 0006 9091 0000 		lds r25,ch0+25+1
  39 000a 0797      		sbiw r24,7
  40               	.LVL1:
  41               	.LBB66:
  42               	.LBB67:
  43               	.LBB68:
  44               	.LBB69:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
  45               		.loc 2 440 0
  46               	/* #APP */
  47               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
  48 000c 7894      		sei
  49               	 ;  0 "" 2
  50               	/* #NOAPP */
  51               	.LBE69:
  52               	.LBE68:
  53               	.LBE67:
  54               	.LBE66:
 167:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 168:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 169:../../../os/rt/src/chregistry.c ****   tp->refs++;
 170:../../../os/rt/src/chregistry.c **** #endif
 171:../../../os/rt/src/chregistry.c ****   chSysUnlock();
 172:../../../os/rt/src/chregistry.c **** 
 173:../../../os/rt/src/chregistry.c ****   return tp;
 174:../../../os/rt/src/chregistry.c **** }
  55               		.loc 1 174 0
  56 000e 0895      		ret
  57               		.cfi_endproc
  58               	.LFE198:
  60               		.section	.text.chRegNextThread,"ax",@progbits
  61               	.global	chRegNextThread
  63               	chRegNextThread:
  64               	.LFB199:
 175:../../../os/rt/src/chregistry.c **** 
 176:../../../os/rt/src/chregistry.c **** /**
 177:../../../os/rt/src/chregistry.c ****  * @brief   Returns the thread next to the specified one.
 178:../../../os/rt/src/chregistry.c ****  * @details The reference counter of the specified thread is decremented and
 179:../../../os/rt/src/chregistry.c ****  *          the reference counter of the returned thread is incremented.
 180:../../../os/rt/src/chregistry.c ****  *
 181:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 182:../../../os/rt/src/chregistry.c ****  * @return              A reference to the next thread.
 183:../../../os/rt/src/chregistry.c ****  * @retval NULL         if there is no next thread.
 184:../../../os/rt/src/chregistry.c ****  *
 185:../../../os/rt/src/chregistry.c ****  * @api
 186:../../../os/rt/src/chregistry.c ****  */
 187:../../../os/rt/src/chregistry.c **** thread_t *chRegNextThread(thread_t *tp) {
  65               		.loc 1 187 0
  66               		.cfi_startproc
  67               	.LVL2:
  68               	/* prologue: function */
  69               	/* frame size = 0 */
  70               	/* stack size = 0 */
  71               	.L__stack_usage = 0
  72               	.LBB70:
  73               	.LBB71:
  74               	.LBB72:
 430:../../../os/common/ports/AVR/chcore.h **** }
  75               		.loc 2 430 0
  76               	/* #APP */
  77               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  78 0000 F894      		cli
  79               	 ;  0 "" 2
  80               	/* #NOAPP */
  81               	.LBE72:
  82               	.LBE71:
  83               	.LBE70:
 188:../../../os/rt/src/chregistry.c ****   thread_t *ntp;
 189:../../../os/rt/src/chregistry.c ****   ch_queue_t *nqp;
 190:../../../os/rt/src/chregistry.c **** 
 191:../../../os/rt/src/chregistry.c ****   chSysLock();
 192:../../../os/rt/src/chregistry.c **** 
 193:../../../os/rt/src/chregistry.c ****   /* Next element in the registry queue.*/
 194:../../../os/rt/src/chregistry.c ****   nqp = tp->rqueue.next;
  84               		.loc 1 194 0
  85 0002 FC01      		movw r30,r24
  86 0004 8781      		ldd r24,Z+7
  87 0006 9085      		ldd r25,Z+8
  88               	.LVL3:
 195:../../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
  89               		.loc 1 195 0
  90 0008 F0E0      		ldi r31,hi8(ch0+25)
  91 000a 8030      		cpi r24,lo8(ch0+25)
  92 000c 9F07      		cpc r25,r31
  93 000e 01F0      		breq .L4
  94               	.LVL4:
  95               	.LBB73:
 196:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 197:../../../os/rt/src/chregistry.c ****   }
 198:../../../os/rt/src/chregistry.c ****   else {
 199:../../../os/rt/src/chregistry.c ****     uint8_t *p = (uint8_t *)nqp;
 200:../../../os/rt/src/chregistry.c ****     /*lint -save -e413 [1.3] Safe to subtract a calculated offset.*/
 201:../../../os/rt/src/chregistry.c ****     ntp = threadref((p - __CH_OFFSETOF(thread_t, rqueue)));
  96               		.loc 1 201 0
  97 0010 0797      		sbiw r24,7
  98               	.LVL5:
  99               	.L3:
 100               	.LBE73:
 101               	.LBB74:
 102               	.LBB75:
 103               	.LBB76:
 104               	.LBB77:
 105               		.loc 2 440 0
 106               	/* #APP */
 107               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 108 0012 7894      		sei
 109               	 ;  0 "" 2
 110               	/* #NOAPP */
 111               	.LBE77:
 112               	.LBE76:
 113               	.LBE75:
 114               	.LBE74:
 202:../../../os/rt/src/chregistry.c ****     /*lint -restore*/
 203:../../../os/rt/src/chregistry.c **** 
 204:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 205:../../../os/rt/src/chregistry.c ****     chDbgAssert(ntp->refs < (trefs_t)255, "too many references");
 206:../../../os/rt/src/chregistry.c **** 
 207:../../../os/rt/src/chregistry.c ****     ntp->refs++;
 208:../../../os/rt/src/chregistry.c **** #endif
 209:../../../os/rt/src/chregistry.c ****   }
 210:../../../os/rt/src/chregistry.c ****   chSysUnlock();
 211:../../../os/rt/src/chregistry.c **** #if CH_CFG_USE_DYNAMIC == TRUE
 212:../../../os/rt/src/chregistry.c ****   chThdRelease(tp);
 213:../../../os/rt/src/chregistry.c **** #endif
 214:../../../os/rt/src/chregistry.c **** 
 215:../../../os/rt/src/chregistry.c ****   return ntp;
 216:../../../os/rt/src/chregistry.c **** }
 115               		.loc 1 216 0
 116 0014 0895      		ret
 117               	.LVL6:
 118               	.L4:
 196:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 119               		.loc 1 196 0
 120 0016 80E0      		ldi r24,0
 121 0018 90E0      		ldi r25,0
 122               	.LVL7:
 123 001a 00C0      		rjmp .L3
 124               		.cfi_endproc
 125               	.LFE199:
 127               		.section	.text.chRegFindThreadByName,"ax",@progbits
 128               	.global	chRegFindThreadByName
 130               	chRegFindThreadByName:
 131               	.LFB200:
 217:../../../os/rt/src/chregistry.c **** 
 218:../../../os/rt/src/chregistry.c **** /**
 219:../../../os/rt/src/chregistry.c ****  * @brief   Retrieves a thread pointer by name.
 220:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 221:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 222:../../../os/rt/src/chregistry.c ****  *          returned.
 223:../../../os/rt/src/chregistry.c ****  *
 224:../../../os/rt/src/chregistry.c ****  * @param[in] name      the thread name
 225:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 226:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 227:../../../os/rt/src/chregistry.c ****  *
 228:../../../os/rt/src/chregistry.c ****  * @api
 229:../../../os/rt/src/chregistry.c ****  */
 230:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByName(const char *name) {
 132               		.loc 1 230 0
 133               		.cfi_startproc
 134               	.LVL8:
 135 0000 0F93      		push r16
 136               	.LCFI0:
 137               		.cfi_def_cfa_offset 3
 138               		.cfi_offset 16, -2
 139 0002 1F93      		push r17
 140               	.LCFI1:
 141               		.cfi_def_cfa_offset 4
 142               		.cfi_offset 17, -3
 143 0004 CF93      		push r28
 144               	.LCFI2:
 145               		.cfi_def_cfa_offset 5
 146               		.cfi_offset 28, -4
 147 0006 DF93      		push r29
 148               	.LCFI3:
 149               		.cfi_def_cfa_offset 6
 150               		.cfi_offset 29, -5
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 4 */
 154               	.L__stack_usage = 4
 155 0008 8C01      		movw r16,r24
 156               	.LBB78:
 157               	.LBB79:
 158               	.LBB80:
 159               	.LBB81:
 160               	.LBB82:
 430:../../../os/common/ports/AVR/chcore.h **** }
 161               		.loc 2 430 0
 162               	/* #APP */
 163               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 164 000a F894      		cli
 165               	 ;  0 "" 2
 166               	.LVL9:
 167               	/* #NOAPP */
 168               	.LBE82:
 169               	.LBE81:
 170               	.LBE80:
 166:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 171               		.loc 1 166 0
 172 000c C091 0000 		lds r28,ch0+25
 173 0010 D091 0000 		lds r29,ch0+25+1
 174 0014 2797      		sbiw r28,7
 175               	.LVL10:
 176               	.LBB83:
 177               	.LBB84:
 178               	.LBB85:
 179               	.LBB86:
 180               		.loc 2 440 0
 181               	/* #APP */
 182               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 183 0016 7894      		sei
 184               	 ;  0 "" 2
 185               	.LVL11:
 186               	/* #NOAPP */
 187 0018 00C0      		rjmp .L9
 188               	.LVL12:
 189               	.L14:
 190               	.LBE86:
 191               	.LBE85:
 192               	.LBE84:
 193               	.LBE83:
 194               	.LBE79:
 195               	.LBE78:
 196               	.LBB87:
 197               	.LBB88:
 198               	.LBB89:
 201:../../../os/rt/src/chregistry.c ****     /*lint -restore*/
 199               		.loc 1 201 0
 200 001a 2797      		sbiw r28,7
 201               	.LVL13:
 202               	.LBE89:
 203               	.LBB90:
 204               	.LBB91:
 205               	.LBB92:
 206               	.LBB93:
 207               		.loc 2 440 0
 208               	/* #APP */
 209               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 210 001c 7894      		sei
 211               	 ;  0 "" 2
 212               	.LVL14:
 213               	/* #NOAPP */
 214               	.LBE93:
 215               	.LBE92:
 216               	.LBE91:
 217               	.LBE90:
 218               	.LBE88:
 219               	.LBE87:
 231:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 232:../../../os/rt/src/chregistry.c **** 
 233:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 234:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 235:../../../os/rt/src/chregistry.c ****   do {
 236:../../../os/rt/src/chregistry.c ****     if (strcmp(chRegGetThreadNameX(ctp), name) == 0) {
 237:../../../os/rt/src/chregistry.c ****       return ctp;
 238:../../../os/rt/src/chregistry.c ****     }
 239:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 240:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 220               		.loc 1 240 0
 221 001e 2097      		sbiw r28,0
 222 0020 01F0      		breq .L13
 223               	.LVL15:
 224               	.L9:
 236:../../../os/rt/src/chregistry.c ****       return ctp;
 225               		.loc 1 236 0
 226 0022 B801      		movw r22,r16
 227 0024 8D85      		ldd r24,Y+13
 228 0026 9E85      		ldd r25,Y+14
 229 0028 0E94 0000 		call strcmp
 230               	.LVL16:
 231 002c 892B      		or r24,r25
 232 002e 01F0      		breq .L10
 233               	.LVL17:
 234               	.LBB102:
 235               	.LBB101:
 236               	.LBB97:
 237               	.LBB98:
 238               	.LBB99:
 430:../../../os/common/ports/AVR/chcore.h **** }
 239               		.loc 2 430 0
 240               	/* #APP */
 241               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 242 0030 F894      		cli
 243               	 ;  0 "" 2
 244               	/* #NOAPP */
 245               	.LBE99:
 246               	.LBE98:
 247               	.LBE97:
 194:../../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
 248               		.loc 1 194 0
 249 0032 0F80      		ldd __tmp_reg__,Y+7
 250 0034 D885      		ldd r29,Y+8
 251 0036 C02D      		mov r28,__tmp_reg__
 252               	.LVL18:
 195:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 253               		.loc 1 195 0
 254 0038 80E0      		ldi r24,hi8(ch0+25)
 255 003a C030      		cpi r28,lo8(ch0+25)
 256 003c D807      		cpc r29,r24
 257 003e 01F4      		brne .L14
 196:../../../os/rt/src/chregistry.c ****   }
 258               		.loc 1 196 0
 259 0040 C0E0      		ldi r28,0
 260 0042 D0E0      		ldi r29,0
 261               	.LVL19:
 262               	.LBB100:
 263               	.LBB96:
 264               	.LBB95:
 265               	.LBB94:
 266               		.loc 2 440 0
 267               	/* #APP */
 268               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 269 0044 7894      		sei
 270               	 ;  0 "" 2
 271               	.LVL20:
 272               	/* #NOAPP */
 273               	.LBE94:
 274               	.LBE95:
 275               	.LBE96:
 276               	.LBE100:
 277               	.LBE101:
 278               	.LBE102:
 279               		.loc 1 240 0
 280 0046 2097      		sbiw r28,0
 281 0048 01F4      		brne .L9
 282               	.L13:
 241:../../../os/rt/src/chregistry.c **** 
 242:../../../os/rt/src/chregistry.c ****   return NULL;
 283               		.loc 1 242 0
 284 004a 80E0      		ldi r24,0
 285 004c 90E0      		ldi r25,0
 286               	/* epilogue start */
 243:../../../os/rt/src/chregistry.c **** }
 287               		.loc 1 243 0
 288 004e DF91      		pop r29
 289 0050 CF91      		pop r28
 290 0052 1F91      		pop r17
 291 0054 0F91      		pop r16
 292               	.LVL21:
 293 0056 0895      		ret
 294               	.LVL22:
 295               	.L10:
 296 0058 CE01      		movw r24,r28
 297               	/* epilogue start */
 298 005a DF91      		pop r29
 299 005c CF91      		pop r28
 300               	.LVL23:
 301 005e 1F91      		pop r17
 302 0060 0F91      		pop r16
 303               	.LVL24:
 304 0062 0895      		ret
 305               		.cfi_endproc
 306               	.LFE200:
 308               		.section	.text.chRegFindThreadByPointer,"ax",@progbits
 309               	.global	chRegFindThreadByPointer
 311               	chRegFindThreadByPointer:
 312               	.LFB201:
 244:../../../os/rt/src/chregistry.c **** 
 245:../../../os/rt/src/chregistry.c **** /**
 246:../../../os/rt/src/chregistry.c ****  * @brief   Confirms that a pointer is a valid thread pointer.
 247:../../../os/rt/src/chregistry.c ****  * @note    The reference counter of the found thread is increased by one so
 248:../../../os/rt/src/chregistry.c ****  *          it cannot be disposed incidentally after the pointer has been
 249:../../../os/rt/src/chregistry.c ****  *          returned.
 250:../../../os/rt/src/chregistry.c ****  *
 251:../../../os/rt/src/chregistry.c ****  * @param[in] tp        pointer to the thread
 252:../../../os/rt/src/chregistry.c ****  * @return              A pointer to the found thread.
 253:../../../os/rt/src/chregistry.c ****  * @retval NULL         if a matching thread has not been found.
 254:../../../os/rt/src/chregistry.c ****  *
 255:../../../os/rt/src/chregistry.c ****  * @api
 256:../../../os/rt/src/chregistry.c ****  */
 257:../../../os/rt/src/chregistry.c **** thread_t *chRegFindThreadByPointer(thread_t *tp) {
 313               		.loc 1 257 0
 314               		.cfi_startproc
 315               	.LVL25:
 316               	/* prologue: function */
 317               	/* frame size = 0 */
 318               	/* stack size = 0 */
 319               	.L__stack_usage = 0
 320               	.LBB103:
 321               	.LBB104:
 322               	.LBB105:
 323               	.LBB106:
 324               	.LBB107:
 430:../../../os/common/ports/AVR/chcore.h **** }
 325               		.loc 2 430 0
 326               	/* #APP */
 327               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 328 0000 F894      		cli
 329               	 ;  0 "" 2
 330               	.LVL26:
 331               	/* #NOAPP */
 332               	.LBE107:
 333               	.LBE106:
 334               	.LBE105:
 166:../../../os/rt/src/chregistry.c ****   /*lint -restore*/
 335               		.loc 1 166 0
 336 0002 E091 0000 		lds r30,ch0+25
 337 0006 F091 0000 		lds r31,ch0+25+1
 338 000a 3797      		sbiw r30,7
 339               	.LVL27:
 340               	.LBB108:
 341               	.LBB109:
 342               	.LBB110:
 343               	.LBB111:
 344               		.loc 2 440 0
 345               	/* #APP */
 346               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 347 000c 7894      		sei
 348               	 ;  0 "" 2
 349               	.LVL28:
 350               	/* #NOAPP */
 351               	.LBE111:
 352               	.LBE110:
 353               	.LBE109:
 354               	.LBE108:
 355               	.LBE104:
 356               	.LBE103:
 258:../../../os/rt/src/chregistry.c ****   thread_t *ctp;
 259:../../../os/rt/src/chregistry.c **** 
 260:../../../os/rt/src/chregistry.c ****   /* Scanning registry.*/
 261:../../../os/rt/src/chregistry.c ****   ctp = chRegFirstThread();
 262:../../../os/rt/src/chregistry.c ****   do {
 263:../../../os/rt/src/chregistry.c ****     if (ctp == tp) {
 357               		.loc 1 263 0
 358 000e 8E17      		cp r24,r30
 359 0010 9F07      		cpc r25,r31
 360 0012 01F4      		brne .L18
 361 0014 00C0      		rjmp .L24
 362               	.LVL29:
 363               	.L26:
 364               	.LBB112:
 365               	.LBB113:
 366               	.LBB114:
 201:../../../os/rt/src/chregistry.c ****     /*lint -restore*/
 367               		.loc 1 201 0
 368 0016 3797      		sbiw r30,7
 369               	.LVL30:
 370               	.LBE114:
 371               	.LBB115:
 372               	.LBB116:
 373               	.LBB117:
 374               	.LBB118:
 375               		.loc 2 440 0
 376               	/* #APP */
 377               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 378 0018 7894      		sei
 379               	 ;  0 "" 2
 380               	.LVL31:
 381               	/* #NOAPP */
 382               	.LBE118:
 383               	.LBE117:
 384               	.LBE116:
 385               	.LBE115:
 386               	.LBE113:
 387               	.LBE112:
 264:../../../os/rt/src/chregistry.c ****       return ctp;
 265:../../../os/rt/src/chregistry.c ****     }
 266:../../../os/rt/src/chregistry.c ****     ctp = chRegNextThread(ctp);
 267:../../../os/rt/src/chregistry.c ****   } while (ctp != NULL);
 388               		.loc 1 267 0
 389 001a 3097      		sbiw r30,0
 390 001c 01F0      		breq .L25
 391               	.LVL32:
 392               	.L20:
 263:../../../os/rt/src/chregistry.c ****       return ctp;
 393               		.loc 1 263 0
 394 001e 8E17      		cp r24,r30
 395 0020 9F07      		cpc r25,r31
 396 0022 01F0      		breq .L16
 397               	.L18:
 398               	.LVL33:
 399               	.LBB127:
 400               	.LBB126:
 401               	.LBB122:
 402               	.LBB123:
 403               	.LBB124:
 430:../../../os/common/ports/AVR/chcore.h **** }
 404               		.loc 2 430 0
 405               	/* #APP */
 406               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 407 0024 F894      		cli
 408               	 ;  0 "" 2
 409               	/* #NOAPP */
 410               	.LBE124:
 411               	.LBE123:
 412               	.LBE122:
 194:../../../os/rt/src/chregistry.c ****   if (nqp == REG_HEADER(currcore)) {
 413               		.loc 1 194 0
 414 0026 0780      		ldd __tmp_reg__,Z+7
 415 0028 F085      		ldd r31,Z+8
 416 002a E02D      		mov r30,__tmp_reg__
 417               	.LVL34:
 195:../../../os/rt/src/chregistry.c ****     ntp = NULL;
 418               		.loc 1 195 0
 419 002c 20E0      		ldi r18,hi8(ch0+25)
 420 002e E030      		cpi r30,lo8(ch0+25)
 421 0030 F207      		cpc r31,r18
 422 0032 01F4      		brne .L26
 196:../../../os/rt/src/chregistry.c ****   }
 423               		.loc 1 196 0
 424 0034 E0E0      		ldi r30,0
 425 0036 F0E0      		ldi r31,0
 426               	.LVL35:
 427               	.LBB125:
 428               	.LBB121:
 429               	.LBB120:
 430               	.LBB119:
 431               		.loc 2 440 0
 432               	/* #APP */
 433               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 434 0038 7894      		sei
 435               	 ;  0 "" 2
 436               	.LVL36:
 437               	/* #NOAPP */
 438               	.LBE119:
 439               	.LBE120:
 440               	.LBE121:
 441               	.LBE125:
 442               	.LBE126:
 443               	.LBE127:
 444               		.loc 1 267 0
 445 003a 3097      		sbiw r30,0
 446 003c 01F4      		brne .L20
 447               	.L25:
 268:../../../os/rt/src/chregistry.c **** 
 269:../../../os/rt/src/chregistry.c ****   return NULL;
 448               		.loc 1 269 0
 449 003e 80E0      		ldi r24,0
 450               	.LVL37:
 451 0040 90E0      		ldi r25,0
 452               	.L16:
 270:../../../os/rt/src/chregistry.c **** }
 453               		.loc 1 270 0
 454 0042 0895      		ret
 455               	.LVL38:
 456               	.L24:
 457 0044 0895      		ret
 458               		.cfi_endproc
 459               	.LFE201:
 461               	.global	ch_debug
 462               		.section	.rodata.ch_debug,"a",@progbits
 465               	ch_debug:
 466 0000 6D        		.byte	109
 467 0001 61        		.byte	97
 468 0002 69        		.byte	105
 469 0003 6E        		.byte	110
 470 0004 00        		.byte	0
 471 0005 2B        		.byte	43
 472 0006 4038      		.word	14400
 473 0008 02        		.byte	2
 474 0009 02        		.byte	2
 475 000a 1E        		.byte	30
 476 000b 04        		.byte	4
 477 000c 05        		.byte	5
 478 000d 07        		.byte	7
 479 000e 09        		.byte	9
 480 000f 0D        		.byte	13
 481 0010 00        		.byte	0
 482 0011 0F        		.byte	15
 483 0012 10        		.byte	16
 484 0013 00        		.byte	0
 485 0014 00        		.byte	0
 486 0015 00        		.byte	0
 487 0016 00        		.byte	0
 488 0017 00        		.byte	0
 489 0018 00        		.byte	0
 490 0019 00        		.byte	0
 491 001a 15        		.byte	21
 492 001b 02        		.byte	2
 493 001c 01        		.byte	1
 494 001d 00        		.byte	0
 495 001e 01        		.byte	1
 496 001f 00        		.byte	0
 497 0020 00        		.byte	0
 498 0021 00        		.byte	0
 499 0022 00        		.byte	0
 500 0023 00        		.byte	0
 501 0024 00        		.byte	0
 502 0025 05        		.byte	5
 503 0026 00        		.byte	0
 504 0027 07        		.byte	7
 505 0028 19        		.byte	25
 506 0029 1D        		.byte	29
 507 002a 1F        		.byte	31
 508               		.text
 509               	.Letext0:
 510               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 511               		.file 4 "/usr/lib/avr/include/stdint.h"
 512               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 513               		.file 6 "../../../os/rt/include/chearly.h"
 514               		.file 7 "../../../os/rt/include/chobjects.h"
 515               		.file 8 "../../../os/rt/include/chrfcu.h"
 516               		.file 9 "../../../os/rt/include/chdebug.h"
 517               		.file 10 "../../../os/rt/include/chtime.h"
 518               		.file 11 "../../../os/rt/include/chlists.h"
 519               		.file 12 "../../../os/rt/include/chsem.h"
 520               		.file 13 "../../../os/rt/include/chmtx.h"
 521               		.file 14 "../../../os/rt/include/chregistry.h"
 522               		.file 15 "../../../os/rt/include/chsys.h"
 523               		.file 16 "/usr/lib/avr/include/string.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chregistry.c
     /tmp/ccibtUqj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccibtUqj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccibtUqj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccibtUqj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccibtUqj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccibtUqj.s:13     .text.chRegFirstThread:0000000000000000 chRegFirstThread
     /tmp/ccibtUqj.s:63     .text.chRegNextThread:0000000000000000 chRegNextThread
     /tmp/ccibtUqj.s:130    .text.chRegFindThreadByName:0000000000000000 chRegFindThreadByName
     /tmp/ccibtUqj.s:311    .text.chRegFindThreadByPointer:0000000000000000 chRegFindThreadByPointer
     /tmp/ccibtUqj.s:465    .rodata.ch_debug:0000000000000000 ch_debug

UNDEFINED SYMBOLS
ch0
strcmp
__do_copy_data
