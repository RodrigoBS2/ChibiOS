   1               		.file	"chcond.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chCondObjectInit,"ax",@progbits
  11               	.global	chCondObjectInit
  13               	chCondObjectInit:
  14               	.LFB193:
  15               		.file 1 "../../../os/rt/src/chcond.c"
   1:../../../os/rt/src/chcond.c **** /*
   2:../../../os/rt/src/chcond.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/src/chcond.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/src/chcond.c **** 
   5:../../../os/rt/src/chcond.c ****     This file is part of ChibiOS.
   6:../../../os/rt/src/chcond.c **** 
   7:../../../os/rt/src/chcond.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/src/chcond.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/src/chcond.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/src/chcond.c **** 
  11:../../../os/rt/src/chcond.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/src/chcond.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/src/chcond.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/src/chcond.c ****     GNU General Public License for more details.
  15:../../../os/rt/src/chcond.c **** 
  16:../../../os/rt/src/chcond.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/src/chcond.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/src/chcond.c **** */
  19:../../../os/rt/src/chcond.c **** /*
  20:../../../os/rt/src/chcond.c ****    Concepts and parts of this file have been contributed by Leon Woestenberg.
  21:../../../os/rt/src/chcond.c ****  */
  22:../../../os/rt/src/chcond.c **** 
  23:../../../os/rt/src/chcond.c **** /**
  24:../../../os/rt/src/chcond.c ****  * @file    rt/src/chcond.c
  25:../../../os/rt/src/chcond.c ****  * @brief   Condition Variables code.
  26:../../../os/rt/src/chcond.c ****  *
  27:../../../os/rt/src/chcond.c ****  * @addtogroup condvars
  28:../../../os/rt/src/chcond.c ****  * @details This module implements the Condition Variables mechanism. Condition
  29:../../../os/rt/src/chcond.c ****  *          variables are an extensions to the mutex subsystem and cannot
  30:../../../os/rt/src/chcond.c ****  *          work alone.
  31:../../../os/rt/src/chcond.c ****  *          <h2>Operation mode</h2>
  32:../../../os/rt/src/chcond.c ****  *          The condition variable is a synchronization object meant to be
  33:../../../os/rt/src/chcond.c ****  *          used inside a zone protected by a mutex. Mutexes and condition
  34:../../../os/rt/src/chcond.c ****  *          variables together can implement a Monitor construct.
  35:../../../os/rt/src/chcond.c ****  * @pre     In order to use the condition variable APIs the @p CH_CFG_USE_CONDVARS
  36:../../../os/rt/src/chcond.c ****  *          option must be enabled in @p chconf.h.
  37:../../../os/rt/src/chcond.c ****  * @{
  38:../../../os/rt/src/chcond.c ****  */
  39:../../../os/rt/src/chcond.c **** 
  40:../../../os/rt/src/chcond.c **** #include <string.h>
  41:../../../os/rt/src/chcond.c **** 
  42:../../../os/rt/src/chcond.c **** #include "ch.h"
  43:../../../os/rt/src/chcond.c **** 
  44:../../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS == TRUE) || defined(__DOXYGEN__)
  45:../../../os/rt/src/chcond.c **** 
  46:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  47:../../../os/rt/src/chcond.c **** /* Module local definitions.                                                 */
  48:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  49:../../../os/rt/src/chcond.c **** 
  50:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  51:../../../os/rt/src/chcond.c **** /* Module exported variables.                                                */
  52:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  53:../../../os/rt/src/chcond.c **** 
  54:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  55:../../../os/rt/src/chcond.c **** /* Module local types.                                                       */
  56:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  57:../../../os/rt/src/chcond.c **** 
  58:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  59:../../../os/rt/src/chcond.c **** /* Module local variables.                                                   */
  60:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  61:../../../os/rt/src/chcond.c **** 
  62:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  63:../../../os/rt/src/chcond.c **** /* Module local functions.                                                   */
  64:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  65:../../../os/rt/src/chcond.c **** 
  66:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  67:../../../os/rt/src/chcond.c **** /* Module exported functions.                                                */
  68:../../../os/rt/src/chcond.c **** /*===========================================================================*/
  69:../../../os/rt/src/chcond.c **** 
  70:../../../os/rt/src/chcond.c **** /**
  71:../../../os/rt/src/chcond.c ****  * @brief   Initializes a @p condition_variable_t object.
  72:../../../os/rt/src/chcond.c ****  *
  73:../../../os/rt/src/chcond.c ****  * @param[out] cp       pointer to a @p condition_variable_t object
  74:../../../os/rt/src/chcond.c ****  *
  75:../../../os/rt/src/chcond.c ****  * @init
  76:../../../os/rt/src/chcond.c ****  */
  77:../../../os/rt/src/chcond.c **** void chCondObjectInit(condition_variable_t *cp) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  23               	.LBB77:
  24               	.LBB78:
  25               		.file 2 "../../../os/rt/include/chlists.h"
   1:../../../os/rt/include/chlists.h **** /*
   2:../../../os/rt/include/chlists.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chlists.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chlists.h **** 
   5:../../../os/rt/include/chlists.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chlists.h **** 
   7:../../../os/rt/include/chlists.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chlists.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chlists.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chlists.h **** 
  11:../../../os/rt/include/chlists.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chlists.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chlists.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chlists.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chlists.h **** 
  16:../../../os/rt/include/chlists.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chlists.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chlists.h **** */
  19:../../../os/rt/include/chlists.h **** 
  20:../../../os/rt/include/chlists.h **** /**
  21:../../../os/rt/include/chlists.h ****  * @file    chlists.h
  22:../../../os/rt/include/chlists.h ****  * @brief   Lists and Queues header.
  23:../../../os/rt/include/chlists.h ****  *
  24:../../../os/rt/include/chlists.h ****  * @addtogroup os_lists
  25:../../../os/rt/include/chlists.h ****  * @{
  26:../../../os/rt/include/chlists.h ****  */
  27:../../../os/rt/include/chlists.h **** 
  28:../../../os/rt/include/chlists.h **** #ifndef CHLISTS_H
  29:../../../os/rt/include/chlists.h **** #define CHLISTS_H
  30:../../../os/rt/include/chlists.h **** 
  31:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  32:../../../os/rt/include/chlists.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  34:../../../os/rt/include/chlists.h **** 
  35:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  36:../../../os/rt/include/chlists.h **** /* Module pre-compile time settings.                                         */
  37:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  38:../../../os/rt/include/chlists.h **** 
  39:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  40:../../../os/rt/include/chlists.h **** /* Derived constants and error checks.                                       */
  41:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  42:../../../os/rt/include/chlists.h **** 
  43:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  44:../../../os/rt/include/chlists.h **** /* Module data structures and types.                                         */
  45:../../../os/rt/include/chlists.h **** /*===========================================================================*/
  46:../../../os/rt/include/chlists.h **** 
  47:../../../os/rt/include/chlists.h **** /**
  48:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic single link list header and element.
  49:../../../os/rt/include/chlists.h ****  */
  50:../../../os/rt/include/chlists.h **** typedef struct ch_list ch_list_t;
  51:../../../os/rt/include/chlists.h **** 
  52:../../../os/rt/include/chlists.h **** /**
  53:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic single link list header
  54:../../../os/rt/include/chlists.h ****  *          and element.
  55:../../../os/rt/include/chlists.h ****  */
  56:../../../os/rt/include/chlists.h **** struct ch_list {
  57:../../../os/rt/include/chlists.h ****   ch_list_t             *next;      /**< @brief Next in the list/queue.     */
  58:../../../os/rt/include/chlists.h **** };
  59:../../../os/rt/include/chlists.h **** 
  60:../../../os/rt/include/chlists.h **** /**
  61:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked list header and element.
  62:../../../os/rt/include/chlists.h ****  */
  63:../../../os/rt/include/chlists.h **** typedef struct ch_queue ch_queue_t;
  64:../../../os/rt/include/chlists.h **** 
  65:../../../os/rt/include/chlists.h **** /**
  66:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic bidirectional linked list header
  67:../../../os/rt/include/chlists.h ****  *          and element.
  68:../../../os/rt/include/chlists.h ****  */
  69:../../../os/rt/include/chlists.h **** struct ch_queue {
  70:../../../os/rt/include/chlists.h ****   ch_queue_t            *next;      /**< @brief Next in the list/queue.     */
  71:../../../os/rt/include/chlists.h ****   ch_queue_t            *prev;      /**< @brief Previous in the queue.      */
  72:../../../os/rt/include/chlists.h **** };
  73:../../../os/rt/include/chlists.h **** 
  74:../../../os/rt/include/chlists.h **** /**
  75:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic priority-ordered bidirectional linked list
  76:../../../os/rt/include/chlists.h ****  *          header and element.
  77:../../../os/rt/include/chlists.h ****  */
  78:../../../os/rt/include/chlists.h **** typedef struct ch_priority_queue ch_priority_queue_t;
  79:../../../os/rt/include/chlists.h **** 
  80:../../../os/rt/include/chlists.h **** /**
  81:../../../os/rt/include/chlists.h ****  * @brief   Structure representing a generic priority-ordered bidirectional
  82:../../../os/rt/include/chlists.h ****  *          linked list header and element.
  83:../../../os/rt/include/chlists.h ****  * @note    Link fields are void pointers in order to avoid aliasing issues.
  84:../../../os/rt/include/chlists.h ****  */
  85:../../../os/rt/include/chlists.h **** struct ch_priority_queue {
  86:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *next;      /**< @brief Next in the queue.          */
  87:../../../os/rt/include/chlists.h ****   ch_priority_queue_t   *prev;      /**< @brief Previous in the queue.      */
  88:../../../os/rt/include/chlists.h ****   tprio_t               prio;       /**< @brief Priority of this element.   */
  89:../../../os/rt/include/chlists.h **** };
  90:../../../os/rt/include/chlists.h **** 
  91:../../../os/rt/include/chlists.h **** /**
  92:../../../os/rt/include/chlists.h ****  * @brief   Type of a generic bidirectional linked delta list
  93:../../../os/rt/include/chlists.h ****  *          header and element.
  94:../../../os/rt/include/chlists.h ****  */
  95:../../../os/rt/include/chlists.h **** typedef struct ch_delta_list ch_delta_list_t;
  96:../../../os/rt/include/chlists.h **** 
  97:../../../os/rt/include/chlists.h **** /**
  98:../../../os/rt/include/chlists.h ****  * @brief   Delta list element and header structure.
  99:../../../os/rt/include/chlists.h ****  */
 100:../../../os/rt/include/chlists.h **** struct ch_delta_list {
 101:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *next;      /**< @brief Next in the delta list.     */
 102:../../../os/rt/include/chlists.h ****   ch_delta_list_t       *prev;      /**< @brief Previous in the delta list. */
 103:../../../os/rt/include/chlists.h ****   sysinterval_t         delta;      /**< @brief Time interval from previous.*/
 104:../../../os/rt/include/chlists.h **** };
 105:../../../os/rt/include/chlists.h **** 
 106:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 107:../../../os/rt/include/chlists.h **** /* Module macros.                                                            */
 108:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 109:../../../os/rt/include/chlists.h **** 
 110:../../../os/rt/include/chlists.h **** /**
 111:../../../os/rt/include/chlists.h ****  * @brief   Data part of a static queue object initializer.
 112:../../../os/rt/include/chlists.h ****  * @details This macro should be used when statically initializing a
 113:../../../os/rt/include/chlists.h ****  *          queue that is part of a bigger structure.
 114:../../../os/rt/include/chlists.h ****  *
 115:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 116:../../../os/rt/include/chlists.h ****  */
 117:../../../os/rt/include/chlists.h **** #define __CH_QUEUE_DATA(name) {(ch_queue_t *)&name, (ch_queue_t *)&name}
 118:../../../os/rt/include/chlists.h **** 
 119:../../../os/rt/include/chlists.h **** /**
 120:../../../os/rt/include/chlists.h ****  * @brief   Static queue object initializer.
 121:../../../os/rt/include/chlists.h ****  * @details Statically initialized queues require no explicit
 122:../../../os/rt/include/chlists.h ****  *          initialization using @p queue_init().
 123:../../../os/rt/include/chlists.h ****  *
 124:../../../os/rt/include/chlists.h ****  * @param[in] name      the name of the queue variable
 125:../../../os/rt/include/chlists.h ****  */
 126:../../../os/rt/include/chlists.h **** #define CH_QUEUE_DECL(name)                                                 \
 127:../../../os/rt/include/chlists.h ****   ch_queue_t name = __CH_QUEUE_DATA(name)
 128:../../../os/rt/include/chlists.h **** 
 129:../../../os/rt/include/chlists.h **** /**
 130:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list forwards
 131:../../../os/rt/include/chlists.h ****  *
 132:../../../os/rt/include/chlists.h ****  * @param[in] pos  pointer to @p ch_queue_t object to use as a loop cursor
 133:../../../os/rt/include/chlists.h ****  * @param[in] head pointer to @p ch_queue_t head of queue
 134:../../../os/rt/include/chlists.h ****  *
 135:../../../os/rt/include/chlists.h ****  * @notapi
 136:../../../os/rt/include/chlists.h ****  */
 137:../../../os/rt/include/chlists.h **** #define ch_queue_for_each(pos, head)                                        \
 138:../../../os/rt/include/chlists.h ****   for (pos = (head)->next; pos != (head); pos = pos->next)
 139:../../../os/rt/include/chlists.h **** 
 140:../../../os/rt/include/chlists.h **** /**
 141:../../../os/rt/include/chlists.h ****  * @brief   Iterate over a queue list backwards
 142:../../../os/rt/include/chlists.h ****  *
 143:../../../os/rt/include/chlists.h ****  * @param[in] pos   pointer to @p ch_queue_t object to use as a loop cursor
 144:../../../os/rt/include/chlists.h ****  * @param[in] head  pointer to @p ch_queue_t head of queue
 145:../../../os/rt/include/chlists.h ****  *
 146:../../../os/rt/include/chlists.h ****  * @notapi
 147:../../../os/rt/include/chlists.h ****  */
 148:../../../os/rt/include/chlists.h **** #define ch_queue_for_each_reverse(pos, head)                                \
 149:../../../os/rt/include/chlists.h ****   for (pos = (head)->prev; pos != (head); pos = pos->prev)
 150:../../../os/rt/include/chlists.h **** 
 151:../../../os/rt/include/chlists.h **** /**
 152:../../../os/rt/include/chlists.h ****  * @brief   Get the enclosing object of a queue object
 153:../../../os/rt/include/chlists.h ****  *
 154:../../../os/rt/include/chlists.h ****  * @param[in] ptr       pointer to the member @p ch_queue_t object
 155:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 156:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 157:../../../os/rt/include/chlists.h ****  *
 158:../../../os/rt/include/chlists.h ****  * @notapi
 159:../../../os/rt/include/chlists.h ****  */
 160:../../../os/rt/include/chlists.h **** #define ch_queue_get_owner(ptr, type, member)                               \
 161:../../../os/rt/include/chlists.h ****   __CH_OWNEROF(ptr, type, member)
 162:../../../os/rt/include/chlists.h **** 
 163:../../../os/rt/include/chlists.h **** /**
 164:../../../os/rt/include/chlists.h ****  * @brief   Get the first entry of a queue
 165:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 166:../../../os/rt/include/chlists.h ****  *
 167:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 168:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 169:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 170:../../../os/rt/include/chlists.h ****  *
 171:../../../os/rt/include/chlists.h ****  * @notapi
 172:../../../os/rt/include/chlists.h ****  */
 173:../../../os/rt/include/chlists.h **** #define ch_queue_first_owner(head, type, member)                            \
 174:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->next, type, member)
 175:../../../os/rt/include/chlists.h **** 
 176:../../../os/rt/include/chlists.h **** /**
 177:../../../os/rt/include/chlists.h ****  * @brief   Get the last entry of a queue
 178:../../../os/rt/include/chlists.h ****  * @note    The queue is assumed to be not empty
 179:../../../os/rt/include/chlists.h ****  *
 180:../../../os/rt/include/chlists.h ****  * @param[in] head      pointer to @p ch_queue_t head of queue
 181:../../../os/rt/include/chlists.h ****  * @param[in] type      the type of the enclosing object
 182:../../../os/rt/include/chlists.h ****  * @param[in] member    the name of the @p ch_queue_t object
 183:../../../os/rt/include/chlists.h ****  *
 184:../../../os/rt/include/chlists.h ****  * @notapi
 185:../../../os/rt/include/chlists.h ****  */
 186:../../../os/rt/include/chlists.h **** #define ch_queue_last_owner(head, type, member)                             \
 187:../../../os/rt/include/chlists.h ****   __CH_OWNEROF((head)->prev, type, member)
 188:../../../os/rt/include/chlists.h **** 
 189:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 190:../../../os/rt/include/chlists.h **** /* External declarations.                                                    */
 191:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 192:../../../os/rt/include/chlists.h **** 
 193:../../../os/rt/include/chlists.h **** /* Early function prototypes required by the following headers.*/
 194:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 195:../../../os/rt/include/chlists.h **** extern "C" {
 196:../../../os/rt/include/chlists.h **** #endif
 197:../../../os/rt/include/chlists.h **** 
 198:../../../os/rt/include/chlists.h **** #ifdef __cplusplus
 199:../../../os/rt/include/chlists.h **** }
 200:../../../os/rt/include/chlists.h **** #endif
 201:../../../os/rt/include/chlists.h **** 
 202:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 203:../../../os/rt/include/chlists.h **** /* Module inline functions.                                                  */
 204:../../../os/rt/include/chlists.h **** /*===========================================================================*/
 205:../../../os/rt/include/chlists.h **** 
 206:../../../os/rt/include/chlists.h **** /**
 207:../../../os/rt/include/chlists.h ****  * @brief   List initialization.
 208:../../../os/rt/include/chlists.h ****  *
 209:../../../os/rt/include/chlists.h ****  * @param[out] lp       pointer to the list header
 210:../../../os/rt/include/chlists.h ****  *
 211:../../../os/rt/include/chlists.h ****  * @notapi
 212:../../../os/rt/include/chlists.h ****  */
 213:../../../os/rt/include/chlists.h **** static inline void ch_list_init(ch_list_t *lp) {
 214:../../../os/rt/include/chlists.h **** 
 215:../../../os/rt/include/chlists.h ****   lp->next = lp;
 216:../../../os/rt/include/chlists.h **** }
 217:../../../os/rt/include/chlists.h **** 
 218:../../../os/rt/include/chlists.h **** /**
 219:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is empty.
 220:../../../os/rt/include/chlists.h ****  *
 221:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 222:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 223:../../../os/rt/include/chlists.h ****  *
 224:../../../os/rt/include/chlists.h ****  * @notapi
 225:../../../os/rt/include/chlists.h ****  */
 226:../../../os/rt/include/chlists.h **** static inline bool ch_list_isempty(ch_list_t *lp) {
 227:../../../os/rt/include/chlists.h **** 
 228:../../../os/rt/include/chlists.h ****   return (bool)(lp->next == lp);
 229:../../../os/rt/include/chlists.h **** }
 230:../../../os/rt/include/chlists.h **** 
 231:../../../os/rt/include/chlists.h **** /**
 232:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified list is not empty.
 233:../../../os/rt/include/chlists.h ****  *
 234:../../../os/rt/include/chlists.h ****  * @param[in] lp        pointer to the list header
 235:../../../os/rt/include/chlists.h ****  * @return              The status of the list.
 236:../../../os/rt/include/chlists.h ****  *
 237:../../../os/rt/include/chlists.h ****  * @notapi
 238:../../../os/rt/include/chlists.h ****  */
 239:../../../os/rt/include/chlists.h **** static inline bool ch_list_notempty(ch_list_t *lp) {
 240:../../../os/rt/include/chlists.h **** 
 241:../../../os/rt/include/chlists.h ****   return (bool)(lp->next != lp);
 242:../../../os/rt/include/chlists.h **** }
 243:../../../os/rt/include/chlists.h **** 
 244:../../../os/rt/include/chlists.h **** /**
 245:../../../os/rt/include/chlists.h ****  * @brief   Pushes an element on top of a stack list.
 246:../../../os/rt/include/chlists.h ****  *
 247:../../../os/rt/include/chlists.h ****  * @param[in] lp    the pointer to the list header
 248:../../../os/rt/include/chlists.h ****  * @param[in] p     the pointer to the element to be inserted in the list
 249:../../../os/rt/include/chlists.h ****  *
 250:../../../os/rt/include/chlists.h ****  * @notapi
 251:../../../os/rt/include/chlists.h ****  */
 252:../../../os/rt/include/chlists.h **** static inline void ch_list_link(ch_list_t *lp, ch_list_t *p) {
 253:../../../os/rt/include/chlists.h **** 
 254:../../../os/rt/include/chlists.h ****   p->next = lp->next;
 255:../../../os/rt/include/chlists.h ****   lp->next = p;
 256:../../../os/rt/include/chlists.h **** }
 257:../../../os/rt/include/chlists.h **** 
 258:../../../os/rt/include/chlists.h **** /**
 259:../../../os/rt/include/chlists.h ****  * @brief   Pops an element from the top of a stack list and returns it.
 260:../../../os/rt/include/chlists.h ****  * @pre     The list must be non-empty before calling this function.
 261:../../../os/rt/include/chlists.h ****  *
 262:../../../os/rt/include/chlists.h ****  * @param[in] lp        the pointer to the list header
 263:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 264:../../../os/rt/include/chlists.h ****  *
 265:../../../os/rt/include/chlists.h ****  * @notapi
 266:../../../os/rt/include/chlists.h ****  */
 267:../../../os/rt/include/chlists.h **** static inline ch_list_t *ch_list_unlink(ch_list_t *lp) {
 268:../../../os/rt/include/chlists.h **** 
 269:../../../os/rt/include/chlists.h ****   ch_list_t *p = lp->next;
 270:../../../os/rt/include/chlists.h ****   lp->next = p->next;
 271:../../../os/rt/include/chlists.h **** 
 272:../../../os/rt/include/chlists.h ****   return p;
 273:../../../os/rt/include/chlists.h **** }
 274:../../../os/rt/include/chlists.h **** 
 275:../../../os/rt/include/chlists.h **** /**
 276:../../../os/rt/include/chlists.h ****  * @brief   Queue initialization.
 277:../../../os/rt/include/chlists.h ****  *
 278:../../../os/rt/include/chlists.h ****  * @param[out] qp       pointer to the queue header
 279:../../../os/rt/include/chlists.h ****  *
 280:../../../os/rt/include/chlists.h ****  * @notapi
 281:../../../os/rt/include/chlists.h ****  */
 282:../../../os/rt/include/chlists.h **** static inline void ch_queue_init(ch_queue_t *qp) {
 283:../../../os/rt/include/chlists.h **** 
 284:../../../os/rt/include/chlists.h ****   qp->next = qp;
  26               		.loc 2 284 0
  27 0000 FC01      		movw r30,r24
  28 0002 9183      		std Z+1,r25
  29 0004 8083      		st Z,r24
 285:../../../os/rt/include/chlists.h ****   qp->prev = qp;
  30               		.loc 2 285 0
  31 0006 9383      		std Z+3,r25
  32 0008 8283      		std Z+2,r24
  33               	.LVL1:
  34 000a 0895      		ret
  35               	.LBE78:
  36               	.LBE77:
  37               		.cfi_endproc
  38               	.LFE193:
  40               		.section	.text.chCondObjectDispose,"ax",@progbits
  41               	.global	chCondObjectDispose
  43               	chCondObjectDispose:
  44               	.LFB194:
  78:../../../os/rt/src/chcond.c **** 
  79:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
  80:../../../os/rt/src/chcond.c **** 
  81:../../../os/rt/src/chcond.c ****   ch_queue_init(&cp->queue);
  82:../../../os/rt/src/chcond.c **** }
  83:../../../os/rt/src/chcond.c **** 
  84:../../../os/rt/src/chcond.c **** /**
  85:../../../os/rt/src/chcond.c ****  * @brief   Disposes a condition variable.
  86:../../../os/rt/src/chcond.c ****  * @note    Objects disposing does not involve freeing memory but just
  87:../../../os/rt/src/chcond.c ****  *          performing checks that make sure that the object is in a
  88:../../../os/rt/src/chcond.c ****  *          state compatible with operations stop.
  89:../../../os/rt/src/chcond.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
  90:../../../os/rt/src/chcond.c ****  *          the object is also cleared, attempts to use the object would likely
  91:../../../os/rt/src/chcond.c ****  *          result in a clean memory access violation because dereferencing
  92:../../../os/rt/src/chcond.c ****  *          of @p NULL pointers rather than dereferencing previously valid
  93:../../../os/rt/src/chcond.c ****  *          pointers.
  94:../../../os/rt/src/chcond.c ****  *
  95:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
  96:../../../os/rt/src/chcond.c ****  *
  97:../../../os/rt/src/chcond.c ****  * @dispose
  98:../../../os/rt/src/chcond.c ****  */
  99:../../../os/rt/src/chcond.c **** void chCondObjectDispose(condition_variable_t *cp) {
  45               		.loc 1 99 0
  46               		.cfi_startproc
  47               	.LVL2:
  48               	/* prologue: function */
  49               	/* frame size = 0 */
  50               	/* stack size = 0 */
  51               	.L__stack_usage = 0
  52 0000 0895      		ret
  53               		.cfi_endproc
  54               	.LFE194:
  56               		.section	.text.chCondSignal,"ax",@progbits
  57               	.global	chCondSignal
  59               	chCondSignal:
  60               	.LFB195:
 100:../../../os/rt/src/chcond.c **** 
 101:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 102:../../../os/rt/src/chcond.c ****   chDbgAssert(ch_queue_isempty(&cp->queue),
 103:../../../os/rt/src/chcond.c ****               "object in use");
 104:../../../os/rt/src/chcond.c **** 
 105:../../../os/rt/src/chcond.c **** #if CH_CFG_HARDENING_LEVEL > 0
 106:../../../os/rt/src/chcond.c ****   memset((void *)cp, 0, sizeof (condition_variable_t));
 107:../../../os/rt/src/chcond.c **** #endif
 108:../../../os/rt/src/chcond.c **** }
 109:../../../os/rt/src/chcond.c **** 
 110:../../../os/rt/src/chcond.c **** /**
 111:../../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
 112:../../../os/rt/src/chcond.c ****  *
 113:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 114:../../../os/rt/src/chcond.c ****  *
 115:../../../os/rt/src/chcond.c ****  * @api
 116:../../../os/rt/src/chcond.c ****  */
 117:../../../os/rt/src/chcond.c **** void chCondSignal(condition_variable_t *cp) {
  61               		.loc 1 117 0
  62               		.cfi_startproc
  63               	.LVL3:
  64               		.loc 1 117 0
  65 0000 CF93      		push r28
  66               	.LCFI0:
  67               		.cfi_def_cfa_offset 3
  68               		.cfi_offset 28, -2
  69 0002 DF93      		push r29
  70               	.LCFI1:
  71               		.cfi_def_cfa_offset 4
  72               		.cfi_offset 29, -3
  73               	/* prologue: function */
  74               	/* frame size = 0 */
  75               	/* stack size = 2 */
  76               	.L__stack_usage = 2
  77 0004 FC01      		movw r30,r24
  78               	.LBB79:
  79               	.LBB80:
  80               	.LBB81:
  81               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
  82               		.loc 3 430 0
  83               	/* #APP */
  84               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
  85 0006 F894      		cli
  86               	 ;  0 "" 2
  87               	.LVL4:
  88               	/* #NOAPP */
  89               	.LBE81:
  90               	.LBE80:
  91               	.LBE79:
  92               	.LBB82:
  93               	.LBB83:
 286:../../../os/rt/include/chlists.h **** }
 287:../../../os/rt/include/chlists.h **** 
 288:../../../os/rt/include/chlists.h **** /**
 289:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is empty.
 290:../../../os/rt/include/chlists.h ****  *
 291:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 292:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 293:../../../os/rt/include/chlists.h ****  *
 294:../../../os/rt/include/chlists.h ****  * @notapi
 295:../../../os/rt/include/chlists.h ****  */
 296:../../../os/rt/include/chlists.h **** static inline bool ch_queue_isempty(const ch_queue_t *qp) {
 297:../../../os/rt/include/chlists.h **** 
 298:../../../os/rt/include/chlists.h ****   return (bool)(qp->next == qp);
 299:../../../os/rt/include/chlists.h **** }
 300:../../../os/rt/include/chlists.h **** 
 301:../../../os/rt/include/chlists.h **** /**
 302:../../../os/rt/include/chlists.h ****  * @brief   Evaluates to @p true if the specified queue is not empty.
 303:../../../os/rt/include/chlists.h ****  *
 304:../../../os/rt/include/chlists.h ****  * @param[in] qp        pointer to the queue header
 305:../../../os/rt/include/chlists.h ****  * @return              The status of the queue.
 306:../../../os/rt/include/chlists.h ****  *
 307:../../../os/rt/include/chlists.h ****  * @notapi
 308:../../../os/rt/include/chlists.h ****  */
 309:../../../os/rt/include/chlists.h **** static inline bool ch_queue_notempty(const ch_queue_t *qp) {
 310:../../../os/rt/include/chlists.h **** 
 311:../../../os/rt/include/chlists.h ****   return (bool)(qp->next != qp);
  94               		.loc 2 311 0
  95 0008 8081      		ld r24,Z
  96 000a 9181      		ldd r25,Z+1
  97               	.LVL5:
  98               	.LBE83:
  99               	.LBE82:
 118:../../../os/rt/src/chcond.c **** 
 119:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 120:../../../os/rt/src/chcond.c **** 
 121:../../../os/rt/src/chcond.c ****   chSysLock();
 122:../../../os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
 100               		.loc 1 122 0
 101 000c E817      		cp r30,r24
 102 000e F907      		cpc r31,r25
 103 0010 01F0      		breq .L4
 104               	.LVL6:
 105               	.LBB84:
 106               	.LBB85:
 312:../../../os/rt/include/chlists.h **** }
 313:../../../os/rt/include/chlists.h **** 
 314:../../../os/rt/include/chlists.h **** /**
 315:../../../os/rt/include/chlists.h ****  * @brief   Inserts an element into a queue.
 316:../../../os/rt/include/chlists.h ****  *
 317:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue header
 318:../../../os/rt/include/chlists.h ****  * @param[in] p         the pointer to the element to be inserted in the queue
 319:../../../os/rt/include/chlists.h ****  *
 320:../../../os/rt/include/chlists.h ****  * @notapi
 321:../../../os/rt/include/chlists.h ****  */
 322:../../../os/rt/include/chlists.h **** static inline void ch_queue_insert(ch_queue_t *qp, ch_queue_t *p) {
 323:../../../os/rt/include/chlists.h **** 
 324:../../../os/rt/include/chlists.h ****   p->next       = qp;
 325:../../../os/rt/include/chlists.h ****   p->prev       = qp->prev;
 326:../../../os/rt/include/chlists.h ****   p->prev->next = p;
 327:../../../os/rt/include/chlists.h ****   qp->prev      = p;
 328:../../../os/rt/include/chlists.h **** }
 329:../../../os/rt/include/chlists.h **** 
 330:../../../os/rt/include/chlists.h **** /**
 331:../../../os/rt/include/chlists.h ****  * @brief   Removes the first-out element from a queue and returns it.
 332:../../../os/rt/include/chlists.h ****  * @note    If the queue is priority ordered then this function returns the
 333:../../../os/rt/include/chlists.h ****  *          element with the highest priority.
 334:../../../os/rt/include/chlists.h ****  *
 335:../../../os/rt/include/chlists.h ****  * @param[in] qp        the pointer to the queue list header
 336:../../../os/rt/include/chlists.h ****  * @return              The removed element pointer.
 337:../../../os/rt/include/chlists.h ****  *
 338:../../../os/rt/include/chlists.h ****  * @notapi
 339:../../../os/rt/include/chlists.h ****  */
 340:../../../os/rt/include/chlists.h **** static inline ch_queue_t *ch_queue_fifo_remove(ch_queue_t *qp) {
 341:../../../os/rt/include/chlists.h ****   ch_queue_t *p = qp->next;
 342:../../../os/rt/include/chlists.h **** 
 343:../../../os/rt/include/chlists.h ****   qp->next       = p->next;
 107               		.loc 2 343 0
 108 0012 EC01      		movw r28,r24
 109 0014 A881      		ld r26,Y
 110 0016 B981      		ldd r27,Y+1
 111 0018 B183      		std Z+1,r27
 112 001a A083      		st Z,r26
 344:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 113               		.loc 2 344 0
 114 001c 1396      		adiw r26,2+1
 115 001e FC93      		st X,r31
 116 0020 EE93      		st -X,r30
 117 0022 1297      		sbiw r26,2
 118               	.LVL7:
 119               	.LBE85:
 120               	.LBE84:
 123:../../../os/rt/src/chcond.c ****     chSchWakeupS(threadref(ch_queue_fifo_remove(&cp->queue)), MSG_OK);
 121               		.loc 1 123 0
 122 0024 60E0      		ldi r22,0
 123 0026 70E0      		ldi r23,0
 124 0028 0E94 0000 		call chSchWakeupS
 125               	.LVL8:
 126               	.L4:
 127               	.LBB86:
 128               	.LBB87:
 129               	.LBB88:
 130               	.LBB89:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 131               		.loc 3 440 0
 132               	/* #APP */
 133               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 134 002c 7894      		sei
 135               	 ;  0 "" 2
 136               	/* epilogue start */
 137               	/* #NOAPP */
 138               	.LBE89:
 139               	.LBE88:
 140               	.LBE87:
 141               	.LBE86:
 124:../../../os/rt/src/chcond.c ****   }
 125:../../../os/rt/src/chcond.c ****   chSysUnlock();
 126:../../../os/rt/src/chcond.c **** }
 142               		.loc 1 126 0
 143 002e DF91      		pop r29
 144 0030 CF91      		pop r28
 145 0032 0895      		ret
 146               		.cfi_endproc
 147               	.LFE195:
 149               		.section	.text.chCondSignalI,"ax",@progbits
 150               	.global	chCondSignalI
 152               	chCondSignalI:
 153               	.LFB196:
 127:../../../os/rt/src/chcond.c **** 
 128:../../../os/rt/src/chcond.c **** /**
 129:../../../os/rt/src/chcond.c ****  * @brief   Signals one thread that is waiting on the condition variable.
 130:../../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 131:../../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 132:../../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 133:../../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 134:../../../os/rt/src/chcond.c ****  *
 135:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 136:../../../os/rt/src/chcond.c ****  *
 137:../../../os/rt/src/chcond.c ****  * @iclass
 138:../../../os/rt/src/chcond.c ****  */
 139:../../../os/rt/src/chcond.c **** void chCondSignalI(condition_variable_t *cp) {
 154               		.loc 1 139 0
 155               		.cfi_startproc
 156               	.LVL9:
 157 0000 CF93      		push r28
 158               	.LCFI2:
 159               		.cfi_def_cfa_offset 3
 160               		.cfi_offset 28, -2
 161 0002 DF93      		push r29
 162               	.LCFI3:
 163               		.cfi_def_cfa_offset 4
 164               		.cfi_offset 29, -3
 165               	/* prologue: function */
 166               	/* frame size = 0 */
 167               	/* stack size = 2 */
 168               	.L__stack_usage = 2
 169 0004 FC01      		movw r30,r24
 170               	.LVL10:
 171               	.LBB90:
 172               	.LBB91:
 311:../../../os/rt/include/chlists.h **** }
 173               		.loc 2 311 0
 174 0006 8081      		ld r24,Z
 175 0008 9181      		ldd r25,Z+1
 176               	.LVL11:
 177               	.LBE91:
 178               	.LBE90:
 140:../../../os/rt/src/chcond.c **** 
 141:../../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 142:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 143:../../../os/rt/src/chcond.c **** 
 144:../../../os/rt/src/chcond.c ****   if (ch_queue_notempty(&cp->queue)) {
 179               		.loc 1 144 0
 180 000a E817      		cp r30,r24
 181 000c F907      		cpc r31,r25
 182 000e 01F0      		breq .L6
 183               	.LVL12:
 184               	.LBB92:
 185               	.LBB93:
 186               	.LBB94:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 187               		.loc 2 343 0
 188 0010 EC01      		movw r28,r24
 189 0012 A881      		ld r26,Y
 190 0014 B981      		ldd r27,Y+1
 191 0016 B183      		std Z+1,r27
 192 0018 A083      		st Z,r26
 193               		.loc 2 344 0
 194 001a 1396      		adiw r26,2+1
 195 001c FC93      		st X,r31
 196 001e EE93      		st -X,r30
 197 0020 1297      		sbiw r26,2
 198               	.LVL13:
 199               	.LBE94:
 200               	.LBE93:
 145:../../../os/rt/src/chcond.c ****     thread_t *tp = threadref(ch_queue_fifo_remove(&cp->queue));
 146:../../../os/rt/src/chcond.c ****     tp->u.rdymsg = MSG_OK;
 201               		.loc 1 146 0
 202 0022 1B8A      		std Y+19,__zero_reg__
 203 0024 1A8A      		std Y+18,__zero_reg__
 204               	/* epilogue start */
 205               	.LBE92:
 147:../../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 148:../../../os/rt/src/chcond.c ****   }
 149:../../../os/rt/src/chcond.c **** }
 206               		.loc 1 149 0
 207 0026 DF91      		pop r29
 208 0028 CF91      		pop r28
 209               	.LBB95:
 147:../../../os/rt/src/chcond.c ****     (void) chSchReadyI(tp);
 210               		.loc 1 147 0
 211 002a 0C94 0000 		jmp chSchReadyI
 212               	.LVL14:
 213               	.L6:
 214               	/* epilogue start */
 215               	.LBE95:
 216               		.loc 1 149 0
 217 002e DF91      		pop r29
 218 0030 CF91      		pop r28
 219 0032 0895      		ret
 220               		.cfi_endproc
 221               	.LFE196:
 223               		.section	.text.chCondBroadcast,"ax",@progbits
 224               	.global	chCondBroadcast
 226               	chCondBroadcast:
 227               	.LFB197:
 150:../../../os/rt/src/chcond.c **** 
 151:../../../os/rt/src/chcond.c **** /**
 152:../../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 153:../../../os/rt/src/chcond.c ****  *
 154:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 155:../../../os/rt/src/chcond.c ****  *
 156:../../../os/rt/src/chcond.c ****  * @api
 157:../../../os/rt/src/chcond.c ****  */
 158:../../../os/rt/src/chcond.c **** void chCondBroadcast(condition_variable_t *cp) {
 228               		.loc 1 158 0
 229               		.cfi_startproc
 230               	.LVL15:
 231 0000 0F93      		push r16
 232               	.LCFI4:
 233               		.cfi_def_cfa_offset 3
 234               		.cfi_offset 16, -2
 235 0002 1F93      		push r17
 236               	.LCFI5:
 237               		.cfi_def_cfa_offset 4
 238               		.cfi_offset 17, -3
 239 0004 CF93      		push r28
 240               	.LCFI6:
 241               		.cfi_def_cfa_offset 5
 242               		.cfi_offset 28, -4
 243 0006 DF93      		push r29
 244               	.LCFI7:
 245               		.cfi_def_cfa_offset 6
 246               		.cfi_offset 29, -5
 247               	/* prologue: function */
 248               	/* frame size = 0 */
 249               	/* stack size = 4 */
 250               	.L__stack_usage = 4
 251 0008 EC01      		movw r28,r24
 252               	.LBB96:
 253               	.LBB97:
 254               	.LBB98:
 430:../../../os/common/ports/AVR/chcore.h **** }
 255               		.loc 3 430 0
 256               	/* #APP */
 257               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 258 000a F894      		cli
 259               	 ;  0 "" 2
 260               	.LVL16:
 261               	/* #NOAPP */
 262               	.LBE98:
 263               	.LBE97:
 264               	.LBE96:
 265               	.LBB99:
 266               	.LBB100:
 267               	.LBB101:
 268               	.LBB102:
 311:../../../os/rt/include/chlists.h **** }
 269               		.loc 2 311 0
 270 000c 8881      		ld r24,Y
 271 000e 9981      		ldd r25,Y+1
 272               	.LVL17:
 273               	.LBE102:
 274               	.LBE101:
 159:../../../os/rt/src/chcond.c **** 
 160:../../../os/rt/src/chcond.c ****   chSysLock();
 161:../../../os/rt/src/chcond.c ****   chCondBroadcastI(cp);
 162:../../../os/rt/src/chcond.c ****   chSchRescheduleS();
 163:../../../os/rt/src/chcond.c ****   chSysUnlock();
 164:../../../os/rt/src/chcond.c **** }
 165:../../../os/rt/src/chcond.c **** 
 166:../../../os/rt/src/chcond.c **** /**
 167:../../../os/rt/src/chcond.c ****  * @brief   Signals all threads that are waiting on the condition variable.
 168:../../../os/rt/src/chcond.c ****  * @post    This function does not reschedule so a call to a rescheduling
 169:../../../os/rt/src/chcond.c ****  *          function must be performed before unlocking the kernel. Note that
 170:../../../os/rt/src/chcond.c ****  *          interrupt handlers always reschedule on exit so an explicit
 171:../../../os/rt/src/chcond.c ****  *          reschedule must not be performed in ISRs.
 172:../../../os/rt/src/chcond.c ****  *
 173:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 174:../../../os/rt/src/chcond.c ****  *
 175:../../../os/rt/src/chcond.c ****  * @iclass
 176:../../../os/rt/src/chcond.c ****  */
 177:../../../os/rt/src/chcond.c **** void chCondBroadcastI(condition_variable_t *cp) {
 178:../../../os/rt/src/chcond.c **** 
 179:../../../os/rt/src/chcond.c ****   chDbgCheckClassI();
 180:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 181:../../../os/rt/src/chcond.c **** 
 182:../../../os/rt/src/chcond.c ****   /* Empties the condition variable queue and inserts all the threads into the
 183:../../../os/rt/src/chcond.c ****      ready list in FIFO order. The wakeup message is set to @p MSG_RESET in
 184:../../../os/rt/src/chcond.c ****      order to make a chCondBroadcast() detectable from a chCondSignal().*/
 185:../../../os/rt/src/chcond.c ****   while (ch_queue_notempty(&cp->queue)) {
 275               		.loc 1 185 0
 276 0010 C817      		cp r28,r24
 277 0012 D907      		cpc r29,r25
 278 0014 01F0      		breq .L11
 186:../../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 279               		.loc 1 186 0
 280 0016 0EEF      		ldi r16,lo8(-2)
 281 0018 1FEF      		ldi r17,lo8(-1)
 282               	.L12:
 283               	.LVL18:
 284               	.LBB104:
 285               	.LBB105:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 286               		.loc 2 343 0
 287 001a DC01      		movw r26,r24
 288 001c ED91      		ld r30,X+
 289 001e FC91      		ld r31,X
 290 0020 F983      		std Y+1,r31
 291 0022 E883      		st Y,r30
 292               		.loc 2 344 0
 293 0024 D383      		std Z+3,r29
 294 0026 C283      		std Z+2,r28
 295               	.LVL19:
 296               	.LBE105:
 297               	.LBE104:
 298               		.loc 1 186 0
 299 0028 0E94 0000 		call chSchReadyI
 300               	.LVL20:
 301 002c FC01      		movw r30,r24
 302 002e 138B      		std Z+19,r17
 303 0030 028B      		std Z+18,r16
 304               	.LVL21:
 305               	.LBB106:
 306               	.LBB103:
 311:../../../os/rt/include/chlists.h **** }
 307               		.loc 2 311 0
 308 0032 8881      		ld r24,Y
 309 0034 9981      		ldd r25,Y+1
 310               	.LVL22:
 311               	.LBE103:
 312               	.LBE106:
 185:../../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 313               		.loc 1 185 0
 314 0036 8C17      		cp r24,r28
 315 0038 9D07      		cpc r25,r29
 316 003a 01F4      		brne .L12
 317               	.L11:
 318               	.LBE100:
 319               	.LBE99:
 162:../../../os/rt/src/chcond.c ****   chSysUnlock();
 320               		.loc 1 162 0
 321 003c 0E94 0000 		call chSchRescheduleS
 322               	.LVL23:
 323               	.LBB107:
 324               	.LBB108:
 325               	.LBB109:
 326               	.LBB110:
 327               		.loc 3 440 0
 328               	/* #APP */
 329               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 330 0040 7894      		sei
 331               	 ;  0 "" 2
 332               	/* epilogue start */
 333               	/* #NOAPP */
 334               	.LBE110:
 335               	.LBE109:
 336               	.LBE108:
 337               	.LBE107:
 164:../../../os/rt/src/chcond.c **** 
 338               		.loc 1 164 0
 339 0042 DF91      		pop r29
 340 0044 CF91      		pop r28
 341               	.LVL24:
 342 0046 1F91      		pop r17
 343 0048 0F91      		pop r16
 344 004a 0895      		ret
 345               		.cfi_endproc
 346               	.LFE197:
 348               		.section	.text.chCondBroadcastI,"ax",@progbits
 349               	.global	chCondBroadcastI
 351               	chCondBroadcastI:
 352               	.LFB198:
 177:../../../os/rt/src/chcond.c **** 
 353               		.loc 1 177 0
 354               		.cfi_startproc
 355               	.LVL25:
 356 0000 0F93      		push r16
 357               	.LCFI8:
 358               		.cfi_def_cfa_offset 3
 359               		.cfi_offset 16, -2
 360 0002 1F93      		push r17
 361               	.LCFI9:
 362               		.cfi_def_cfa_offset 4
 363               		.cfi_offset 17, -3
 364 0004 CF93      		push r28
 365               	.LCFI10:
 366               		.cfi_def_cfa_offset 5
 367               		.cfi_offset 28, -4
 368 0006 DF93      		push r29
 369               	.LCFI11:
 370               		.cfi_def_cfa_offset 6
 371               		.cfi_offset 29, -5
 372               	/* prologue: function */
 373               	/* frame size = 0 */
 374               	/* stack size = 4 */
 375               	.L__stack_usage = 4
 376 0008 EC01      		movw r28,r24
 377               	.LVL26:
 378               	.LBB111:
 379               	.LBB112:
 311:../../../os/rt/include/chlists.h **** }
 380               		.loc 2 311 0
 381 000a 8881      		ld r24,Y
 382 000c 9981      		ldd r25,Y+1
 383               	.LVL27:
 384               	.LBE112:
 385               	.LBE111:
 185:../../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 386               		.loc 1 185 0
 387 000e C817      		cp r28,r24
 388 0010 D907      		cpc r29,r25
 389 0012 01F0      		breq .L15
 390               		.loc 1 186 0
 391 0014 0EEF      		ldi r16,lo8(-2)
 392 0016 1FEF      		ldi r17,lo8(-1)
 393               	.L19:
 394               	.LVL28:
 395               	.LBB114:
 396               	.LBB115:
 343:../../../os/rt/include/chlists.h ****   qp->next->prev = qp;
 397               		.loc 2 343 0
 398 0018 DC01      		movw r26,r24
 399 001a ED91      		ld r30,X+
 400 001c FC91      		ld r31,X
 401 001e F983      		std Y+1,r31
 402 0020 E883      		st Y,r30
 403               		.loc 2 344 0
 404 0022 D383      		std Z+3,r29
 405 0024 C283      		std Z+2,r28
 406               	.LVL29:
 407               	.LBE115:
 408               	.LBE114:
 409               		.loc 1 186 0
 410 0026 0E94 0000 		call chSchReadyI
 411               	.LVL30:
 412 002a FC01      		movw r30,r24
 413 002c 138B      		std Z+19,r17
 414 002e 028B      		std Z+18,r16
 415               	.LVL31:
 416               	.LBB116:
 417               	.LBB113:
 311:../../../os/rt/include/chlists.h **** }
 418               		.loc 2 311 0
 419 0030 8881      		ld r24,Y
 420 0032 9981      		ldd r25,Y+1
 421               	.LVL32:
 422               	.LBE113:
 423               	.LBE116:
 185:../../../os/rt/src/chcond.c ****     chSchReadyI(threadref(ch_queue_fifo_remove(&cp->queue)))->u.rdymsg = MSG_RESET;
 424               		.loc 1 185 0
 425 0034 8C17      		cp r24,r28
 426 0036 9D07      		cpc r25,r29
 427 0038 01F4      		brne .L19
 428               	.L15:
 429               	/* epilogue start */
 187:../../../os/rt/src/chcond.c ****   }
 188:../../../os/rt/src/chcond.c **** }
 430               		.loc 1 188 0
 431 003a DF91      		pop r29
 432 003c CF91      		pop r28
 433               	.LVL33:
 434 003e 1F91      		pop r17
 435 0040 0F91      		pop r16
 436 0042 0895      		ret
 437               		.cfi_endproc
 438               	.LFE198:
 440               		.section	.text.chCondWaitS,"ax",@progbits
 441               	.global	chCondWaitS
 443               	chCondWaitS:
 444               	.LFB200:
 189:../../../os/rt/src/chcond.c **** 
 190:../../../os/rt/src/chcond.c **** /**
 191:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 192:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 193:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 194:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 195:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 196:../../../os/rt/src/chcond.c ****  *
 197:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 198:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 199:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 200:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 201:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 202:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 203:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 204:../../../os/rt/src/chcond.c ****  *
 205:../../../os/rt/src/chcond.c ****  * @api
 206:../../../os/rt/src/chcond.c ****  */
 207:../../../os/rt/src/chcond.c **** msg_t chCondWait(condition_variable_t *cp) {
 208:../../../os/rt/src/chcond.c ****   msg_t msg;
 209:../../../os/rt/src/chcond.c **** 
 210:../../../os/rt/src/chcond.c ****   chSysLock();
 211:../../../os/rt/src/chcond.c ****   msg = chCondWaitS(cp);
 212:../../../os/rt/src/chcond.c ****   chSysUnlock();
 213:../../../os/rt/src/chcond.c ****   return msg;
 214:../../../os/rt/src/chcond.c **** }
 215:../../../os/rt/src/chcond.c **** 
 216:../../../os/rt/src/chcond.c **** /**
 217:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 218:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 219:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 220:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 221:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 222:../../../os/rt/src/chcond.c ****  *
 223:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 224:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 225:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 226:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 227:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 228:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 229:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 230:../../../os/rt/src/chcond.c ****  *
 231:../../../os/rt/src/chcond.c ****  * @sclass
 232:../../../os/rt/src/chcond.c ****  */
 233:../../../os/rt/src/chcond.c **** msg_t chCondWaitS(condition_variable_t *cp) {
 445               		.loc 1 233 0
 446               		.cfi_startproc
 447               	.LVL34:
 448 0000 EF92      		push r14
 449               	.LCFI12:
 450               		.cfi_def_cfa_offset 3
 451               		.cfi_offset 14, -2
 452 0002 FF92      		push r15
 453               	.LCFI13:
 454               		.cfi_def_cfa_offset 4
 455               		.cfi_offset 15, -3
 456 0004 0F93      		push r16
 457               	.LCFI14:
 458               		.cfi_def_cfa_offset 5
 459               		.cfi_offset 16, -4
 460 0006 1F93      		push r17
 461               	.LCFI15:
 462               		.cfi_def_cfa_offset 6
 463               		.cfi_offset 17, -5
 464 0008 CF93      		push r28
 465               	.LCFI16:
 466               		.cfi_def_cfa_offset 7
 467               		.cfi_offset 28, -6
 468 000a DF93      		push r29
 469               	.LCFI17:
 470               		.cfi_def_cfa_offset 8
 471               		.cfi_offset 29, -7
 472               	/* prologue: function */
 473               	/* frame size = 0 */
 474               	/* stack size = 6 */
 475               	.L__stack_usage = 6
 476 000c 8C01      		movw r16,r24
 477               	.LBB117:
 478               	.LBB118:
 479               		.file 4 "../../../os/rt/include/chthreads.h"
   1:../../../os/rt/include/chthreads.h **** /*
   2:../../../os/rt/include/chthreads.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chthreads.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chthreads.h **** 
   5:../../../os/rt/include/chthreads.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chthreads.h **** 
   7:../../../os/rt/include/chthreads.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chthreads.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chthreads.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chthreads.h **** 
  11:../../../os/rt/include/chthreads.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chthreads.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chthreads.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chthreads.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chthreads.h **** 
  16:../../../os/rt/include/chthreads.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chthreads.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chthreads.h **** */
  19:../../../os/rt/include/chthreads.h **** 
  20:../../../os/rt/include/chthreads.h **** /**
  21:../../../os/rt/include/chthreads.h ****  * @file    rt/include/chthreads.h
  22:../../../os/rt/include/chthreads.h ****  * @brief   Threads module macros and structures.
  23:../../../os/rt/include/chthreads.h ****  *
  24:../../../os/rt/include/chthreads.h ****  * @addtogroup threads
  25:../../../os/rt/include/chthreads.h ****  * @{
  26:../../../os/rt/include/chthreads.h ****  */
  27:../../../os/rt/include/chthreads.h **** 
  28:../../../os/rt/include/chthreads.h **** #ifndef CHTHREADS_H
  29:../../../os/rt/include/chthreads.h **** #define CHTHREADS_H
  30:../../../os/rt/include/chthreads.h **** 
  31:../../../os/rt/include/chthreads.h **** /*lint -sem(chThdExit, r_no) -sem(chThdExitS, r_no)*/
  32:../../../os/rt/include/chthreads.h **** 
  33:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  34:../../../os/rt/include/chthreads.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  36:../../../os/rt/include/chthreads.h **** 
  37:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  38:../../../os/rt/include/chthreads.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  40:../../../os/rt/include/chthreads.h **** 
  41:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  42:../../../os/rt/include/chthreads.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  44:../../../os/rt/include/chthreads.h **** 
  45:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  46:../../../os/rt/include/chthreads.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
  48:../../../os/rt/include/chthreads.h **** 
  49:../../../os/rt/include/chthreads.h **** /**
  50:../../../os/rt/include/chthreads.h ****  * @brief   Thread function.
  51:../../../os/rt/include/chthreads.h ****  */
  52:../../../os/rt/include/chthreads.h **** typedef void (*tfunc_t)(void *p);
  53:../../../os/rt/include/chthreads.h **** 
  54:../../../os/rt/include/chthreads.h **** /**
  55:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  56:../../../os/rt/include/chthreads.h ****  */
  57:../../../os/rt/include/chthreads.h **** typedef struct {
  58:../../../os/rt/include/chthreads.h ****   /**
  59:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  60:../../../os/rt/include/chthreads.h ****    */
  61:../../../os/rt/include/chthreads.h ****   const char        *name;
  62:../../../os/rt/include/chthreads.h ****   /**
  63:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area base.
  64:../../../os/rt/include/chthreads.h ****    */
  65:../../../os/rt/include/chthreads.h ****   stkalign_t        *wbase;
  66:../../../os/rt/include/chthreads.h ****   /**
  67:../../../os/rt/include/chthreads.h ****    * @brief   Pointer to the working area end.
  68:../../../os/rt/include/chthreads.h ****    */
  69:../../../os/rt/include/chthreads.h ****   stkalign_t        *wend;
  70:../../../os/rt/include/chthreads.h ****   /**
  71:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
  72:../../../os/rt/include/chthreads.h ****    */
  73:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
  74:../../../os/rt/include/chthreads.h ****   /**
  75:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
  76:../../../os/rt/include/chthreads.h ****    */
  77:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
  78:../../../os/rt/include/chthreads.h ****   /**
  79:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
  80:../../../os/rt/include/chthreads.h ****    */
  81:../../../os/rt/include/chthreads.h ****   void              *arg;
  82:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
  83:../../../os/rt/include/chthreads.h ****   /**
  84:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
  85:../../../os/rt/include/chthreads.h ****    */
  86:../../../os/rt/include/chthreads.h ****   os_instance_t     *instance;
  87:../../../os/rt/include/chthreads.h **** #endif
  88:../../../os/rt/include/chthreads.h **** } thread_descriptor_t;
  89:../../../os/rt/include/chthreads.h **** 
  90:../../../os/rt/include/chthreads.h **** /**
  91:../../../os/rt/include/chthreads.h ****  * @brief   Type of a thread descriptor.
  92:../../../os/rt/include/chthreads.h ****  */
  93:../../../os/rt/include/chthreads.h **** typedef struct {
  94:../../../os/rt/include/chthreads.h ****   /**
  95:../../../os/rt/include/chthreads.h ****    * @brief   Thread name.
  96:../../../os/rt/include/chthreads.h ****    */
  97:../../../os/rt/include/chthreads.h ****   const char        *tname;
  98:../../../os/rt/include/chthreads.h ****   /**
  99:../../../os/rt/include/chthreads.h ****    * @brief   Working area region.
 100:../../../os/rt/include/chthreads.h ****    */
 101:../../../os/rt/include/chthreads.h ****   memory_area_new_t wa;
 102:../../../os/rt/include/chthreads.h ****   /**
 103:../../../os/rt/include/chthreads.h ****    * @brief   Thread priority.
 104:../../../os/rt/include/chthreads.h ****    */
 105:../../../os/rt/include/chthreads.h ****   tprio_t           prio;
 106:../../../os/rt/include/chthreads.h ****   /**
 107:../../../os/rt/include/chthreads.h ****    * @brief   Thread function pointer.
 108:../../../os/rt/include/chthreads.h ****    */
 109:../../../os/rt/include/chthreads.h ****   tfunc_t           funcp;
 110:../../../os/rt/include/chthreads.h ****   /**
 111:../../../os/rt/include/chthreads.h ****    * @brief   Thread argument.
 112:../../../os/rt/include/chthreads.h ****    */
 113:../../../os/rt/include/chthreads.h ****   void              *arg;
 114:../../../os/rt/include/chthreads.h ****   /**
 115:../../../os/rt/include/chthreads.h ****    * @brief         OS instance affinity or @p NULL for current one.
 116:../../../os/rt/include/chthreads.h ****    */
 117:../../../os/rt/include/chthreads.h ****   os_instance_t     *owner;
 118:../../../os/rt/include/chthreads.h **** } thread_descriptor_new_t;
 119:../../../os/rt/include/chthreads.h **** 
 120:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 121:../../../os/rt/include/chthreads.h **** /* Module macros.                                                            */
 122:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 123:../../../os/rt/include/chthreads.h **** 
 124:../../../os/rt/include/chthreads.h **** /**
 125:../../../os/rt/include/chthreads.h ****  * @name    Threads queues
 126:../../../os/rt/include/chthreads.h ****  * @{
 127:../../../os/rt/include/chthreads.h ****  */
 128:../../../os/rt/include/chthreads.h **** /**
 129:../../../os/rt/include/chthreads.h ****  * @brief   Data part of a static threads queue object initializer.
 130:../../../os/rt/include/chthreads.h ****  * @details This macro should be used when statically initializing a threads
 131:../../../os/rt/include/chthreads.h ****  *          queue that is part of a bigger structure.
 132:../../../os/rt/include/chthreads.h ****  *
 133:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 134:../../../os/rt/include/chthreads.h ****  */
 135:../../../os/rt/include/chthreads.h **** #define __THREADS_QUEUE_DATA(name) {__CH_QUEUE_DATA(name)}
 136:../../../os/rt/include/chthreads.h **** 
 137:../../../os/rt/include/chthreads.h **** /**
 138:../../../os/rt/include/chthreads.h ****  * @brief   Static threads queue object initializer.
 139:../../../os/rt/include/chthreads.h ****  * @details Statically initialized threads queues require no explicit
 140:../../../os/rt/include/chthreads.h ****  *          initialization using @p queue_init().
 141:../../../os/rt/include/chthreads.h ****  *
 142:../../../os/rt/include/chthreads.h ****  * @param[in] name      name of the threads queue variable
 143:../../../os/rt/include/chthreads.h ****  */
 144:../../../os/rt/include/chthreads.h **** #define THREADS_QUEUE_DECL(name)                                            \
 145:../../../os/rt/include/chthreads.h ****   threads_queue_t name = __THREADS_QUEUE_DATA(name)
 146:../../../os/rt/include/chthreads.h **** /** @} */
 147:../../../os/rt/include/chthreads.h **** 
 148:../../../os/rt/include/chthreads.h **** /**
 149:../../../os/rt/include/chthreads.h ****  * @name    Working Areas
 150:../../../os/rt/include/chthreads.h ****  * @{
 151:../../../os/rt/include/chthreads.h ****  */
 152:../../../os/rt/include/chthreads.h **** /**
 153:../../../os/rt/include/chthreads.h ****  * @brief   Calculates the total Working Area size.
 154:../../../os/rt/include/chthreads.h ****  *
 155:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 156:../../../os/rt/include/chthreads.h ****  * @return              The total used memory in bytes.
 157:../../../os/rt/include/chthreads.h ****  *
 158:../../../os/rt/include/chthreads.h ****  * @api
 159:../../../os/rt/include/chthreads.h ****  */
 160:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_SIZE(n)                                            \
 161:../../../os/rt/include/chthreads.h ****   MEM_ALIGN_NEXT(sizeof(thread_t) + PORT_WA_SIZE(n), PORT_STACK_ALIGN)
 162:../../../os/rt/include/chthreads.h **** 
 163:../../../os/rt/include/chthreads.h **** /**
 164:../../../os/rt/include/chthreads.h ****  * @brief   Static working area allocation.
 165:../../../os/rt/include/chthreads.h ****  * @details This macro is used to allocate a static thread working area
 166:../../../os/rt/include/chthreads.h ****  *          aligned as both position and size.
 167:../../../os/rt/include/chthreads.h ****  *
 168:../../../os/rt/include/chthreads.h ****  * @param[in] s         the name to be assigned to the stack array
 169:../../../os/rt/include/chthreads.h ****  * @param[in] n         the stack size to be assigned to the thread
 170:../../../os/rt/include/chthreads.h ****  *
 171:../../../os/rt/include/chthreads.h ****  * @api
 172:../../../os/rt/include/chthreads.h ****  */
 173:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA(s, n) PORT_WORKING_AREA(s, n)
 174:../../../os/rt/include/chthreads.h **** 
 175:../../../os/rt/include/chthreads.h **** /**
 176:../../../os/rt/include/chthreads.h ****  * @brief   Base of a working area casted to the correct type.
 177:../../../os/rt/include/chthreads.h ****  *
 178:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 179:../../../os/rt/include/chthreads.h ****  */
 180:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_BASE(s) ((stkalign_t *)(s))
 181:../../../os/rt/include/chthreads.h **** 
 182:../../../os/rt/include/chthreads.h **** /**
 183:../../../os/rt/include/chthreads.h ****  * @brief   End of a working area casted to the correct type.
 184:../../../os/rt/include/chthreads.h ****  *
 185:../../../os/rt/include/chthreads.h ****  * @param[in] s         name of the working area
 186:../../../os/rt/include/chthreads.h ****  */
 187:../../../os/rt/include/chthreads.h **** #define THD_WORKING_AREA_END(s) (THD_WORKING_AREA_BASE(s) +                 \
 188:../../../os/rt/include/chthreads.h ****                                  (sizeof (s) / sizeof (stkalign_t)))
 189:../../../os/rt/include/chthreads.h **** /** @} */
 190:../../../os/rt/include/chthreads.h **** 
 191:../../../os/rt/include/chthreads.h **** /**
 192:../../../os/rt/include/chthreads.h ****  * @name    Threads abstraction macros
 193:../../../os/rt/include/chthreads.h ****  * @{
 194:../../../os/rt/include/chthreads.h ****  */
 195:../../../os/rt/include/chthreads.h **** /**
 196:../../../os/rt/include/chthreads.h ****  * @brief   Thread declaration macro.
 197:../../../os/rt/include/chthreads.h ****  * @note    Thread declarations should be performed using this macro because
 198:../../../os/rt/include/chthreads.h ****  *          the port layer could define optimizations for thread functions.
 199:../../../os/rt/include/chthreads.h ****  */
 200:../../../os/rt/include/chthreads.h **** #define THD_FUNCTION(tname, arg) PORT_THD_FUNCTION(tname, arg)
 201:../../../os/rt/include/chthreads.h **** /** @} */
 202:../../../os/rt/include/chthreads.h **** 
 203:../../../os/rt/include/chthreads.h **** /**
 204:../../../os/rt/include/chthreads.h ****  * @name    Threads initializers
 205:../../../os/rt/include/chthreads.h ****  * @{
 206:../../../os/rt/include/chthreads.h ****  */
 207:../../../os/rt/include/chthreads.h **** #if (CH_CFG_SMP_MODE != FALSE) || defined(__DOXYGEN__)
 208:../../../os/rt/include/chthreads.h **** /**
 209:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 210:../../../os/rt/include/chthreads.h ****  *
 211:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 212:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 213:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 214:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 215:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 216:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 217:../../../os/rt/include/chthreads.h ****  */
 218:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 219:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 220:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 221:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 222:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 223:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 224:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 225:../../../os/rt/include/chthreads.h ****   NULL                                                                      \
 226:../../../os/rt/include/chthreads.h **** }
 227:../../../os/rt/include/chthreads.h **** #else
 228:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR(name, wbase, wend, prio, funcp, arg) {               \
 229:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 230:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 231:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 232:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 233:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 234:../../../os/rt/include/chthreads.h ****   (arg)                                                                     \
 235:../../../os/rt/include/chthreads.h **** }
 236:../../../os/rt/include/chthreads.h **** #endif
 237:../../../os/rt/include/chthreads.h **** 
 238:../../../os/rt/include/chthreads.h **** /**
 239:../../../os/rt/include/chthreads.h ****  * @brief   Thread descriptor initializer with no affinity.
 240:../../../os/rt/include/chthreads.h ****  *
 241:../../../os/rt/include/chthreads.h ****  * @param[in] name      thread name
 242:../../../os/rt/include/chthreads.h ****  * @param[in] wbase     pointer to the working area base
 243:../../../os/rt/include/chthreads.h ****  * @param[in] wend      pointer to the working area end
 244:../../../os/rt/include/chthreads.h ****  * @param[in] prio      thread priority
 245:../../../os/rt/include/chthreads.h ****  * @param[in] funcp     thread function pointer
 246:../../../os/rt/include/chthreads.h ****  * @param[in] arg       thread argument
 247:../../../os/rt/include/chthreads.h ****  * @param[in] oip       instance affinity
 248:../../../os/rt/include/chthreads.h ****  */
 249:../../../os/rt/include/chthreads.h **** #define THD_DESCRIPTOR_AFFINITY(name, wbase, wend, prio, funcp, arg, oip) { \
 250:../../../os/rt/include/chthreads.h ****   (name),                                                                   \
 251:../../../os/rt/include/chthreads.h ****   (wbase),                                                                  \
 252:../../../os/rt/include/chthreads.h ****   (wend),                                                                   \
 253:../../../os/rt/include/chthreads.h ****   (prio),                                                                   \
 254:../../../os/rt/include/chthreads.h ****   (funcp),                                                                  \
 255:../../../os/rt/include/chthreads.h ****   (arg),                                                                    \
 256:../../../os/rt/include/chthreads.h ****   (oip)                                                                     \
 257:../../../os/rt/include/chthreads.h **** }
 258:../../../os/rt/include/chthreads.h **** /** @} */
 259:../../../os/rt/include/chthreads.h **** 
 260:../../../os/rt/include/chthreads.h **** /**
 261:../../../os/rt/include/chthreads.h ****  * @name    Macro Functions
 262:../../../os/rt/include/chthreads.h ****  * @{
 263:../../../os/rt/include/chthreads.h ****  */
 264:../../../os/rt/include/chthreads.h **** /**
 265:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 266:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 267:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 268:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 269:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 270:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 271:../../../os/rt/include/chthreads.h ****  *          converted.
 272:../../../os/rt/include/chthreads.h ****  *
 273:../../../os/rt/include/chthreads.h ****  * @param[in] sec       time in seconds, must be different from zero
 274:../../../os/rt/include/chthreads.h ****  *
 275:../../../os/rt/include/chthreads.h ****  * @api
 276:../../../os/rt/include/chthreads.h ****  */
 277:../../../os/rt/include/chthreads.h **** #define chThdSleepSeconds(sec) chThdSleep(TIME_S2I(sec))
 278:../../../os/rt/include/chthreads.h **** 
 279:../../../os/rt/include/chthreads.h **** /**
 280:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 281:../../../os/rt/include/chthreads.h ****  *          milliseconds.
 282:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 283:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 284:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 285:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 286:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 287:../../../os/rt/include/chthreads.h ****  *          converted.
 288:../../../os/rt/include/chthreads.h ****  *
 289:../../../os/rt/include/chthreads.h ****  * @param[in] msec      time in milliseconds, must be different from zero
 290:../../../os/rt/include/chthreads.h ****  *
 291:../../../os/rt/include/chthreads.h ****  * @api
 292:../../../os/rt/include/chthreads.h ****  */
 293:../../../os/rt/include/chthreads.h **** #define chThdSleepMilliseconds(msec) chThdSleep(TIME_MS2I(msec))
 294:../../../os/rt/include/chthreads.h **** 
 295:../../../os/rt/include/chthreads.h **** /**
 296:../../../os/rt/include/chthreads.h ****  * @brief   Delays the invoking thread for the specified number of
 297:../../../os/rt/include/chthreads.h ****  *          microseconds.
 298:../../../os/rt/include/chthreads.h ****  * @note    The specified time is rounded up to a value allowed by the real
 299:../../../os/rt/include/chthreads.h ****  *          system tick clock.
 300:../../../os/rt/include/chthreads.h ****  * @note    The maximum specifiable value is implementation dependent.
 301:../../../os/rt/include/chthreads.h ****  * @note    Use of this macro for large values is not secure because
 302:../../../os/rt/include/chthreads.h ****  *          integer overflows, make sure your value can be correctly
 303:../../../os/rt/include/chthreads.h ****  *          converted.
 304:../../../os/rt/include/chthreads.h ****  *
 305:../../../os/rt/include/chthreads.h ****  * @param[in] usec      time in microseconds, must be different from zero
 306:../../../os/rt/include/chthreads.h ****  *
 307:../../../os/rt/include/chthreads.h ****  * @api
 308:../../../os/rt/include/chthreads.h ****  */
 309:../../../os/rt/include/chthreads.h **** #define chThdSleepMicroseconds(usec) chThdSleep(TIME_US2I(usec))
 310:../../../os/rt/include/chthreads.h **** /** @} */
 311:../../../os/rt/include/chthreads.h **** 
 312:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 313:../../../os/rt/include/chthreads.h **** /* External declarations.                                                    */
 314:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 315:../../../os/rt/include/chthreads.h **** 
 316:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 317:../../../os/rt/include/chthreads.h **** extern "C" {
 318:../../../os/rt/include/chthreads.h **** #endif
 319:../../../os/rt/include/chthreads.h ****    thread_t *__thd_object_init(os_instance_t *oip,
 320:../../../os/rt/include/chthreads.h ****                                thread_t *tp,
 321:../../../os/rt/include/chthreads.h ****                                const char *name,
 322:../../../os/rt/include/chthreads.h ****                                tprio_t prio);
 323:../../../os/rt/include/chthreads.h **** #if CH_DBG_FILL_THREADS == TRUE
 324:../../../os/rt/include/chthreads.h ****   void __thd_stackfill(uint8_t *startp, uint8_t *endp);
 325:../../../os/rt/include/chthreads.h **** #endif
 326:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspendedI(const thread_descriptor_t *tdp);
 327:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateSuspended(const thread_descriptor_t *tdp);
 328:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateI(const thread_descriptor_t *tdp);
 329:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreate(const thread_descriptor_t *tdp);
 330:../../../os/rt/include/chthreads.h ****   thread_t *chThdCreateStatic(void *wsp, size_t size,
 331:../../../os/rt/include/chthreads.h ****                               tprio_t prio, tfunc_t pf, void *arg);
 332:../../../os/rt/include/chthreads.h ****   thread_t *chThdStart(thread_t *tp);
 333:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_REGISTRY == TRUE
 334:../../../os/rt/include/chthreads.h ****   thread_t *chThdAddRef(thread_t *tp);
 335:../../../os/rt/include/chthreads.h ****   void chThdRelease(thread_t *tp);
 336:../../../os/rt/include/chthreads.h **** #endif
 337:../../../os/rt/include/chthreads.h ****   void chThdExit(msg_t msg);
 338:../../../os/rt/include/chthreads.h ****   void chThdExitS(msg_t msg);
 339:../../../os/rt/include/chthreads.h **** #if CH_CFG_USE_WAITEXIT == TRUE
 340:../../../os/rt/include/chthreads.h ****   msg_t chThdWait(thread_t *tp);
 341:../../../os/rt/include/chthreads.h **** #endif
 342:../../../os/rt/include/chthreads.h ****   tprio_t chThdSetPriority(tprio_t newprio);
 343:../../../os/rt/include/chthreads.h ****   void chThdTerminate(thread_t *tp);
 344:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendS(thread_reference_t *trp);
 345:../../../os/rt/include/chthreads.h ****   msg_t chThdSuspendTimeoutS(thread_reference_t *trp, sysinterval_t timeout);
 346:../../../os/rt/include/chthreads.h ****   void chThdResumeI(thread_reference_t *trp, msg_t msg);
 347:../../../os/rt/include/chthreads.h ****   void chThdResumeS(thread_reference_t *trp, msg_t msg);
 348:../../../os/rt/include/chthreads.h ****   void chThdResume(thread_reference_t *trp, msg_t msg);
 349:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectInit(threads_queue_t *tqp);
 350:../../../os/rt/include/chthreads.h ****   void chThdQueueObjectDispose(threads_queue_t *tqp);
 351:../../../os/rt/include/chthreads.h ****   msg_t chThdEnqueueTimeoutS(threads_queue_t *tqp, sysinterval_t timeout);
 352:../../../os/rt/include/chthreads.h ****   void chThdDequeueNextI(threads_queue_t *tqp, msg_t msg);
 353:../../../os/rt/include/chthreads.h ****   void chThdDequeueAllI(threads_queue_t *tqp, msg_t msg);
 354:../../../os/rt/include/chthreads.h ****   void chThdSleep(sysinterval_t time);
 355:../../../os/rt/include/chthreads.h ****   void chThdSleepUntil(systime_t time);
 356:../../../os/rt/include/chthreads.h ****   systime_t chThdSleepUntilWindowed(systime_t prev, systime_t next);
 357:../../../os/rt/include/chthreads.h ****   void chThdYield(void);
 358:../../../os/rt/include/chthreads.h **** #ifdef __cplusplus
 359:../../../os/rt/include/chthreads.h **** }
 360:../../../os/rt/include/chthreads.h **** #endif
 361:../../../os/rt/include/chthreads.h **** 
 362:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 363:../../../os/rt/include/chthreads.h **** /* Module inline functions.                                                  */
 364:../../../os/rt/include/chthreads.h **** /*===========================================================================*/
 365:../../../os/rt/include/chthreads.h **** 
 366:../../../os/rt/include/chthreads.h **** /**
 367:../../../os/rt/include/chthreads.h ****  * @brief   Returns a pointer to the current @p thread_t.
 368:../../../os/rt/include/chthreads.h ****  *
 369:../../../os/rt/include/chthreads.h ****  * @return             A pointer to the current thread.
 370:../../../os/rt/include/chthreads.h ****  *
 371:../../../os/rt/include/chthreads.h ****  * @xclass
 372:../../../os/rt/include/chthreads.h ****  */
 373:../../../os/rt/include/chthreads.h **** static inline thread_t *chThdGetSelfX(void) {
 374:../../../os/rt/include/chthreads.h **** 
 375:../../../os/rt/include/chthreads.h ****   return __sch_get_currthread();
 480               		.loc 4 375 0
 481 000e C091 0000 		lds r28,ch0+5
 482 0012 D091 0000 		lds r29,ch0+5+1
 483               	.LBE118:
 484               	.LBE117:
 485               	.LBB119:
 486               	.LBB120:
 487               		.file 5 "../../../os/rt/include/chmtx.h"
   1:../../../os/rt/include/chmtx.h **** /*
   2:../../../os/rt/include/chmtx.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chmtx.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chmtx.h **** 
   5:../../../os/rt/include/chmtx.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chmtx.h **** 
   7:../../../os/rt/include/chmtx.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chmtx.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chmtx.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chmtx.h **** 
  11:../../../os/rt/include/chmtx.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chmtx.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chmtx.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chmtx.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chmtx.h **** 
  16:../../../os/rt/include/chmtx.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chmtx.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chmtx.h **** */
  19:../../../os/rt/include/chmtx.h **** 
  20:../../../os/rt/include/chmtx.h **** /**
  21:../../../os/rt/include/chmtx.h ****  * @file    rt/include/chmtx.h
  22:../../../os/rt/include/chmtx.h ****  * @brief   Mutexes macros and structures.
  23:../../../os/rt/include/chmtx.h ****  *
  24:../../../os/rt/include/chmtx.h ****  * @addtogroup mutexes
  25:../../../os/rt/include/chmtx.h ****  * @{
  26:../../../os/rt/include/chmtx.h ****  */
  27:../../../os/rt/include/chmtx.h **** 
  28:../../../os/rt/include/chmtx.h **** #ifndef CHMTX_H
  29:../../../os/rt/include/chmtx.h **** #define CHMTX_H
  30:../../../os/rt/include/chmtx.h **** 
  31:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chmtx.h **** 
  33:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  34:../../../os/rt/include/chmtx.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  36:../../../os/rt/include/chmtx.h **** 
  37:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  38:../../../os/rt/include/chmtx.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  40:../../../os/rt/include/chmtx.h **** 
  41:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  42:../../../os/rt/include/chmtx.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  44:../../../os/rt/include/chmtx.h **** 
  45:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  46:../../../os/rt/include/chmtx.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  48:../../../os/rt/include/chmtx.h **** 
  49:../../../os/rt/include/chmtx.h **** /**
  50:../../../os/rt/include/chmtx.h ****  * @brief   Type of a Mutex object.
  51:../../../os/rt/include/chmtx.h ****  */
  52:../../../os/rt/include/chmtx.h **** typedef struct ch_mutex mutex_t;
  53:../../../os/rt/include/chmtx.h **** 
  54:../../../os/rt/include/chmtx.h **** /**
  55:../../../os/rt/include/chmtx.h ****  * @brief   Mutex structure.
  56:../../../os/rt/include/chmtx.h ****  */
  57:../../../os/rt/include/chmtx.h **** struct ch_mutex {
  58:../../../os/rt/include/chmtx.h ****   ch_queue_t            queue;      /**< @brief Queue of the threads sleeping
  59:../../../os/rt/include/chmtx.h ****                                                 on this mutex.              */
  60:../../../os/rt/include/chmtx.h ****   thread_t              *owner;     /**< @brief Owner @p thread_t pointer or
  61:../../../os/rt/include/chmtx.h ****                                                 @p NULL.                    */
  62:../../../os/rt/include/chmtx.h ****   mutex_t               *next;      /**< @brief Next @p mutex_t into an
  63:../../../os/rt/include/chmtx.h ****                                                 owner-list or @p NULL.      */
  64:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  65:../../../os/rt/include/chmtx.h ****   cnt_t                 cnt;        /**< @brief Mutex recursion counter.    */
  66:../../../os/rt/include/chmtx.h **** #endif
  67:../../../os/rt/include/chmtx.h **** };
  68:../../../os/rt/include/chmtx.h **** 
  69:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  70:../../../os/rt/include/chmtx.h **** /* Module macros.                                                            */
  71:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  72:../../../os/rt/include/chmtx.h **** 
  73:../../../os/rt/include/chmtx.h **** /**
  74:../../../os/rt/include/chmtx.h ****  * @brief   Data part of a static mutex initializer.
  75:../../../os/rt/include/chmtx.h ****  * @details This macro should be used when statically initializing a mutex
  76:../../../os/rt/include/chmtx.h ****  *          that is part of a bigger structure.
  77:../../../os/rt/include/chmtx.h ****  *
  78:../../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  79:../../../os/rt/include/chmtx.h ****  */
  80:../../../os/rt/include/chmtx.h **** #if (CH_CFG_USE_MUTEXES_RECURSIVE == TRUE) || defined(__DOXYGEN__)
  81:../../../os/rt/include/chmtx.h **** #define __MUTEX_DATA(name) {__CH_QUEUE_DATA(name.queue), NULL, NULL, 0}
  82:../../../os/rt/include/chmtx.h **** #else
  83:../../../os/rt/include/chmtx.h **** #define __MUTEX_DATA(name) {__CH_QUEUE_DATA(name.queue), NULL, NULL}
  84:../../../os/rt/include/chmtx.h **** #endif
  85:../../../os/rt/include/chmtx.h **** 
  86:../../../os/rt/include/chmtx.h **** /**
  87:../../../os/rt/include/chmtx.h ****  * @brief   Static mutex initializer.
  88:../../../os/rt/include/chmtx.h ****  * @details Statically initialized mutexes require no explicit initialization
  89:../../../os/rt/include/chmtx.h ****  *          using @p chMtxInit().
  90:../../../os/rt/include/chmtx.h ****  *
  91:../../../os/rt/include/chmtx.h ****  * @param[in] name      the name of the mutex variable
  92:../../../os/rt/include/chmtx.h ****  */
  93:../../../os/rt/include/chmtx.h **** #define MUTEX_DECL(name) mutex_t name = __MUTEX_DATA(name)
  94:../../../os/rt/include/chmtx.h **** 
  95:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  96:../../../os/rt/include/chmtx.h **** /* External declarations.                                                    */
  97:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
  98:../../../os/rt/include/chmtx.h **** 
  99:../../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 100:../../../os/rt/include/chmtx.h **** extern "C" {
 101:../../../os/rt/include/chmtx.h **** #endif
 102:../../../os/rt/include/chmtx.h ****   void chMtxObjectInit(mutex_t *mp);
 103:../../../os/rt/include/chmtx.h ****   void chMtxObjectDispose(mutex_t *mp);
 104:../../../os/rt/include/chmtx.h ****   void chMtxLock(mutex_t *mp);
 105:../../../os/rt/include/chmtx.h ****   void chMtxLockS(mutex_t *mp);
 106:../../../os/rt/include/chmtx.h ****   bool chMtxTryLock(mutex_t *mp);
 107:../../../os/rt/include/chmtx.h ****   bool chMtxTryLockS(mutex_t *mp);
 108:../../../os/rt/include/chmtx.h ****   void chMtxUnlock(mutex_t *mp);
 109:../../../os/rt/include/chmtx.h ****   void chMtxUnlockS(mutex_t *mp);
 110:../../../os/rt/include/chmtx.h ****   void chMtxUnlockAll(void);
 111:../../../os/rt/include/chmtx.h ****   void chMtxUnlockAllS(void);
 112:../../../os/rt/include/chmtx.h **** #ifdef __cplusplus
 113:../../../os/rt/include/chmtx.h **** }
 114:../../../os/rt/include/chmtx.h **** #endif
 115:../../../os/rt/include/chmtx.h **** 
 116:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
 117:../../../os/rt/include/chmtx.h **** /* Module inline functions.                                                  */
 118:../../../os/rt/include/chmtx.h **** /*===========================================================================*/
 119:../../../os/rt/include/chmtx.h **** 
 120:../../../os/rt/include/chmtx.h **** /**
 121:../../../os/rt/include/chmtx.h ****  * @brief   Returns @p true if the mutex queue contains at least a waiting
 122:../../../os/rt/include/chmtx.h ****  *          thread.
 123:../../../os/rt/include/chmtx.h ****  *
 124:../../../os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t object
 125:../../../os/rt/include/chmtx.h ****  * @return              The mutex queue status.
 126:../../../os/rt/include/chmtx.h ****  *
 127:../../../os/rt/include/chmtx.h ****  * @sclass
 128:../../../os/rt/include/chmtx.h ****  */
 129:../../../os/rt/include/chmtx.h **** static inline bool chMtxQueueNotEmptyS(mutex_t *mp) {
 130:../../../os/rt/include/chmtx.h **** 
 131:../../../os/rt/include/chmtx.h ****   chDbgCheckClassS();
 132:../../../os/rt/include/chmtx.h **** 
 133:../../../os/rt/include/chmtx.h ****   return ch_queue_notempty(&mp->queue);
 134:../../../os/rt/include/chmtx.h **** }
 135:../../../os/rt/include/chmtx.h **** 
 136:../../../os/rt/include/chmtx.h **** /**
 137:../../../os/rt/include/chmtx.h ****  * @brief   Returns the mutex owner thread.
 138:../../../os/rt/include/chmtx.h ****  *
 139:../../../os/rt/include/chmtx.h ****  * @param[out] mp       pointer to a @p mutex_t object
 140:../../../os/rt/include/chmtx.h ****  * @return              The owner thread.
 141:../../../os/rt/include/chmtx.h ****  * @retval NULL         if the mutex is not owned.
 142:../../../os/rt/include/chmtx.h ****  *
 143:../../../os/rt/include/chmtx.h ****  * @iclass
 144:../../../os/rt/include/chmtx.h ****  */
 145:../../../os/rt/include/chmtx.h **** static inline thread_t *chMtxGetOwnerI(mutex_t *mp) {
 146:../../../os/rt/include/chmtx.h **** 
 147:../../../os/rt/include/chmtx.h ****   chDbgCheckClassI();
 148:../../../os/rt/include/chmtx.h **** 
 149:../../../os/rt/include/chmtx.h ****   return mp->owner;
 150:../../../os/rt/include/chmtx.h **** }
 151:../../../os/rt/include/chmtx.h **** 
 152:../../../os/rt/include/chmtx.h **** /**
 153:../../../os/rt/include/chmtx.h ****  * @brief   Returns the next mutex in the mutexes stack of the current thread.
 154:../../../os/rt/include/chmtx.h ****  *
 155:../../../os/rt/include/chmtx.h ****  * @return              A pointer to the next mutex in the stack.
 156:../../../os/rt/include/chmtx.h ****  * @retval NULL         if the stack is empty.
 157:../../../os/rt/include/chmtx.h ****  *
 158:../../../os/rt/include/chmtx.h ****  * @xclass
 159:../../../os/rt/include/chmtx.h ****  */
 160:../../../os/rt/include/chmtx.h **** static inline mutex_t *chMtxGetNextMutexX(void) {
 161:../../../os/rt/include/chmtx.h **** 
 162:../../../os/rt/include/chmtx.h ****   return chThdGetSelfX()->mtxlist;
 488               		.loc 5 162 0
 489 0016 EB8C      		ldd r14,Y+27
 490 0018 FC8C      		ldd r15,Y+28
 491               	.LBE120:
 492               	.LBE119:
 234:../../../os/rt/src/chcond.c ****   thread_t *currtp = chThdGetSelfX();
 235:../../../os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 236:../../../os/rt/src/chcond.c ****   msg_t msg;
 237:../../../os/rt/src/chcond.c **** 
 238:../../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 239:../../../os/rt/src/chcond.c ****   chDbgCheck(cp != NULL);
 240:../../../os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 241:../../../os/rt/src/chcond.c **** 
 242:../../../os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 243:../../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 493               		.loc 1 243 0
 494 001a C701      		movw r24,r14
 495               	.LVL35:
 496 001c 0E94 0000 		call chMtxUnlockS
 497               	.LVL36:
 244:../../../os/rt/src/chcond.c **** 
 245:../../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 246:../../../os/rt/src/chcond.c ****      again.*/
 247:../../../os/rt/src/chcond.c ****   currtp->u.wtobjp = cp;
 498               		.loc 1 247 0
 499 0020 1B8B      		std Y+19,r17
 500 0022 0A8B      		std Y+18,r16
 248:../../../os/rt/src/chcond.c ****   ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 501               		.loc 1 248 0
 502 0024 D801      		movw r26,r16
 503               	.LVL37:
 504 0026 F801      		movw r30,r16
 505 0028 00C0      		rjmp .L23
 506               	.LVL38:
 507               	.L28:
 508               	.LBB121:
 509               	.LBB122:
 510               		.file 6 "../../../os/rt/include/chschd.h"
   1:../../../os/rt/include/chschd.h **** /*
   2:../../../os/rt/include/chschd.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chschd.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chschd.h **** 
   5:../../../os/rt/include/chschd.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chschd.h **** 
   7:../../../os/rt/include/chschd.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chschd.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chschd.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chschd.h **** 
  11:../../../os/rt/include/chschd.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chschd.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chschd.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chschd.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chschd.h **** 
  16:../../../os/rt/include/chschd.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chschd.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chschd.h **** */
  19:../../../os/rt/include/chschd.h **** 
  20:../../../os/rt/include/chschd.h **** /**
  21:../../../os/rt/include/chschd.h ****  * @file    rt/include/chschd.h
  22:../../../os/rt/include/chschd.h ****  * @brief   Scheduler macros and structures.
  23:../../../os/rt/include/chschd.h ****  *
  24:../../../os/rt/include/chschd.h ****  * @addtogroup scheduler
  25:../../../os/rt/include/chschd.h ****  * @{
  26:../../../os/rt/include/chschd.h ****  */
  27:../../../os/rt/include/chschd.h **** 
  28:../../../os/rt/include/chschd.h **** #ifndef CHSCHD_H
  29:../../../os/rt/include/chschd.h **** #define CHSCHD_H
  30:../../../os/rt/include/chschd.h **** 
  31:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  32:../../../os/rt/include/chschd.h **** /* Module constants.                                                         */
  33:../../../os/rt/include/chschd.h **** /*===========================================================================*/
  34:../../../os/rt/include/chschd.h **** 
  35:../../../os/rt/include/chschd.h **** /**
  36:../../../os/rt/include/chschd.h ****  * @name    Wakeup status codes
  37:../../../os/rt/include/chschd.h ****  * @{
  38:../../../os/rt/include/chschd.h ****  */
  39:../../../os/rt/include/chschd.h **** #define MSG_OK              (msg_t)0    /**< @brief Normal wakeup message.  */
  40:../../../os/rt/include/chschd.h **** #define MSG_TIMEOUT         (msg_t)-1   /**< @brief Wakeup caused by a timeout
  41:../../../os/rt/include/chschd.h ****                                              condition.                     */
  42:../../../os/rt/include/chschd.h **** #define MSG_RESET           (msg_t)-2   /**< @brief Wakeup caused by a reset
  43:../../../os/rt/include/chschd.h ****                                              condition.                     */
  44:../../../os/rt/include/chschd.h **** /** @} */
  45:../../../os/rt/include/chschd.h **** 
  46:../../../os/rt/include/chschd.h **** /**
  47:../../../os/rt/include/chschd.h ****  * @name    Priority constants
  48:../../../os/rt/include/chschd.h ****  * @{
  49:../../../os/rt/include/chschd.h ****  */
  50:../../../os/rt/include/chschd.h **** #define NOPRIO              (tprio_t)0      /**< @brief Ready list header
  51:../../../os/rt/include/chschd.h ****                                                  priority.                  */
  52:../../../os/rt/include/chschd.h **** #define IDLEPRIO            (tprio_t)1      /**< @brief Idle priority.      */
  53:../../../os/rt/include/chschd.h **** #define LOWPRIO             (tprio_t)2      /**< @brief Lowest priority.    */
  54:../../../os/rt/include/chschd.h **** #define NORMALPRIO          (tprio_t)128    /**< @brief Normal priority.    */
  55:../../../os/rt/include/chschd.h **** #define HIGHPRIO            (tprio_t)255    /**< @brief Highest priority.   */
  56:../../../os/rt/include/chschd.h **** /** @} */
  57:../../../os/rt/include/chschd.h **** 
  58:../../../os/rt/include/chschd.h **** /**
  59:../../../os/rt/include/chschd.h ****  * @name    Thread states
  60:../../../os/rt/include/chschd.h ****  * @{
  61:../../../os/rt/include/chschd.h ****  */
  62:../../../os/rt/include/chschd.h **** #define CH_STATE_READY      (tstate_t)0      /**< @brief Waiting on the
  63:../../../os/rt/include/chschd.h ****                                                   ready list.               */
  64:../../../os/rt/include/chschd.h **** #define CH_STATE_CURRENT    (tstate_t)1      /**< @brief Currently running. */
  65:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSTART    (tstate_t)2      /**< @brief Just created.      */
  66:../../../os/rt/include/chschd.h **** #define CH_STATE_SUSPENDED  (tstate_t)3      /**< @brief Suspended state.   */
  67:../../../os/rt/include/chschd.h **** #define CH_STATE_QUEUED     (tstate_t)4      /**< @brief On a queue.        */
  68:../../../os/rt/include/chschd.h **** #define CH_STATE_WTSEM      (tstate_t)5      /**< @brief On a semaphore.    */
  69:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMTX      (tstate_t)6      /**< @brief On a mutex.        */
  70:../../../os/rt/include/chschd.h **** #define CH_STATE_WTCOND     (tstate_t)7      /**< @brief On a cond.variable.*/
  71:../../../os/rt/include/chschd.h **** #define CH_STATE_SLEEPING   (tstate_t)8      /**< @brief Sleeping.          */
  72:../../../os/rt/include/chschd.h **** #define CH_STATE_WTEXIT     (tstate_t)9      /**< @brief Waiting a thread.  */
  73:../../../os/rt/include/chschd.h **** #define CH_STATE_WTOREVT    (tstate_t)10     /**< @brief One event.         */
  74:../../../os/rt/include/chschd.h **** #define CH_STATE_WTANDEVT   (tstate_t)11     /**< @brief Several events.    */
  75:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSGQ    (tstate_t)12     /**< @brief Sending a message,
  76:../../../os/rt/include/chschd.h ****                                                   in queue.                 */
  77:../../../os/rt/include/chschd.h **** #define CH_STATE_SNDMSG     (tstate_t)13     /**< @brief Sent a message,
  78:../../../os/rt/include/chschd.h ****                                                   waiting answer.           */
  79:../../../os/rt/include/chschd.h **** #define CH_STATE_WTMSG      (tstate_t)14     /**< @brief Waiting for a
  80:../../../os/rt/include/chschd.h ****                                                   message.                  */
  81:../../../os/rt/include/chschd.h **** #define CH_STATE_FINAL      (tstate_t)15     /**< @brief Thread terminated. */
  82:../../../os/rt/include/chschd.h **** 
  83:../../../os/rt/include/chschd.h **** /**
  84:../../../os/rt/include/chschd.h ****  * @brief   Thread states as array of strings.
  85:../../../os/rt/include/chschd.h ****  * @details Each element in an array initialized with this macro can be
  86:../../../os/rt/include/chschd.h ****  *          indexed using the numeric thread state values.
  87:../../../os/rt/include/chschd.h ****  */
  88:../../../os/rt/include/chschd.h **** #define CH_STATE_NAMES                                                     \
  89:../../../os/rt/include/chschd.h ****   "READY", "CURRENT", "WTSTART", "SUSPENDED", "QUEUED", "WTSEM", "WTMTX",  \
  90:../../../os/rt/include/chschd.h ****   "WTCOND", "SLEEPING", "WTEXIT", "WTOREVT", "WTANDEVT", "SNDMSGQ",        \
  91:../../../os/rt/include/chschd.h ****   "SNDMSG", "WTMSG", "FINAL"
  92:../../../os/rt/include/chschd.h **** /** @} */
  93:../../../os/rt/include/chschd.h **** 
  94:../../../os/rt/include/chschd.h **** /**
  95:../../../os/rt/include/chschd.h ****  * @name    Thread flags and attributes
  96:../../../os/rt/include/chschd.h ****  * @{
  97:../../../os/rt/include/chschd.h ****  */
  98:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MASK   (tmode_t)3U     /**< @brief Thread memory mode
  99:../../../os/rt/include/chschd.h ****                                                  mask.                      */
 100:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_STATIC (tmode_t)0U     /**< @brief Static thread.      */
 101:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_HEAP   (tmode_t)1U     /**< @brief Thread allocated
 102:../../../os/rt/include/chschd.h ****                                                  from a Memory Heap.        */
 103:../../../os/rt/include/chschd.h **** #define CH_FLAG_MODE_MPOOL  (tmode_t)2U     /**< @brief Thread allocated
 104:../../../os/rt/include/chschd.h ****                                                  from a Memory Pool.        */
 105:../../../os/rt/include/chschd.h **** #define CH_FLAG_TERMINATE   (tmode_t)4U     /**< @brief Termination requested
 106:../../../os/rt/include/chschd.h ****                                                  flag.                      */
 107:../../../os/rt/include/chschd.h **** /** @} */
 108:../../../os/rt/include/chschd.h **** 
 109:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 110:../../../os/rt/include/chschd.h **** /* Module pre-compile time settings.                                         */
 111:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 112:../../../os/rt/include/chschd.h **** 
 113:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 114:../../../os/rt/include/chschd.h **** /* Derived constants and error checks.                                       */
 115:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 116:../../../os/rt/include/chschd.h **** 
 117:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 118:../../../os/rt/include/chschd.h **** /* Module data structures and types.                                         */
 119:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 120:../../../os/rt/include/chschd.h **** 
 121:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 122:../../../os/rt/include/chschd.h **** /* Module macros.                                                            */
 123:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 124:../../../os/rt/include/chschd.h **** 
 125:../../../os/rt/include/chschd.h **** /**
 126:../../../os/rt/include/chschd.h ****  * @brief   Returns the priority of the first thread on the given ready list.
 127:../../../os/rt/include/chschd.h ****  *
 128:../../../os/rt/include/chschd.h ****  * @notapi
 129:../../../os/rt/include/chschd.h ****  */
 130:../../../os/rt/include/chschd.h **** #define firstprio(rlp)              ((rlp)->next->prio)
 131:../../../os/rt/include/chschd.h **** 
 132:../../../os/rt/include/chschd.h **** /**
 133:../../../os/rt/include/chschd.h ****  * @brief   Current thread pointer get macro.
 134:../../../os/rt/include/chschd.h ****  * @note    This macro is not meant to be used in the application code but
 135:../../../os/rt/include/chschd.h ****  *          only from within the kernel, use @p chThdGetSelfX() instead.
 136:../../../os/rt/include/chschd.h ****  */
 137:../../../os/rt/include/chschd.h **** #define __sch_get_currthread()      __instance_get_currthread(currcore)
 138:../../../os/rt/include/chschd.h **** 
 139:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 140:../../../os/rt/include/chschd.h **** /* External declarations.                                                    */
 141:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 142:../../../os/rt/include/chschd.h **** 
 143:../../../os/rt/include/chschd.h **** /*
 144:../../../os/rt/include/chschd.h ****  * Scheduler APIs.
 145:../../../os/rt/include/chschd.h ****  */
 146:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 147:../../../os/rt/include/chschd.h **** extern "C" {
 148:../../../os/rt/include/chschd.h **** #endif
 149:../../../os/rt/include/chschd.h ****   void chSchObjectInit(os_instance_t *oip,
 150:../../../os/rt/include/chschd.h ****                        const os_instance_config_t *oicp);
 151:../../../os/rt/include/chschd.h ****   thread_t *chSchReadyI(thread_t *tp);
 152:../../../os/rt/include/chschd.h ****   void chSchGoSleepS(tstate_t newstate);
 153:../../../os/rt/include/chschd.h ****   msg_t chSchGoSleepTimeoutS(tstate_t newstate, sysinterval_t timeout);
 154:../../../os/rt/include/chschd.h ****   void chSchWakeupS(thread_t *ntp, msg_t msg);
 155:../../../os/rt/include/chschd.h ****   void chSchRescheduleS(void);
 156:../../../os/rt/include/chschd.h ****   bool chSchIsPreemptionRequired(void);
 157:../../../os/rt/include/chschd.h ****   void chSchDoPreemption(void);
 158:../../../os/rt/include/chschd.h ****   void chSchPreemption(void);
 159:../../../os/rt/include/chschd.h ****   void chSchDoYieldS(void);
 160:../../../os/rt/include/chschd.h ****   thread_t *chSchSelectFirst(void);
 161:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == FALSE
 162:../../../os/rt/include/chschd.h ****   void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp);
 163:../../../os/rt/include/chschd.h **** #endif /* CH_CFG_OPTIMIZE_SPEED == FALSE */
 164:../../../os/rt/include/chschd.h **** #ifdef __cplusplus
 165:../../../os/rt/include/chschd.h **** }
 166:../../../os/rt/include/chschd.h **** #endif
 167:../../../os/rt/include/chschd.h **** 
 168:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 169:../../../os/rt/include/chschd.h **** /* Module inline functions.                                                  */
 170:../../../os/rt/include/chschd.h **** /*===========================================================================*/
 171:../../../os/rt/include/chschd.h **** 
 172:../../../os/rt/include/chschd.h **** /* If the performance code path has been chosen then all the following
 173:../../../os/rt/include/chschd.h ****    functions are inlined into the various kernel modules.*/
 174:../../../os/rt/include/chschd.h **** #if CH_CFG_OPTIMIZE_SPEED == TRUE
 175:../../../os/rt/include/chschd.h **** static inline void ch_sch_prio_insert(ch_queue_t *qp, ch_queue_t *tp) {
 176:../../../os/rt/include/chschd.h **** 
 177:../../../os/rt/include/chschd.h ****   ch_queue_t *cp = qp;
 178:../../../os/rt/include/chschd.h ****   do {
 179:../../../os/rt/include/chschd.h ****     cp = cp->next;
 180:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 511               		.loc 6 180 0
 512 002a 9481      		ldd r25,Z+4
 513 002c 8C81      		ldd r24,Y+4
 514 002e 9817      		cp r25,r24
 515 0030 00F0      		brlo .L27
 516               	.LVL39:
 517               	.L23:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 518               		.loc 6 179 0
 519 0032 0190      		ld __tmp_reg__,Z+
 520 0034 F081      		ld r31,Z
 521 0036 E02D      		mov r30,__tmp_reg__
 522               	.LVL40:
 181:../../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 523               		.loc 6 181 0
 524 0038 E017      		cp r30,r16
 525 003a F107      		cpc r31,r17
 526 003c 01F4      		brne .L28
 527               	.L24:
 182:../../../os/rt/include/chschd.h ****   tp->next       = cp;
 528               		.loc 6 182 0
 529 003e B983      		std Y+1,r27
 530 0040 A883      		st Y,r26
 183:../../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 531               		.loc 6 183 0
 532 0042 1296      		adiw r26,2
 533 0044 ED91      		ld r30,X+
 534 0046 FC91      		ld r31,X
 535 0048 1397      		sbiw r26,2+1
 536               	.LVL41:
 537 004a FB83      		std Y+3,r31
 538 004c EA83      		std Y+2,r30
 184:../../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 539               		.loc 6 184 0
 540 004e D183      		std Z+1,r29
 541 0050 C083      		st Z,r28
 185:../../../os/rt/include/chschd.h ****   cp->prev       = tp;
 542               		.loc 6 185 0
 543 0052 1396      		adiw r26,2+1
 544 0054 DC93      		st X,r29
 545 0056 CE93      		st -X,r28
 546 0058 1297      		sbiw r26,2
 547               	.LVL42:
 548               	.LBE122:
 549               	.LBE121:
 249:../../../os/rt/src/chcond.c ****   chSchGoSleepS(CH_STATE_WTCOND);
 550               		.loc 1 249 0
 551 005a 87E0      		ldi r24,lo8(7)
 552 005c 0E94 0000 		call chSchGoSleepS
 553               	.LVL43:
 250:../../../os/rt/src/chcond.c ****   msg = currtp->u.rdymsg;
 554               		.loc 1 250 0
 555 0060 0A88      		ldd __tmp_reg__,Y+18
 556 0062 DB89      		ldd r29,Y+19
 557 0064 C02D      		mov r28,__tmp_reg__
 558               	.LVL44:
 251:../../../os/rt/src/chcond.c ****   chMtxLockS(mp);
 559               		.loc 1 251 0
 560 0066 C701      		movw r24,r14
 561 0068 0E94 0000 		call chMtxLockS
 562               	.LVL45:
 252:../../../os/rt/src/chcond.c **** 
 253:../../../os/rt/src/chcond.c ****   return msg;
 254:../../../os/rt/src/chcond.c **** }
 563               		.loc 1 254 0
 564 006c CE01      		movw r24,r28
 565               	/* epilogue start */
 566 006e DF91      		pop r29
 567 0070 CF91      		pop r28
 568               	.LVL46:
 569 0072 1F91      		pop r17
 570 0074 0F91      		pop r16
 571               	.LVL47:
 572 0076 FF90      		pop r15
 573 0078 EF90      		pop r14
 574 007a 0895      		ret
 575               	.LVL48:
 576               	.L27:
 577               	.LBB124:
 578               	.LBB123:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 579               		.loc 6 179 0
 580 007c DF01      		movw r26,r30
 581 007e 00C0      		rjmp .L24
 582               	.LBE123:
 583               	.LBE124:
 584               		.cfi_endproc
 585               	.LFE200:
 587               		.section	.text.chCondWait,"ax",@progbits
 588               	.global	chCondWait
 590               	chCondWait:
 591               	.LFB199:
 207:../../../os/rt/src/chcond.c ****   msg_t msg;
 592               		.loc 1 207 0
 593               		.cfi_startproc
 594               	.LVL49:
 595               	/* prologue: function */
 596               	/* frame size = 0 */
 597               	/* stack size = 0 */
 598               	.L__stack_usage = 0
 599               	.LBB125:
 600               	.LBB126:
 601               	.LBB127:
 430:../../../os/common/ports/AVR/chcore.h **** }
 602               		.loc 3 430 0
 603               	/* #APP */
 604               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 605 0000 F894      		cli
 606               	 ;  0 "" 2
 607               	/* #NOAPP */
 608               	.LBE127:
 609               	.LBE126:
 610               	.LBE125:
 211:../../../os/rt/src/chcond.c ****   chSysUnlock();
 611               		.loc 1 211 0
 612 0002 0E94 0000 		call chCondWaitS
 613               	.LVL50:
 614               	.LBB128:
 615               	.LBB129:
 616               	.LBB130:
 617               	.LBB131:
 618               		.loc 3 440 0
 619               	/* #APP */
 620               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 621 0006 7894      		sei
 622               	 ;  0 "" 2
 623               	/* #NOAPP */
 624               	.LBE131:
 625               	.LBE130:
 626               	.LBE129:
 627               	.LBE128:
 214:../../../os/rt/src/chcond.c **** 
 628               		.loc 1 214 0
 629 0008 0895      		ret
 630               		.cfi_endproc
 631               	.LFE199:
 633               		.section	.text.chCondWaitTimeoutS,"ax",@progbits
 634               	.global	chCondWaitTimeoutS
 636               	chCondWaitTimeoutS:
 637               	.LFB202:
 255:../../../os/rt/src/chcond.c **** 
 256:../../../os/rt/src/chcond.c **** #if (CH_CFG_USE_CONDVARS_TIMEOUT == TRUE) || defined(__DOXYGEN__)
 257:../../../os/rt/src/chcond.c **** /**
 258:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 259:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 260:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 261:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 262:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 263:../../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 264:../../../os/rt/src/chcond.c ****  *          in order to use this function.
 265:../../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 266:../../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 267:../../../os/rt/src/chcond.c ****  *
 268:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 269:../../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 270:../../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 271:../../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 272:../../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 273:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 274:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 275:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 276:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 277:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 278:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 279:../../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 280:../../../os/rt/src/chcond.c ****  *                      the specified timeout.
 281:../../../os/rt/src/chcond.c ****  *
 282:../../../os/rt/src/chcond.c ****  * @api
 283:../../../os/rt/src/chcond.c ****  */
 284:../../../os/rt/src/chcond.c **** msg_t chCondWaitTimeout(condition_variable_t *cp, sysinterval_t timeout) {
 285:../../../os/rt/src/chcond.c ****   msg_t msg;
 286:../../../os/rt/src/chcond.c **** 
 287:../../../os/rt/src/chcond.c ****   chSysLock();
 288:../../../os/rt/src/chcond.c ****   msg = chCondWaitTimeoutS(cp, timeout);
 289:../../../os/rt/src/chcond.c ****   chSysUnlock();
 290:../../../os/rt/src/chcond.c **** 
 291:../../../os/rt/src/chcond.c ****   return msg;
 292:../../../os/rt/src/chcond.c **** }
 293:../../../os/rt/src/chcond.c **** 
 294:../../../os/rt/src/chcond.c **** /**
 295:../../../os/rt/src/chcond.c ****  * @brief   Waits on the condition variable releasing the mutex lock.
 296:../../../os/rt/src/chcond.c ****  * @details Releases the currently owned mutex, waits on the condition
 297:../../../os/rt/src/chcond.c ****  *          variable, and finally acquires the mutex again. All the sequence
 298:../../../os/rt/src/chcond.c ****  *          is performed atomically.
 299:../../../os/rt/src/chcond.c ****  * @pre     The invoking thread <b>must</b> have at least one owned mutex.
 300:../../../os/rt/src/chcond.c ****  * @pre     The configuration option @p CH_CFG_USE_CONDVARS_TIMEOUT must be enabled
 301:../../../os/rt/src/chcond.c ****  *          in order to use this function.
 302:../../../os/rt/src/chcond.c ****  * @post    Exiting the function because a timeout does not re-acquire the
 303:../../../os/rt/src/chcond.c ****  *          mutex, the mutex ownership is lost.
 304:../../../os/rt/src/chcond.c ****  *
 305:../../../os/rt/src/chcond.c ****  * @param[in] cp        pointer to a @p condition_variable_t object
 306:../../../os/rt/src/chcond.c ****  * @param[in] timeout   the number of ticks before the operation timeouts, the
 307:../../../os/rt/src/chcond.c ****  *                      special values are handled as follow:
 308:../../../os/rt/src/chcond.c ****  *                      - @a TIME_INFINITE no timeout.
 309:../../../os/rt/src/chcond.c ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 310:../../../os/rt/src/chcond.c ****  * @return              A message specifying how the invoking thread has been
 311:../../../os/rt/src/chcond.c ****  *                      released from the condition variable.
 312:../../../os/rt/src/chcond.c ****  * @retval MSG_OK       if the condition variable has been signaled using
 313:../../../os/rt/src/chcond.c ****  *                      @p chCondSignal().
 314:../../../os/rt/src/chcond.c ****  * @retval MSG_RESET    if the condition variable has been signaled using
 315:../../../os/rt/src/chcond.c ****  *                      @p chCondBroadcast().
 316:../../../os/rt/src/chcond.c ****  * @retval MSG_TIMEOUT  if the condition variable has not been signaled within
 317:../../../os/rt/src/chcond.c ****  *                      the specified timeout.
 318:../../../os/rt/src/chcond.c ****  *
 319:../../../os/rt/src/chcond.c ****  * @sclass
 320:../../../os/rt/src/chcond.c ****  */
 321:../../../os/rt/src/chcond.c **** msg_t chCondWaitTimeoutS(condition_variable_t *cp, sysinterval_t timeout) {
 638               		.loc 1 321 0
 639               		.cfi_startproc
 640               	.LVL51:
 641 0000 CF92      		push r12
 642               	.LCFI18:
 643               		.cfi_def_cfa_offset 3
 644               		.cfi_offset 12, -2
 645 0002 DF92      		push r13
 646               	.LCFI19:
 647               		.cfi_def_cfa_offset 4
 648               		.cfi_offset 13, -3
 649 0004 EF92      		push r14
 650               	.LCFI20:
 651               		.cfi_def_cfa_offset 5
 652               		.cfi_offset 14, -4
 653 0006 FF92      		push r15
 654               	.LCFI21:
 655               		.cfi_def_cfa_offset 6
 656               		.cfi_offset 15, -5
 657 0008 0F93      		push r16
 658               	.LCFI22:
 659               		.cfi_def_cfa_offset 7
 660               		.cfi_offset 16, -6
 661 000a 1F93      		push r17
 662               	.LCFI23:
 663               		.cfi_def_cfa_offset 8
 664               		.cfi_offset 17, -7
 665 000c CF93      		push r28
 666               	.LCFI24:
 667               		.cfi_def_cfa_offset 9
 668               		.cfi_offset 28, -8
 669 000e DF93      		push r29
 670               	.LCFI25:
 671               		.cfi_def_cfa_offset 10
 672               		.cfi_offset 29, -9
 673               	/* prologue: function */
 674               	/* frame size = 0 */
 675               	/* stack size = 8 */
 676               	.L__stack_usage = 8
 677 0010 6C01      		movw r12,r24
 678 0012 7B01      		movw r14,r22
 679               	.LBB132:
 680               	.LBB133:
 681               		.loc 4 375 0
 682 0014 C091 0000 		lds r28,ch0+5
 683 0018 D091 0000 		lds r29,ch0+5+1
 684               	.LBE133:
 685               	.LBE132:
 686               	.LBB134:
 687               	.LBB135:
 688               		.loc 5 162 0
 689 001c 0B8D      		ldd r16,Y+27
 690 001e 1C8D      		ldd r17,Y+28
 691               	.LBE135:
 692               	.LBE134:
 322:../../../os/rt/src/chcond.c ****   thread_t *currtp = chThdGetSelfX();
 323:../../../os/rt/src/chcond.c ****   mutex_t *mp = chMtxGetNextMutexX();
 324:../../../os/rt/src/chcond.c ****   msg_t msg;
 325:../../../os/rt/src/chcond.c **** 
 326:../../../os/rt/src/chcond.c ****   chDbgCheckClassS();
 327:../../../os/rt/src/chcond.c ****   chDbgCheck((cp != NULL) && (timeout != TIME_IMMEDIATE));
 328:../../../os/rt/src/chcond.c ****   chDbgAssert(mp != NULL, "not owning a mutex");
 329:../../../os/rt/src/chcond.c **** 
 330:../../../os/rt/src/chcond.c ****   /* Releasing "current" mutex.*/
 331:../../../os/rt/src/chcond.c ****   chMtxUnlockS(mp);
 693               		.loc 1 331 0
 694 0020 C801      		movw r24,r16
 695               	.LVL52:
 696 0022 0E94 0000 		call chMtxUnlockS
 697               	.LVL53:
 332:../../../os/rt/src/chcond.c **** 
 333:../../../os/rt/src/chcond.c ****   /* Start waiting on the condition variable, on exit the mutex is taken
 334:../../../os/rt/src/chcond.c ****      again.*/
 335:../../../os/rt/src/chcond.c ****   currtp->u.wtobjp = cp;
 698               		.loc 1 335 0
 699 0026 DB8A      		std Y+19,r13
 700 0028 CA8A      		std Y+18,r12
 336:../../../os/rt/src/chcond.c ****   ch_sch_prio_insert(&cp->queue, &currtp->hdr.queue);
 701               		.loc 1 336 0
 702 002a D601      		movw r26,r12
 703               	.LVL54:
 704 002c F601      		movw r30,r12
 705 002e 00C0      		rjmp .L34
 706               	.LVL55:
 707               	.L31:
 708               	.LBB136:
 709               	.LBB137:
 180:../../../os/rt/include/chschd.h ****            (threadref(cp)->hdr.pqueue.prio >= threadref(tp)->hdr.pqueue.prio));
 710               		.loc 6 180 0
 711 0030 9481      		ldd r25,Z+4
 712 0032 8C81      		ldd r24,Y+4
 713 0034 9817      		cp r25,r24
 714 0036 00F0      		brlo .L37
 715               	.LVL56:
 716               	.L34:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 717               		.loc 6 179 0
 718 0038 0190      		ld __tmp_reg__,Z+
 719 003a F081      		ld r31,Z
 720 003c E02D      		mov r30,__tmp_reg__
 721               	.LVL57:
 181:../../../os/rt/include/chschd.h ****   tp->next       = cp;
 722               		.loc 6 181 0
 723 003e EC15      		cp r30,r12
 724 0040 FD05      		cpc r31,r13
 725 0042 01F4      		brne .L31
 726               	.L35:
 182:../../../os/rt/include/chschd.h ****   tp->prev       = cp->prev;
 727               		.loc 6 182 0
 728 0044 B983      		std Y+1,r27
 729 0046 A883      		st Y,r26
 183:../../../os/rt/include/chschd.h ****   tp->prev->next = tp;
 730               		.loc 6 183 0
 731 0048 1296      		adiw r26,2
 732 004a ED91      		ld r30,X+
 733 004c FC91      		ld r31,X
 734 004e 1397      		sbiw r26,2+1
 735               	.LVL58:
 736 0050 FB83      		std Y+3,r31
 737 0052 EA83      		std Y+2,r30
 184:../../../os/rt/include/chschd.h ****   cp->prev       = tp;
 738               		.loc 6 184 0
 739 0054 D183      		std Z+1,r29
 740 0056 C083      		st Z,r28
 741               		.loc 6 185 0
 742 0058 1396      		adiw r26,2+1
 743 005a DC93      		st X,r29
 744 005c CE93      		st -X,r28
 745 005e 1297      		sbiw r26,2
 746               	.LVL59:
 747               	.LBE137:
 748               	.LBE136:
 337:../../../os/rt/src/chcond.c ****   msg = chSchGoSleepTimeoutS(CH_STATE_WTCOND, timeout);
 749               		.loc 1 337 0
 750 0060 B701      		movw r22,r14
 751 0062 87E0      		ldi r24,lo8(7)
 752 0064 0E94 0000 		call chSchGoSleepTimeoutS
 753               	.LVL60:
 754 0068 EC01      		movw r28,r24
 755               	.LVL61:
 338:../../../os/rt/src/chcond.c ****   if (msg != MSG_TIMEOUT) {
 756               		.loc 1 338 0
 757 006a CF3F      		cpi r28,-1
 758 006c 8FEF      		ldi r24,-1
 759 006e D807      		cpc r29,r24
 760               	.LVL62:
 761 0070 01F0      		breq .L33
 339:../../../os/rt/src/chcond.c ****     chMtxLockS(mp);
 762               		.loc 1 339 0
 763 0072 C801      		movw r24,r16
 764 0074 0E94 0000 		call chMtxLockS
 765               	.LVL63:
 766               	.L33:
 340:../../../os/rt/src/chcond.c ****   }
 341:../../../os/rt/src/chcond.c **** 
 342:../../../os/rt/src/chcond.c ****   return msg;
 343:../../../os/rt/src/chcond.c **** }
 767               		.loc 1 343 0
 768 0078 CE01      		movw r24,r28
 769               	/* epilogue start */
 770 007a DF91      		pop r29
 771 007c CF91      		pop r28
 772               	.LVL64:
 773 007e 1F91      		pop r17
 774 0080 0F91      		pop r16
 775 0082 FF90      		pop r15
 776 0084 EF90      		pop r14
 777               	.LVL65:
 778 0086 DF90      		pop r13
 779 0088 CF90      		pop r12
 780               	.LVL66:
 781 008a 0895      		ret
 782               	.LVL67:
 783               	.L37:
 784               	.LBB139:
 785               	.LBB138:
 179:../../../os/rt/include/chschd.h ****   } while ((cp != qp) &&
 786               		.loc 6 179 0
 787 008c DF01      		movw r26,r30
 788 008e 00C0      		rjmp .L35
 789               	.LBE138:
 790               	.LBE139:
 791               		.cfi_endproc
 792               	.LFE202:
 794               		.section	.text.chCondWaitTimeout,"ax",@progbits
 795               	.global	chCondWaitTimeout
 797               	chCondWaitTimeout:
 798               	.LFB201:
 284:../../../os/rt/src/chcond.c ****   msg_t msg;
 799               		.loc 1 284 0
 800               		.cfi_startproc
 801               	.LVL68:
 802               	/* prologue: function */
 803               	/* frame size = 0 */
 804               	/* stack size = 0 */
 805               	.L__stack_usage = 0
 806               	.LBB140:
 807               	.LBB141:
 808               	.LBB142:
 430:../../../os/common/ports/AVR/chcore.h **** }
 809               		.loc 3 430 0
 810               	/* #APP */
 811               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 812 0000 F894      		cli
 813               	 ;  0 "" 2
 814               	/* #NOAPP */
 815               	.LBE142:
 816               	.LBE141:
 817               	.LBE140:
 288:../../../os/rt/src/chcond.c ****   chSysUnlock();
 818               		.loc 1 288 0
 819 0002 0E94 0000 		call chCondWaitTimeoutS
 820               	.LVL69:
 821               	.LBB143:
 822               	.LBB144:
 823               	.LBB145:
 824               	.LBB146:
 825               		.loc 3 440 0
 826               	/* #APP */
 827               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 828 0006 7894      		sei
 829               	 ;  0 "" 2
 830               	/* #NOAPP */
 831               	.LBE146:
 832               	.LBE145:
 833               	.LBE144:
 834               	.LBE143:
 292:../../../os/rt/src/chcond.c **** 
 835               		.loc 1 292 0
 836 0008 0895      		ret
 837               		.cfi_endproc
 838               	.LFE201:
 840               		.text
 841               	.Letext0:
 842               		.file 7 "/usr/lib/avr/include/stdint.h"
 843               		.file 8 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 844               		.file 9 "../../../os/rt/include/chearly.h"
 845               		.file 10 "../../../os/rt/include/chobjects.h"
 846               		.file 11 "../../../os/rt/include/chrfcu.h"
 847               		.file 12 "../../../os/rt/include/chdebug.h"
 848               		.file 13 "../../../os/rt/include/chtime.h"
 849               		.file 14 "../../../os/rt/include/chsem.h"
 850               		.file 15 "../../../os/rt/include/chcond.h"
 851               		.file 16 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chcond.c
     /tmp/cc9AEHkr.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cc9AEHkr.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cc9AEHkr.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cc9AEHkr.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cc9AEHkr.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cc9AEHkr.s:13     .text.chCondObjectInit:0000000000000000 chCondObjectInit
     /tmp/cc9AEHkr.s:43     .text.chCondObjectDispose:0000000000000000 chCondObjectDispose
     /tmp/cc9AEHkr.s:59     .text.chCondSignal:0000000000000000 chCondSignal
     /tmp/cc9AEHkr.s:152    .text.chCondSignalI:0000000000000000 chCondSignalI
     /tmp/cc9AEHkr.s:226    .text.chCondBroadcast:0000000000000000 chCondBroadcast
     /tmp/cc9AEHkr.s:351    .text.chCondBroadcastI:0000000000000000 chCondBroadcastI
     /tmp/cc9AEHkr.s:443    .text.chCondWaitS:0000000000000000 chCondWaitS
     /tmp/cc9AEHkr.s:590    .text.chCondWait:0000000000000000 chCondWait
     /tmp/cc9AEHkr.s:636    .text.chCondWaitTimeoutS:0000000000000000 chCondWaitTimeoutS
     /tmp/cc9AEHkr.s:797    .text.chCondWaitTimeout:0000000000000000 chCondWaitTimeout

UNDEFINED SYMBOLS
chSchWakeupS
chSchReadyI
chSchRescheduleS
ch0
chMtxUnlockS
chSchGoSleepS
chMtxLockS
chSchGoSleepTimeoutS
