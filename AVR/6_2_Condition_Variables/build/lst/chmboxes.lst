   1               		.file	"chmboxes.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.chMBObjectInit,"ax",@progbits
  11               	.global	chMBObjectInit
  13               	chMBObjectInit:
  14               	.LFB193:
  15               		.file 1 "../../../os/oslib/src/chmboxes.c"
   1:../../../os/oslib/src/chmboxes.c **** /*
   2:../../../os/oslib/src/chmboxes.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chmboxes.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chmboxes.c **** 
   5:../../../os/oslib/src/chmboxes.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chmboxes.c **** 
   7:../../../os/oslib/src/chmboxes.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chmboxes.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chmboxes.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chmboxes.c **** 
  11:../../../os/oslib/src/chmboxes.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chmboxes.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chmboxes.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chmboxes.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chmboxes.c **** 
  16:../../../os/oslib/src/chmboxes.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chmboxes.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chmboxes.c **** */
  19:../../../os/oslib/src/chmboxes.c **** 
  20:../../../os/oslib/src/chmboxes.c **** /**
  21:../../../os/oslib/src/chmboxes.c ****  * @file    oslib/src/chmboxes.c
  22:../../../os/oslib/src/chmboxes.c ****  * @brief   Mailboxes code.
  23:../../../os/oslib/src/chmboxes.c ****  *
  24:../../../os/oslib/src/chmboxes.c ****  * @addtogroup oslib_mailboxes
  25:../../../os/oslib/src/chmboxes.c ****  * @details Asynchronous messages.
  26:../../../os/oslib/src/chmboxes.c ****  *          <h2>Operation mode</h2>
  27:../../../os/oslib/src/chmboxes.c ****  *          A mailbox is an asynchronous communication mechanism.<br>
  28:../../../os/oslib/src/chmboxes.c ****  *          Operations defined for mailboxes:
  29:../../../os/oslib/src/chmboxes.c ****  *          - <b>Post</b>: Posts a message on the mailbox in FIFO order.
  30:../../../os/oslib/src/chmboxes.c ****  *          - <b>Post Ahead</b>: Posts a message on the mailbox with urgent
  31:../../../os/oslib/src/chmboxes.c ****  *            priority.
  32:../../../os/oslib/src/chmboxes.c ****  *          - <b>Fetch</b>: A message is fetched from the mailbox and removed
  33:../../../os/oslib/src/chmboxes.c ****  *            from the queue.
  34:../../../os/oslib/src/chmboxes.c ****  *          - <b>Reset</b>: The mailbox is emptied and all the stored messages
  35:../../../os/oslib/src/chmboxes.c ****  *            are lost.
  36:../../../os/oslib/src/chmboxes.c ****  *          .
  37:../../../os/oslib/src/chmboxes.c ****  *          A message is a variable of type msg_t that is guaranteed to have
  38:../../../os/oslib/src/chmboxes.c ****  *          the same size of and be compatible with (data) pointers (anyway an
  39:../../../os/oslib/src/chmboxes.c ****  *          explicit cast is needed).
  40:../../../os/oslib/src/chmboxes.c ****  *          If larger messages need to be exchanged then a pointer to a
  41:../../../os/oslib/src/chmboxes.c ****  *          structure can be posted in the mailbox but the posting side has
  42:../../../os/oslib/src/chmboxes.c ****  *          no predefined way to know when the message has been processed. A
  43:../../../os/oslib/src/chmboxes.c ****  *          possible approach is to allocate memory (from a memory pool for
  44:../../../os/oslib/src/chmboxes.c ****  *          example) from the posting side and free it on the fetching side.
  45:../../../os/oslib/src/chmboxes.c ****  *          Another approach is to set a "done" flag into the structure pointed
  46:../../../os/oslib/src/chmboxes.c ****  *          by the message.
  47:../../../os/oslib/src/chmboxes.c ****  * @pre     In order to use the mailboxes APIs the @p CH_CFG_USE_MAILBOXES
  48:../../../os/oslib/src/chmboxes.c ****  *          option must be enabled in @p chconf.h.
  49:../../../os/oslib/src/chmboxes.c ****  * @note    Compatible with RT and NIL.
  50:../../../os/oslib/src/chmboxes.c ****  * @{
  51:../../../os/oslib/src/chmboxes.c ****  */
  52:../../../os/oslib/src/chmboxes.c **** 
  53:../../../os/oslib/src/chmboxes.c **** #include <string.h>
  54:../../../os/oslib/src/chmboxes.c **** 
  55:../../../os/oslib/src/chmboxes.c **** #include "ch.h"
  56:../../../os/oslib/src/chmboxes.c **** 
  57:../../../os/oslib/src/chmboxes.c **** #if (CH_CFG_USE_MAILBOXES == TRUE) || defined(__DOXYGEN__)
  58:../../../os/oslib/src/chmboxes.c **** 
  59:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  60:../../../os/oslib/src/chmboxes.c **** /* Module exported variables.                                                */
  61:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  62:../../../os/oslib/src/chmboxes.c **** 
  63:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  64:../../../os/oslib/src/chmboxes.c **** /* Module local types.                                                       */
  65:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  66:../../../os/oslib/src/chmboxes.c **** 
  67:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  68:../../../os/oslib/src/chmboxes.c **** /* Module local variables.                                                   */
  69:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  70:../../../os/oslib/src/chmboxes.c **** 
  71:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  72:../../../os/oslib/src/chmboxes.c **** /* Module local functions.                                                   */
  73:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  74:../../../os/oslib/src/chmboxes.c **** 
  75:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  76:../../../os/oslib/src/chmboxes.c **** /* Module exported functions.                                                */
  77:../../../os/oslib/src/chmboxes.c **** /*===========================================================================*/
  78:../../../os/oslib/src/chmboxes.c **** 
  79:../../../os/oslib/src/chmboxes.c **** /**
  80:../../../os/oslib/src/chmboxes.c ****  * @brief   Initializes a @p mailbox_t object.
  81:../../../os/oslib/src/chmboxes.c ****  *
  82:../../../os/oslib/src/chmboxes.c ****  * @param[out] mbp      pointer to the @p mailbox_t structure to be
  83:../../../os/oslib/src/chmboxes.c ****  *                      initialized
  84:../../../os/oslib/src/chmboxes.c ****  * @param[in] buf       pointer to the messages buffer as an array of @p msg_t
  85:../../../os/oslib/src/chmboxes.c ****  * @param[in] n         number of elements in the buffer array
  86:../../../os/oslib/src/chmboxes.c ****  *
  87:../../../os/oslib/src/chmboxes.c ****  * @init
  88:../../../os/oslib/src/chmboxes.c ****  */
  89:../../../os/oslib/src/chmboxes.c **** void chMBObjectInit(mailbox_t *mbp, msg_t *buf, size_t n) {
  16               		.loc 1 89 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 CF93      		push r28
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 28, -2
  23 0002 DF93      		push r29
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 29, -3
  27               	/* prologue: function */
  28               	/* frame size = 0 */
  29               	/* stack size = 2 */
  30               	.L__stack_usage = 2
  31 0004 EC01      		movw r28,r24
  90:../../../os/oslib/src/chmboxes.c **** 
  91:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (buf != NULL) && (n > (size_t)0));
  92:../../../os/oslib/src/chmboxes.c **** 
  93:../../../os/oslib/src/chmboxes.c ****   mbp->buffer = buf;
  32               		.loc 1 93 0
  33 0006 7983      		std Y+1,r23
  34 0008 6883      		st Y,r22
  94:../../../os/oslib/src/chmboxes.c ****   mbp->top    = &buf[n];
  35               		.loc 1 94 0
  36 000a 440F      		lsl r20
  37 000c 551F      		rol r21
  38               	.LVL1:
  39 000e 460F      		add r20,r22
  40 0010 571F      		adc r21,r23
  41 0012 5B83      		std Y+3,r21
  42 0014 4A83      		std Y+2,r20
  95:../../../os/oslib/src/chmboxes.c ****   mbp->rdptr  = buf;
  43               		.loc 1 95 0
  44 0016 7F83      		std Y+7,r23
  45 0018 6E83      		std Y+6,r22
  96:../../../os/oslib/src/chmboxes.c ****   mbp->wrptr  = buf;
  46               		.loc 1 96 0
  47 001a 7D83      		std Y+5,r23
  48 001c 6C83      		std Y+4,r22
  97:../../../os/oslib/src/chmboxes.c ****   mbp->cnt    = (size_t)0;
  49               		.loc 1 97 0
  50 001e 1986      		std Y+9,__zero_reg__
  51 0020 1886      		std Y+8,__zero_reg__
  98:../../../os/oslib/src/chmboxes.c ****   mbp->reset  = false;
  52               		.loc 1 98 0
  53 0022 1A86      		std Y+10,__zero_reg__
  99:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qw);
  54               		.loc 1 99 0
  55 0024 0B96      		adiw r24,11
  56               	.LVL2:
  57 0026 0E94 0000 		call chThdQueueObjectInit
  58               	.LVL3:
 100:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  59               		.loc 1 100 0
  60 002a CE01      		movw r24,r28
  61 002c 0F96      		adiw r24,15
  62               	/* epilogue start */
 101:../../../os/oslib/src/chmboxes.c **** }
  63               		.loc 1 101 0
  64 002e DF91      		pop r29
  65 0030 CF91      		pop r28
  66               	.LVL4:
 100:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectInit(&mbp->qr);
  67               		.loc 1 100 0
  68 0032 0C94 0000 		jmp chThdQueueObjectInit
  69               	.LVL5:
  70               		.cfi_endproc
  71               	.LFE193:
  73               		.section	.text.chMBObjectDispose,"ax",@progbits
  74               	.global	chMBObjectDispose
  76               	chMBObjectDispose:
  77               	.LFB194:
 102:../../../os/oslib/src/chmboxes.c **** 
 103:../../../os/oslib/src/chmboxes.c **** /**
 104:../../../os/oslib/src/chmboxes.c ****  * @brief   Disposes a @p mailbox_t object.
 105:../../../os/oslib/src/chmboxes.c ****  * @note    Objects disposing does not involve freeing memory but just
 106:../../../os/oslib/src/chmboxes.c ****  *          performing checks that make sure that the object is in a
 107:../../../os/oslib/src/chmboxes.c ****  *          state compatible with operations stop.
 108:../../../os/oslib/src/chmboxes.c ****  * @note    If the option @p CH_CFG_HARDENING_LEVEL is greater than zero then
 109:../../../os/oslib/src/chmboxes.c ****  *          the object is also cleared, attempts to use the object would likely
 110:../../../os/oslib/src/chmboxes.c ****  *          result in a clean memory access violation because dereferencing
 111:../../../os/oslib/src/chmboxes.c ****  *          of @p NULL pointers rather than dereferencing previously valid
 112:../../../os/oslib/src/chmboxes.c ****  *          pointers.
 113:../../../os/oslib/src/chmboxes.c ****  *
 114:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 115:../../../os/oslib/src/chmboxes.c ****  *
 116:../../../os/oslib/src/chmboxes.c ****  * @dispose
 117:../../../os/oslib/src/chmboxes.c ****  */
 118:../../../os/oslib/src/chmboxes.c **** void chMBObjectDispose(mailbox_t *mbp) {
  78               		.loc 1 118 0
  79               		.cfi_startproc
  80               	.LVL6:
  81 0000 CF93      		push r28
  82               	.LCFI2:
  83               		.cfi_def_cfa_offset 3
  84               		.cfi_offset 28, -2
  85 0002 DF93      		push r29
  86               	.LCFI3:
  87               		.cfi_def_cfa_offset 4
  88               		.cfi_offset 29, -3
  89               	/* prologue: function */
  90               	/* frame size = 0 */
  91               	/* stack size = 2 */
  92               	.L__stack_usage = 2
  93 0004 EC01      		movw r28,r24
 119:../../../os/oslib/src/chmboxes.c **** 
 120:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 121:../../../os/oslib/src/chmboxes.c **** 
 122:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectDispose(&mbp->qr);
  94               		.loc 1 122 0
  95 0006 0F96      		adiw r24,15
  96               	.LVL7:
  97 0008 0E94 0000 		call chThdQueueObjectDispose
  98               	.LVL8:
 123:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectDispose(&mbp->qw);
  99               		.loc 1 123 0
 100 000c CE01      		movw r24,r28
 101 000e 0B96      		adiw r24,11
 102               	/* epilogue start */
 124:../../../os/oslib/src/chmboxes.c **** 
 125:../../../os/oslib/src/chmboxes.c **** #if CH_CFG_HARDENING_LEVEL > 0
 126:../../../os/oslib/src/chmboxes.c ****   memset((void *)mbp, 0, __CH_OFFSETOF(mailbox_t, qr));
 127:../../../os/oslib/src/chmboxes.c **** #endif
 128:../../../os/oslib/src/chmboxes.c **** }
 103               		.loc 1 128 0
 104 0010 DF91      		pop r29
 105 0012 CF91      		pop r28
 106               	.LVL9:
 123:../../../os/oslib/src/chmboxes.c ****   chThdQueueObjectDispose(&mbp->qw);
 107               		.loc 1 123 0
 108 0014 0C94 0000 		jmp chThdQueueObjectDispose
 109               	.LVL10:
 110               		.cfi_endproc
 111               	.LFE194:
 113               		.section	.text.chMBResetI,"ax",@progbits
 114               	.global	chMBResetI
 116               	chMBResetI:
 117               	.LFB196:
 129:../../../os/oslib/src/chmboxes.c **** 
 130:../../../os/oslib/src/chmboxes.c **** /**
 131:../../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 132:../../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 133:../../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 134:../../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 135:../../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 136:../../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 137:../../../os/oslib/src/chmboxes.c ****  *
 138:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 139:../../../os/oslib/src/chmboxes.c ****  *
 140:../../../os/oslib/src/chmboxes.c ****  * @api
 141:../../../os/oslib/src/chmboxes.c ****  */
 142:../../../os/oslib/src/chmboxes.c **** void chMBReset(mailbox_t *mbp) {
 143:../../../os/oslib/src/chmboxes.c **** 
 144:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 145:../../../os/oslib/src/chmboxes.c ****   chMBResetI(mbp);
 146:../../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 147:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 148:../../../os/oslib/src/chmboxes.c **** }
 149:../../../os/oslib/src/chmboxes.c **** 
 150:../../../os/oslib/src/chmboxes.c **** /**
 151:../../../os/oslib/src/chmboxes.c ****  * @brief   Resets a @p mailbox_t object.
 152:../../../os/oslib/src/chmboxes.c ****  * @details All the waiting threads are resumed with status @p MSG_RESET and
 153:../../../os/oslib/src/chmboxes.c ****  *          the queued messages are lost.
 154:../../../os/oslib/src/chmboxes.c ****  * @post    The mailbox is in reset state, all operations will fail and
 155:../../../os/oslib/src/chmboxes.c ****  *          return @p MSG_RESET until the mailbox is enabled again using
 156:../../../os/oslib/src/chmboxes.c ****  *          @p chMBResumeX().
 157:../../../os/oslib/src/chmboxes.c ****  *
 158:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 159:../../../os/oslib/src/chmboxes.c ****  *
 160:../../../os/oslib/src/chmboxes.c ****  * @api
 161:../../../os/oslib/src/chmboxes.c ****  */
 162:../../../os/oslib/src/chmboxes.c **** void chMBResetI(mailbox_t *mbp) {
 118               		.loc 1 162 0
 119               		.cfi_startproc
 120               	.LVL11:
 121 0000 CF93      		push r28
 122               	.LCFI4:
 123               		.cfi_def_cfa_offset 3
 124               		.cfi_offset 28, -2
 125 0002 DF93      		push r29
 126               	.LCFI5:
 127               		.cfi_def_cfa_offset 4
 128               		.cfi_offset 29, -3
 129               	/* prologue: function */
 130               	/* frame size = 0 */
 131               	/* stack size = 2 */
 132               	.L__stack_usage = 2
 133 0004 EC01      		movw r28,r24
 163:../../../os/oslib/src/chmboxes.c **** 
 164:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 165:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 166:../../../os/oslib/src/chmboxes.c **** 
 167:../../../os/oslib/src/chmboxes.c ****   mbp->wrptr = mbp->buffer;
 134               		.loc 1 167 0
 135 0006 8881      		ld r24,Y
 136 0008 9981      		ldd r25,Y+1
 137               	.LVL12:
 138 000a 9D83      		std Y+5,r25
 139 000c 8C83      		std Y+4,r24
 168:../../../os/oslib/src/chmboxes.c ****   mbp->rdptr = mbp->buffer;
 140               		.loc 1 168 0
 141 000e 9F83      		std Y+7,r25
 142 0010 8E83      		std Y+6,r24
 169:../../../os/oslib/src/chmboxes.c ****   mbp->cnt   = (size_t)0;
 143               		.loc 1 169 0
 144 0012 1986      		std Y+9,__zero_reg__
 145 0014 1886      		std Y+8,__zero_reg__
 170:../../../os/oslib/src/chmboxes.c ****   mbp->reset = true;
 146               		.loc 1 170 0
 147 0016 81E0      		ldi r24,lo8(1)
 148 0018 8A87      		std Y+10,r24
 171:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qw, MSG_RESET);
 149               		.loc 1 171 0
 150 001a 6EEF      		ldi r22,lo8(-2)
 151 001c 7FEF      		ldi r23,lo8(-1)
 152 001e CE01      		movw r24,r28
 153 0020 0B96      		adiw r24,11
 154 0022 0E94 0000 		call chThdDequeueAllI
 155               	.LVL13:
 172:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 156               		.loc 1 172 0
 157 0026 6EEF      		ldi r22,lo8(-2)
 158 0028 7FEF      		ldi r23,lo8(-1)
 159 002a CE01      		movw r24,r28
 160 002c 0F96      		adiw r24,15
 161               	/* epilogue start */
 173:../../../os/oslib/src/chmboxes.c **** }
 162               		.loc 1 173 0
 163 002e DF91      		pop r29
 164 0030 CF91      		pop r28
 165               	.LVL14:
 172:../../../os/oslib/src/chmboxes.c ****   chThdDequeueAllI(&mbp->qr, MSG_RESET);
 166               		.loc 1 172 0
 167 0032 0C94 0000 		jmp chThdDequeueAllI
 168               	.LVL15:
 169               		.cfi_endproc
 170               	.LFE196:
 172               		.section	.text.chMBReset,"ax",@progbits
 173               	.global	chMBReset
 175               	chMBReset:
 176               	.LFB195:
 142:../../../os/oslib/src/chmboxes.c **** 
 177               		.loc 1 142 0
 178               		.cfi_startproc
 179               	.LVL16:
 180               	/* prologue: function */
 181               	/* frame size = 0 */
 182               	/* stack size = 0 */
 183               	.L__stack_usage = 0
 184               	.LBB72:
 185               	.LBB73:
 186               	.LBB74:
 187               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 188               		.loc 2 430 0
 189               	/* #APP */
 190               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 191 0000 F894      		cli
 192               	 ;  0 "" 2
 193               	/* #NOAPP */
 194               	.LBE74:
 195               	.LBE73:
 196               	.LBE72:
 145:../../../os/oslib/src/chmboxes.c ****   chSchRescheduleS();
 197               		.loc 1 145 0
 198 0002 0E94 0000 		call chMBResetI
 199               	.LVL17:
 146:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 200               		.loc 1 146 0
 201 0006 0E94 0000 		call chSchRescheduleS
 202               	.LVL18:
 203               	.LBB75:
 204               	.LBB76:
 205               	.LBB77:
 206               	.LBB78:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 207               		.loc 2 440 0
 208               	/* #APP */
 209               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 210 000a 7894      		sei
 211               	 ;  0 "" 2
 212               	/* #NOAPP */
 213 000c 0895      		ret
 214               	.LBE78:
 215               	.LBE77:
 216               	.LBE76:
 217               	.LBE75:
 218               		.cfi_endproc
 219               	.LFE195:
 221               		.section	.text.chMBPostTimeoutS,"ax",@progbits
 222               	.global	chMBPostTimeoutS
 224               	chMBPostTimeoutS:
 225               	.LFB198:
 174:../../../os/oslib/src/chmboxes.c **** 
 175:../../../os/oslib/src/chmboxes.c **** /**
 176:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 177:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 178:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 179:../../../os/oslib/src/chmboxes.c ****  *
 180:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 181:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 182:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   number of ticks before the operation timeouts,
 183:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 184:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 185:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 186:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 187:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 188:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 189:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 190:../../../os/oslib/src/chmboxes.c ****  *
 191:../../../os/oslib/src/chmboxes.c ****  * @api
 192:../../../os/oslib/src/chmboxes.c ****  */
 193:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 194:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 195:../../../os/oslib/src/chmboxes.c **** 
 196:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 197:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostTimeoutS(mbp, msg, timeout);
 198:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 199:../../../os/oslib/src/chmboxes.c **** 
 200:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 201:../../../os/oslib/src/chmboxes.c **** }
 202:../../../os/oslib/src/chmboxes.c **** 
 203:../../../os/oslib/src/chmboxes.c **** /**
 204:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 205:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 206:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 207:../../../os/oslib/src/chmboxes.c ****  *
 208:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 209:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 210:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   number of ticks before the operation timeouts,
 211:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 212:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 213:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 214:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 215:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 216:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 217:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 218:../../../os/oslib/src/chmboxes.c ****  *
 219:../../../os/oslib/src/chmboxes.c ****  * @sclass
 220:../../../os/oslib/src/chmboxes.c ****  */
 221:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 226               		.loc 1 221 0
 227               		.cfi_startproc
 228               	.LVL19:
 229 0000 CF92      		push r12
 230               	.LCFI6:
 231               		.cfi_def_cfa_offset 3
 232               		.cfi_offset 12, -2
 233 0002 DF92      		push r13
 234               	.LCFI7:
 235               		.cfi_def_cfa_offset 4
 236               		.cfi_offset 13, -3
 237 0004 EF92      		push r14
 238               	.LCFI8:
 239               		.cfi_def_cfa_offset 5
 240               		.cfi_offset 14, -4
 241 0006 FF92      		push r15
 242               	.LCFI9:
 243               		.cfi_def_cfa_offset 6
 244               		.cfi_offset 15, -5
 245 0008 0F93      		push r16
 246               	.LCFI10:
 247               		.cfi_def_cfa_offset 7
 248               		.cfi_offset 16, -6
 249 000a 1F93      		push r17
 250               	.LCFI11:
 251               		.cfi_def_cfa_offset 8
 252               		.cfi_offset 17, -7
 253 000c CF93      		push r28
 254               	.LCFI12:
 255               		.cfi_def_cfa_offset 9
 256               		.cfi_offset 28, -8
 257 000e DF93      		push r29
 258               	.LCFI13:
 259               		.cfi_def_cfa_offset 10
 260               		.cfi_offset 29, -9
 261               	/* prologue: function */
 262               	/* frame size = 0 */
 263               	/* stack size = 8 */
 264               	.L__stack_usage = 8
 265 0010 EC01      		movw r28,r24
 266 0012 6B01      		movw r12,r22
 267 0014 7A01      		movw r14,r20
 222:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 223:../../../os/oslib/src/chmboxes.c **** 
 224:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 225:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 226:../../../os/oslib/src/chmboxes.c **** 
 227:../../../os/oslib/src/chmboxes.c ****   do {
 228:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 229:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 230:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 231:../../../os/oslib/src/chmboxes.c ****     }
 232:../../../os/oslib/src/chmboxes.c **** 
 233:../../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 234:../../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 235:../../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 236:../../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 237:../../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 238:../../../os/oslib/src/chmboxes.c ****       }
 239:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 240:../../../os/oslib/src/chmboxes.c **** 
 241:../../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 242:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 243:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 244:../../../os/oslib/src/chmboxes.c **** 
 245:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 246:../../../os/oslib/src/chmboxes.c ****     }
 247:../../../os/oslib/src/chmboxes.c **** 
 248:../../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 249:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 268               		.loc 1 249 0
 269 0016 8C01      		movw r16,r24
 270 0018 055F      		subi r16,-11
 271 001a 1F4F      		sbci r17,-1
 272 001c 00C0      		rjmp .L9
 273               	.LVL20:
 274               	.L15:
 275 001e 4881      		ld r20,Y
 276 0020 5981      		ldd r21,Y+1
 277 0022 2A81      		ldd r18,Y+2
 278 0024 3B81      		ldd r19,Y+3
 279               	.LVL21:
 234:../../../os/oslib/src/chmboxes.c ****       *mbp->wrptr++ = msg;
 280               		.loc 1 234 0
 281 0026 C901      		movw r24,r18
 282 0028 841B      		sub r24,r20
 283 002a 950B      		sbc r25,r21
 284 002c 9595      		asr r25
 285 002e 8795      		ror r24
 286 0030 6885      		ldd r22,Y+8
 287 0032 7985      		ldd r23,Y+9
 288 0034 8617      		cp r24,r22
 289 0036 9707      		cpc r25,r23
 290 0038 01F4      		brne .L14
 291               		.loc 1 249 0
 292 003a B701      		movw r22,r14
 293 003c C801      		movw r24,r16
 294 003e 0E94 0000 		call chThdEnqueueTimeoutS
 295               	.LVL22:
 250:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 296               		.loc 1 250 0
 297 0042 0097      		sbiw r24,0
 298 0044 01F4      		brne .L6
 299               	.LVL23:
 300               	.L9:
 229:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 301               		.loc 1 229 0
 302 0046 8A85      		ldd r24,Y+10
 303 0048 8823      		tst r24
 304 004a 01F0      		breq .L15
 230:../../../os/oslib/src/chmboxes.c ****     }
 305               		.loc 1 230 0
 306 004c 8EEF      		ldi r24,lo8(-2)
 307 004e 9FEF      		ldi r25,lo8(-1)
 308               	.L6:
 309               	/* epilogue start */
 251:../../../os/oslib/src/chmboxes.c **** 
 252:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 253:../../../os/oslib/src/chmboxes.c **** }
 310               		.loc 1 253 0
 311 0050 DF91      		pop r29
 312 0052 CF91      		pop r28
 313               	.LVL24:
 314 0054 1F91      		pop r17
 315 0056 0F91      		pop r16
 316               	.LVL25:
 317 0058 FF90      		pop r15
 318 005a EF90      		pop r14
 319               	.LVL26:
 320 005c DF90      		pop r13
 321 005e CF90      		pop r12
 322               	.LVL27:
 323 0060 0895      		ret
 324               	.LVL28:
 325               	.L14:
 235:../../../os/oslib/src/chmboxes.c ****       if (mbp->wrptr >= mbp->top) {
 326               		.loc 1 235 0
 327 0062 EC81      		ldd r30,Y+4
 328 0064 FD81      		ldd r31,Y+5
 329 0066 CF01      		movw r24,r30
 330 0068 0296      		adiw r24,2
 331 006a 9D83      		std Y+5,r25
 332 006c 8C83      		std Y+4,r24
 333 006e D182      		std Z+1,r13
 334 0070 C082      		st Z,r12
 236:../../../os/oslib/src/chmboxes.c ****         mbp->wrptr = mbp->buffer;
 335               		.loc 1 236 0
 336 0072 8217      		cp r24,r18
 337 0074 9307      		cpc r25,r19
 338 0076 00F0      		brlo .L8
 237:../../../os/oslib/src/chmboxes.c ****       }
 339               		.loc 1 237 0
 340 0078 5D83      		std Y+5,r21
 341 007a 4C83      		std Y+4,r20
 342               	.L8:
 343               	.LVL29:
 344               	.LBB89:
 345               	.LBB90:
 239:../../../os/oslib/src/chmboxes.c **** 
 346               		.loc 1 239 0
 347 007c 8885      		ldd r24,Y+8
 348 007e 9985      		ldd r25,Y+9
 349 0080 0196      		adiw r24,1
 350 0082 9987      		std Y+9,r25
 351 0084 8887      		std Y+8,r24
 242:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 352               		.loc 1 242 0
 353 0086 60E0      		ldi r22,0
 354 0088 70E0      		ldi r23,0
 355 008a CE01      		movw r24,r28
 356 008c 0F96      		adiw r24,15
 357 008e 0E94 0000 		call chThdDequeueNextI
 358               	.LVL30:
 243:../../../os/oslib/src/chmboxes.c **** 
 359               		.loc 1 243 0
 360 0092 0E94 0000 		call chSchRescheduleS
 361               	.LVL31:
 362 0096 80E0      		ldi r24,0
 363 0098 90E0      		ldi r25,0
 364 009a 00C0      		rjmp .L6
 365               	.LBE90:
 366               	.LBE89:
 367               		.cfi_endproc
 368               	.LFE198:
 370               		.section	.text.chMBPostTimeout,"ax",@progbits
 371               	.global	chMBPostTimeout
 373               	chMBPostTimeout:
 374               	.LFB197:
 193:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 375               		.loc 1 193 0
 376               		.cfi_startproc
 377               	.LVL32:
 378               	/* prologue: function */
 379               	/* frame size = 0 */
 380               	/* stack size = 0 */
 381               	.L__stack_usage = 0
 382               	.LBB91:
 383               	.LBB92:
 384               	.LBB93:
 430:../../../os/common/ports/AVR/chcore.h **** }
 385               		.loc 2 430 0
 386               	/* #APP */
 387               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 388 0000 F894      		cli
 389               	 ;  0 "" 2
 390               	/* #NOAPP */
 391               	.LBE93:
 392               	.LBE92:
 393               	.LBE91:
 197:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 394               		.loc 1 197 0
 395 0002 0E94 0000 		call chMBPostTimeoutS
 396               	.LVL33:
 397               	.LBB94:
 398               	.LBB95:
 399               	.LBB96:
 400               	.LBB97:
 401               		.loc 2 440 0
 402               	/* #APP */
 403               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 404 0006 7894      		sei
 405               	 ;  0 "" 2
 406               	/* #NOAPP */
 407               	.LBE97:
 408               	.LBE96:
 409               	.LBE95:
 410               	.LBE94:
 201:../../../os/oslib/src/chmboxes.c **** 
 411               		.loc 1 201 0
 412 0008 0895      		ret
 413               		.cfi_endproc
 414               	.LFE197:
 416               		.section	.text.chMBPostI,"ax",@progbits
 417               	.global	chMBPostI
 419               	chMBPostI:
 420               	.LFB199:
 254:../../../os/oslib/src/chmboxes.c **** 
 255:../../../os/oslib/src/chmboxes.c **** /**
 256:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts a message into a mailbox.
 257:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 258:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 259:../../../os/oslib/src/chmboxes.c ****  *
 260:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 261:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 262:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 263:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 264:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 265:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 266:../../../os/oslib/src/chmboxes.c ****  *                      posted.
 267:../../../os/oslib/src/chmboxes.c ****  *
 268:../../../os/oslib/src/chmboxes.c ****  * @iclass
 269:../../../os/oslib/src/chmboxes.c ****  */
 270:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostI(mailbox_t *mbp, msg_t msg) {
 421               		.loc 1 270 0
 422               		.cfi_startproc
 423               	.LVL34:
 424               	/* prologue: function */
 425               	/* frame size = 0 */
 426               	/* stack size = 0 */
 427               	.L__stack_usage = 0
 428 0000 FC01      		movw r30,r24
 271:../../../os/oslib/src/chmboxes.c **** 
 272:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 273:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 274:../../../os/oslib/src/chmboxes.c **** 
 275:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 276:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 429               		.loc 1 276 0
 430 0002 8285      		ldd r24,Z+10
 431               	.LVL35:
 432 0004 8111      		cpse r24,__zero_reg__
 433 0006 00C0      		rjmp .L20
 434               	.LVL36:
 435 0008 4081      		ld r20,Z
 436 000a 5181      		ldd r21,Z+1
 437 000c 2281      		ldd r18,Z+2
 438 000e 3381      		ldd r19,Z+3
 439               	.LVL37:
 277:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 278:../../../os/oslib/src/chmboxes.c ****   }
 279:../../../os/oslib/src/chmboxes.c **** 
 280:../../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 281:../../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 440               		.loc 1 281 0
 441 0010 C901      		movw r24,r18
 442 0012 841B      		sub r24,r20
 443 0014 950B      		sbc r25,r21
 444 0016 9595      		asr r25
 445 0018 8795      		ror r24
 446 001a A085      		ldd r26,Z+8
 447 001c B185      		ldd r27,Z+9
 448 001e 8A17      		cp r24,r26
 449 0020 9B07      		cpc r25,r27
 450 0022 01F0      		breq .L21
 282:../../../os/oslib/src/chmboxes.c ****     *mbp->wrptr++ = msg;
 451               		.loc 1 282 0
 452 0024 A481      		ldd r26,Z+4
 453 0026 B581      		ldd r27,Z+5
 454 0028 CD01      		movw r24,r26
 455 002a 0296      		adiw r24,2
 456 002c 9583      		std Z+5,r25
 457 002e 8483      		std Z+4,r24
 458 0030 6D93      		st X+,r22
 459 0032 7C93      		st X,r23
 283:../../../os/oslib/src/chmboxes.c ****     if (mbp->wrptr >= mbp->top) {
 460               		.loc 1 283 0
 461 0034 8217      		cp r24,r18
 462 0036 9307      		cpc r25,r19
 463 0038 00F0      		brlo .L19
 284:../../../os/oslib/src/chmboxes.c ****       mbp->wrptr = mbp->buffer;
 464               		.loc 1 284 0
 465 003a 5583      		std Z+5,r21
 466 003c 4483      		std Z+4,r20
 467               	.L19:
 285:../../../os/oslib/src/chmboxes.c ****     }
 286:../../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 468               		.loc 1 286 0
 469 003e 8085      		ldd r24,Z+8
 470 0040 9185      		ldd r25,Z+9
 471 0042 0196      		adiw r24,1
 472 0044 9187      		std Z+9,r25
 473 0046 8087      		std Z+8,r24
 287:../../../os/oslib/src/chmboxes.c **** 
 288:../../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 289:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 474               		.loc 1 289 0
 475 0048 60E0      		ldi r22,0
 476 004a 70E0      		ldi r23,0
 477               	.LVL38:
 478 004c CF01      		movw r24,r30
 479 004e 0F96      		adiw r24,15
 480 0050 0E94 0000 		call chThdDequeueNextI
 481               	.LVL39:
 290:../../../os/oslib/src/chmboxes.c **** 
 291:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 482               		.loc 1 291 0
 483 0054 80E0      		ldi r24,0
 484 0056 90E0      		ldi r25,0
 485 0058 0895      		ret
 486               	.LVL40:
 487               	.L20:
 277:../../../os/oslib/src/chmboxes.c ****   }
 488               		.loc 1 277 0
 489 005a 8EEF      		ldi r24,lo8(-2)
 490 005c 9FEF      		ldi r25,lo8(-1)
 491 005e 0895      		ret
 492               	.LVL41:
 493               	.L21:
 292:../../../os/oslib/src/chmboxes.c ****   }
 293:../../../os/oslib/src/chmboxes.c **** 
 294:../../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 295:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 494               		.loc 1 295 0
 495 0060 8FEF      		ldi r24,lo8(-1)
 496 0062 9FEF      		ldi r25,lo8(-1)
 296:../../../os/oslib/src/chmboxes.c **** }
 497               		.loc 1 296 0
 498 0064 0895      		ret
 499               		.cfi_endproc
 500               	.LFE199:
 502               		.section	.text.chMBPostAheadTimeoutS,"ax",@progbits
 503               	.global	chMBPostAheadTimeoutS
 505               	chMBPostAheadTimeoutS:
 506               	.LFB201:
 297:../../../os/oslib/src/chmboxes.c **** 
 298:../../../os/oslib/src/chmboxes.c **** /**
 299:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 300:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 301:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 302:../../../os/oslib/src/chmboxes.c ****  *
 303:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 304:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 305:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   number of ticks before the operation timeouts,
 306:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 307:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 308:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 309:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 310:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 311:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 312:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 313:../../../os/oslib/src/chmboxes.c ****  *
 314:../../../os/oslib/src/chmboxes.c ****  * @api
 315:../../../os/oslib/src/chmboxes.c ****  */
 316:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeout(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 317:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 318:../../../os/oslib/src/chmboxes.c **** 
 319:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 320:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBPostAheadTimeoutS(mbp, msg, timeout);
 321:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 322:../../../os/oslib/src/chmboxes.c **** 
 323:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 324:../../../os/oslib/src/chmboxes.c **** }
 325:../../../os/oslib/src/chmboxes.c **** 
 326:../../../os/oslib/src/chmboxes.c **** /**
 327:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 328:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a empty slot in the mailbox becomes
 329:../../../os/oslib/src/chmboxes.c ****  *          available or the specified time runs out.
 330:../../../os/oslib/src/chmboxes.c ****  *
 331:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 332:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 333:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   number of ticks before the operation timeouts,
 334:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 335:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 336:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 337:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 338:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 339:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 340:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 341:../../../os/oslib/src/chmboxes.c ****  *
 342:../../../os/oslib/src/chmboxes.c ****  * @sclass
 343:../../../os/oslib/src/chmboxes.c ****  */
 344:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadTimeoutS(mailbox_t *mbp, msg_t msg, sysinterval_t timeout) {
 507               		.loc 1 344 0
 508               		.cfi_startproc
 509               	.LVL42:
 510 0000 CF92      		push r12
 511               	.LCFI14:
 512               		.cfi_def_cfa_offset 3
 513               		.cfi_offset 12, -2
 514 0002 DF92      		push r13
 515               	.LCFI15:
 516               		.cfi_def_cfa_offset 4
 517               		.cfi_offset 13, -3
 518 0004 EF92      		push r14
 519               	.LCFI16:
 520               		.cfi_def_cfa_offset 5
 521               		.cfi_offset 14, -4
 522 0006 FF92      		push r15
 523               	.LCFI17:
 524               		.cfi_def_cfa_offset 6
 525               		.cfi_offset 15, -5
 526 0008 0F93      		push r16
 527               	.LCFI18:
 528               		.cfi_def_cfa_offset 7
 529               		.cfi_offset 16, -6
 530 000a 1F93      		push r17
 531               	.LCFI19:
 532               		.cfi_def_cfa_offset 8
 533               		.cfi_offset 17, -7
 534 000c CF93      		push r28
 535               	.LCFI20:
 536               		.cfi_def_cfa_offset 9
 537               		.cfi_offset 28, -8
 538 000e DF93      		push r29
 539               	.LCFI21:
 540               		.cfi_def_cfa_offset 10
 541               		.cfi_offset 29, -9
 542               	/* prologue: function */
 543               	/* frame size = 0 */
 544               	/* stack size = 8 */
 545               	.L__stack_usage = 8
 546 0010 EC01      		movw r28,r24
 547 0012 6B01      		movw r12,r22
 548 0014 7A01      		movw r14,r20
 345:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 346:../../../os/oslib/src/chmboxes.c **** 
 347:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 348:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 349:../../../os/oslib/src/chmboxes.c **** 
 350:../../../os/oslib/src/chmboxes.c ****   do {
 351:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 352:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 353:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 354:../../../os/oslib/src/chmboxes.c ****     }
 355:../../../os/oslib/src/chmboxes.c **** 
 356:../../../os/oslib/src/chmboxes.c ****     /* Is there a free message slot in queue? if so then post.*/
 357:../../../os/oslib/src/chmboxes.c ****     if (chMBGetFreeCountI(mbp) > (size_t)0) {
 358:../../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 359:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 360:../../../os/oslib/src/chmboxes.c ****       }
 361:../../../os/oslib/src/chmboxes.c ****       *mbp->rdptr = msg;
 362:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 363:../../../os/oslib/src/chmboxes.c **** 
 364:../../../os/oslib/src/chmboxes.c ****       /* If there is a reader waiting then makes it ready.*/
 365:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qr, MSG_OK);
 366:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 367:../../../os/oslib/src/chmboxes.c **** 
 368:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 369:../../../os/oslib/src/chmboxes.c ****     }
 370:../../../os/oslib/src/chmboxes.c **** 
 371:../../../os/oslib/src/chmboxes.c ****     /* No space in the queue, waiting for a slot to become available.*/
 372:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qw, timeout);
 549               		.loc 1 372 0
 550 0016 8C01      		movw r16,r24
 551 0018 055F      		subi r16,-11
 552 001a 1F4F      		sbci r17,-1
 553 001c 00C0      		rjmp .L27
 554               	.LVL43:
 555               	.L33:
 556 001e 2881      		ld r18,Y
 557 0020 3981      		ldd r19,Y+1
 558 0022 4A81      		ldd r20,Y+2
 559 0024 5B81      		ldd r21,Y+3
 560               	.LVL44:
 357:../../../os/oslib/src/chmboxes.c ****       if (--mbp->rdptr < mbp->buffer) {
 561               		.loc 1 357 0
 562 0026 CA01      		movw r24,r20
 563 0028 821B      		sub r24,r18
 564 002a 930B      		sbc r25,r19
 565 002c 9595      		asr r25
 566 002e 8795      		ror r24
 567 0030 6885      		ldd r22,Y+8
 568 0032 7985      		ldd r23,Y+9
 569 0034 8617      		cp r24,r22
 570 0036 9707      		cpc r25,r23
 571 0038 01F4      		brne .L32
 572               		.loc 1 372 0
 573 003a B701      		movw r22,r14
 574 003c C801      		movw r24,r16
 575 003e 0E94 0000 		call chThdEnqueueTimeoutS
 576               	.LVL45:
 373:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 577               		.loc 1 373 0
 578 0042 0097      		sbiw r24,0
 579 0044 01F4      		brne .L23
 580               	.LVL46:
 581               	.L27:
 352:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 582               		.loc 1 352 0
 583 0046 8A85      		ldd r24,Y+10
 584 0048 8823      		tst r24
 585 004a 01F0      		breq .L33
 353:../../../os/oslib/src/chmboxes.c ****     }
 586               		.loc 1 353 0
 587 004c 8EEF      		ldi r24,lo8(-2)
 588 004e 9FEF      		ldi r25,lo8(-1)
 589               	.L23:
 590               	/* epilogue start */
 374:../../../os/oslib/src/chmboxes.c **** 
 375:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 376:../../../os/oslib/src/chmboxes.c **** }
 591               		.loc 1 376 0
 592 0050 DF91      		pop r29
 593 0052 CF91      		pop r28
 594               	.LVL47:
 595 0054 1F91      		pop r17
 596 0056 0F91      		pop r16
 597               	.LVL48:
 598 0058 FF90      		pop r15
 599 005a EF90      		pop r14
 600               	.LVL49:
 601 005c DF90      		pop r13
 602 005e CF90      		pop r12
 603               	.LVL50:
 604 0060 0895      		ret
 605               	.LVL51:
 606               	.L32:
 358:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->top - 1;
 607               		.loc 1 358 0
 608 0062 EE81      		ldd r30,Y+6
 609 0064 FF81      		ldd r31,Y+7
 610 0066 3297      		sbiw r30,2
 611 0068 E217      		cp r30,r18
 612 006a F307      		cpc r31,r19
 613 006c 00F4      		brsh .L31
 359:../../../os/oslib/src/chmboxes.c ****       }
 614               		.loc 1 359 0
 615 006e FA01      		movw r30,r20
 616 0070 3297      		sbiw r30,2
 617               	.L31:
 618 0072 FF83      		std Y+7,r31
 619 0074 EE83      		std Y+6,r30
 620               	.LVL52:
 621               	.LBB108:
 622               	.LBB109:
 361:../../../os/oslib/src/chmboxes.c ****       mbp->cnt++;
 623               		.loc 1 361 0
 624 0076 D182      		std Z+1,r13
 625 0078 C082      		st Z,r12
 362:../../../os/oslib/src/chmboxes.c **** 
 626               		.loc 1 362 0
 627 007a 8885      		ldd r24,Y+8
 628 007c 9985      		ldd r25,Y+9
 629 007e 0196      		adiw r24,1
 630 0080 9987      		std Y+9,r25
 631 0082 8887      		std Y+8,r24
 365:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 632               		.loc 1 365 0
 633 0084 60E0      		ldi r22,0
 634 0086 70E0      		ldi r23,0
 635 0088 CE01      		movw r24,r28
 636 008a 0F96      		adiw r24,15
 637 008c 0E94 0000 		call chThdDequeueNextI
 638               	.LVL53:
 366:../../../os/oslib/src/chmboxes.c **** 
 639               		.loc 1 366 0
 640 0090 0E94 0000 		call chSchRescheduleS
 641               	.LVL54:
 642 0094 80E0      		ldi r24,0
 643 0096 90E0      		ldi r25,0
 644 0098 00C0      		rjmp .L23
 645               	.LBE109:
 646               	.LBE108:
 647               		.cfi_endproc
 648               	.LFE201:
 650               		.section	.text.chMBPostAheadTimeout,"ax",@progbits
 651               	.global	chMBPostAheadTimeout
 653               	chMBPostAheadTimeout:
 654               	.LFB200:
 316:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 655               		.loc 1 316 0
 656               		.cfi_startproc
 657               	.LVL55:
 658               	/* prologue: function */
 659               	/* frame size = 0 */
 660               	/* stack size = 0 */
 661               	.L__stack_usage = 0
 662               	.LBB110:
 663               	.LBB111:
 664               	.LBB112:
 430:../../../os/common/ports/AVR/chcore.h **** }
 665               		.loc 2 430 0
 666               	/* #APP */
 667               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 668 0000 F894      		cli
 669               	 ;  0 "" 2
 670               	/* #NOAPP */
 671               	.LBE112:
 672               	.LBE111:
 673               	.LBE110:
 320:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 674               		.loc 1 320 0
 675 0002 0E94 0000 		call chMBPostAheadTimeoutS
 676               	.LVL56:
 677               	.LBB113:
 678               	.LBB114:
 679               	.LBB115:
 680               	.LBB116:
 681               		.loc 2 440 0
 682               	/* #APP */
 683               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 684 0006 7894      		sei
 685               	 ;  0 "" 2
 686               	/* #NOAPP */
 687               	.LBE116:
 688               	.LBE115:
 689               	.LBE114:
 690               	.LBE113:
 324:../../../os/oslib/src/chmboxes.c **** 
 691               		.loc 1 324 0
 692 0008 0895      		ret
 693               		.cfi_endproc
 694               	.LFE200:
 696               		.section	.text.chMBPostAheadI,"ax",@progbits
 697               	.global	chMBPostAheadI
 699               	chMBPostAheadI:
 700               	.LFB202:
 377:../../../os/oslib/src/chmboxes.c **** 
 378:../../../os/oslib/src/chmboxes.c **** /**
 379:../../../os/oslib/src/chmboxes.c ****  * @brief   Posts an high priority message into a mailbox.
 380:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 381:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is full.
 382:../../../os/oslib/src/chmboxes.c ****  *
 383:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 384:../../../os/oslib/src/chmboxes.c ****  * @param[in] msg       message to be posted on the mailbox
 385:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 386:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly posted.
 387:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 388:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is full and the message cannot be
 389:../../../os/oslib/src/chmboxes.c ****  *                      posted.
 390:../../../os/oslib/src/chmboxes.c ****  *
 391:../../../os/oslib/src/chmboxes.c ****  * @iclass
 392:../../../os/oslib/src/chmboxes.c ****  */
 393:../../../os/oslib/src/chmboxes.c **** msg_t chMBPostAheadI(mailbox_t *mbp, msg_t msg) {
 701               		.loc 1 393 0
 702               		.cfi_startproc
 703               	.LVL57:
 704               	/* prologue: function */
 705               	/* frame size = 0 */
 706               	/* stack size = 0 */
 707               	.L__stack_usage = 0
 708 0000 FC01      		movw r30,r24
 394:../../../os/oslib/src/chmboxes.c **** 
 395:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 396:../../../os/oslib/src/chmboxes.c ****   chDbgCheck(mbp != NULL);
 397:../../../os/oslib/src/chmboxes.c **** 
 398:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 399:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 709               		.loc 1 399 0
 710 0002 8285      		ldd r24,Z+10
 711               	.LVL58:
 712 0004 8111      		cpse r24,__zero_reg__
 713 0006 00C0      		rjmp .L39
 714               	.LVL59:
 715 0008 2081      		ld r18,Z
 716 000a 3181      		ldd r19,Z+1
 717 000c 4281      		ldd r20,Z+2
 718 000e 5381      		ldd r21,Z+3
 719               	.LVL60:
 400:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 401:../../../os/oslib/src/chmboxes.c ****   }
 402:../../../os/oslib/src/chmboxes.c **** 
 403:../../../os/oslib/src/chmboxes.c ****   /* Is there a free message slot in queue? if so then post.*/
 404:../../../os/oslib/src/chmboxes.c ****   if (chMBGetFreeCountI(mbp) > (size_t)0) {
 720               		.loc 1 404 0
 721 0010 CA01      		movw r24,r20
 722 0012 821B      		sub r24,r18
 723 0014 930B      		sbc r25,r19
 724 0016 9595      		asr r25
 725 0018 8795      		ror r24
 726 001a A085      		ldd r26,Z+8
 727 001c B185      		ldd r27,Z+9
 728 001e 8A17      		cp r24,r26
 729 0020 9B07      		cpc r25,r27
 730 0022 01F0      		breq .L40
 405:../../../os/oslib/src/chmboxes.c ****     if (--mbp->rdptr < mbp->buffer) {
 731               		.loc 1 405 0
 732 0024 A681      		ldd r26,Z+6
 733 0026 B781      		ldd r27,Z+7
 734 0028 1297      		sbiw r26,2
 735 002a A217      		cp r26,r18
 736 002c B307      		cpc r27,r19
 737 002e 00F4      		brsh .L41
 406:../../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->top - 1;
 738               		.loc 1 406 0
 739 0030 DA01      		movw r26,r20
 740 0032 1297      		sbiw r26,2
 741               	.L41:
 742 0034 B783      		std Z+7,r27
 743 0036 A683      		std Z+6,r26
 407:../../../os/oslib/src/chmboxes.c ****     }
 408:../../../os/oslib/src/chmboxes.c ****     *mbp->rdptr = msg;
 744               		.loc 1 408 0
 745 0038 6D93      		st X+,r22
 746 003a 7C93      		st X,r23
 409:../../../os/oslib/src/chmboxes.c ****     mbp->cnt++;
 747               		.loc 1 409 0
 748 003c 8085      		ldd r24,Z+8
 749 003e 9185      		ldd r25,Z+9
 750 0040 0196      		adiw r24,1
 751 0042 9187      		std Z+9,r25
 752 0044 8087      		std Z+8,r24
 410:../../../os/oslib/src/chmboxes.c **** 
 411:../../../os/oslib/src/chmboxes.c ****     /* If there is a reader waiting then makes it ready.*/
 412:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qr, MSG_OK);
 753               		.loc 1 412 0
 754 0046 60E0      		ldi r22,0
 755 0048 70E0      		ldi r23,0
 756               	.LVL61:
 757 004a CF01      		movw r24,r30
 758 004c 0F96      		adiw r24,15
 759 004e 0E94 0000 		call chThdDequeueNextI
 760               	.LVL62:
 413:../../../os/oslib/src/chmboxes.c **** 
 414:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 761               		.loc 1 414 0
 762 0052 80E0      		ldi r24,0
 763 0054 90E0      		ldi r25,0
 764 0056 0895      		ret
 765               	.LVL63:
 766               	.L39:
 400:../../../os/oslib/src/chmboxes.c ****   }
 767               		.loc 1 400 0
 768 0058 8EEF      		ldi r24,lo8(-2)
 769 005a 9FEF      		ldi r25,lo8(-1)
 770 005c 0895      		ret
 771               	.LVL64:
 772               	.L40:
 415:../../../os/oslib/src/chmboxes.c ****   }
 416:../../../os/oslib/src/chmboxes.c **** 
 417:../../../os/oslib/src/chmboxes.c ****   /* No space, immediate timeout.*/
 418:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 773               		.loc 1 418 0
 774 005e 8FEF      		ldi r24,lo8(-1)
 775 0060 9FEF      		ldi r25,lo8(-1)
 419:../../../os/oslib/src/chmboxes.c **** }
 776               		.loc 1 419 0
 777 0062 0895      		ret
 778               		.cfi_endproc
 779               	.LFE202:
 781               		.section	.text.chMBFetchTimeoutS,"ax",@progbits
 782               	.global	chMBFetchTimeoutS
 784               	chMBFetchTimeoutS:
 785               	.LFB204:
 420:../../../os/oslib/src/chmboxes.c **** 
 421:../../../os/oslib/src/chmboxes.c **** /**
 422:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 423:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 424:../../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 425:../../../os/oslib/src/chmboxes.c ****  *
 426:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 427:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 428:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 429:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 430:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 431:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 432:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 433:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 434:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 435:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 436:../../../os/oslib/src/chmboxes.c ****  *
 437:../../../os/oslib/src/chmboxes.c ****  * @api
 438:../../../os/oslib/src/chmboxes.c ****  */
 439:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeout(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 440:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 441:../../../os/oslib/src/chmboxes.c **** 
 442:../../../os/oslib/src/chmboxes.c ****   chSysLock();
 443:../../../os/oslib/src/chmboxes.c ****   rdymsg = chMBFetchTimeoutS(mbp, msgp, timeout);
 444:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 445:../../../os/oslib/src/chmboxes.c **** 
 446:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 447:../../../os/oslib/src/chmboxes.c **** }
 448:../../../os/oslib/src/chmboxes.c **** 
 449:../../../os/oslib/src/chmboxes.c **** /**
 450:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 451:../../../os/oslib/src/chmboxes.c ****  * @details The invoking thread waits until a message is posted in the mailbox
 452:../../../os/oslib/src/chmboxes.c ****  *          or the specified time runs out.
 453:../../../os/oslib/src/chmboxes.c ****  *
 454:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 455:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 456:../../../os/oslib/src/chmboxes.c ****  * @param[in] timeout   number of ticks before the operation timeouts,
 457:../../../os/oslib/src/chmboxes.c ****  *                      the following special values are allowed:
 458:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 459:../../../os/oslib/src/chmboxes.c ****  *                      - @a TIME_INFINITE no timeout.
 460:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 461:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 462:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 463:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the operation has timed out.
 464:../../../os/oslib/src/chmboxes.c ****  *
 465:../../../os/oslib/src/chmboxes.c ****  * @sclass
 466:../../../os/oslib/src/chmboxes.c ****  */
 467:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchTimeoutS(mailbox_t *mbp, msg_t *msgp, sysinterval_t timeout) {
 786               		.loc 1 467 0
 787               		.cfi_startproc
 788               	.LVL65:
 789 0000 CF92      		push r12
 790               	.LCFI22:
 791               		.cfi_def_cfa_offset 3
 792               		.cfi_offset 12, -2
 793 0002 DF92      		push r13
 794               	.LCFI23:
 795               		.cfi_def_cfa_offset 4
 796               		.cfi_offset 13, -3
 797 0004 EF92      		push r14
 798               	.LCFI24:
 799               		.cfi_def_cfa_offset 5
 800               		.cfi_offset 14, -4
 801 0006 FF92      		push r15
 802               	.LCFI25:
 803               		.cfi_def_cfa_offset 6
 804               		.cfi_offset 15, -5
 805 0008 0F93      		push r16
 806               	.LCFI26:
 807               		.cfi_def_cfa_offset 7
 808               		.cfi_offset 16, -6
 809 000a 1F93      		push r17
 810               	.LCFI27:
 811               		.cfi_def_cfa_offset 8
 812               		.cfi_offset 17, -7
 813 000c CF93      		push r28
 814               	.LCFI28:
 815               		.cfi_def_cfa_offset 9
 816               		.cfi_offset 28, -8
 817 000e DF93      		push r29
 818               	.LCFI29:
 819               		.cfi_def_cfa_offset 10
 820               		.cfi_offset 29, -9
 821               	/* prologue: function */
 822               	/* frame size = 0 */
 823               	/* stack size = 8 */
 824               	.L__stack_usage = 8
 825 0010 EC01      		movw r28,r24
 826 0012 6B01      		movw r12,r22
 827 0014 7A01      		movw r14,r20
 468:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 469:../../../os/oslib/src/chmboxes.c **** 
 470:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassS();
 471:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 472:../../../os/oslib/src/chmboxes.c **** 
 473:../../../os/oslib/src/chmboxes.c ****   do {
 474:../../../os/oslib/src/chmboxes.c ****     /* If the mailbox is in reset state then returns immediately.*/
 475:../../../os/oslib/src/chmboxes.c ****     if (mbp->reset) {
 476:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 477:../../../os/oslib/src/chmboxes.c ****     }
 478:../../../os/oslib/src/chmboxes.c **** 
 479:../../../os/oslib/src/chmboxes.c ****     /* Is there a message in queue? if so then fetch.*/
 480:../../../os/oslib/src/chmboxes.c ****     if (chMBGetUsedCountI(mbp) > (size_t)0) {
 481:../../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 482:../../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 483:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 484:../../../os/oslib/src/chmboxes.c ****       }
 485:../../../os/oslib/src/chmboxes.c ****       mbp->cnt--;
 486:../../../os/oslib/src/chmboxes.c **** 
 487:../../../os/oslib/src/chmboxes.c ****       /* If there is a writer waiting then makes it ready.*/
 488:../../../os/oslib/src/chmboxes.c ****       chThdDequeueNextI(&mbp->qw, MSG_OK);
 489:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 490:../../../os/oslib/src/chmboxes.c **** 
 491:../../../os/oslib/src/chmboxes.c ****       return MSG_OK;
 492:../../../os/oslib/src/chmboxes.c ****     }
 493:../../../os/oslib/src/chmboxes.c **** 
 494:../../../os/oslib/src/chmboxes.c ****     /* No message in the queue, waiting for a message to become available.*/
 495:../../../os/oslib/src/chmboxes.c ****     rdymsg = chThdEnqueueTimeoutS(&mbp->qr, timeout);
 828               		.loc 1 495 0
 829 0016 8C01      		movw r16,r24
 830 0018 015F      		subi r16,-15
 831 001a 1F4F      		sbci r17,-1
 832 001c 00C0      		rjmp .L46
 833               	.LVL66:
 834               	.L51:
 480:../../../os/oslib/src/chmboxes.c ****       *msgp = *mbp->rdptr++;
 835               		.loc 1 480 0
 836 001e 8885      		ldd r24,Y+8
 837 0020 9985      		ldd r25,Y+9
 838 0022 892B      		or r24,r25
 839 0024 01F4      		brne .L50
 840               		.loc 1 495 0
 841 0026 B701      		movw r22,r14
 842 0028 C801      		movw r24,r16
 843 002a 0E94 0000 		call chThdEnqueueTimeoutS
 844               	.LVL67:
 496:../../../os/oslib/src/chmboxes.c ****   } while (rdymsg == MSG_OK);
 845               		.loc 1 496 0
 846 002e 0097      		sbiw r24,0
 847 0030 01F4      		brne .L43
 848               	.LVL68:
 849               	.L46:
 475:../../../os/oslib/src/chmboxes.c ****       return MSG_RESET;
 850               		.loc 1 475 0
 851 0032 8A85      		ldd r24,Y+10
 852 0034 8823      		tst r24
 853 0036 01F0      		breq .L51
 476:../../../os/oslib/src/chmboxes.c ****     }
 854               		.loc 1 476 0
 855 0038 8EEF      		ldi r24,lo8(-2)
 856 003a 9FEF      		ldi r25,lo8(-1)
 857               	.L43:
 858               	/* epilogue start */
 497:../../../os/oslib/src/chmboxes.c **** 
 498:../../../os/oslib/src/chmboxes.c ****   return rdymsg;
 499:../../../os/oslib/src/chmboxes.c **** }
 859               		.loc 1 499 0
 860 003c DF91      		pop r29
 861 003e CF91      		pop r28
 862               	.LVL69:
 863 0040 1F91      		pop r17
 864 0042 0F91      		pop r16
 865               	.LVL70:
 866 0044 FF90      		pop r15
 867 0046 EF90      		pop r14
 868               	.LVL71:
 869 0048 DF90      		pop r13
 870 004a CF90      		pop r12
 871               	.LVL72:
 872 004c 0895      		ret
 873               	.LVL73:
 874               	.L50:
 875               	.LBB121:
 876               	.LBB122:
 481:../../../os/oslib/src/chmboxes.c ****       if (mbp->rdptr >= mbp->top) {
 877               		.loc 1 481 0
 878 004e EE81      		ldd r30,Y+6
 879 0050 FF81      		ldd r31,Y+7
 880 0052 CF01      		movw r24,r30
 881 0054 0296      		adiw r24,2
 882 0056 9F83      		std Y+7,r25
 883 0058 8E83      		std Y+6,r24
 884 005a 2081      		ld r18,Z
 885 005c 3181      		ldd r19,Z+1
 886 005e F601      		movw r30,r12
 887 0060 3183      		std Z+1,r19
 888 0062 2083      		st Z,r18
 482:../../../os/oslib/src/chmboxes.c ****         mbp->rdptr = mbp->buffer;
 889               		.loc 1 482 0
 890 0064 2A81      		ldd r18,Y+2
 891 0066 3B81      		ldd r19,Y+3
 892 0068 8217      		cp r24,r18
 893 006a 9307      		cpc r25,r19
 894 006c 00F0      		brlo .L45
 483:../../../os/oslib/src/chmboxes.c ****       }
 895               		.loc 1 483 0
 896 006e 8881      		ld r24,Y
 897 0070 9981      		ldd r25,Y+1
 898 0072 9F83      		std Y+7,r25
 899 0074 8E83      		std Y+6,r24
 900               	.L45:
 485:../../../os/oslib/src/chmboxes.c **** 
 901               		.loc 1 485 0
 902 0076 8885      		ldd r24,Y+8
 903 0078 9985      		ldd r25,Y+9
 904 007a 0197      		sbiw r24,1
 905 007c 9987      		std Y+9,r25
 906 007e 8887      		std Y+8,r24
 488:../../../os/oslib/src/chmboxes.c ****       chSchRescheduleS();
 907               		.loc 1 488 0
 908 0080 60E0      		ldi r22,0
 909 0082 70E0      		ldi r23,0
 910 0084 CE01      		movw r24,r28
 911 0086 0B96      		adiw r24,11
 912 0088 0E94 0000 		call chThdDequeueNextI
 913               	.LVL74:
 489:../../../os/oslib/src/chmboxes.c **** 
 914               		.loc 1 489 0
 915 008c 0E94 0000 		call chSchRescheduleS
 916               	.LVL75:
 917 0090 80E0      		ldi r24,0
 918 0092 90E0      		ldi r25,0
 919 0094 00C0      		rjmp .L43
 920               	.LBE122:
 921               	.LBE121:
 922               		.cfi_endproc
 923               	.LFE204:
 925               		.section	.text.chMBFetchTimeout,"ax",@progbits
 926               	.global	chMBFetchTimeout
 928               	chMBFetchTimeout:
 929               	.LFB203:
 439:../../../os/oslib/src/chmboxes.c ****   msg_t rdymsg;
 930               		.loc 1 439 0
 931               		.cfi_startproc
 932               	.LVL76:
 933               	/* prologue: function */
 934               	/* frame size = 0 */
 935               	/* stack size = 0 */
 936               	.L__stack_usage = 0
 937               	.LBB123:
 938               	.LBB124:
 939               	.LBB125:
 430:../../../os/common/ports/AVR/chcore.h **** }
 940               		.loc 2 430 0
 941               	/* #APP */
 942               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 943 0000 F894      		cli
 944               	 ;  0 "" 2
 945               	/* #NOAPP */
 946               	.LBE125:
 947               	.LBE124:
 948               	.LBE123:
 443:../../../os/oslib/src/chmboxes.c ****   chSysUnlock();
 949               		.loc 1 443 0
 950 0002 0E94 0000 		call chMBFetchTimeoutS
 951               	.LVL77:
 952               	.LBB126:
 953               	.LBB127:
 954               	.LBB128:
 955               	.LBB129:
 956               		.loc 2 440 0
 957               	/* #APP */
 958               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 959 0006 7894      		sei
 960               	 ;  0 "" 2
 961               	/* #NOAPP */
 962               	.LBE129:
 963               	.LBE128:
 964               	.LBE127:
 965               	.LBE126:
 447:../../../os/oslib/src/chmboxes.c **** 
 966               		.loc 1 447 0
 967 0008 0895      		ret
 968               		.cfi_endproc
 969               	.LFE203:
 971               		.section	.text.chMBFetchI,"ax",@progbits
 972               	.global	chMBFetchI
 974               	chMBFetchI:
 975               	.LFB205:
 500:../../../os/oslib/src/chmboxes.c **** 
 501:../../../os/oslib/src/chmboxes.c **** /**
 502:../../../os/oslib/src/chmboxes.c ****  * @brief   Retrieves a message from a mailbox.
 503:../../../os/oslib/src/chmboxes.c ****  * @details This variant is non-blocking, the function returns a timeout
 504:../../../os/oslib/src/chmboxes.c ****  *          condition if the queue is empty.
 505:../../../os/oslib/src/chmboxes.c ****  *
 506:../../../os/oslib/src/chmboxes.c ****  * @param[in] mbp       pointer to a @p mailbox_t object
 507:../../../os/oslib/src/chmboxes.c ****  * @param[out] msgp     pointer to a message variable for the received message
 508:../../../os/oslib/src/chmboxes.c ****  * @return              The operation status.
 509:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_OK       if a message has been correctly fetched.
 510:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_RESET    if the mailbox has been reset.
 511:../../../os/oslib/src/chmboxes.c ****  * @retval MSG_TIMEOUT  if the mailbox is empty and a message cannot be
 512:../../../os/oslib/src/chmboxes.c ****  *                      fetched.
 513:../../../os/oslib/src/chmboxes.c ****  *
 514:../../../os/oslib/src/chmboxes.c ****  * @iclass
 515:../../../os/oslib/src/chmboxes.c ****  */
 516:../../../os/oslib/src/chmboxes.c **** msg_t chMBFetchI(mailbox_t *mbp, msg_t *msgp) {
 976               		.loc 1 516 0
 977               		.cfi_startproc
 978               	.LVL78:
 979               	/* prologue: function */
 980               	/* frame size = 0 */
 981               	/* stack size = 0 */
 982               	.L__stack_usage = 0
 983 0000 FC01      		movw r30,r24
 517:../../../os/oslib/src/chmboxes.c **** 
 518:../../../os/oslib/src/chmboxes.c ****   chDbgCheckClassI();
 519:../../../os/oslib/src/chmboxes.c ****   chDbgCheck((mbp != NULL) && (msgp != NULL));
 520:../../../os/oslib/src/chmboxes.c **** 
 521:../../../os/oslib/src/chmboxes.c ****   /* If the mailbox is in reset state then returns immediately.*/
 522:../../../os/oslib/src/chmboxes.c ****   if (mbp->reset) {
 984               		.loc 1 522 0
 985 0002 8285      		ldd r24,Z+10
 986               	.LVL79:
 987 0004 8111      		cpse r24,__zero_reg__
 988 0006 00C0      		rjmp .L56
 989               	.LVL80:
 523:../../../os/oslib/src/chmboxes.c ****     return MSG_RESET;
 524:../../../os/oslib/src/chmboxes.c ****   }
 525:../../../os/oslib/src/chmboxes.c **** 
 526:../../../os/oslib/src/chmboxes.c ****   /* Is there a message in queue? if so then fetch.*/
 527:../../../os/oslib/src/chmboxes.c ****   if (chMBGetUsedCountI(mbp) > (size_t)0) {
 990               		.loc 1 527 0
 991 0008 8085      		ldd r24,Z+8
 992 000a 9185      		ldd r25,Z+9
 993 000c 892B      		or r24,r25
 994 000e 01F0      		breq .L57
 528:../../../os/oslib/src/chmboxes.c ****     *msgp = *mbp->rdptr++;
 995               		.loc 1 528 0
 996 0010 A681      		ldd r26,Z+6
 997 0012 B781      		ldd r27,Z+7
 998 0014 CD01      		movw r24,r26
 999 0016 0296      		adiw r24,2
 1000 0018 9783      		std Z+7,r25
 1001 001a 8683      		std Z+6,r24
 1002 001c 2D91      		ld r18,X+
 1003 001e 3C91      		ld r19,X
 1004 0020 DB01      		movw r26,r22
 1005 0022 2D93      		st X+,r18
 1006 0024 3C93      		st X,r19
 529:../../../os/oslib/src/chmboxes.c ****     if (mbp->rdptr >= mbp->top) {
 1007               		.loc 1 529 0
 1008 0026 2281      		ldd r18,Z+2
 1009 0028 3381      		ldd r19,Z+3
 1010 002a 8217      		cp r24,r18
 1011 002c 9307      		cpc r25,r19
 1012 002e 00F0      		brlo .L55
 530:../../../os/oslib/src/chmboxes.c ****       mbp->rdptr = mbp->buffer;
 1013               		.loc 1 530 0
 1014 0030 8081      		ld r24,Z
 1015 0032 9181      		ldd r25,Z+1
 1016 0034 9783      		std Z+7,r25
 1017 0036 8683      		std Z+6,r24
 1018               	.L55:
 531:../../../os/oslib/src/chmboxes.c ****     }
 532:../../../os/oslib/src/chmboxes.c ****     mbp->cnt--;
 1019               		.loc 1 532 0
 1020 0038 8085      		ldd r24,Z+8
 1021 003a 9185      		ldd r25,Z+9
 1022 003c 0197      		sbiw r24,1
 1023 003e 9187      		std Z+9,r25
 1024 0040 8087      		std Z+8,r24
 533:../../../os/oslib/src/chmboxes.c **** 
 534:../../../os/oslib/src/chmboxes.c ****     /* If there is a writer waiting then makes it ready.*/
 535:../../../os/oslib/src/chmboxes.c ****     chThdDequeueNextI(&mbp->qw, MSG_OK);
 1025               		.loc 1 535 0
 1026 0042 60E0      		ldi r22,0
 1027 0044 70E0      		ldi r23,0
 1028               	.LVL81:
 1029 0046 CF01      		movw r24,r30
 1030 0048 0B96      		adiw r24,11
 1031 004a 0E94 0000 		call chThdDequeueNextI
 1032               	.LVL82:
 536:../../../os/oslib/src/chmboxes.c **** 
 537:../../../os/oslib/src/chmboxes.c ****     return MSG_OK;
 1033               		.loc 1 537 0
 1034 004e 80E0      		ldi r24,0
 1035 0050 90E0      		ldi r25,0
 1036 0052 0895      		ret
 1037               	.LVL83:
 1038               	.L56:
 523:../../../os/oslib/src/chmboxes.c ****   }
 1039               		.loc 1 523 0
 1040 0054 8EEF      		ldi r24,lo8(-2)
 1041 0056 9FEF      		ldi r25,lo8(-1)
 1042 0058 0895      		ret
 1043               	.LVL84:
 1044               	.L57:
 538:../../../os/oslib/src/chmboxes.c ****   }
 539:../../../os/oslib/src/chmboxes.c **** 
 540:../../../os/oslib/src/chmboxes.c ****   /* No message, immediate timeout.*/
 541:../../../os/oslib/src/chmboxes.c ****   return MSG_TIMEOUT;
 1045               		.loc 1 541 0
 1046 005a 8FEF      		ldi r24,lo8(-1)
 1047 005c 9FEF      		ldi r25,lo8(-1)
 542:../../../os/oslib/src/chmboxes.c **** }
 1048               		.loc 1 542 0
 1049 005e 0895      		ret
 1050               		.cfi_endproc
 1051               	.LFE205:
 1053               		.text
 1054               	.Letext0:
 1055               		.file 3 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 1056               		.file 4 "/usr/lib/avr/include/stdint.h"
 1057               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 1058               		.file 6 "../../../os/rt/include/chearly.h"
 1059               		.file 7 "../../../os/rt/include/chobjects.h"
 1060               		.file 8 "../../../os/rt/include/chrfcu.h"
 1061               		.file 9 "../../../os/rt/include/chdebug.h"
 1062               		.file 10 "../../../os/rt/include/chtime.h"
 1063               		.file 11 "../../../os/rt/include/chlists.h"
 1064               		.file 12 "../../../os/rt/include/chsem.h"
 1065               		.file 13 "../../../os/rt/include/chmtx.h"
 1066               		.file 14 "../../../os/oslib/include/chmboxes.h"
 1067               		.file 15 "../../../os/rt/include/chsys.h"
 1068               		.file 16 "../../../os/rt/include/chthreads.h"
 1069               		.file 17 "../../../os/rt/include/chschd.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chmboxes.c
     /tmp/ccHusQGj.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccHusQGj.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccHusQGj.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccHusQGj.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccHusQGj.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccHusQGj.s:13     .text.chMBObjectInit:0000000000000000 chMBObjectInit
     /tmp/ccHusQGj.s:76     .text.chMBObjectDispose:0000000000000000 chMBObjectDispose
     /tmp/ccHusQGj.s:116    .text.chMBResetI:0000000000000000 chMBResetI
     /tmp/ccHusQGj.s:175    .text.chMBReset:0000000000000000 chMBReset
     /tmp/ccHusQGj.s:224    .text.chMBPostTimeoutS:0000000000000000 chMBPostTimeoutS
     /tmp/ccHusQGj.s:373    .text.chMBPostTimeout:0000000000000000 chMBPostTimeout
     /tmp/ccHusQGj.s:419    .text.chMBPostI:0000000000000000 chMBPostI
     /tmp/ccHusQGj.s:505    .text.chMBPostAheadTimeoutS:0000000000000000 chMBPostAheadTimeoutS
     /tmp/ccHusQGj.s:653    .text.chMBPostAheadTimeout:0000000000000000 chMBPostAheadTimeout
     /tmp/ccHusQGj.s:699    .text.chMBPostAheadI:0000000000000000 chMBPostAheadI
     /tmp/ccHusQGj.s:784    .text.chMBFetchTimeoutS:0000000000000000 chMBFetchTimeoutS
     /tmp/ccHusQGj.s:928    .text.chMBFetchTimeout:0000000000000000 chMBFetchTimeout
     /tmp/ccHusQGj.s:974    .text.chMBFetchI:0000000000000000 chMBFetchI

UNDEFINED SYMBOLS
chThdQueueObjectInit
chThdQueueObjectDispose
chThdDequeueAllI
chSchRescheduleS
chThdEnqueueTimeoutS
chThdDequeueNextI
