   1               		.file	"chdelegates.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.__ch_delegate_fn0,"ax",@progbits
  11               	.global	__ch_delegate_fn0
  13               	__ch_delegate_fn0:
  14               	.LFB193:
  15               		.file 1 "../../../os/oslib/src/chdelegates.c"
   1:../../../os/oslib/src/chdelegates.c **** /*
   2:../../../os/oslib/src/chdelegates.c ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/oslib/src/chdelegates.c ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/oslib/src/chdelegates.c **** 
   5:../../../os/oslib/src/chdelegates.c ****     This file is part of ChibiOS.
   6:../../../os/oslib/src/chdelegates.c **** 
   7:../../../os/oslib/src/chdelegates.c ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/oslib/src/chdelegates.c ****     it under the terms of the GNU General Public License as published by
   9:../../../os/oslib/src/chdelegates.c ****     the Free Software Foundation version 3 of the License.
  10:../../../os/oslib/src/chdelegates.c **** 
  11:../../../os/oslib/src/chdelegates.c ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/oslib/src/chdelegates.c ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/oslib/src/chdelegates.c ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/oslib/src/chdelegates.c ****     GNU General Public License for more details.
  15:../../../os/oslib/src/chdelegates.c **** 
  16:../../../os/oslib/src/chdelegates.c ****     You should have received a copy of the GNU General Public License
  17:../../../os/oslib/src/chdelegates.c ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/oslib/src/chdelegates.c **** */
  19:../../../os/oslib/src/chdelegates.c **** 
  20:../../../os/oslib/src/chdelegates.c **** /**
  21:../../../os/oslib/src/chdelegates.c ****  * @file    oslib/src/chdelegates.c
  22:../../../os/oslib/src/chdelegates.c ****  * @brief   Delegate threads code.
  23:../../../os/oslib/src/chdelegates.c ****  * @details Delegate threads.
  24:../../../os/oslib/src/chdelegates.c ****  *          <h2>Operation mode</h2>
  25:../../../os/oslib/src/chdelegates.c ****  *          A delegate thread is a thread performing function calls triggered
  26:../../../os/oslib/src/chdelegates.c ****  *          by other threads. This functionality is especially useful when
  27:../../../os/oslib/src/chdelegates.c ****  *          encapsulating a library not designed for threading into a
  28:../../../os/oslib/src/chdelegates.c ****  *          delegate thread. Other threads have access to the library without
  29:../../../os/oslib/src/chdelegates.c ****  *          having to worry about mutual exclusion.
  30:../../../os/oslib/src/chdelegates.c ****  * @pre     In order to use the pipes APIs the @p CH_CFG_USE_DELEGATES
  31:../../../os/oslib/src/chdelegates.c ****  *          option must be enabled in @p chconf.h.
  32:../../../os/oslib/src/chdelegates.c ****  * @note    Compatible with RT and NIL.
  33:../../../os/oslib/src/chdelegates.c ****  *
  34:../../../os/oslib/src/chdelegates.c ****  * @addtogroup oslib_delegates
  35:../../../os/oslib/src/chdelegates.c ****  * @{
  36:../../../os/oslib/src/chdelegates.c ****  */
  37:../../../os/oslib/src/chdelegates.c **** 
  38:../../../os/oslib/src/chdelegates.c **** #include "ch.h"
  39:../../../os/oslib/src/chdelegates.c **** 
  40:../../../os/oslib/src/chdelegates.c **** #if (CH_CFG_USE_DELEGATES == TRUE) || defined(__DOXYGEN__)
  41:../../../os/oslib/src/chdelegates.c **** 
  42:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  43:../../../os/oslib/src/chdelegates.c **** /* Module local definitions.                                                 */
  44:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  45:../../../os/oslib/src/chdelegates.c **** 
  46:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  47:../../../os/oslib/src/chdelegates.c **** /* Module exported variables.                                                */
  48:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  49:../../../os/oslib/src/chdelegates.c **** 
  50:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  51:../../../os/oslib/src/chdelegates.c **** /* Module local types.                                                       */
  52:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  53:../../../os/oslib/src/chdelegates.c **** 
  54:../../../os/oslib/src/chdelegates.c **** /**
  55:../../../os/oslib/src/chdelegates.c ****  * @brief   Type of a structure representing a delegate call.
  56:../../../os/oslib/src/chdelegates.c ****  */
  57:../../../os/oslib/src/chdelegates.c **** typedef struct {
  58:../../../os/oslib/src/chdelegates.c ****   /**
  59:../../../os/oslib/src/chdelegates.c ****    * @brief   The delegate veneer function.
  60:../../../os/oslib/src/chdelegates.c ****    */
  61:../../../os/oslib/src/chdelegates.c ****   delegate_veneer_t veneer;
  62:../../../os/oslib/src/chdelegates.c ****   /**
  63:../../../os/oslib/src/chdelegates.c ****    * @brief   Pointer to the caller @p va_list object.
  64:../../../os/oslib/src/chdelegates.c ****    */
  65:../../../os/oslib/src/chdelegates.c ****   va_list           *argsp;
  66:../../../os/oslib/src/chdelegates.c **** } call_message_t;
  67:../../../os/oslib/src/chdelegates.c **** 
  68:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  69:../../../os/oslib/src/chdelegates.c **** /* Module local variables.                                                   */
  70:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  71:../../../os/oslib/src/chdelegates.c **** 
  72:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  73:../../../os/oslib/src/chdelegates.c **** /* Module local functions.                                                   */
  74:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  75:../../../os/oslib/src/chdelegates.c **** 
  76:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  77:../../../os/oslib/src/chdelegates.c **** /* Module exported functions.                                                */
  78:../../../os/oslib/src/chdelegates.c **** /*===========================================================================*/
  79:../../../os/oslib/src/chdelegates.c **** 
  80:../../../os/oslib/src/chdelegates.c **** /*lint -save -e586 [17.1] Required by design.*/
  81:../../../os/oslib/src/chdelegates.c **** 
  82:../../../os/oslib/src/chdelegates.c **** /**
  83:../../../os/oslib/src/chdelegates.c ****  * @brief   Veneer for functions with no parameters.
  84:../../../os/oslib/src/chdelegates.c ****  *
  85:../../../os/oslib/src/chdelegates.c ****  * @param[in] argsp     the list of arguments
  86:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value.
  87:../../../os/oslib/src/chdelegates.c ****  */
  88:../../../os/oslib/src/chdelegates.c **** msg_t __ch_delegate_fn0(va_list *argsp) {
  16               		.loc 1 88 0
  17               		.cfi_startproc
  18               	.LVL0:
  19               	/* prologue: function */
  20               	/* frame size = 0 */
  21               	/* stack size = 0 */
  22               	.L__stack_usage = 0
  89:../../../os/oslib/src/chdelegates.c ****   delegate_fn0_t fn0 = (delegate_fn0_t)va_arg(*argsp, delegate_fn0_t);
  23               		.loc 1 89 0
  24 0000 DC01      		movw r26,r24
  25 0002 ED91      		ld r30,X+
  26 0004 FC91      		ld r31,X
  27 0006 1197      		sbiw r26,1
  28 0008 9F01      		movw r18,r30
  29 000a 2E5F      		subi r18,-2
  30 000c 3F4F      		sbci r19,-1
  31 000e 2D93      		st X+,r18
  32 0010 3C93      		st X,r19
  33               	.LVL1:
  90:../../../os/oslib/src/chdelegates.c ****   return fn0();
  34               		.loc 1 90 0
  35 0012 0190      		ld __tmp_reg__,Z+
  36 0014 F081      		ld r31,Z
  37 0016 E02D      		mov r30,__tmp_reg__
  38               	.LVL2:
  39 0018 0994      		ijmp
  40               	.LVL3:
  41               		.cfi_endproc
  42               	.LFE193:
  44               		.section	.text.__ch_delegate_fn1,"ax",@progbits
  45               	.global	__ch_delegate_fn1
  47               	__ch_delegate_fn1:
  48               	.LFB194:
  91:../../../os/oslib/src/chdelegates.c **** }
  92:../../../os/oslib/src/chdelegates.c **** 
  93:../../../os/oslib/src/chdelegates.c **** /**
  94:../../../os/oslib/src/chdelegates.c ****  * @brief   Veneer for functions with one parameter.
  95:../../../os/oslib/src/chdelegates.c ****  *
  96:../../../os/oslib/src/chdelegates.c ****  * @param[in] argsp     the list of arguments
  97:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value.
  98:../../../os/oslib/src/chdelegates.c ****  */
  99:../../../os/oslib/src/chdelegates.c **** msg_t __ch_delegate_fn1(va_list *argsp) {
  49               		.loc 1 99 0
  50               		.cfi_startproc
  51               	.LVL4:
  52 0000 CF93      		push r28
  53               	.LCFI0:
  54               		.cfi_def_cfa_offset 3
  55               		.cfi_offset 28, -2
  56 0002 DF93      		push r29
  57               	.LCFI1:
  58               		.cfi_def_cfa_offset 4
  59               		.cfi_offset 29, -3
  60               	/* prologue: function */
  61               	/* frame size = 0 */
  62               	/* stack size = 2 */
  63               	.L__stack_usage = 2
  64 0004 EC01      		movw r28,r24
 100:../../../os/oslib/src/chdelegates.c ****   delegate_fn1_t fn1 = (delegate_fn1_t)va_arg(*argsp, delegate_fn1_t);
  65               		.loc 1 100 0
  66 0006 A881      		ld r26,Y
  67 0008 B981      		ldd r27,Y+1
  68 000a CD01      		movw r24,r26
  69               	.LVL5:
  70 000c 0296      		adiw r24,2
  71 000e 9983      		std Y+1,r25
  72 0010 8883      		st Y,r24
  73 0012 ED91      		ld r30,X+
  74 0014 FC91      		ld r31,X
  75 0016 1197      		sbiw r26,1
  76               	.LVL6:
 101:../../../os/oslib/src/chdelegates.c ****   msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
  77               		.loc 1 101 0
  78 0018 0296      		adiw r24,2
  79 001a 9983      		std Y+1,r25
  80 001c 8883      		st Y,r24
  81               	.LVL7:
 102:../../../os/oslib/src/chdelegates.c ****   return fn1(p1);
  82               		.loc 1 102 0
  83 001e 1296      		adiw r26,2
  84 0020 8D91      		ld r24,X+
  85 0022 9C91      		ld r25,X
  86 0024 1397      		sbiw r26,2+1
  87               	.LVL8:
  88               	/* epilogue start */
 103:../../../os/oslib/src/chdelegates.c **** }
  89               		.loc 1 103 0
  90 0026 DF91      		pop r29
  91 0028 CF91      		pop r28
  92               	.LVL9:
 102:../../../os/oslib/src/chdelegates.c ****   return fn1(p1);
  93               		.loc 1 102 0
  94 002a 0994      		ijmp
  95               	.LVL10:
  96               		.cfi_endproc
  97               	.LFE194:
  99               		.section	.text.__ch_delegate_fn2,"ax",@progbits
 100               	.global	__ch_delegate_fn2
 102               	__ch_delegate_fn2:
 103               	.LFB195:
 104:../../../os/oslib/src/chdelegates.c **** 
 105:../../../os/oslib/src/chdelegates.c **** /**
 106:../../../os/oslib/src/chdelegates.c ****  * @brief   Veneer for functions with two parameters.
 107:../../../os/oslib/src/chdelegates.c ****  *
 108:../../../os/oslib/src/chdelegates.c ****  * @param[in] argsp     the list of arguments
 109:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value.
 110:../../../os/oslib/src/chdelegates.c ****  */
 111:../../../os/oslib/src/chdelegates.c **** msg_t __ch_delegate_fn2(va_list *argsp) {
 104               		.loc 1 111 0
 105               		.cfi_startproc
 106               	.LVL11:
 107 0000 CF93      		push r28
 108               	.LCFI2:
 109               		.cfi_def_cfa_offset 3
 110               		.cfi_offset 28, -2
 111 0002 DF93      		push r29
 112               	.LCFI3:
 113               		.cfi_def_cfa_offset 4
 114               		.cfi_offset 29, -3
 115               	/* prologue: function */
 116               	/* frame size = 0 */
 117               	/* stack size = 2 */
 118               	.L__stack_usage = 2
 119 0004 EC01      		movw r28,r24
 112:../../../os/oslib/src/chdelegates.c ****   delegate_fn2_t fn2 = (delegate_fn2_t)va_arg(*argsp, delegate_fn2_t);
 120               		.loc 1 112 0
 121 0006 A881      		ld r26,Y
 122 0008 B981      		ldd r27,Y+1
 123 000a CD01      		movw r24,r26
 124               	.LVL12:
 125 000c 0296      		adiw r24,2
 126 000e 9983      		std Y+1,r25
 127 0010 8883      		st Y,r24
 128 0012 ED91      		ld r30,X+
 129 0014 FC91      		ld r31,X
 130 0016 1197      		sbiw r26,1
 131               	.LVL13:
 113:../../../os/oslib/src/chdelegates.c ****   msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 132               		.loc 1 113 0
 133 0018 1296      		adiw r26,2
 134 001a 8D91      		ld r24,X+
 135 001c 9C91      		ld r25,X
 136 001e 1397      		sbiw r26,2+1
 137               	.LVL14:
 114:../../../os/oslib/src/chdelegates.c ****   msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 138               		.loc 1 114 0
 139 0020 9D01      		movw r18,r26
 140 0022 2A5F      		subi r18,-6
 141 0024 3F4F      		sbci r19,-1
 142 0026 3983      		std Y+1,r19
 143 0028 2883      		st Y,r18
 144               	.LVL15:
 115:../../../os/oslib/src/chdelegates.c ****   return fn2(p1, p2);
 145               		.loc 1 115 0
 146 002a 1496      		adiw r26,4
 147 002c 6D91      		ld r22,X+
 148 002e 7C91      		ld r23,X
 149 0030 1597      		sbiw r26,4+1
 150               	/* epilogue start */
 116:../../../os/oslib/src/chdelegates.c **** }
 151               		.loc 1 116 0
 152 0032 DF91      		pop r29
 153 0034 CF91      		pop r28
 154               	.LVL16:
 115:../../../os/oslib/src/chdelegates.c ****   return fn2(p1, p2);
 155               		.loc 1 115 0
 156 0036 0994      		ijmp
 157               	.LVL17:
 158               		.cfi_endproc
 159               	.LFE195:
 161               		.section	.text.__ch_delegate_fn3,"ax",@progbits
 162               	.global	__ch_delegate_fn3
 164               	__ch_delegate_fn3:
 165               	.LFB196:
 117:../../../os/oslib/src/chdelegates.c **** 
 118:../../../os/oslib/src/chdelegates.c **** /**
 119:../../../os/oslib/src/chdelegates.c ****  * @brief   Veneer for functions with three parameters.
 120:../../../os/oslib/src/chdelegates.c ****  *
 121:../../../os/oslib/src/chdelegates.c ****  * @param[in] argsp     the list of arguments
 122:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value.
 123:../../../os/oslib/src/chdelegates.c ****  */
 124:../../../os/oslib/src/chdelegates.c **** msg_t __ch_delegate_fn3(va_list *argsp) {
 166               		.loc 1 124 0
 167               		.cfi_startproc
 168               	.LVL18:
 169 0000 CF93      		push r28
 170               	.LCFI4:
 171               		.cfi_def_cfa_offset 3
 172               		.cfi_offset 28, -2
 173 0002 DF93      		push r29
 174               	.LCFI5:
 175               		.cfi_def_cfa_offset 4
 176               		.cfi_offset 29, -3
 177               	/* prologue: function */
 178               	/* frame size = 0 */
 179               	/* stack size = 2 */
 180               	.L__stack_usage = 2
 181 0004 EC01      		movw r28,r24
 125:../../../os/oslib/src/chdelegates.c ****   delegate_fn3_t fn3 = (delegate_fn3_t)va_arg(*argsp, delegate_fn3_t);
 182               		.loc 1 125 0
 183 0006 A881      		ld r26,Y
 184 0008 B981      		ldd r27,Y+1
 185 000a CD01      		movw r24,r26
 186               	.LVL19:
 187 000c 0296      		adiw r24,2
 188 000e 9983      		std Y+1,r25
 189 0010 8883      		st Y,r24
 190 0012 ED91      		ld r30,X+
 191 0014 FC91      		ld r31,X
 192 0016 1197      		sbiw r26,1
 193               	.LVL20:
 126:../../../os/oslib/src/chdelegates.c ****   msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 194               		.loc 1 126 0
 195 0018 1296      		adiw r26,2
 196 001a 8D91      		ld r24,X+
 197 001c 9C91      		ld r25,X
 198 001e 1397      		sbiw r26,2+1
 199               	.LVL21:
 127:../../../os/oslib/src/chdelegates.c ****   msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 200               		.loc 1 127 0
 201 0020 1496      		adiw r26,4
 202 0022 6D91      		ld r22,X+
 203 0024 7C91      		ld r23,X
 204 0026 1597      		sbiw r26,4+1
 205               	.LVL22:
 128:../../../os/oslib/src/chdelegates.c ****   msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 206               		.loc 1 128 0
 207 0028 9D01      		movw r18,r26
 208 002a 285F      		subi r18,-8
 209 002c 3F4F      		sbci r19,-1
 210 002e 3983      		std Y+1,r19
 211 0030 2883      		st Y,r18
 212               	.LVL23:
 129:../../../os/oslib/src/chdelegates.c ****   return fn3(p1, p2, p3);
 213               		.loc 1 129 0
 214 0032 1696      		adiw r26,6
 215 0034 4D91      		ld r20,X+
 216 0036 5C91      		ld r21,X
 217 0038 1797      		sbiw r26,6+1
 218               	/* epilogue start */
 130:../../../os/oslib/src/chdelegates.c **** }
 219               		.loc 1 130 0
 220 003a DF91      		pop r29
 221 003c CF91      		pop r28
 222               	.LVL24:
 129:../../../os/oslib/src/chdelegates.c ****   return fn3(p1, p2, p3);
 223               		.loc 1 129 0
 224 003e 0994      		ijmp
 225               	.LVL25:
 226               		.cfi_endproc
 227               	.LFE196:
 229               		.section	.text.__ch_delegate_fn4,"ax",@progbits
 230               	.global	__ch_delegate_fn4
 232               	__ch_delegate_fn4:
 233               	.LFB197:
 131:../../../os/oslib/src/chdelegates.c **** 
 132:../../../os/oslib/src/chdelegates.c **** /**
 133:../../../os/oslib/src/chdelegates.c ****  * @brief   Veneer for functions with four parameters.
 134:../../../os/oslib/src/chdelegates.c ****  *
 135:../../../os/oslib/src/chdelegates.c ****  * @param[in] argsp     the list of arguments
 136:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value.
 137:../../../os/oslib/src/chdelegates.c ****  */
 138:../../../os/oslib/src/chdelegates.c **** msg_t __ch_delegate_fn4(va_list *argsp) {
 234               		.loc 1 138 0
 235               		.cfi_startproc
 236               	.LVL26:
 237 0000 CF93      		push r28
 238               	.LCFI6:
 239               		.cfi_def_cfa_offset 3
 240               		.cfi_offset 28, -2
 241 0002 DF93      		push r29
 242               	.LCFI7:
 243               		.cfi_def_cfa_offset 4
 244               		.cfi_offset 29, -3
 245               	/* prologue: function */
 246               	/* frame size = 0 */
 247               	/* stack size = 2 */
 248               	.L__stack_usage = 2
 249 0004 EC01      		movw r28,r24
 139:../../../os/oslib/src/chdelegates.c ****   delegate_fn4_t fn4 = (delegate_fn4_t)va_arg(*argsp, delegate_fn4_t);
 250               		.loc 1 139 0
 251 0006 A881      		ld r26,Y
 252 0008 B981      		ldd r27,Y+1
 253 000a CD01      		movw r24,r26
 254               	.LVL27:
 255 000c 0296      		adiw r24,2
 256 000e 9983      		std Y+1,r25
 257 0010 8883      		st Y,r24
 258 0012 ED91      		ld r30,X+
 259 0014 FC91      		ld r31,X
 260 0016 1197      		sbiw r26,1
 261               	.LVL28:
 140:../../../os/oslib/src/chdelegates.c ****   msg_t p1 = (msg_t)va_arg(*argsp, msg_t);
 262               		.loc 1 140 0
 263 0018 1296      		adiw r26,2
 264 001a 8D91      		ld r24,X+
 265 001c 9C91      		ld r25,X
 266 001e 1397      		sbiw r26,2+1
 267               	.LVL29:
 141:../../../os/oslib/src/chdelegates.c ****   msg_t p2 = (msg_t)va_arg(*argsp, msg_t);
 268               		.loc 1 141 0
 269 0020 1496      		adiw r26,4
 270 0022 6D91      		ld r22,X+
 271 0024 7C91      		ld r23,X
 272 0026 1597      		sbiw r26,4+1
 273               	.LVL30:
 142:../../../os/oslib/src/chdelegates.c ****   msg_t p3 = (msg_t)va_arg(*argsp, msg_t);
 274               		.loc 1 142 0
 275 0028 1696      		adiw r26,6
 276 002a 4D91      		ld r20,X+
 277 002c 5C91      		ld r21,X
 278 002e 1797      		sbiw r26,6+1
 279               	.LVL31:
 143:../../../os/oslib/src/chdelegates.c ****   msg_t p4 = (msg_t)va_arg(*argsp, msg_t);
 280               		.loc 1 143 0
 281 0030 9D01      		movw r18,r26
 282 0032 265F      		subi r18,-10
 283 0034 3F4F      		sbci r19,-1
 284 0036 3983      		std Y+1,r19
 285 0038 2883      		st Y,r18
 286               	.LVL32:
 144:../../../os/oslib/src/chdelegates.c ****   return fn4(p1, p2, p3, p4);
 287               		.loc 1 144 0
 288 003a 1896      		adiw r26,8
 289 003c 2D91      		ld r18,X+
 290 003e 3C91      		ld r19,X
 291 0040 1997      		sbiw r26,8+1
 292               	/* epilogue start */
 145:../../../os/oslib/src/chdelegates.c **** }
 293               		.loc 1 145 0
 294 0042 DF91      		pop r29
 295 0044 CF91      		pop r28
 296               	.LVL33:
 144:../../../os/oslib/src/chdelegates.c ****   return fn4(p1, p2, p3, p4);
 297               		.loc 1 144 0
 298 0046 0994      		ijmp
 299               	.LVL34:
 300               		.cfi_endproc
 301               	.LFE197:
 303               		.section	.text.chDelegateCallVeneer,"ax",@progbits
 304               	.global	chDelegateCallVeneer
 306               	chDelegateCallVeneer:
 307               	.LFB198:
 146:../../../os/oslib/src/chdelegates.c **** 
 147:../../../os/oslib/src/chdelegates.c **** /**
 148:../../../os/oslib/src/chdelegates.c ****  * @brief   Triggers a function call on a delegate thread.
 149:../../../os/oslib/src/chdelegates.c ****  * @note    The thread must be executing @p chDelegateDispatchTimeout() in
 150:../../../os/oslib/src/chdelegates.c ****  *          order to have the functions called.
 151:../../../os/oslib/src/chdelegates.c ****  *
 152:../../../os/oslib/src/chdelegates.c ****  * @param[in] tp        pointer to the delegate thread
 153:../../../os/oslib/src/chdelegates.c ****  * @param[in] veneer    pointer to the veneer function to be called
 154:../../../os/oslib/src/chdelegates.c ****  * @param[in] ...       variable number of parameters
 155:../../../os/oslib/src/chdelegates.c ****  * @return              The function return value casted to msg_t. It is
 156:../../../os/oslib/src/chdelegates.c ****  *                      garbage for functions returning @p void.
 157:../../../os/oslib/src/chdelegates.c ****  */
 158:../../../os/oslib/src/chdelegates.c **** msg_t chDelegateCallVeneer(thread_t *tp, delegate_veneer_t veneer, ...) {
 308               		.loc 1 158 0
 309               		.cfi_startproc
 310               	.LVL35:
 311 0000 CF93      		push r28
 312               	.LCFI8:
 313               		.cfi_def_cfa_offset 3
 314               		.cfi_offset 28, -2
 315 0002 DF93      		push r29
 316               	.LCFI9:
 317               		.cfi_def_cfa_offset 4
 318               		.cfi_offset 29, -3
 319 0004 00D0      		rcall .
 320 0006 00D0      		rcall .
 321 0008 00D0      		rcall .
 322               	.LCFI10:
 323               		.cfi_def_cfa_offset 10
 324 000a CDB7      		in r28,__SP_L__
 325 000c DEB7      		in r29,__SP_H__
 326               	.LCFI11:
 327               		.cfi_def_cfa_register 28
 328               	/* prologue: function */
 329               	/* frame size = 6 */
 330               	/* stack size = 8 */
 331               	.L__stack_usage = 8
 159:../../../os/oslib/src/chdelegates.c ****   va_list args;
 160:../../../os/oslib/src/chdelegates.c ****   call_message_t cm;
 161:../../../os/oslib/src/chdelegates.c ****   msg_t msg;
 162:../../../os/oslib/src/chdelegates.c **** 
 163:../../../os/oslib/src/chdelegates.c ****   va_start(args, veneer);
 332               		.loc 1 163 0
 333 000e CE01      		movw r24,r28
 334 0010 0F96      		adiw r24,15
 335 0012 9E83      		std Y+6,r25
 336 0014 8D83      		std Y+5,r24
 164:../../../os/oslib/src/chdelegates.c **** 
 165:../../../os/oslib/src/chdelegates.c ****   /* Preparing the call message.*/
 166:../../../os/oslib/src/chdelegates.c ****   cm.veneer = veneer;
 337               		.loc 1 166 0
 338 0016 8D85      		ldd r24,Y+13
 339 0018 9E85      		ldd r25,Y+14
 340 001a 9A83      		std Y+2,r25
 341 001c 8983      		std Y+1,r24
 167:../../../os/oslib/src/chdelegates.c ****   cm.argsp  = &args;
 342               		.loc 1 167 0
 343 001e CE01      		movw r24,r28
 344 0020 0596      		adiw r24,5
 345 0022 9C83      		std Y+4,r25
 346 0024 8B83      		std Y+3,r24
 168:../../../os/oslib/src/chdelegates.c ****   (void)cm; /* Suppresses a lint warning.*/
 169:../../../os/oslib/src/chdelegates.c **** 
 170:../../../os/oslib/src/chdelegates.c ****   /* Sending the message to the dispatcher thread, the return value is
 171:../../../os/oslib/src/chdelegates.c ****      contained in the returned message.*/
 172:../../../os/oslib/src/chdelegates.c ****   msg = chMsgSend(tp, (msg_t)&cm);
 347               		.loc 1 172 0
 348 0026 BE01      		movw r22,r28
 349 0028 6F5F      		subi r22,-1
 350 002a 7F4F      		sbci r23,-1
 351 002c 8B85      		ldd r24,Y+11
 352 002e 9C85      		ldd r25,Y+12
 353 0030 0E94 0000 		call chMsgSend
 354               	.LVL36:
 355               	/* epilogue start */
 173:../../../os/oslib/src/chdelegates.c **** 
 174:../../../os/oslib/src/chdelegates.c ****   va_end(args);
 175:../../../os/oslib/src/chdelegates.c **** 
 176:../../../os/oslib/src/chdelegates.c ****   return msg;
 177:../../../os/oslib/src/chdelegates.c **** }
 356               		.loc 1 177 0
 357 0034 2696      		adiw r28,6
 358 0036 0FB6      		in __tmp_reg__,__SREG__
 359 0038 F894      		cli
 360 003a DEBF      		out __SP_H__,r29
 361 003c 0FBE      		out __SREG__,__tmp_reg__
 362 003e CDBF      		out __SP_L__,r28
 363 0040 DF91      		pop r29
 364 0042 CF91      		pop r28
 365 0044 0895      		ret
 366               		.cfi_endproc
 367               	.LFE198:
 369               		.section	.text.chDelegateDispatch,"ax",@progbits
 370               	.global	chDelegateDispatch
 372               	chDelegateDispatch:
 373               	.LFB199:
 178:../../../os/oslib/src/chdelegates.c **** 
 179:../../../os/oslib/src/chdelegates.c **** /*lint -restore*/
 180:../../../os/oslib/src/chdelegates.c **** 
 181:../../../os/oslib/src/chdelegates.c **** /**
 182:../../../os/oslib/src/chdelegates.c ****  * @brief   Call messages dispatching.
 183:../../../os/oslib/src/chdelegates.c ****  * @details The function awaits for an incoming call messages and calls the
 184:../../../os/oslib/src/chdelegates.c ****  *          specified functions, then it returns. In case multiple threads
 185:../../../os/oslib/src/chdelegates.c ****  *          are sending messages then the requests are served in priority
 186:../../../os/oslib/src/chdelegates.c ****  *          order.
 187:../../../os/oslib/src/chdelegates.c ****  *
 188:../../../os/oslib/src/chdelegates.c ****  * @api
 189:../../../os/oslib/src/chdelegates.c ****  */
 190:../../../os/oslib/src/chdelegates.c **** void chDelegateDispatch(void) {
 374               		.loc 1 190 0
 375               		.cfi_startproc
 376 0000 CF93      		push r28
 377               	.LCFI12:
 378               		.cfi_def_cfa_offset 3
 379               		.cfi_offset 28, -2
 380 0002 DF93      		push r29
 381               	.LCFI13:
 382               		.cfi_def_cfa_offset 4
 383               		.cfi_offset 29, -3
 384               	/* prologue: function */
 385               	/* frame size = 0 */
 386               	/* stack size = 2 */
 387               	.L__stack_usage = 2
 388               	.LBB44:
 389               	.LBB45:
 390               	.LBB46:
 391               	.LBB47:
 392               	.LBB48:
 393               		.file 2 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 394               		.loc 2 430 0
 395               	/* #APP */
 396               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 397 0004 F894      		cli
 398               	 ;  0 "" 2
 399               	/* #NOAPP */
 400               	.LBE48:
 401               	.LBE47:
 402               	.LBE46:
 403               		.file 3 "../../../os/rt/include/chmsg.h"
   1:../../../os/rt/include/chmsg.h **** /*
   2:../../../os/rt/include/chmsg.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/rt/include/chmsg.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/rt/include/chmsg.h **** 
   5:../../../os/rt/include/chmsg.h ****     This file is part of ChibiOS.
   6:../../../os/rt/include/chmsg.h **** 
   7:../../../os/rt/include/chmsg.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/rt/include/chmsg.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/rt/include/chmsg.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/rt/include/chmsg.h **** 
  11:../../../os/rt/include/chmsg.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/rt/include/chmsg.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/rt/include/chmsg.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/rt/include/chmsg.h ****     GNU General Public License for more details.
  15:../../../os/rt/include/chmsg.h **** 
  16:../../../os/rt/include/chmsg.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/rt/include/chmsg.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/rt/include/chmsg.h **** */
  19:../../../os/rt/include/chmsg.h **** 
  20:../../../os/rt/include/chmsg.h **** /**
  21:../../../os/rt/include/chmsg.h ****  * @file    rt/include/chmsg.h
  22:../../../os/rt/include/chmsg.h ****  * @brief   Messages macros and structures.
  23:../../../os/rt/include/chmsg.h ****  *
  24:../../../os/rt/include/chmsg.h ****  * @addtogroup messages
  25:../../../os/rt/include/chmsg.h ****  * @{
  26:../../../os/rt/include/chmsg.h ****  */
  27:../../../os/rt/include/chmsg.h **** 
  28:../../../os/rt/include/chmsg.h **** #ifndef CHMSG_H
  29:../../../os/rt/include/chmsg.h **** #define CHMSG_H
  30:../../../os/rt/include/chmsg.h **** 
  31:../../../os/rt/include/chmsg.h **** #if (CH_CFG_USE_MESSAGES == TRUE) || defined(__DOXYGEN__)
  32:../../../os/rt/include/chmsg.h **** 
  33:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  34:../../../os/rt/include/chmsg.h **** /* Module constants.                                                         */
  35:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  36:../../../os/rt/include/chmsg.h **** 
  37:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  38:../../../os/rt/include/chmsg.h **** /* Module pre-compile time settings.                                         */
  39:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  40:../../../os/rt/include/chmsg.h **** 
  41:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  42:../../../os/rt/include/chmsg.h **** /* Derived constants and error checks.                                       */
  43:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  44:../../../os/rt/include/chmsg.h **** 
  45:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  46:../../../os/rt/include/chmsg.h **** /* Module data structures and types.                                         */
  47:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  48:../../../os/rt/include/chmsg.h **** 
  49:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  50:../../../os/rt/include/chmsg.h **** /* Module macros.                                                            */
  51:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  52:../../../os/rt/include/chmsg.h **** 
  53:../../../os/rt/include/chmsg.h **** #if CH_CFG_USE_MESSAGES_PRIORITY == TRUE
  54:../../../os/rt/include/chmsg.h **** #define __ch_msg_insert(qp, tp) ch_sch_prio_insert(qp, &tp->hdr.queue)
  55:../../../os/rt/include/chmsg.h **** #else
  56:../../../os/rt/include/chmsg.h **** #define __ch_msg_insert(qp, tp) ch_queue_insert(qp, &tp->hdr.queue)
  57:../../../os/rt/include/chmsg.h **** #endif
  58:../../../os/rt/include/chmsg.h **** 
  59:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  60:../../../os/rt/include/chmsg.h **** /* External declarations.                                                    */
  61:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  62:../../../os/rt/include/chmsg.h **** 
  63:../../../os/rt/include/chmsg.h **** #ifdef __cplusplus
  64:../../../os/rt/include/chmsg.h **** extern "C" {
  65:../../../os/rt/include/chmsg.h **** #endif
  66:../../../os/rt/include/chmsg.h ****   msg_t chMsgSend(thread_t *tp, msg_t msg);
  67:../../../os/rt/include/chmsg.h ****   thread_t *chMsgWaitS(void);
  68:../../../os/rt/include/chmsg.h ****   thread_t *chMsgWaitTimeoutS(sysinterval_t timeout);
  69:../../../os/rt/include/chmsg.h ****   thread_t *chMsgPollS(void);
  70:../../../os/rt/include/chmsg.h ****   void chMsgRelease(thread_t *tp, msg_t msg);
  71:../../../os/rt/include/chmsg.h **** #ifdef __cplusplus
  72:../../../os/rt/include/chmsg.h **** }
  73:../../../os/rt/include/chmsg.h **** #endif
  74:../../../os/rt/include/chmsg.h **** 
  75:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  76:../../../os/rt/include/chmsg.h **** /* External declarations.                                                    */
  77:../../../os/rt/include/chmsg.h **** /*===========================================================================*/
  78:../../../os/rt/include/chmsg.h **** 
  79:../../../os/rt/include/chmsg.h **** /**
  80:../../../os/rt/include/chmsg.h ****  * @brief   Suspends the thread and waits for an incoming message.
  81:../../../os/rt/include/chmsg.h ****  * @post    After receiving a message the function @p chMsgGet() must be
  82:../../../os/rt/include/chmsg.h ****  *          called in order to retrieve the message and then @p chMsgRelease()
  83:../../../os/rt/include/chmsg.h ****  *          must be invoked in order to acknowledge the reception and send
  84:../../../os/rt/include/chmsg.h ****  *          the answer.
  85:../../../os/rt/include/chmsg.h ****  * @note    If the message is a pointer then you can assume that the data
  86:../../../os/rt/include/chmsg.h ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
  87:../../../os/rt/include/chmsg.h ****  *          because the sending thread is suspended until then.
  88:../../../os/rt/include/chmsg.h ****  * @note    The reference counter of the sender thread is not increased, the
  89:../../../os/rt/include/chmsg.h ****  *          returned pointer is a temporary reference.
  90:../../../os/rt/include/chmsg.h ****  *
  91:../../../os/rt/include/chmsg.h ****  * @return              A pointer to the thread carrying the message.
  92:../../../os/rt/include/chmsg.h ****  *
  93:../../../os/rt/include/chmsg.h ****  * @api
  94:../../../os/rt/include/chmsg.h ****  */
  95:../../../os/rt/include/chmsg.h **** static inline thread_t *chMsgWait(void) {
  96:../../../os/rt/include/chmsg.h ****   thread_t *tp;
  97:../../../os/rt/include/chmsg.h **** 
  98:../../../os/rt/include/chmsg.h ****   chSysLock();
  99:../../../os/rt/include/chmsg.h ****   tp = chMsgWaitS();
 404               		.loc 3 99 0
 405 0006 0E94 0000 		call chMsgWaitS
 406               	.LVL37:
 407 000a EC01      		movw r28,r24
 408               	.LVL38:
 409               	.LBB49:
 410               	.LBB50:
 411               	.LBB51:
 412               	.LBB52:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 413               		.loc 2 440 0
 414               	/* #APP */
 415               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 416 000c 7894      		sei
 417               	 ;  0 "" 2
 418               	.LVL39:
 419               	/* #NOAPP */
 420               	.LBE52:
 421               	.LBE51:
 422               	.LBE50:
 423               	.LBE49:
 424               	.LBE45:
 425               	.LBE44:
 191:../../../os/oslib/src/chdelegates.c ****   thread_t *tp;
 192:../../../os/oslib/src/chdelegates.c ****   const call_message_t *cmp;
 193:../../../os/oslib/src/chdelegates.c ****   msg_t ret;
 194:../../../os/oslib/src/chdelegates.c **** 
 195:../../../os/oslib/src/chdelegates.c ****   tp = chMsgWait();
 196:../../../os/oslib/src/chdelegates.c ****   cmp = (const call_message_t *)chMsgGet(tp);
 426               		.loc 1 196 0
 427 000e AA89      		ldd r26,Y+18
 428 0010 BB89      		ldd r27,Y+19
 429               	.LVL40:
 197:../../../os/oslib/src/chdelegates.c ****   ret = cmp->veneer(cmp->argsp);
 430               		.loc 1 197 0
 431 0012 ED91      		ld r30,X+
 432 0014 FC91      		ld r31,X
 433 0016 1197      		sbiw r26,1
 434 0018 1296      		adiw r26,2
 435 001a 8D91      		ld r24,X+
 436 001c 9C91      		ld r25,X
 437 001e 1397      		sbiw r26,2+1
 438 0020 0995      		icall
 439               	.LVL41:
 198:../../../os/oslib/src/chdelegates.c **** 
 199:../../../os/oslib/src/chdelegates.c ****   chMsgRelease(tp, ret);
 440               		.loc 1 199 0
 441 0022 BC01      		movw r22,r24
 442 0024 CE01      		movw r24,r28
 443               	.LVL42:
 444               	/* epilogue start */
 200:../../../os/oslib/src/chdelegates.c **** }
 445               		.loc 1 200 0
 446 0026 DF91      		pop r29
 447 0028 CF91      		pop r28
 199:../../../os/oslib/src/chdelegates.c **** }
 448               		.loc 1 199 0
 449 002a 0C94 0000 		jmp chMsgRelease
 450               	.LVL43:
 451               		.cfi_endproc
 452               	.LFE199:
 454               		.section	.text.chDelegateDispatchTimeout,"ax",@progbits
 455               	.global	chDelegateDispatchTimeout
 457               	chDelegateDispatchTimeout:
 458               	.LFB200:
 201:../../../os/oslib/src/chdelegates.c **** 
 202:../../../os/oslib/src/chdelegates.c **** /**
 203:../../../os/oslib/src/chdelegates.c ****  * @brief   Call messages dispatching with timeout.
 204:../../../os/oslib/src/chdelegates.c ****  * @details The function awaits for an incoming call messages and calls the
 205:../../../os/oslib/src/chdelegates.c ****  *          specified functions, then it returns. In case multiple threads
 206:../../../os/oslib/src/chdelegates.c ****  *          are sending messages then the requests are served in priority
 207:../../../os/oslib/src/chdelegates.c ****  *          order.
 208:../../../os/oslib/src/chdelegates.c ****  *
 209:../../../os/oslib/src/chdelegates.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 210:../../../os/oslib/src/chdelegates.c ****  *                      the following special values are allowed:
 211:../../../os/oslib/src/chdelegates.c ****  *                      - @a TIME_INFINITE no timeout.
 212:../../../os/oslib/src/chdelegates.c ****  * @return              The function outcome.
 213:../../../os/oslib/src/chdelegates.c ****  * @retval MSG_OK       if a function has been called.
 214:../../../os/oslib/src/chdelegates.c ****  * @retval MSG_TIMEOUT  if a timeout occurred.
 215:../../../os/oslib/src/chdelegates.c ****  *
 216:../../../os/oslib/src/chdelegates.c ****  * @api
 217:../../../os/oslib/src/chdelegates.c ****  */
 218:../../../os/oslib/src/chdelegates.c **** msg_t chDelegateDispatchTimeout(sysinterval_t timeout) {
 459               		.loc 1 218 0
 460               		.cfi_startproc
 461               	.LVL44:
 462 0000 CF93      		push r28
 463               	.LCFI14:
 464               		.cfi_def_cfa_offset 3
 465               		.cfi_offset 28, -2
 466 0002 DF93      		push r29
 467               	.LCFI15:
 468               		.cfi_def_cfa_offset 4
 469               		.cfi_offset 29, -3
 470               	/* prologue: function */
 471               	/* frame size = 0 */
 472               	/* stack size = 2 */
 473               	.L__stack_usage = 2
 474               	.LVL45:
 475               	.LBB53:
 476               	.LBB54:
 477               	.LBB55:
 478               	.LBB56:
 479               	.LBB57:
 430:../../../os/common/ports/AVR/chcore.h **** }
 480               		.loc 2 430 0
 481               	/* #APP */
 482               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 483 0004 F894      		cli
 484               	 ;  0 "" 2
 485               	/* #NOAPP */
 486               	.LBE57:
 487               	.LBE56:
 488               	.LBE55:
 100:../../../os/rt/include/chmsg.h ****   chSysUnlock();
 101:../../../os/rt/include/chmsg.h **** 
 102:../../../os/rt/include/chmsg.h ****   return tp;
 103:../../../os/rt/include/chmsg.h **** }
 104:../../../os/rt/include/chmsg.h **** 
 105:../../../os/rt/include/chmsg.h **** /**
 106:../../../os/rt/include/chmsg.h ****  * @brief   Suspends the thread and waits for an incoming message or a
 107:../../../os/rt/include/chmsg.h ****  *          timeout to occur.
 108:../../../os/rt/include/chmsg.h ****  * @post    After receiving a message the function @p chMsgGet() must be
 109:../../../os/rt/include/chmsg.h ****  *          called in order to retrieve the message and then @p chMsgRelease()
 110:../../../os/rt/include/chmsg.h ****  *          must be invoked in order to acknowledge the reception and send
 111:../../../os/rt/include/chmsg.h ****  *          the answer.
 112:../../../os/rt/include/chmsg.h ****  * @note    If the message is a pointer then you can assume that the data
 113:../../../os/rt/include/chmsg.h ****  *          pointed by the message is stable until you invoke @p chMsgRelease()
 114:../../../os/rt/include/chmsg.h ****  *          because the sending thread is suspended until then.
 115:../../../os/rt/include/chmsg.h ****  * @note    The reference counter of the sender thread is not increased, the
 116:../../../os/rt/include/chmsg.h ****  *          returned pointer is a temporary reference.
 117:../../../os/rt/include/chmsg.h ****  *
 118:../../../os/rt/include/chmsg.h ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 119:../../../os/rt/include/chmsg.h ****  *                      the following special values are allowed:
 120:../../../os/rt/include/chmsg.h ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 121:../../../os/rt/include/chmsg.h ****  *                      - @a TIME_INFINITE no timeout.
 122:../../../os/rt/include/chmsg.h ****  * @return              A pointer to the thread carrying the message.
 123:../../../os/rt/include/chmsg.h ****  * @retval NULL         if a timeout occurred.
 124:../../../os/rt/include/chmsg.h ****  *
 125:../../../os/rt/include/chmsg.h ****  * @api
 126:../../../os/rt/include/chmsg.h ****  */
 127:../../../os/rt/include/chmsg.h **** static inline thread_t *chMsgWaitTimeout(sysinterval_t timeout) {
 128:../../../os/rt/include/chmsg.h ****   thread_t *tp;
 129:../../../os/rt/include/chmsg.h **** 
 130:../../../os/rt/include/chmsg.h ****   chSysLock();
 131:../../../os/rt/include/chmsg.h ****   tp = chMsgWaitTimeoutS(timeout);
 489               		.loc 3 131 0
 490 0006 0E94 0000 		call chMsgWaitTimeoutS
 491               	.LVL46:
 492 000a EC01      		movw r28,r24
 493               	.LVL47:
 494               	.LBB58:
 495               	.LBB59:
 496               	.LBB60:
 497               	.LBB61:
 498               		.loc 2 440 0
 499               	/* #APP */
 500               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 501 000c 7894      		sei
 502               	 ;  0 "" 2
 503               	.LVL48:
 504               	/* #NOAPP */
 505               	.LBE61:
 506               	.LBE60:
 507               	.LBE59:
 508               	.LBE58:
 509               	.LBE54:
 510               	.LBE53:
 219:../../../os/oslib/src/chdelegates.c ****   thread_t *tp;
 220:../../../os/oslib/src/chdelegates.c ****   const call_message_t *cmp;
 221:../../../os/oslib/src/chdelegates.c ****   msg_t ret;
 222:../../../os/oslib/src/chdelegates.c **** 
 223:../../../os/oslib/src/chdelegates.c ****   tp = chMsgWaitTimeout(timeout);
 224:../../../os/oslib/src/chdelegates.c ****   if (tp == NULL) {
 511               		.loc 1 224 0
 512 000e 892B      		or r24,r25
 513 0010 01F0      		breq .L10
 514               	.LVL49:
 225:../../../os/oslib/src/chdelegates.c ****     return MSG_TIMEOUT;
 226:../../../os/oslib/src/chdelegates.c ****   }
 227:../../../os/oslib/src/chdelegates.c **** 
 228:../../../os/oslib/src/chdelegates.c ****   cmp = (const call_message_t *)chMsgGet(tp);
 515               		.loc 1 228 0
 516 0012 AA89      		ldd r26,Y+18
 517 0014 BB89      		ldd r27,Y+19
 518               	.LVL50:
 229:../../../os/oslib/src/chdelegates.c ****   ret = cmp->veneer(cmp->argsp);
 519               		.loc 1 229 0
 520 0016 ED91      		ld r30,X+
 521 0018 FC91      		ld r31,X
 522 001a 1197      		sbiw r26,1
 523 001c 1296      		adiw r26,2
 524 001e 8D91      		ld r24,X+
 525 0020 9C91      		ld r25,X
 526 0022 1397      		sbiw r26,2+1
 527 0024 0995      		icall
 528               	.LVL51:
 230:../../../os/oslib/src/chdelegates.c **** 
 231:../../../os/oslib/src/chdelegates.c ****   chMsgRelease(tp, ret);
 529               		.loc 1 231 0
 530 0026 BC01      		movw r22,r24
 531 0028 CE01      		movw r24,r28
 532               	.LVL52:
 533 002a 0E94 0000 		call chMsgRelease
 534               	.LVL53:
 232:../../../os/oslib/src/chdelegates.c **** 
 233:../../../os/oslib/src/chdelegates.c ****   return MSG_OK;
 535               		.loc 1 233 0
 536 002e 80E0      		ldi r24,0
 537 0030 90E0      		ldi r25,0
 538               	.L9:
 539               	/* epilogue start */
 234:../../../os/oslib/src/chdelegates.c **** }
 540               		.loc 1 234 0
 541 0032 DF91      		pop r29
 542 0034 CF91      		pop r28
 543 0036 0895      		ret
 544               	.L10:
 225:../../../os/oslib/src/chdelegates.c ****   }
 545               		.loc 1 225 0
 546 0038 8FEF      		ldi r24,lo8(-1)
 547 003a 9FEF      		ldi r25,lo8(-1)
 548 003c 00C0      		rjmp .L9
 549               		.cfi_endproc
 550               	.LFE200:
 552               		.text
 553               	.Letext0:
 554               		.file 4 "/usr/lib/avr/include/stdint.h"
 555               		.file 5 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 556               		.file 6 "../../../os/rt/include/chearly.h"
 557               		.file 7 "../../../os/rt/include/chobjects.h"
 558               		.file 8 "../../../os/rt/include/chrfcu.h"
 559               		.file 9 "../../../os/rt/include/chdebug.h"
 560               		.file 10 "../../../os/rt/include/chtime.h"
 561               		.file 11 "../../../os/rt/include/chlists.h"
 562               		.file 12 "../../../os/rt/include/chsem.h"
 563               		.file 13 "../../../os/rt/include/chmtx.h"
 564               		.file 14 "/usr/lib/gcc/avr/5.4.0/include/stdarg.h"
 565               		.file 15 "../../../os/oslib/include/chdelegates.h"
 566               		.file 16 "../../../os/rt/include/chsys.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 chdelegates.c
     /tmp/ccxtWCn6.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccxtWCn6.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccxtWCn6.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccxtWCn6.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccxtWCn6.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccxtWCn6.s:13     .text.__ch_delegate_fn0:0000000000000000 __ch_delegate_fn0
     /tmp/ccxtWCn6.s:47     .text.__ch_delegate_fn1:0000000000000000 __ch_delegate_fn1
     /tmp/ccxtWCn6.s:102    .text.__ch_delegate_fn2:0000000000000000 __ch_delegate_fn2
     /tmp/ccxtWCn6.s:164    .text.__ch_delegate_fn3:0000000000000000 __ch_delegate_fn3
     /tmp/ccxtWCn6.s:232    .text.__ch_delegate_fn4:0000000000000000 __ch_delegate_fn4
     /tmp/ccxtWCn6.s:306    .text.chDelegateCallVeneer:0000000000000000 chDelegateCallVeneer
     /tmp/ccxtWCn6.s:372    .text.chDelegateDispatch:0000000000000000 chDelegateDispatch
     /tmp/ccxtWCn6.s:457    .text.chDelegateDispatchTimeout:0000000000000000 chDelegateDispatchTimeout

UNDEFINED SYMBOLS
chMsgSend
chMsgWaitS
chMsgRelease
chMsgWaitTimeoutS
