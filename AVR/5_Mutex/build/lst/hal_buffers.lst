   1               		.file	"hal_buffers.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               		.section	.text.ibqObjectInit,"ax",@progbits
  11               	.global	ibqObjectInit
  13               	ibqObjectInit:
  14               	.LFB241:
  15               		.file 1 "../../../os/hal/src/hal_buffers.c"
   1:../../../os/hal/src/hal_buffers.c **** /*
   2:../../../os/hal/src/hal_buffers.c ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/src/hal_buffers.c **** 
   4:../../../os/hal/src/hal_buffers.c ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/src/hal_buffers.c ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/src/hal_buffers.c ****     You may obtain a copy of the License at
   7:../../../os/hal/src/hal_buffers.c **** 
   8:../../../os/hal/src/hal_buffers.c ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/src/hal_buffers.c **** 
  10:../../../os/hal/src/hal_buffers.c ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/src/hal_buffers.c ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/src/hal_buffers.c ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/src/hal_buffers.c ****     See the License for the specific language governing permissions and
  14:../../../os/hal/src/hal_buffers.c ****     limitations under the License.
  15:../../../os/hal/src/hal_buffers.c **** */
  16:../../../os/hal/src/hal_buffers.c **** 
  17:../../../os/hal/src/hal_buffers.c **** /**
  18:../../../os/hal/src/hal_buffers.c ****  * @file    hal_buffers.c
  19:../../../os/hal/src/hal_buffers.c ****  * @brief   I/O Buffers code.
  20:../../../os/hal/src/hal_buffers.c ****  *
  21:../../../os/hal/src/hal_buffers.c ****  * @addtogroup HAL_BUFFERS
  22:../../../os/hal/src/hal_buffers.c ****  * @details Buffers Queues are used when there is the need to exchange
  23:../../../os/hal/src/hal_buffers.c ****  *          fixed-length data buffers between ISRs and threads.
  24:../../../os/hal/src/hal_buffers.c ****  *          On the ISR side data can be exchanged only using buffers,
  25:../../../os/hal/src/hal_buffers.c ****  *          on the thread side data can be exchanged both using buffers and/or
  26:../../../os/hal/src/hal_buffers.c ****  *          using an emulation of regular byte queues.
  27:../../../os/hal/src/hal_buffers.c ****  *          There are several kind of buffers queues:<br>
  28:../../../os/hal/src/hal_buffers.c ****  *          - <b>Input queue</b>, unidirectional queue where the writer is the
  29:../../../os/hal/src/hal_buffers.c ****  *            ISR side and the reader is the thread side.
  30:../../../os/hal/src/hal_buffers.c ****  *          - <b>Output queue</b>, unidirectional queue where the writer is the
  31:../../../os/hal/src/hal_buffers.c ****  *            thread side and the reader is the ISR side.
  32:../../../os/hal/src/hal_buffers.c ****  *          - <b>Full duplex queue</b>, bidirectional queue. Full duplex queues
  33:../../../os/hal/src/hal_buffers.c ****  *            are implemented by pairing an input queue and an output queue
  34:../../../os/hal/src/hal_buffers.c ****  *            together.
  35:../../../os/hal/src/hal_buffers.c ****  *          .
  36:../../../os/hal/src/hal_buffers.c ****  * @{
  37:../../../os/hal/src/hal_buffers.c ****  */
  38:../../../os/hal/src/hal_buffers.c **** 
  39:../../../os/hal/src/hal_buffers.c **** #include <string.h>
  40:../../../os/hal/src/hal_buffers.c **** 
  41:../../../os/hal/src/hal_buffers.c **** #include "hal.h"
  42:../../../os/hal/src/hal_buffers.c **** 
  43:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  44:../../../os/hal/src/hal_buffers.c **** /* Driver local definitions.                                                 */
  45:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  46:../../../os/hal/src/hal_buffers.c **** 
  47:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  48:../../../os/hal/src/hal_buffers.c **** /* Driver exported variables.                                                */
  49:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  50:../../../os/hal/src/hal_buffers.c **** 
  51:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  52:../../../os/hal/src/hal_buffers.c **** /* Driver local variables and types.                                         */
  53:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  54:../../../os/hal/src/hal_buffers.c **** 
  55:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  56:../../../os/hal/src/hal_buffers.c **** /* Driver local functions.                                                   */
  57:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  58:../../../os/hal/src/hal_buffers.c **** 
  59:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  60:../../../os/hal/src/hal_buffers.c **** /* Driver exported functions.                                                */
  61:../../../os/hal/src/hal_buffers.c **** /*===========================================================================*/
  62:../../../os/hal/src/hal_buffers.c **** 
  63:../../../os/hal/src/hal_buffers.c **** /**
  64:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an input buffers queue object.
  65:../../../os/hal/src/hal_buffers.c ****  *
  66:../../../os/hal/src/hal_buffers.c ****  * @param[out] ibqp     pointer to the @p input_buffers_queue_t object
  67:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
  68:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
  69:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
  70:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
  71:../../../os/hal/src/hal_buffers.c ****  * @param[in] infy      callback called when a buffer is returned to the queue
  72:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
  73:../../../os/hal/src/hal_buffers.c ****  *
  74:../../../os/hal/src/hal_buffers.c ****  * @init
  75:../../../os/hal/src/hal_buffers.c ****  */
  76:../../../os/hal/src/hal_buffers.c **** void ibqObjectInit(input_buffers_queue_t *ibqp, bool suspended, uint8_t *bp,
  77:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t infy, void *link) {
  16               		.loc 1 77 0
  17               		.cfi_startproc
  18               	.LVL0:
  19 0000 7F92      		push r7
  20               	.LCFI0:
  21               		.cfi_def_cfa_offset 3
  22               		.cfi_offset 7, -2
  23 0002 8F92      		push r8
  24               	.LCFI1:
  25               		.cfi_def_cfa_offset 4
  26               		.cfi_offset 8, -3
  27 0004 9F92      		push r9
  28               	.LCFI2:
  29               		.cfi_def_cfa_offset 5
  30               		.cfi_offset 9, -4
  31 0006 AF92      		push r10
  32               	.LCFI3:
  33               		.cfi_def_cfa_offset 6
  34               		.cfi_offset 10, -5
  35 0008 BF92      		push r11
  36               	.LCFI4:
  37               		.cfi_def_cfa_offset 7
  38               		.cfi_offset 11, -6
  39 000a CF92      		push r12
  40               	.LCFI5:
  41               		.cfi_def_cfa_offset 8
  42               		.cfi_offset 12, -7
  43 000c DF92      		push r13
  44               	.LCFI6:
  45               		.cfi_def_cfa_offset 9
  46               		.cfi_offset 13, -8
  47 000e EF92      		push r14
  48               	.LCFI7:
  49               		.cfi_def_cfa_offset 10
  50               		.cfi_offset 14, -9
  51 0010 FF92      		push r15
  52               	.LCFI8:
  53               		.cfi_def_cfa_offset 11
  54               		.cfi_offset 15, -10
  55 0012 0F93      		push r16
  56               	.LCFI9:
  57               		.cfi_def_cfa_offset 12
  58               		.cfi_offset 16, -11
  59 0014 1F93      		push r17
  60               	.LCFI10:
  61               		.cfi_def_cfa_offset 13
  62               		.cfi_offset 17, -12
  63 0016 CF93      		push r28
  64               	.LCFI11:
  65               		.cfi_def_cfa_offset 14
  66               		.cfi_offset 28, -13
  67 0018 DF93      		push r29
  68               	.LCFI12:
  69               		.cfi_def_cfa_offset 15
  70               		.cfi_offset 29, -14
  71               	/* prologue: function */
  72               	/* frame size = 0 */
  73               	/* stack size = 13 */
  74               	.L__stack_usage = 13
  75 001a EC01      		movw r28,r24
  76 001c 762E      		mov r7,r22
  77 001e 5A01      		movw r10,r20
  78 0020 4901      		movw r8,r18
  79               	.LVL1:
  80               	.LBB190:
  81               	.LBB191:
  82               		.file 2 "../../../os/hal/osal/rt-nil/osal.h"
   1:../../../os/hal/osal/rt-nil/osal.h **** /*
   2:../../../os/hal/osal/rt-nil/osal.h ****     ChibiOS - Copyright (C) 2006..2018 Giovanni Di Sirio
   3:../../../os/hal/osal/rt-nil/osal.h **** 
   4:../../../os/hal/osal/rt-nil/osal.h ****     Licensed under the Apache License, Version 2.0 (the "License");
   5:../../../os/hal/osal/rt-nil/osal.h ****     you may not use this file except in compliance with the License.
   6:../../../os/hal/osal/rt-nil/osal.h ****     You may obtain a copy of the License at
   7:../../../os/hal/osal/rt-nil/osal.h **** 
   8:../../../os/hal/osal/rt-nil/osal.h ****         http://www.apache.org/licenses/LICENSE-2.0
   9:../../../os/hal/osal/rt-nil/osal.h **** 
  10:../../../os/hal/osal/rt-nil/osal.h ****     Unless required by applicable law or agreed to in writing, software
  11:../../../os/hal/osal/rt-nil/osal.h ****     distributed under the License is distributed on an "AS IS" BASIS,
  12:../../../os/hal/osal/rt-nil/osal.h ****     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  13:../../../os/hal/osal/rt-nil/osal.h ****     See the License for the specific language governing permissions and
  14:../../../os/hal/osal/rt-nil/osal.h ****     limitations under the License.
  15:../../../os/hal/osal/rt-nil/osal.h **** */
  16:../../../os/hal/osal/rt-nil/osal.h **** 
  17:../../../os/hal/osal/rt-nil/osal.h **** /**
  18:../../../os/hal/osal/rt-nil/osal.h ****  * @file    osal.h
  19:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module header.
  20:../../../os/hal/osal/rt-nil/osal.h ****  *
  21:../../../os/hal/osal/rt-nil/osal.h ****  * @addtogroup OSAL
  22:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  23:../../../os/hal/osal/rt-nil/osal.h ****  */
  24:../../../os/hal/osal/rt-nil/osal.h **** 
  25:../../../os/hal/osal/rt-nil/osal.h **** #ifndef OSAL_H
  26:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_H
  27:../../../os/hal/osal/rt-nil/osal.h **** 
  28:../../../os/hal/osal/rt-nil/osal.h **** #include <stddef.h>
  29:../../../os/hal/osal/rt-nil/osal.h **** #include <stdint.h>
  30:../../../os/hal/osal/rt-nil/osal.h **** #include <stdbool.h>
  31:../../../os/hal/osal/rt-nil/osal.h **** 
  32:../../../os/hal/osal/rt-nil/osal.h **** #include "ch.h"
  33:../../../os/hal/osal/rt-nil/osal.h **** 
  34:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  35:../../../os/hal/osal/rt-nil/osal.h **** /* Module constants.                                                         */
  36:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
  37:../../../os/hal/osal/rt-nil/osal.h **** 
  38:../../../os/hal/osal/rt-nil/osal.h **** /**
  39:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Common constants
  40:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  41:../../../os/hal/osal/rt-nil/osal.h ****  */
  42:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(FALSE) || defined(__DOXYGEN__)
  43:../../../os/hal/osal/rt-nil/osal.h **** #define FALSE                               0
  44:../../../os/hal/osal/rt-nil/osal.h **** #endif
  45:../../../os/hal/osal/rt-nil/osal.h **** 
  46:../../../os/hal/osal/rt-nil/osal.h **** #if !defined(TRUE) || defined(__DOXYGEN__)
  47:../../../os/hal/osal/rt-nil/osal.h **** #define TRUE                                1
  48:../../../os/hal/osal/rt-nil/osal.h **** #endif
  49:../../../os/hal/osal/rt-nil/osal.h **** 
  50:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_SUCCESS                        false
  51:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_FAILED                         true
  52:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  53:../../../os/hal/osal/rt-nil/osal.h **** 
  54:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  55:../../../os/hal/osal/rt-nil/osal.h **** /**
  56:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Messages
  57:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  58:../../../os/hal/osal/rt-nil/osal.h ****  */
  59:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_OK                              (msg_t)0
  60:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_TIMEOUT                         (msg_t)-1
  61:../../../os/hal/osal/rt-nil/osal.h **** #define MSG_RESET                           (msg_t)-2
  62:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  63:../../../os/hal/osal/rt-nil/osal.h **** #endif
  64:../../../os/hal/osal/rt-nil/osal.h **** 
  65:../../../os/hal/osal/rt-nil/osal.h **** #if 0
  66:../../../os/hal/osal/rt-nil/osal.h **** /**
  67:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Special time constants
  68:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  69:../../../os/hal/osal/rt-nil/osal.h ****  */
  70:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_IMMEDIATE                      ((sysinterval_t)0)
  71:../../../os/hal/osal/rt-nil/osal.h **** #define TIME_INFINITE                       ((sysinterval_t)-1)
  72:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  73:../../../os/hal/osal/rt-nil/osal.h **** #endif
  74:../../../os/hal/osal/rt-nil/osal.h **** 
  75:../../../os/hal/osal/rt-nil/osal.h **** /**
  76:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick modes.
  77:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  78:../../../os/hal/osal/rt-nil/osal.h ****  */
  79:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_NONE                   0
  80:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_PERIODIC               1
  81:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE_FREERUNNING            2
  82:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
  83:../../../os/hal/osal/rt-nil/osal.h **** 
  84:../../../os/hal/osal/rt-nil/osal.h **** /**
  85:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Systick parameters.
  86:../../../os/hal/osal/rt-nil/osal.h ****  * @{
  87:../../../os/hal/osal/rt-nil/osal.h ****  */
  88:../../../os/hal/osal/rt-nil/osal.h **** /**
  89:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Size in bits of the @p systick_t type.
  90:../../../os/hal/osal/rt-nil/osal.h ****  */
  91:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_RESOLUTION                  CH_CFG_ST_RESOLUTION
  92:../../../os/hal/osal/rt-nil/osal.h **** 
  93:../../../os/hal/osal/rt-nil/osal.h **** /**
  94:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Required systick frequency or resolution.
  95:../../../os/hal/osal/rt-nil/osal.h ****  */
  96:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_FREQUENCY                   CH_CFG_ST_FREQUENCY
  97:../../../os/hal/osal/rt-nil/osal.h **** 
  98:../../../os/hal/osal/rt-nil/osal.h **** /**
  99:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick mode required by the underlying OS.
 100:../../../os/hal/osal/rt-nil/osal.h ****  */
 101:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_ST_TIMEDELTA == 0) || defined(__DOXYGEN__)
 102:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_PERIODIC
 103:../../../os/hal/osal/rt-nil/osal.h **** #else
 104:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_ST_MODE                        OSAL_ST_MODE_FREERUNNING
 105:../../../os/hal/osal/rt-nil/osal.h **** #endif
 106:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 107:../../../os/hal/osal/rt-nil/osal.h **** 
 108:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 109:../../../os/hal/osal/rt-nil/osal.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 111:../../../os/hal/osal/rt-nil/osal.h **** 
 112:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 113:../../../os/hal/osal/rt-nil/osal.h **** /* Derived constants and error checks.                                       */
 114:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 115:../../../os/hal/osal/rt-nil/osal.h **** 
 116:../../../os/hal/osal/rt-nil/osal.h **** #if !(OSAL_ST_MODE == OSAL_ST_MODE_NONE) &&                                 \
 117:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_PERIODIC) &&                             \
 118:../../../os/hal/osal/rt-nil/osal.h ****     !(OSAL_ST_MODE == OSAL_ST_MODE_FREERUNNING)
 119:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_MODE setting in osal.h"
 120:../../../os/hal/osal/rt-nil/osal.h **** #endif
 121:../../../os/hal/osal/rt-nil/osal.h **** 
 122:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_RESOLUTION != 16) && (OSAL_ST_RESOLUTION != 32) &&             \
 123:../../../os/hal/osal/rt-nil/osal.h ****     (OSAL_ST_RESOLUTION != 64)
 124:../../../os/hal/osal/rt-nil/osal.h **** #error "invalid OSAL_ST_RESOLUTION, must be 16, 32 or 64"
 125:../../../os/hal/osal/rt-nil/osal.h **** #endif
 126:../../../os/hal/osal/rt-nil/osal.h **** 
 127:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 128:../../../os/hal/osal/rt-nil/osal.h **** /* Module data structures and types.                                         */
 129:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 130:../../../os/hal/osal/rt-nil/osal.h **** 
 131:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 132:../../../os/hal/osal/rt-nil/osal.h **** /**
 133:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a system status word.
 134:../../../os/hal/osal/rt-nil/osal.h ****  */
 135:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t syssts_t;
 136:../../../os/hal/osal/rt-nil/osal.h **** #endif
 137:../../../os/hal/osal/rt-nil/osal.h **** 
 138:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 139:../../../os/hal/osal/rt-nil/osal.h **** /**
 140:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a message.
 141:../../../os/hal/osal/rt-nil/osal.h ****  */
 142:../../../os/hal/osal/rt-nil/osal.h **** typedef int32_t msg_t;
 143:../../../os/hal/osal/rt-nil/osal.h **** #endif
 144:../../../os/hal/osal/rt-nil/osal.h **** 
 145:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 146:../../../os/hal/osal/rt-nil/osal.h **** /**
 147:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time counter.
 148:../../../os/hal/osal/rt-nil/osal.h ****  */
 149:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t systime_t;
 150:../../../os/hal/osal/rt-nil/osal.h **** #endif
 151:../../../os/hal/osal/rt-nil/osal.h **** 
 152:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 153:../../../os/hal/osal/rt-nil/osal.h **** /**
 154:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of system time interval.
 155:../../../os/hal/osal/rt-nil/osal.h ****  */
 156:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t sysinterval_t;
 157:../../../os/hal/osal/rt-nil/osal.h **** #endif
 158:../../../os/hal/osal/rt-nil/osal.h **** 
 159:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 160:../../../os/hal/osal/rt-nil/osal.h **** /**
 161:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of time conversion variable.
 162:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type must have double width than other time types, it is
 163:../../../os/hal/osal/rt-nil/osal.h ****  *          only used internally for conversions.
 164:../../../os/hal/osal/rt-nil/osal.h ****  */
 165:../../../os/hal/osal/rt-nil/osal.h **** typedef uint64_t time_conv_t;
 166:../../../os/hal/osal/rt-nil/osal.h **** #endif
 167:../../../os/hal/osal/rt-nil/osal.h **** 
 168:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 169:../../../os/hal/osal/rt-nil/osal.h **** /**
 170:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of realtime counter.
 171:../../../os/hal/osal/rt-nil/osal.h ****  */
 172:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t rtcnt_t;
 173:../../../os/hal/osal/rt-nil/osal.h **** #endif
 174:../../../os/hal/osal/rt-nil/osal.h **** 
 175:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 176:../../../os/hal/osal/rt-nil/osal.h **** /**
 177:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread reference.
 178:../../../os/hal/osal/rt-nil/osal.h ****  */
 179:../../../os/hal/osal/rt-nil/osal.h **** typedef thread_t * thread_reference_t;
 180:../../../os/hal/osal/rt-nil/osal.h **** #endif
 181:../../../os/hal/osal/rt-nil/osal.h **** 
 182:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 183:../../../os/hal/osal/rt-nil/osal.h **** /**
 184:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags mask.
 185:../../../os/hal/osal/rt-nil/osal.h ****  */
 186:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t eventflags_t;
 187:../../../os/hal/osal/rt-nil/osal.h **** #endif
 188:../../../os/hal/osal/rt-nil/osal.h **** 
 189:../../../os/hal/osal/rt-nil/osal.h **** #if (CH_CFG_USE_EVENTS == FALSE) || defined(__DOXYGEN__)
 190:../../../os/hal/osal/rt-nil/osal.h **** /**
 191:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event flags object.
 192:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 193:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 194:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 195:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 196:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 197:../../../os/hal/osal/rt-nil/osal.h ****  */
 198:../../../os/hal/osal/rt-nil/osal.h **** typedef struct event_source event_source_t;
 199:../../../os/hal/osal/rt-nil/osal.h **** 
 200:../../../os/hal/osal/rt-nil/osal.h **** /**
 201:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of an event source callback.
 202:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This type is not part of the OSAL API and is provided
 203:../../../os/hal/osal/rt-nil/osal.h ****  *          exclusively as an example and for convenience.
 204:../../../os/hal/osal/rt-nil/osal.h ****  */
 205:../../../os/hal/osal/rt-nil/osal.h **** typedef void (*eventcallback_t)(event_source_t *esp);
 206:../../../os/hal/osal/rt-nil/osal.h **** 
 207:../../../os/hal/osal/rt-nil/osal.h **** /**
 208:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Events source object.
 209:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The content of this structure is not part of the API and should
 210:../../../os/hal/osal/rt-nil/osal.h ****  *          not be relied upon. Implementers may define this structure in
 211:../../../os/hal/osal/rt-nil/osal.h ****  *          an entirely different way.
 212:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Retrieval and clearing of the flags are not defined in this
 213:../../../os/hal/osal/rt-nil/osal.h ****  *          API and are implementation-dependent.
 214:../../../os/hal/osal/rt-nil/osal.h ****  */
 215:../../../os/hal/osal/rt-nil/osal.h **** struct event_source {
 216:../../../os/hal/osal/rt-nil/osal.h ****   volatile eventflags_t flags;      /**< @brief Stored event flags.         */
 217:../../../os/hal/osal/rt-nil/osal.h ****   eventcallback_t       cb;         /**< @brief Event source callback.      */
 218:../../../os/hal/osal/rt-nil/osal.h ****   void                  *param;     /**< @brief User defined field.         */
 219:../../../os/hal/osal/rt-nil/osal.h **** };
 220:../../../os/hal/osal/rt-nil/osal.h **** #endif /* CH_CFG_USE_EVENTS == FALSE */
 221:../../../os/hal/osal/rt-nil/osal.h **** 
 222:../../../os/hal/osal/rt-nil/osal.h **** /**
 223:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a mutex.
 224:../../../os/hal/osal/rt-nil/osal.h ****  * @note    If the OS does not support mutexes or there is no OS then the
 225:../../../os/hal/osal/rt-nil/osal.h ****  *          mechanism can be simulated.
 226:../../../os/hal/osal/rt-nil/osal.h ****  */
 227:../../../os/hal/osal/rt-nil/osal.h **** #if CH_CFG_USE_MUTEXES || defined(__DOXYGEN__)
 228:../../../os/hal/osal/rt-nil/osal.h **** #elif CH_CFG_USE_SEMAPHORES
 229:../../../os/hal/osal/rt-nil/osal.h **** typedef semaphore_t mutex_t;
 230:../../../os/hal/osal/rt-nil/osal.h **** #else
 231:../../../os/hal/osal/rt-nil/osal.h **** typedef uint32_t mutex_t;
 232:../../../os/hal/osal/rt-nil/osal.h **** #endif
 233:../../../os/hal/osal/rt-nil/osal.h **** 
 234:../../../os/hal/osal/rt-nil/osal.h **** #if 0
 235:../../../os/hal/osal/rt-nil/osal.h **** /**
 236:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Type of a thread queue.
 237:../../../os/hal/osal/rt-nil/osal.h ****  * @details A thread queue is a queue of sleeping threads, queued threads
 238:../../../os/hal/osal/rt-nil/osal.h ****  *          can be dequeued one at time or all together.
 239:../../../os/hal/osal/rt-nil/osal.h ****  * @note    In this implementation it is implemented as a single reference
 240:../../../os/hal/osal/rt-nil/osal.h ****  *          because there are no real threads.
 241:../../../os/hal/osal/rt-nil/osal.h ****  */
 242:../../../os/hal/osal/rt-nil/osal.h **** typedef struct {
 243:../../../os/hal/osal/rt-nil/osal.h ****   thread_reference_t    tr;
 244:../../../os/hal/osal/rt-nil/osal.h **** } threads_queue_t;
 245:../../../os/hal/osal/rt-nil/osal.h **** #endif
 246:../../../os/hal/osal/rt-nil/osal.h **** 
 247:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 248:../../../os/hal/osal/rt-nil/osal.h **** /* Module macros.                                                            */
 249:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 250:../../../os/hal/osal/rt-nil/osal.h **** 
 251:../../../os/hal/osal/rt-nil/osal.h **** /**
 252:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Debug related macros
 253:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 254:../../../os/hal/osal/rt-nil/osal.h ****  */
 255:../../../os/hal/osal/rt-nil/osal.h **** /**
 256:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Condition assertion.
 257:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics with a
 258:../../../os/hal/osal/rt-nil/osal.h ****  *          message and halts.
 259:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_ASSERTIONS
 260:../../../os/hal/osal/rt-nil/osal.h ****  *          switch is enabled.
 261:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The remark string is not currently used except for putting a
 262:../../../os/hal/osal/rt-nil/osal.h ****  *          comment in the code about the assertion.
 263:../../../os/hal/osal/rt-nil/osal.h ****  *
 264:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 265:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] remark    a remark string
 266:../../../os/hal/osal/rt-nil/osal.h ****  *
 267:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 268:../../../os/hal/osal/rt-nil/osal.h ****  */
 269:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgAssert(c, remark) chDbgAssert(c, remark)
 270:../../../os/hal/osal/rt-nil/osal.h **** 
 271:../../../os/hal/osal/rt-nil/osal.h **** /**
 272:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Function parameters check.
 273:../../../os/hal/osal/rt-nil/osal.h ****  * @details If the condition check fails then the OSAL panics and halts.
 274:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The condition is tested only if the @p OSAL_ENABLE_CHECKS switch
 275:../../../os/hal/osal/rt-nil/osal.h ****  *          is enabled.
 276:../../../os/hal/osal/rt-nil/osal.h ****  *
 277:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] c         the condition to be verified to be true
 278:../../../os/hal/osal/rt-nil/osal.h ****  *
 279:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 280:../../../os/hal/osal/rt-nil/osal.h ****  */
 281:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheck(c) chDbgCheck(c)
 282:../../../os/hal/osal/rt-nil/osal.h **** 
 283:../../../os/hal/osal/rt-nil/osal.h **** /**
 284:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   I-Class state check.
 285:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 286:../../../os/hal/osal/rt-nil/osal.h ****  */
 287:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassI() chDbgCheckClassI()
 288:../../../os/hal/osal/rt-nil/osal.h **** 
 289:../../../os/hal/osal/rt-nil/osal.h **** /**
 290:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   S-Class state check.
 291:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 292:../../../os/hal/osal/rt-nil/osal.h ****  */
 293:../../../os/hal/osal/rt-nil/osal.h **** #define osalDbgCheckClassS() chDbgCheckClassS()
 294:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 295:../../../os/hal/osal/rt-nil/osal.h **** 
 296:../../../os/hal/osal/rt-nil/osal.h **** /**
 297:../../../os/hal/osal/rt-nil/osal.h ****  * @name    IRQ service routines wrappers
 298:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 299:../../../os/hal/osal/rt-nil/osal.h ****  */
 300:../../../os/hal/osal/rt-nil/osal.h **** /**
 301:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Priority level verification macro.
 302:../../../os/hal/osal/rt-nil/osal.h ****  */
 303:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_IS_VALID_PRIORITY(n) CH_IRQ_IS_VALID_KERNEL_PRIORITY(n)
 304:../../../os/hal/osal/rt-nil/osal.h **** 
 305:../../../os/hal/osal/rt-nil/osal.h **** /**
 306:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ prologue code.
 307:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the start of all IRQ handlers.
 308:../../../os/hal/osal/rt-nil/osal.h ****  */
 309:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_PROLOGUE() CH_IRQ_PROLOGUE()
 310:../../../os/hal/osal/rt-nil/osal.h **** 
 311:../../../os/hal/osal/rt-nil/osal.h **** /**
 312:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ epilogue code.
 313:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro must be inserted at the end of all IRQ handlers.
 314:../../../os/hal/osal/rt-nil/osal.h ****  */
 315:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_EPILOGUE() CH_IRQ_EPILOGUE()
 316:../../../os/hal/osal/rt-nil/osal.h **** 
 317:../../../os/hal/osal/rt-nil/osal.h **** /**
 318:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   IRQ handler function declaration.
 319:../../../os/hal/osal/rt-nil/osal.h ****  * @details This macro hides the details of an ISR function declaration.
 320:../../../os/hal/osal/rt-nil/osal.h ****  *
 321:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] id        a vector name as defined in @p vectors.s
 322:../../../os/hal/osal/rt-nil/osal.h ****  */
 323:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_IRQ_HANDLER(id) CH_IRQ_HANDLER(id)
 324:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 325:../../../os/hal/osal/rt-nil/osal.h **** 
 326:../../../os/hal/osal/rt-nil/osal.h **** /**
 327:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities
 328:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 329:../../../os/hal/osal/rt-nil/osal.h ****  */
 330:../../../os/hal/osal/rt-nil/osal.h **** /**
 331:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to time interval.
 332:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to system ticks number.
 333:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 334:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 335:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 336:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 337:../../../os/hal/osal/rt-nil/osal.h ****  *
 338:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      number of seconds
 339:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 340:../../../os/hal/osal/rt-nil/osal.h ****  *
 341:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 342:../../../os/hal/osal/rt-nil/osal.h ****  */
 343:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2I(secs) TIME_S2I(secs)
 344:../../../os/hal/osal/rt-nil/osal.h **** 
 345:../../../os/hal/osal/rt-nil/osal.h **** /**
 346:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to time interval.
 347:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to system ticks number.
 348:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 349:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 350:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 351:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 352:../../../os/hal/osal/rt-nil/osal.h ****  *
 353:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     number of milliseconds
 354:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 355:../../../os/hal/osal/rt-nil/osal.h ****  *
 356:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 357:../../../os/hal/osal/rt-nil/osal.h ****  */
 358:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2I(msecs) TIME_MS2I(msecs)
 359:../../../os/hal/osal/rt-nil/osal.h **** 
 360:../../../os/hal/osal/rt-nil/osal.h **** /**
 361:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to time interval.
 362:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to system ticks number.
 363:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next tick boundary.
 364:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 365:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 366:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 367:../../../os/hal/osal/rt-nil/osal.h ****  *
 368:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     number of microseconds
 369:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of ticks.
 370:../../../os/hal/osal/rt-nil/osal.h ****  *
 371:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 372:../../../os/hal/osal/rt-nil/osal.h ****  */
 373:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2I(usecs) TIME_US2I(usecs)
 374:../../../os/hal/osal/rt-nil/osal.h **** 
 375:../../../os/hal/osal/rt-nil/osal.h **** /**
 376:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to seconds.
 377:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to seconds.
 378:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next second boundary.
 379:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 380:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 381:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 382:../../../os/hal/osal/rt-nil/osal.h ****  *
 383:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 384:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of seconds.
 385:../../../os/hal/osal/rt-nil/osal.h ****  *
 386:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 387:../../../os/hal/osal/rt-nil/osal.h ****  */
 388:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2S(interval) TIME_I2S(interval)
 389:../../../os/hal/osal/rt-nil/osal.h **** 
 390:../../../os/hal/osal/rt-nil/osal.h **** /**
 391:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to milliseconds.
 392:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to milliseconds.
 393:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next millisecond boundary.
 394:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 395:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 396:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 397:../../../os/hal/osal/rt-nil/osal.h ****  *
 398:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 399:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of milliseconds.
 400:../../../os/hal/osal/rt-nil/osal.h ****  *
 401:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 402:../../../os/hal/osal/rt-nil/osal.h ****  */
 403:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2MS(interval) TIME_I2MS(interval)
 404:../../../os/hal/osal/rt-nil/osal.h **** 
 405:../../../os/hal/osal/rt-nil/osal.h **** /**
 406:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Time interval to microseconds.
 407:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from system ticks number to microseconds.
 408:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded up to the next microsecond boundary.
 409:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Use of this macro for large values is not secure because
 410:../../../os/hal/osal/rt-nil/osal.h ****  *          integer overflows, make sure your value can be correctly
 411:../../../os/hal/osal/rt-nil/osal.h ****  *          converted.
 412:../../../os/hal/osal/rt-nil/osal.h ****  *
 413:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval in ticks
 414:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of microseconds.
 415:../../../os/hal/osal/rt-nil/osal.h ****  *
 416:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 417:../../../os/hal/osal/rt-nil/osal.h ****  */
 418:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_I2US(interval) TIME_I2US(interval)
 419:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 420:../../../os/hal/osal/rt-nil/osal.h **** 
 421:../../../os/hal/osal/rt-nil/osal.h **** /**
 422:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Time conversion utilities for the realtime counter
 423:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 424:../../../os/hal/osal/rt-nil/osal.h ****  */
 425:../../../os/hal/osal/rt-nil/osal.h **** /**
 426:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Seconds to realtime counter.
 427:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from seconds to realtime counter cycles.
 428:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1.
 429:../../../os/hal/osal/rt-nil/osal.h ****  *
 430:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 431:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sec       number of seconds
 432:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 433:../../../os/hal/osal/rt-nil/osal.h ****  *
 434:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 435:../../../os/hal/osal/rt-nil/osal.h ****  */
 436:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_S2RTC(freq, sec) S2RTC(freq, sec)
 437:../../../os/hal/osal/rt-nil/osal.h **** 
 438:../../../os/hal/osal/rt-nil/osal.h **** /**
 439:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Milliseconds to realtime counter.
 440:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from milliseconds to realtime counter cycles.
 441:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next millisecond boundary.
 442:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000.
 443:../../../os/hal/osal/rt-nil/osal.h ****  *
 444:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 445:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msec      number of milliseconds
 446:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 447:../../../os/hal/osal/rt-nil/osal.h ****  *
 448:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 449:../../../os/hal/osal/rt-nil/osal.h ****  */
 450:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_MS2RTC(freq, msec) MS2RTC(freq, msec)
 451:../../../os/hal/osal/rt-nil/osal.h **** 
 452:../../../os/hal/osal/rt-nil/osal.h **** /**
 453:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Microseconds to realtime counter.
 454:../../../os/hal/osal/rt-nil/osal.h ****  * @details Converts from microseconds to realtime counter cycles.
 455:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The result is rounded upward to the next microsecond boundary.
 456:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The macro assumes that @p freq >= @p 1000000.
 457:../../../os/hal/osal/rt-nil/osal.h ****  *
 458:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] freq      clock frequency, in Hz, of the realtime counter
 459:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usec      number of microseconds
 460:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The number of cycles.
 461:../../../os/hal/osal/rt-nil/osal.h ****  *
 462:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 463:../../../os/hal/osal/rt-nil/osal.h ****  */
 464:../../../os/hal/osal/rt-nil/osal.h **** #define OSAL_US2RTC(freq, usec) US2RTC(freq, usec)
 465:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 466:../../../os/hal/osal/rt-nil/osal.h **** 
 467:../../../os/hal/osal/rt-nil/osal.h **** /**
 468:../../../os/hal/osal/rt-nil/osal.h ****  * @name    Sleep macros using absolute time
 469:../../../os/hal/osal/rt-nil/osal.h ****  * @{
 470:../../../os/hal/osal/rt-nil/osal.h ****  */
 471:../../../os/hal/osal/rt-nil/osal.h **** /**
 472:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of seconds.
 473:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 474:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 475:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 476:../../../os/hal/osal/rt-nil/osal.h ****  *
 477:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] secs      time in seconds, must be different from zero
 478:../../../os/hal/osal/rt-nil/osal.h ****  *
 479:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 480:../../../os/hal/osal/rt-nil/osal.h ****  */
 481:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepSeconds(secs) osalThreadSleep(OSAL_S2I(secs))
 482:../../../os/hal/osal/rt-nil/osal.h **** 
 483:../../../os/hal/osal/rt-nil/osal.h **** /**
 484:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 485:../../../os/hal/osal/rt-nil/osal.h ****  *          milliseconds.
 486:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 487:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 488:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 489:../../../os/hal/osal/rt-nil/osal.h ****  *
 490:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msecs     time in milliseconds, must be different from zero
 491:../../../os/hal/osal/rt-nil/osal.h ****  *
 492:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 493:../../../os/hal/osal/rt-nil/osal.h ****  */
 494:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMilliseconds(msecs) osalThreadSleep(OSAL_MS2I(msecs))
 495:../../../os/hal/osal/rt-nil/osal.h **** 
 496:../../../os/hal/osal/rt-nil/osal.h **** /**
 497:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Delays the invoking thread for the specified number of
 498:../../../os/hal/osal/rt-nil/osal.h ****  *          microseconds.
 499:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The specified time is rounded up to a value allowed by the real
 500:../../../os/hal/osal/rt-nil/osal.h ****  *          system tick clock.
 501:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The maximum specifiable value is implementation dependent.
 502:../../../os/hal/osal/rt-nil/osal.h ****  *
 503:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] usecs     time in microseconds, must be different from zero
 504:../../../os/hal/osal/rt-nil/osal.h ****  *
 505:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 506:../../../os/hal/osal/rt-nil/osal.h ****  */
 507:../../../os/hal/osal/rt-nil/osal.h **** #define osalThreadSleepMicroseconds(usecs) osalThreadSleep(OSAL_US2I(usecs))
 508:../../../os/hal/osal/rt-nil/osal.h **** /** @} */
 509:../../../os/hal/osal/rt-nil/osal.h **** 
 510:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 511:../../../os/hal/osal/rt-nil/osal.h **** /* External declarations.                                                    */
 512:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 513:../../../os/hal/osal/rt-nil/osal.h **** 
 514:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 515:../../../os/hal/osal/rt-nil/osal.h **** extern "C" {
 516:../../../os/hal/osal/rt-nil/osal.h **** #endif
 517:../../../os/hal/osal/rt-nil/osal.h **** 
 518:../../../os/hal/osal/rt-nil/osal.h **** #ifdef __cplusplus
 519:../../../os/hal/osal/rt-nil/osal.h **** }
 520:../../../os/hal/osal/rt-nil/osal.h **** #endif
 521:../../../os/hal/osal/rt-nil/osal.h **** 
 522:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 523:../../../os/hal/osal/rt-nil/osal.h **** /* Module inline functions.                                                  */
 524:../../../os/hal/osal/rt-nil/osal.h **** /*===========================================================================*/
 525:../../../os/hal/osal/rt-nil/osal.h **** 
 526:../../../os/hal/osal/rt-nil/osal.h **** /**
 527:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   OSAL module initialization.
 528:../../../os/hal/osal/rt-nil/osal.h ****  *
 529:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 530:../../../os/hal/osal/rt-nil/osal.h ****  */
 531:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalInit(void) {
 532:../../../os/hal/osal/rt-nil/osal.h **** 
 533:../../../os/hal/osal/rt-nil/osal.h **** }
 534:../../../os/hal/osal/rt-nil/osal.h **** 
 535:../../../os/hal/osal/rt-nil/osal.h **** /**
 536:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   System halt with error message.
 537:../../../os/hal/osal/rt-nil/osal.h ****  *
 538:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] reason    the halt message pointer
 539:../../../os/hal/osal/rt-nil/osal.h ****  *
 540:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 541:../../../os/hal/osal/rt-nil/osal.h ****  */
 542:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysHalt(const char *reason) {
 543:../../../os/hal/osal/rt-nil/osal.h **** 
 544:../../../os/hal/osal/rt-nil/osal.h ****   chSysHalt(reason);
 545:../../../os/hal/osal/rt-nil/osal.h **** }
 546:../../../os/hal/osal/rt-nil/osal.h **** 
 547:../../../os/hal/osal/rt-nil/osal.h **** /**
 548:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Disables interrupts globally.
 549:../../../os/hal/osal/rt-nil/osal.h ****  *
 550:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 551:../../../os/hal/osal/rt-nil/osal.h ****  */
 552:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysDisable(void) {
 553:../../../os/hal/osal/rt-nil/osal.h **** 
 554:../../../os/hal/osal/rt-nil/osal.h ****   chSysDisable();
 555:../../../os/hal/osal/rt-nil/osal.h **** }
 556:../../../os/hal/osal/rt-nil/osal.h **** 
 557:../../../os/hal/osal/rt-nil/osal.h **** /**
 558:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enables interrupts globally.
 559:../../../os/hal/osal/rt-nil/osal.h ****  *
 560:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 561:../../../os/hal/osal/rt-nil/osal.h ****  */
 562:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysEnable(void) {
 563:../../../os/hal/osal/rt-nil/osal.h **** 
 564:../../../os/hal/osal/rt-nil/osal.h ****   chSysEnable();
 565:../../../os/hal/osal/rt-nil/osal.h **** }
 566:../../../os/hal/osal/rt-nil/osal.h **** 
 567:../../../os/hal/osal/rt-nil/osal.h **** /**
 568:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from thread context.
 569:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 570:../../../os/hal/osal/rt-nil/osal.h ****  *
 571:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 572:../../../os/hal/osal/rt-nil/osal.h ****  */
 573:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLock(void) {
 574:../../../os/hal/osal/rt-nil/osal.h **** 
 575:../../../os/hal/osal/rt-nil/osal.h ****   chSysLock();
 576:../../../os/hal/osal/rt-nil/osal.h **** }
 577:../../../os/hal/osal/rt-nil/osal.h **** 
 578:../../../os/hal/osal/rt-nil/osal.h **** /**
 579:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from thread context.
 580:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 581:../../../os/hal/osal/rt-nil/osal.h ****  *
 582:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 583:../../../os/hal/osal/rt-nil/osal.h ****  */
 584:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlock(void) {
 585:../../../os/hal/osal/rt-nil/osal.h **** 
 586:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlock();
 587:../../../os/hal/osal/rt-nil/osal.h **** }
 588:../../../os/hal/osal/rt-nil/osal.h **** 
 589:../../../os/hal/osal/rt-nil/osal.h **** /**
 590:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enters a critical zone from ISR context.
 591:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 592:../../../os/hal/osal/rt-nil/osal.h ****  *
 593:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 594:../../../os/hal/osal/rt-nil/osal.h ****  */
 595:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysLockFromISR(void) {
 596:../../../os/hal/osal/rt-nil/osal.h **** 
 597:../../../os/hal/osal/rt-nil/osal.h ****   chSysLockFromISR();
 598:../../../os/hal/osal/rt-nil/osal.h **** }
 599:../../../os/hal/osal/rt-nil/osal.h **** 
 600:../../../os/hal/osal/rt-nil/osal.h **** /**
 601:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Leaves a critical zone from ISR context.
 602:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function cannot be used for reentrant critical zones.
 603:../../../os/hal/osal/rt-nil/osal.h ****  *
 604:../../../os/hal/osal/rt-nil/osal.h ****  * @special
 605:../../../os/hal/osal/rt-nil/osal.h ****  */
 606:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysUnlockFromISR(void) {
 607:../../../os/hal/osal/rt-nil/osal.h **** 
 608:../../../os/hal/osal/rt-nil/osal.h ****   chSysUnlockFromISR();
 609:../../../os/hal/osal/rt-nil/osal.h **** }
 610:../../../os/hal/osal/rt-nil/osal.h **** 
 611:../../../os/hal/osal/rt-nil/osal.h **** /**
 612:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Returns the execution status and enters a critical zone.
 613:../../../os/hal/osal/rt-nil/osal.h ****  * @details This functions enters into a critical zone and can be called
 614:../../../os/hal/osal/rt-nil/osal.h ****  *          from any context. Because its flexibility it is less efficient
 615:../../../os/hal/osal/rt-nil/osal.h ****  *          than @p chSysLock() which is preferable when the calling context
 616:../../../os/hal/osal/rt-nil/osal.h ****  *          is known.
 617:../../../os/hal/osal/rt-nil/osal.h ****  * @post    The system is in a critical zone.
 618:../../../os/hal/osal/rt-nil/osal.h ****  *
 619:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The previous system status, the encoding of this
 620:../../../os/hal/osal/rt-nil/osal.h ****  *                      status word is architecture-dependent and opaque.
 621:../../../os/hal/osal/rt-nil/osal.h ****  *
 622:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 623:../../../os/hal/osal/rt-nil/osal.h ****  */
 624:../../../os/hal/osal/rt-nil/osal.h **** static inline syssts_t osalSysGetStatusAndLockX(void) {
 625:../../../os/hal/osal/rt-nil/osal.h **** 
 626:../../../os/hal/osal/rt-nil/osal.h ****   return chSysGetStatusAndLockX();
 627:../../../os/hal/osal/rt-nil/osal.h **** }
 628:../../../os/hal/osal/rt-nil/osal.h **** 
 629:../../../os/hal/osal/rt-nil/osal.h **** /**
 630:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Restores the specified execution status and leaves a critical zone.
 631:../../../os/hal/osal/rt-nil/osal.h ****  * @note    A call to @p chSchRescheduleS() is automatically performed
 632:../../../os/hal/osal/rt-nil/osal.h ****  *          if exiting the critical zone and if not in ISR context.
 633:../../../os/hal/osal/rt-nil/osal.h ****  *
 634:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] sts       the system status to be restored.
 635:../../../os/hal/osal/rt-nil/osal.h ****  *
 636:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 637:../../../os/hal/osal/rt-nil/osal.h ****  */
 638:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysRestoreStatusX(syssts_t sts) {
 639:../../../os/hal/osal/rt-nil/osal.h **** 
 640:../../../os/hal/osal/rt-nil/osal.h ****   chSysRestoreStatusX(sts);
 641:../../../os/hal/osal/rt-nil/osal.h **** }
 642:../../../os/hal/osal/rt-nil/osal.h **** 
 643:../../../os/hal/osal/rt-nil/osal.h **** /**
 644:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Polled delay.
 645:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The real delay is always few cycles in excess of the specified
 646:../../../os/hal/osal/rt-nil/osal.h ****  *          value.
 647:../../../os/hal/osal/rt-nil/osal.h ****  *
 648:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] cycles    number of cycles
 649:../../../os/hal/osal/rt-nil/osal.h ****  *
 650:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 651:../../../os/hal/osal/rt-nil/osal.h ****  */
 652:../../../os/hal/osal/rt-nil/osal.h **** #if (PORT_SUPPORTS_RT == TRUE) || defined(__DOXYGEN__)
 653:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalSysPolledDelayX(rtcnt_t cycles) {
 654:../../../os/hal/osal/rt-nil/osal.h **** 
 655:../../../os/hal/osal/rt-nil/osal.h ****   chSysPolledDelayX(cycles);
 656:../../../os/hal/osal/rt-nil/osal.h **** }
 657:../../../os/hal/osal/rt-nil/osal.h **** #endif
 658:../../../os/hal/osal/rt-nil/osal.h **** 
 659:../../../os/hal/osal/rt-nil/osal.h **** /**
 660:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Systick callback for the underlying OS.
 661:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This callback is only defined if the OSAL requires such a
 662:../../../os/hal/osal/rt-nil/osal.h ****  *          service from the HAL.
 663:../../../os/hal/osal/rt-nil/osal.h ****  */
 664:../../../os/hal/osal/rt-nil/osal.h **** #if (OSAL_ST_MODE != OSAL_ST_MODE_NONE) || defined(__DOXYGEN__)
 665:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsTimerHandlerI(void) {
 666:../../../os/hal/osal/rt-nil/osal.h **** 
 667:../../../os/hal/osal/rt-nil/osal.h ****   chSysTimerHandlerI();
 668:../../../os/hal/osal/rt-nil/osal.h **** }
 669:../../../os/hal/osal/rt-nil/osal.h **** #endif
 670:../../../os/hal/osal/rt-nil/osal.h **** 
 671:../../../os/hal/osal/rt-nil/osal.h **** /**
 672:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if a reschedule is required and performs it.
 673:../../../os/hal/osal/rt-nil/osal.h ****  * @note    I-Class functions invoked from thread context must not reschedule
 674:../../../os/hal/osal/rt-nil/osal.h ****  *          by themselves, an explicit reschedule using this function is
 675:../../../os/hal/osal/rt-nil/osal.h ****  *          required in this scenario.
 676:../../../os/hal/osal/rt-nil/osal.h ****  * @note    Not implemented in this simplified OSAL.
 677:../../../os/hal/osal/rt-nil/osal.h ****  *
 678:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 679:../../../os/hal/osal/rt-nil/osal.h ****  */
 680:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalOsRescheduleS(void) {
 681:../../../os/hal/osal/rt-nil/osal.h **** 
 682:../../../os/hal/osal/rt-nil/osal.h ****   chSchRescheduleS();
 683:../../../os/hal/osal/rt-nil/osal.h **** }
 684:../../../os/hal/osal/rt-nil/osal.h **** 
 685:../../../os/hal/osal/rt-nil/osal.h **** /**
 686:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Current system time.
 687:../../../os/hal/osal/rt-nil/osal.h ****  * @details Returns the number of system ticks since the @p osalInit()
 688:../../../os/hal/osal/rt-nil/osal.h ****  *          invocation.
 689:../../../os/hal/osal/rt-nil/osal.h ****  * @note    The counter can reach its maximum and then restart from zero.
 690:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context but its atomicity
 691:../../../os/hal/osal/rt-nil/osal.h ****  *          is not guaranteed on architectures whose word size is less than
 692:../../../os/hal/osal/rt-nil/osal.h ****  *          @p systime_t size.
 693:../../../os/hal/osal/rt-nil/osal.h ****  *
 694:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The system time in ticks.
 695:../../../os/hal/osal/rt-nil/osal.h ****  *
 696:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 697:../../../os/hal/osal/rt-nil/osal.h ****  */
 698:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalOsGetSystemTimeX(void) {
 699:../../../os/hal/osal/rt-nil/osal.h **** 
 700:../../../os/hal/osal/rt-nil/osal.h ****   return chVTGetSystemTimeX();
 701:../../../os/hal/osal/rt-nil/osal.h **** }
 702:../../../os/hal/osal/rt-nil/osal.h **** 
 703:../../../os/hal/osal/rt-nil/osal.h **** /**
 704:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Adds an interval to a system time returning a system time.
 705:../../../os/hal/osal/rt-nil/osal.h ****  *
 706:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] systime   base system time
 707:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] interval  interval to be added
 708:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The new system time.
 709:../../../os/hal/osal/rt-nil/osal.h ****  *
 710:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 711:../../../os/hal/osal/rt-nil/osal.h ****  */
 712:../../../os/hal/osal/rt-nil/osal.h **** static inline systime_t osalTimeAddX(systime_t systime,
 713:../../../os/hal/osal/rt-nil/osal.h ****                                      sysinterval_t interval) {
 714:../../../os/hal/osal/rt-nil/osal.h **** 
 715:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeAddX(systime, interval);
 716:../../../os/hal/osal/rt-nil/osal.h **** }
 717:../../../os/hal/osal/rt-nil/osal.h **** 
 718:../../../os/hal/osal/rt-nil/osal.h **** /**
 719:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Subtracts two system times returning an interval.
 720:../../../os/hal/osal/rt-nil/osal.h ****  *
 721:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     first system time
 722:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       second system time
 723:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The interval representing the time difference.
 724:../../../os/hal/osal/rt-nil/osal.h ****  *
 725:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 726:../../../os/hal/osal/rt-nil/osal.h ****  */
 727:../../../os/hal/osal/rt-nil/osal.h **** static inline sysinterval_t osalTimeDiffX(systime_t start, systime_t end) {
 728:../../../os/hal/osal/rt-nil/osal.h **** 
 729:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeDiffX(start, end);
 730:../../../os/hal/osal/rt-nil/osal.h **** }
 731:../../../os/hal/osal/rt-nil/osal.h **** 
 732:../../../os/hal/osal/rt-nil/osal.h **** /**
 733:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Checks if the specified time is within the specified time window.
 734:../../../os/hal/osal/rt-nil/osal.h ****  * @note    When start==end then the function returns always true because the
 735:../../../os/hal/osal/rt-nil/osal.h ****  *          whole time range is specified.
 736:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function can be called from any context.
 737:../../../os/hal/osal/rt-nil/osal.h ****  *
 738:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] time      the time to be verified
 739:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] start     the start of the time window (inclusive)
 740:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] end       the end of the time window (non inclusive)
 741:../../../os/hal/osal/rt-nil/osal.h ****  * @retval true         current time within the specified time window.
 742:../../../os/hal/osal/rt-nil/osal.h ****  * @retval false        current time not within the specified time window.
 743:../../../os/hal/osal/rt-nil/osal.h ****  *
 744:../../../os/hal/osal/rt-nil/osal.h ****  * @xclass
 745:../../../os/hal/osal/rt-nil/osal.h ****  */
 746:../../../os/hal/osal/rt-nil/osal.h **** static inline bool osalTimeIsInRangeX(systime_t time,
 747:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t start,
 748:../../../os/hal/osal/rt-nil/osal.h ****                                       systime_t end) {
 749:../../../os/hal/osal/rt-nil/osal.h **** 
 750:../../../os/hal/osal/rt-nil/osal.h ****   return chTimeIsInRangeX(time, start, end);
 751:../../../os/hal/osal/rt-nil/osal.h **** }
 752:../../../os/hal/osal/rt-nil/osal.h **** 
 753:../../../os/hal/osal/rt-nil/osal.h **** /**
 754:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 755:../../../os/hal/osal/rt-nil/osal.h ****  *
 756:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 757:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 758:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 759:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 760:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 761:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 762:../../../os/hal/osal/rt-nil/osal.h ****  *
 763:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 764:../../../os/hal/osal/rt-nil/osal.h ****  */
 765:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleepS(sysinterval_t delay) {
 766:../../../os/hal/osal/rt-nil/osal.h **** 
 767:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleepS(delay);
 768:../../../os/hal/osal/rt-nil/osal.h **** }
 769:../../../os/hal/osal/rt-nil/osal.h **** 
 770:../../../os/hal/osal/rt-nil/osal.h **** /**
 771:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Suspends the invoking thread for the specified time.
 772:../../../os/hal/osal/rt-nil/osal.h ****  *
 773:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] delay     the delay in system ticks, the special values are
 774:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 775:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE is allowed but interpreted as a
 776:../../../os/hal/osal/rt-nil/osal.h ****  *                        normal time specification.
 777:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE this value is not allowed.
 778:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 779:../../../os/hal/osal/rt-nil/osal.h ****  *
 780:../../../os/hal/osal/rt-nil/osal.h ****  * @api
 781:../../../os/hal/osal/rt-nil/osal.h ****  */
 782:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadSleep(sysinterval_t delay) {
 783:../../../os/hal/osal/rt-nil/osal.h **** 
 784:../../../os/hal/osal/rt-nil/osal.h ****   chThdSleep(delay);
 785:../../../os/hal/osal/rt-nil/osal.h **** }
 786:../../../os/hal/osal/rt-nil/osal.h **** 
 787:../../../os/hal/osal/rt-nil/osal.h **** /**
 788:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 789:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 790:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 791:../../../os/hal/osal/rt-nil/osal.h ****  *
 792:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 793:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 794:../../../os/hal/osal/rt-nil/osal.h ****  *
 795:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 796:../../../os/hal/osal/rt-nil/osal.h ****  */
 797:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendS(thread_reference_t *trp) {
 798:../../../os/hal/osal/rt-nil/osal.h **** 
 799:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, TIME_INFINITE);
 800:../../../os/hal/osal/rt-nil/osal.h **** }
 801:../../../os/hal/osal/rt-nil/osal.h **** 
 802:../../../os/hal/osal/rt-nil/osal.h **** /**
 803:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Sends the current thread sleeping and sets a reference variable.
 804:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 805:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 806:../../../os/hal/osal/rt-nil/osal.h ****  *
 807:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 808:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 809:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 810:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 811:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 812:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 813:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 814:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 815:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 816:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The wake up message.
 817:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the operation timed out.
 818:../../../os/hal/osal/rt-nil/osal.h ****  *
 819:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 820:../../../os/hal/osal/rt-nil/osal.h ****  */
 821:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadSuspendTimeoutS(thread_reference_t *trp,
 822:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 823:../../../os/hal/osal/rt-nil/osal.h **** 
 824:../../../os/hal/osal/rt-nil/osal.h ****   return chThdSuspendTimeoutS(trp, timeout);
 825:../../../os/hal/osal/rt-nil/osal.h **** }
 826:../../../os/hal/osal/rt-nil/osal.h **** 
 827:../../../os/hal/osal/rt-nil/osal.h **** /**
 828:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 829:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must not reschedule because it can be called from
 830:../../../os/hal/osal/rt-nil/osal.h ****  *          ISR context.
 831:../../../os/hal/osal/rt-nil/osal.h ****  *
 832:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 833:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 834:../../../os/hal/osal/rt-nil/osal.h ****  *
 835:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 836:../../../os/hal/osal/rt-nil/osal.h ****  */
 837:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeI(thread_reference_t *trp, msg_t msg) {
 838:../../../os/hal/osal/rt-nil/osal.h **** 
 839:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeI(trp, msg);
 840:../../../os/hal/osal/rt-nil/osal.h **** }
 841:../../../os/hal/osal/rt-nil/osal.h **** 
 842:../../../os/hal/osal/rt-nil/osal.h **** /**
 843:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Wakes up a thread waiting on a thread reference object.
 844:../../../os/hal/osal/rt-nil/osal.h ****  * @note    This function must reschedule, it can only be called from thread
 845:../../../os/hal/osal/rt-nil/osal.h ****  *          context.
 846:../../../os/hal/osal/rt-nil/osal.h ****  *
 847:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] trp       a pointer to a thread reference object
 848:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 849:../../../os/hal/osal/rt-nil/osal.h ****  *
 850:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 851:../../../os/hal/osal/rt-nil/osal.h ****  */
 852:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadResumeS(thread_reference_t *trp, msg_t msg) {
 853:../../../os/hal/osal/rt-nil/osal.h **** 
 854:../../../os/hal/osal/rt-nil/osal.h ****   chThdResumeS(trp, msg);
 855:../../../os/hal/osal/rt-nil/osal.h **** }
 856:../../../os/hal/osal/rt-nil/osal.h **** 
 857:../../../os/hal/osal/rt-nil/osal.h **** /**
 858:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Initializes a threads queue object.
 859:../../../os/hal/osal/rt-nil/osal.h ****  *
 860:../../../os/hal/osal/rt-nil/osal.h ****  * @param[out] tqp      pointer to the threads queue object
 861:../../../os/hal/osal/rt-nil/osal.h ****  *
 862:../../../os/hal/osal/rt-nil/osal.h ****  * @init
 863:../../../os/hal/osal/rt-nil/osal.h ****  */
 864:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadQueueObjectInit(threads_queue_t *tqp) {
 865:../../../os/hal/osal/rt-nil/osal.h **** 
 866:../../../os/hal/osal/rt-nil/osal.h ****   chThdQueueObjectInit(tqp);
  83               		.loc 2 866 0
  84 0022 0E94 0000 		call chThdQueueObjectInit
  85               	.LVL2:
  86               	.LBE191:
  87               	.LBE190:
  78:../../../os/hal/src/hal_buffers.c **** 
  79:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((ibqp != NULL) && (bp != NULL) && (size >= 2U));
  80:../../../os/hal/src/hal_buffers.c **** 
  81:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&ibqp->waiting);
  82:../../../os/hal/src/hal_buffers.c ****   ibqp->suspended = suspended;
  88               		.loc 1 82 0
  89 0026 7C82      		std Y+4,r7
  83:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
  90               		.loc 1 83 0
  91 0028 1E82      		std Y+6,__zero_reg__
  92 002a 1D82      		std Y+5,__zero_reg__
  84:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = bp;
  93               		.loc 1 84 0
  94 002c BA86      		std Y+10,r11
  95 002e A986      		std Y+9,r10
  85:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = bp;
  96               		.loc 1 85 0
  97 0030 B886      		std Y+8,r11
  98 0032 AF82      		std Y+7,r10
  86:../../../os/hal/src/hal_buffers.c ****   ibqp->btop      = bp + ((size + sizeof (size_t)) * n);
  99               		.loc 1 86 0
 100 0034 82E0      		ldi r24,2
 101 0036 880E      		add r8,r24
 102 0038 911C      		adc r9,__zero_reg__
 103               	.LVL3:
 104 003a 809E      		mul r8,r16
 105 003c C001      		movw r24,r0
 106 003e 819E      		mul r8,r17
 107 0040 900D      		add r25,r0
 108 0042 909E      		mul r9,r16
 109 0044 900D      		add r25,r0
 110 0046 1124      		clr r1
 111 0048 8A0D      		add r24,r10
 112 004a 9B1D      		adc r25,r11
 113 004c 9C87      		std Y+12,r25
 114 004e 8B87      		std Y+11,r24
  87:../../../os/hal/src/hal_buffers.c ****   ibqp->bsize     = size + sizeof (size_t);
 115               		.loc 1 87 0
 116 0050 9E86      		std Y+14,r9
 117 0052 8D86      		std Y+13,r8
  88:../../../os/hal/src/hal_buffers.c ****   ibqp->bn        = n;
 118               		.loc 1 88 0
 119 0054 188B      		std Y+16,r17
 120 0056 0F87      		std Y+15,r16
  89:../../../os/hal/src/hal_buffers.c ****   ibqp->buffers   = bp;
 121               		.loc 1 89 0
 122 0058 BA8A      		std Y+18,r11
 123 005a A98A      		std Y+17,r10
  90:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 124               		.loc 1 90 0
 125 005c 1C8A      		std Y+20,__zero_reg__
 126 005e 1B8A      		std Y+19,__zero_reg__
  91:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 127               		.loc 1 91 0
 128 0060 1E8A      		std Y+22,__zero_reg__
 129 0062 1D8A      		std Y+21,__zero_reg__
  92:../../../os/hal/src/hal_buffers.c ****   ibqp->notify    = infy;
 130               		.loc 1 92 0
 131 0064 F88E      		std Y+24,r15
 132 0066 EF8A      		std Y+23,r14
  93:../../../os/hal/src/hal_buffers.c ****   ibqp->link      = link;
 133               		.loc 1 93 0
 134 0068 DA8E      		std Y+26,r13
 135 006a C98E      		std Y+25,r12
 136               	/* epilogue start */
  94:../../../os/hal/src/hal_buffers.c **** }
 137               		.loc 1 94 0
 138 006c DF91      		pop r29
 139 006e CF91      		pop r28
 140               	.LVL4:
 141 0070 1F91      		pop r17
 142 0072 0F91      		pop r16
 143               	.LVL5:
 144 0074 FF90      		pop r15
 145 0076 EF90      		pop r14
 146               	.LVL6:
 147 0078 DF90      		pop r13
 148 007a CF90      		pop r12
 149               	.LVL7:
 150 007c BF90      		pop r11
 151 007e AF90      		pop r10
 152               	.LVL8:
 153 0080 9F90      		pop r9
 154 0082 8F90      		pop r8
 155               	.LVL9:
 156 0084 7F90      		pop r7
 157               	.LVL10:
 158 0086 0895      		ret
 159               		.cfi_endproc
 160               	.LFE241:
 162               		.section	.text.ibqResetI,"ax",@progbits
 163               	.global	ibqResetI
 165               	ibqResetI:
 166               	.LFB242:
  95:../../../os/hal/src/hal_buffers.c **** 
  96:../../../os/hal/src/hal_buffers.c **** /**
  97:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an input buffers queue.
  98:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the input buffers queue is erased and lost, any
  99:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 100:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 101:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 102:../../../os/hal/src/hal_buffers.c ****  *
 103:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 104:../../../os/hal/src/hal_buffers.c ****  *
 105:../../../os/hal/src/hal_buffers.c ****  * @iclass
 106:../../../os/hal/src/hal_buffers.c ****  */
 107:../../../os/hal/src/hal_buffers.c **** void ibqResetI(input_buffers_queue_t *ibqp) {
 167               		.loc 1 107 0
 168               		.cfi_startproc
 169               	.LVL11:
 170               	/* prologue: function */
 171               	/* frame size = 0 */
 172               	/* stack size = 0 */
 173               	.L__stack_usage = 0
 174 0000 FC01      		movw r30,r24
 108:../../../os/hal/src/hal_buffers.c **** 
 109:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 110:../../../os/hal/src/hal_buffers.c **** 
 111:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter  = 0;
 175               		.loc 1 111 0
 176 0002 1682      		std Z+6,__zero_reg__
 177 0004 1582      		std Z+5,__zero_reg__
 112:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr    = ibqp->buffers;
 178               		.loc 1 112 0
 179 0006 8189      		ldd r24,Z+17
 180 0008 9289      		ldd r25,Z+18
 181               	.LVL12:
 182 000a 9287      		std Z+10,r25
 183 000c 8187      		std Z+9,r24
 113:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr    = ibqp->buffers;
 184               		.loc 1 113 0
 185 000e 9087      		std Z+8,r25
 186 0010 8783      		std Z+7,r24
 114:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr       = NULL;
 187               		.loc 1 114 0
 188 0012 148A      		std Z+20,__zero_reg__
 189 0014 138A      		std Z+19,__zero_reg__
 115:../../../os/hal/src/hal_buffers.c ****   ibqp->top       = NULL;
 190               		.loc 1 115 0
 191 0016 168A      		std Z+22,__zero_reg__
 192 0018 158A      		std Z+21,__zero_reg__
 193               	.LVL13:
 194               	.LBB192:
 195               	.LBB193:
 867:../../../os/hal/osal/rt-nil/osal.h **** }
 868:../../../os/hal/osal/rt-nil/osal.h **** 
 869:../../../os/hal/osal/rt-nil/osal.h **** /**
 870:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Enqueues the caller thread.
 871:../../../os/hal/osal/rt-nil/osal.h ****  * @details The caller thread is enqueued and put to sleep until it is
 872:../../../os/hal/osal/rt-nil/osal.h ****  *          dequeued or the specified timeouts expires.
 873:../../../os/hal/osal/rt-nil/osal.h ****  *
 874:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 875:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] timeout   the timeout in system ticks, the special values are
 876:../../../os/hal/osal/rt-nil/osal.h ****  *                      handled as follow:
 877:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_INFINITE the thread enters an infinite sleep
 878:../../../os/hal/osal/rt-nil/osal.h ****  *                        state.
 879:../../../os/hal/osal/rt-nil/osal.h ****  *                      - @a TIME_IMMEDIATE the thread is not enqueued and
 880:../../../os/hal/osal/rt-nil/osal.h ****  *                        the function returns @p MSG_TIMEOUT as if a timeout
 881:../../../os/hal/osal/rt-nil/osal.h ****  *                        occurred.
 882:../../../os/hal/osal/rt-nil/osal.h ****  *                      .
 883:../../../os/hal/osal/rt-nil/osal.h ****  * @return              The message from @p osalQueueWakeupOneI() or
 884:../../../os/hal/osal/rt-nil/osal.h ****  *                      @p osalQueueWakeupAllI() functions.
 885:../../../os/hal/osal/rt-nil/osal.h ****  * @retval MSG_TIMEOUT  if the thread has not been dequeued within the
 886:../../../os/hal/osal/rt-nil/osal.h ****  *                      specified timeout or if the function has been
 887:../../../os/hal/osal/rt-nil/osal.h ****  *                      invoked with @p TIME_IMMEDIATE as timeout
 888:../../../os/hal/osal/rt-nil/osal.h ****  *                      specification.
 889:../../../os/hal/osal/rt-nil/osal.h ****  *
 890:../../../os/hal/osal/rt-nil/osal.h ****  * @sclass
 891:../../../os/hal/osal/rt-nil/osal.h ****  */
 892:../../../os/hal/osal/rt-nil/osal.h **** static inline msg_t osalThreadEnqueueTimeoutS(threads_queue_t *tqp,
 893:../../../os/hal/osal/rt-nil/osal.h ****                                               sysinterval_t timeout) {
 894:../../../os/hal/osal/rt-nil/osal.h **** 
 895:../../../os/hal/osal/rt-nil/osal.h ****   return chThdEnqueueTimeoutS(tqp, timeout);
 896:../../../os/hal/osal/rt-nil/osal.h **** }
 897:../../../os/hal/osal/rt-nil/osal.h **** 
 898:../../../os/hal/osal/rt-nil/osal.h **** /**
 899:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up one thread from the queue, if any.
 900:../../../os/hal/osal/rt-nil/osal.h ****  *
 901:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 902:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 903:../../../os/hal/osal/rt-nil/osal.h ****  *
 904:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 905:../../../os/hal/osal/rt-nil/osal.h ****  */
 906:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueNextI(threads_queue_t *tqp, msg_t msg) {
 907:../../../os/hal/osal/rt-nil/osal.h **** 
 908:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueNextI(tqp, msg);
 909:../../../os/hal/osal/rt-nil/osal.h **** }
 910:../../../os/hal/osal/rt-nil/osal.h **** 
 911:../../../os/hal/osal/rt-nil/osal.h **** /**
 912:../../../os/hal/osal/rt-nil/osal.h ****  * @brief   Dequeues and wakes up all threads from the queue.
 913:../../../os/hal/osal/rt-nil/osal.h ****  *
 914:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] tqp       pointer to the threads queue object
 915:../../../os/hal/osal/rt-nil/osal.h ****  * @param[in] msg       the message code
 916:../../../os/hal/osal/rt-nil/osal.h ****  *
 917:../../../os/hal/osal/rt-nil/osal.h ****  * @iclass
 918:../../../os/hal/osal/rt-nil/osal.h ****  */
 919:../../../os/hal/osal/rt-nil/osal.h **** static inline void osalThreadDequeueAllI(threads_queue_t *tqp, msg_t msg) {
 920:../../../os/hal/osal/rt-nil/osal.h **** 
 921:../../../os/hal/osal/rt-nil/osal.h ****   chThdDequeueAllI(tqp, msg);
 196               		.loc 2 921 0
 197 001a 6EEF      		ldi r22,lo8(-2)
 198 001c 7FEF      		ldi r23,lo8(-1)
 199 001e CF01      		movw r24,r30
 200 0020 0C94 0000 		jmp chThdDequeueAllI
 201               	.LVL14:
 202               	.LBE193:
 203               	.LBE192:
 204               		.cfi_endproc
 205               	.LFE242:
 207               		.section	.text.ibqGetEmptyBufferI,"ax",@progbits
 208               	.global	ibqGetEmptyBufferI
 210               	ibqGetEmptyBufferI:
 211               	.LFB243:
 116:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&ibqp->waiting, MSG_RESET);
 117:../../../os/hal/src/hal_buffers.c **** }
 118:../../../os/hal/src/hal_buffers.c **** 
 119:../../../os/hal/src/hal_buffers.c **** /**
 120:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 121:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 122:../../../os/hal/src/hal_buffers.c ****  *
 123:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 124:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the next buffer to be filled.
 125:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is full.
 126:../../../os/hal/src/hal_buffers.c ****  *
 127:../../../os/hal/src/hal_buffers.c ****  * @iclass
 128:../../../os/hal/src/hal_buffers.c ****  */
 129:../../../os/hal/src/hal_buffers.c **** uint8_t *ibqGetEmptyBufferI(input_buffers_queue_t *ibqp) {
 212               		.loc 1 129 0
 213               		.cfi_startproc
 214               	.LVL15:
 215               	/* prologue: function */
 216               	/* frame size = 0 */
 217               	/* stack size = 0 */
 218               	.L__stack_usage = 0
 219 0000 FC01      		movw r30,r24
 130:../../../os/hal/src/hal_buffers.c **** 
 131:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 132:../../../os/hal/src/hal_buffers.c **** 
 133:../../../os/hal/src/hal_buffers.c ****   if (ibqIsFullI(ibqp)) {
 220               		.loc 1 133 0
 221 0002 2781      		ldd r18,Z+7
 222 0004 3085      		ldd r19,Z+8
 223 0006 8185      		ldd r24,Z+9
 224 0008 9285      		ldd r25,Z+10
 225               	.LVL16:
 226 000a 2817      		cp r18,r24
 227 000c 3907      		cpc r19,r25
 228 000e 01F0      		breq .L11
 229               	.L4:
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 135:../../../os/hal/src/hal_buffers.c ****   }
 136:../../../os/hal/src/hal_buffers.c **** 
 137:../../../os/hal/src/hal_buffers.c ****   return ibqp->bwrptr + sizeof (size_t);
 230               		.loc 1 137 0
 231 0010 C901      		movw r24,r18
 232 0012 0296      		adiw r24,2
 138:../../../os/hal/src/hal_buffers.c **** }
 233               		.loc 1 138 0
 234 0014 0895      		ret
 235               	.L11:
 133:../../../os/hal/src/hal_buffers.c ****     return NULL;
 236               		.loc 1 133 0 discriminator 1
 237 0016 8581      		ldd r24,Z+5
 238 0018 9681      		ldd r25,Z+6
 239 001a 892B      		or r24,r25
 240 001c 01F0      		breq .L4
 134:../../../os/hal/src/hal_buffers.c ****     return NULL;
 241               		.loc 1 134 0
 242 001e 80E0      		ldi r24,0
 243 0020 90E0      		ldi r25,0
 244 0022 0895      		ret
 245               		.cfi_endproc
 246               	.LFE243:
 248               		.section	.text.ibqPostFullBufferI,"ax",@progbits
 249               	.global	ibqPostFullBufferI
 251               	ibqPostFullBufferI:
 252               	.LFB244:
 139:../../../os/hal/src/hal_buffers.c **** 
 140:../../../os/hal/src/hal_buffers.c **** /**
 141:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 142:../../../os/hal/src/hal_buffers.c ****  *
 143:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 144:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 145:../../../os/hal/src/hal_buffers.c ****  *
 146:../../../os/hal/src/hal_buffers.c ****  * @iclass
 147:../../../os/hal/src/hal_buffers.c ****  */
 148:../../../os/hal/src/hal_buffers.c **** void ibqPostFullBufferI(input_buffers_queue_t *ibqp, size_t size) {
 253               		.loc 1 148 0
 254               		.cfi_startproc
 255               	.LVL17:
 256               	/* prologue: function */
 257               	/* frame size = 0 */
 258               	/* stack size = 0 */
 259               	.L__stack_usage = 0
 260 0000 FC01      		movw r30,r24
 149:../../../os/hal/src/hal_buffers.c **** 
 150:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 151:../../../os/hal/src/hal_buffers.c **** 
 152:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (ibqp->bsize - sizeof (size_t))));
 153:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsFullI(ibqp), "buffers queue full");
 154:../../../os/hal/src/hal_buffers.c **** 
 155:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 156:../../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)ibqp->bwrptr) = size;
 261               		.loc 1 156 0
 262 0002 A781      		ldd r26,Z+7
 263 0004 B085      		ldd r27,Z+8
 264 0006 1196      		adiw r26,1
 265 0008 7C93      		st X,r23
 266 000a 6E93      		st -X,r22
 157:../../../os/hal/src/hal_buffers.c **** 
 158:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 159:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter++;
 267               		.loc 1 159 0
 268 000c 2581      		ldd r18,Z+5
 269 000e 3681      		ldd r19,Z+6
 270 0010 2F5F      		subi r18,-1
 271 0012 3F4F      		sbci r19,-1
 272 0014 3683      		std Z+6,r19
 273 0016 2583      		std Z+5,r18
 160:../../../os/hal/src/hal_buffers.c ****   ibqp->bwrptr += ibqp->bsize;
 274               		.loc 1 160 0
 275 0018 8585      		ldd r24,Z+13
 276 001a 9685      		ldd r25,Z+14
 277               	.LVL18:
 278 001c 8A0F      		add r24,r26
 279 001e 9B1F      		adc r25,r27
 280 0020 9087      		std Z+8,r25
 281 0022 8783      		std Z+7,r24
 161:../../../os/hal/src/hal_buffers.c ****   if (ibqp->bwrptr >= ibqp->btop) {
 282               		.loc 1 161 0
 283 0024 2385      		ldd r18,Z+11
 284 0026 3485      		ldd r19,Z+12
 285 0028 8217      		cp r24,r18
 286 002a 9307      		cpc r25,r19
 287 002c 00F0      		brlo .L13
 162:../../../os/hal/src/hal_buffers.c ****     ibqp->bwrptr = ibqp->buffers;
 288               		.loc 1 162 0
 289 002e 8189      		ldd r24,Z+17
 290 0030 9289      		ldd r25,Z+18
 291 0032 9087      		std Z+8,r25
 292 0034 8783      		std Z+7,r24
 293               	.L13:
 294               	.LVL19:
 295               	.LBB194:
 296               	.LBB195:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 297               		.loc 2 908 0
 298 0036 60E0      		ldi r22,0
 299 0038 70E0      		ldi r23,0
 300               	.LVL20:
 301 003a CF01      		movw r24,r30
 302 003c 0C94 0000 		jmp chThdDequeueNextI
 303               	.LVL21:
 304               	.LBE195:
 305               	.LBE194:
 306               		.cfi_endproc
 307               	.LFE244:
 309               		.section	.text.ibqGetFullBufferTimeoutS,"ax",@progbits
 310               	.global	ibqGetFullBufferTimeoutS
 312               	ibqGetFullBufferTimeoutS:
 313               	.LFB246:
 163:../../../os/hal/src/hal_buffers.c ****   }
 164:../../../os/hal/src/hal_buffers.c **** 
 165:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 166:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&ibqp->waiting, MSG_OK);
 167:../../../os/hal/src/hal_buffers.c **** }
 168:../../../os/hal/src/hal_buffers.c **** 
 169:../../../os/hal/src/hal_buffers.c **** /**
 170:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 171:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 172:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 173:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 174:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 175:../../../os/hal/src/hal_buffers.c ****  *
 176:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 177:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 178:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 179:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 180:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 181:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 182:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 183:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 184:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 185:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 186:../../../os/hal/src/hal_buffers.c ****  *
 187:../../../os/hal/src/hal_buffers.c ****  * @api
 188:../../../os/hal/src/hal_buffers.c ****  */
 189:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetFullBufferTimeout(input_buffers_queue_t *ibqp,
 190:../../../os/hal/src/hal_buffers.c ****                               sysinterval_t timeout) {
 191:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 192:../../../os/hal/src/hal_buffers.c **** 
 193:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 194:../../../os/hal/src/hal_buffers.c ****   msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 195:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 196:../../../os/hal/src/hal_buffers.c **** 
 197:../../../os/hal/src/hal_buffers.c ****   return msg;
 198:../../../os/hal/src/hal_buffers.c **** }
 199:../../../os/hal/src/hal_buffers.c **** 
 200:../../../os/hal/src/hal_buffers.c ****   /**
 201:../../../os/hal/src/hal_buffers.c ****    * @brief   Gets the next filled buffer from the queue.
 202:../../../os/hal/src/hal_buffers.c ****    * @note    The function always acquires the same buffer if called repeatedly.
 203:../../../os/hal/src/hal_buffers.c ****    * @post    After calling the function the fields @p ptr and @p top are set
 204:../../../os/hal/src/hal_buffers.c ****    *          at beginning and end of the buffer data or @p NULL if the queue
 205:../../../os/hal/src/hal_buffers.c ****    *          is empty.
 206:../../../os/hal/src/hal_buffers.c ****    *
 207:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 208:../../../os/hal/src/hal_buffers.c ****    * @param[in] timeout   the number of ticks before the operation timeouts,
 209:../../../os/hal/src/hal_buffers.c ****    *                      the following special values are allowed:
 210:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_IMMEDIATE immediate timeout.
 211:../../../os/hal/src/hal_buffers.c ****    *                      - @a TIME_INFINITE no timeout.
 212:../../../os/hal/src/hal_buffers.c ****    * @return              The operation status.
 213:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_OK       if a buffer has been acquired.
 214:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_TIMEOUT  if the specified time expired.
 215:../../../os/hal/src/hal_buffers.c ****    * @retval MSG_RESET    if the queue has been reset or has been put in
 216:../../../os/hal/src/hal_buffers.c ****    *                      suspended state.
 217:../../../os/hal/src/hal_buffers.c ****    *
 218:../../../os/hal/src/hal_buffers.c ****    * @sclass
 219:../../../os/hal/src/hal_buffers.c ****    */
 220:../../../os/hal/src/hal_buffers.c ****   msg_t ibqGetFullBufferTimeoutS(input_buffers_queue_t *ibqp,
 221:../../../os/hal/src/hal_buffers.c ****                                  sysinterval_t timeout) {
 314               		.loc 1 221 0
 315               		.cfi_startproc
 316               	.LVL22:
 317 0000 0F93      		push r16
 318               	.LCFI13:
 319               		.cfi_def_cfa_offset 3
 320               		.cfi_offset 16, -2
 321 0002 1F93      		push r17
 322               	.LCFI14:
 323               		.cfi_def_cfa_offset 4
 324               		.cfi_offset 17, -3
 325 0004 CF93      		push r28
 326               	.LCFI15:
 327               		.cfi_def_cfa_offset 5
 328               		.cfi_offset 28, -4
 329 0006 DF93      		push r29
 330               	.LCFI16:
 331               		.cfi_def_cfa_offset 6
 332               		.cfi_offset 29, -5
 333               	/* prologue: function */
 334               	/* frame size = 0 */
 335               	/* stack size = 4 */
 336               	.L__stack_usage = 4
 337 0008 EC01      		movw r28,r24
 338 000a 8B01      		movw r16,r22
 222:../../../os/hal/src/hal_buffers.c **** 
 223:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 224:../../../os/hal/src/hal_buffers.c **** 
 225:../../../os/hal/src/hal_buffers.c ****   while (ibqIsEmptyI(ibqp)) {
 339               		.loc 1 225 0
 340 000c 00C0      		rjmp .L15
 341               	.LVL23:
 342               	.L17:
 343               	.LBB204:
 226:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 344               		.loc 1 226 0
 345 000e 8C81      		ldd r24,Y+4
 346 0010 8111      		cpse r24,__zero_reg__
 347 0012 00C0      		rjmp .L18
 348               	.LVL24:
 349               	.LBB205:
 350               	.LBB206:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 351               		.loc 2 895 0
 352 0014 B801      		movw r22,r16
 353 0016 CE01      		movw r24,r28
 354 0018 0E94 0000 		call chThdEnqueueTimeoutS
 355               	.LVL25:
 356               	.LBE206:
 357               	.LBE205:
 227:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 228:../../../os/hal/src/hal_buffers.c ****     }
 229:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&ibqp->waiting, timeout);
 230:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 358               		.loc 1 230 0
 359 001c 97FD      		sbrc r25,7
 360 001e 00C0      		rjmp .L16
 361               	.L15:
 362               	.LBE204:
 225:../../../os/hal/src/hal_buffers.c ****     if (ibqp->suspended) {
 363               		.loc 1 225 0
 364 0020 8D81      		ldd r24,Y+5
 365 0022 9E81      		ldd r25,Y+6
 366 0024 892B      		or r24,r25
 367 0026 01F0      		breq .L17
 368               	.LVL26:
 369               	.LBB207:
 370               	.LBB208:
 231:../../../os/hal/src/hal_buffers.c ****        return msg;
 232:../../../os/hal/src/hal_buffers.c ****     }
 233:../../../os/hal/src/hal_buffers.c ****   }
 234:../../../os/hal/src/hal_buffers.c **** 
 235:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "still empty");
 236:../../../os/hal/src/hal_buffers.c **** 
 237:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 238:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = ibqp->brdptr + sizeof (size_t);
 371               		.loc 1 238 0
 372 0028 E985      		ldd r30,Y+9
 373 002a FA85      		ldd r31,Y+10
 374 002c 9F01      		movw r18,r30
 375 002e 2E5F      		subi r18,-2
 376 0030 3F4F      		sbci r19,-1
 377 0032 3C8B      		std Y+20,r19
 378 0034 2B8B      		std Y+19,r18
 239:../../../os/hal/src/hal_buffers.c ****   ibqp->top = ibqp->ptr + *((size_t *)(void *)ibqp->brdptr);
 379               		.loc 1 239 0
 380 0036 8081      		ld r24,Z
 381 0038 9181      		ldd r25,Z+1
 382 003a 820F      		add r24,r18
 383 003c 931F      		adc r25,r19
 384 003e 9E8B      		std Y+22,r25
 385 0040 8D8B      		std Y+21,r24
 386               	.LVL27:
 387 0042 80E0      		ldi r24,0
 388 0044 90E0      		ldi r25,0
 389               	.L16:
 390               	/* epilogue start */
 391               	.LBE208:
 392               	.LBE207:
 240:../../../os/hal/src/hal_buffers.c **** 
 241:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 242:../../../os/hal/src/hal_buffers.c **** }
 393               		.loc 1 242 0
 394 0046 DF91      		pop r29
 395 0048 CF91      		pop r28
 396               	.LVL28:
 397 004a 1F91      		pop r17
 398 004c 0F91      		pop r16
 399               	.LVL29:
 400 004e 0895      		ret
 401               	.LVL30:
 402               	.L18:
 403               	.LBB209:
 227:../../../os/hal/src/hal_buffers.c ****     }
 404               		.loc 1 227 0
 405 0050 8EEF      		ldi r24,lo8(-2)
 406 0052 9FEF      		ldi r25,lo8(-1)
 407               	/* epilogue start */
 408               	.LBE209:
 409               		.loc 1 242 0
 410 0054 DF91      		pop r29
 411 0056 CF91      		pop r28
 412               	.LVL31:
 413 0058 1F91      		pop r17
 414 005a 0F91      		pop r16
 415               	.LVL32:
 416 005c 0895      		ret
 417               		.cfi_endproc
 418               	.LFE246:
 420               		.section	.text.ibqGetFullBufferTimeout,"ax",@progbits
 421               	.global	ibqGetFullBufferTimeout
 423               	ibqGetFullBufferTimeout:
 424               	.LFB245:
 190:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 425               		.loc 1 190 0
 426               		.cfi_startproc
 427               	.LVL33:
 428               	/* prologue: function */
 429               	/* frame size = 0 */
 430               	/* stack size = 0 */
 431               	.L__stack_usage = 0
 432               	.LBB210:
 433               	.LBB211:
 434               	.LBB212:
 435               	.LBB213:
 436               		.file 3 "../../../os/common/ports/AVR/chcore.h"
   1:../../../os/common/ports/AVR/chcore.h **** /*
   2:../../../os/common/ports/AVR/chcore.h ****     ChibiOS - Copyright (C) 2006,2007,2008,2009,2010,2011,2012,2013,2014,
   3:../../../os/common/ports/AVR/chcore.h ****               2015,2016,2017,2018,2019,2020,2021 Giovanni Di Sirio.
   4:../../../os/common/ports/AVR/chcore.h **** 
   5:../../../os/common/ports/AVR/chcore.h ****     This file is part of ChibiOS.
   6:../../../os/common/ports/AVR/chcore.h **** 
   7:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is free software; you can redistribute it and/or modify
   8:../../../os/common/ports/AVR/chcore.h ****     it under the terms of the GNU General Public License as published by
   9:../../../os/common/ports/AVR/chcore.h ****     the Free Software Foundation version 3 of the License.
  10:../../../os/common/ports/AVR/chcore.h **** 
  11:../../../os/common/ports/AVR/chcore.h ****     ChibiOS is distributed in the hope that it will be useful,
  12:../../../os/common/ports/AVR/chcore.h ****     but WITHOUT ANY WARRANTY; without even the implied warranty of
  13:../../../os/common/ports/AVR/chcore.h ****     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  14:../../../os/common/ports/AVR/chcore.h ****     GNU General Public License for more details.
  15:../../../os/common/ports/AVR/chcore.h **** 
  16:../../../os/common/ports/AVR/chcore.h ****     You should have received a copy of the GNU General Public License
  17:../../../os/common/ports/AVR/chcore.h ****     along with this program.  If not, see <http://www.gnu.org/licenses/>.
  18:../../../os/common/ports/AVR/chcore.h **** */
  19:../../../os/common/ports/AVR/chcore.h **** 
  20:../../../os/common/ports/AVR/chcore.h **** /**
  21:../../../os/common/ports/AVR/chcore.h ****  * @file    chcore.h
  22:../../../os/common/ports/AVR/chcore.h ****  * @brief   AVR port macros and structures.
  23:../../../os/common/ports/AVR/chcore.h ****  *
  24:../../../os/common/ports/AVR/chcore.h ****  * @addtogroup AVR_CORE
  25:../../../os/common/ports/AVR/chcore.h ****  * @{
  26:../../../os/common/ports/AVR/chcore.h ****  */
  27:../../../os/common/ports/AVR/chcore.h **** 
  28:../../../os/common/ports/AVR/chcore.h **** #ifndef CHCORE_H
  29:../../../os/common/ports/AVR/chcore.h **** #define CHCORE_H
  30:../../../os/common/ports/AVR/chcore.h **** 
  31:../../../os/common/ports/AVR/chcore.h **** #include <avr/io.h>
  32:../../../os/common/ports/AVR/chcore.h **** #include <avr/interrupt.h>
  33:../../../os/common/ports/AVR/chcore.h **** 
  34:../../../os/common/ports/AVR/chcore.h **** extern bool __avr_in_isr;
  35:../../../os/common/ports/AVR/chcore.h **** 
  36:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  37:../../../os/common/ports/AVR/chcore.h **** /* Module constants.                                                         */
  38:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
  39:../../../os/common/ports/AVR/chcore.h **** 
  40:../../../os/common/ports/AVR/chcore.h **** /**
  41:../../../os/common/ports/AVR/chcore.h ****  * @name    Port Capabilities and Constants
  42:../../../os/common/ports/AVR/chcore.h ****  * @{
  43:../../../os/common/ports/AVR/chcore.h ****  */
  44:../../../os/common/ports/AVR/chcore.h **** /**
  45:../../../os/common/ports/AVR/chcore.h ****  * @brief   This port supports a realtime counter.
  46:../../../os/common/ports/AVR/chcore.h ****  */
  47:../../../os/common/ports/AVR/chcore.h **** #define PORT_SUPPORTS_RT                FALSE
  48:../../../os/common/ports/AVR/chcore.h **** 
  49:../../../os/common/ports/AVR/chcore.h **** /**
  50:../../../os/common/ports/AVR/chcore.h ****  * @brief   Natural alignment constant.
  51:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the minimum alignment for pointer-size variables.
  52:../../../os/common/ports/AVR/chcore.h ****  */
  53:../../../os/common/ports/AVR/chcore.h **** #define PORT_NATURAL_ALIGN              1U
  54:../../../os/common/ports/AVR/chcore.h **** 
  55:../../../os/common/ports/AVR/chcore.h **** /**
  56:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack alignment constant.
  57:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment required for the stack pointer.
  58:../../../os/common/ports/AVR/chcore.h ****  */
  59:../../../os/common/ports/AVR/chcore.h **** #define PORT_STACK_ALIGN                1U
  60:../../../os/common/ports/AVR/chcore.h **** 
  61:../../../os/common/ports/AVR/chcore.h **** /**
  62:../../../os/common/ports/AVR/chcore.h ****  * @brief   Working Areas alignment constant.
  63:../../../os/common/ports/AVR/chcore.h ****  * @note    It is the alignment to be enforced for thread working areas.
  64:../../../os/common/ports/AVR/chcore.h ****  */
  65:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA_ALIGN         1U
  66:../../../os/common/ports/AVR/chcore.h **** /** @} */
  67:../../../os/common/ports/AVR/chcore.h **** 
  68:../../../os/common/ports/AVR/chcore.h **** /**
  69:../../../os/common/ports/AVR/chcore.h ****  * @name    Architecture and Compiler
  70:../../../os/common/ports/AVR/chcore.h ****  * @{
  71:../../../os/common/ports/AVR/chcore.h ****  */
  72:../../../os/common/ports/AVR/chcore.h **** /**
  73:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining an AVR architecture.
  74:../../../os/common/ports/AVR/chcore.h ****  */
  75:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR
  76:../../../os/common/ports/AVR/chcore.h **** 
  77:../../../os/common/ports/AVR/chcore.h **** /**
  78:../../../os/common/ports/AVR/chcore.h ****  * @brief   Macro defining the specific AVR architecture.
  79:../../../os/common/ports/AVR/chcore.h ****  */
  80:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_AVR_MEGAAVR
  81:../../../os/common/ports/AVR/chcore.h **** 
  82:../../../os/common/ports/AVR/chcore.h **** /**
  83:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the implemented architecture.
  84:../../../os/common/ports/AVR/chcore.h ****  */
  85:../../../os/common/ports/AVR/chcore.h **** #define PORT_ARCHITECTURE_NAME          "AVR"
  86:../../../os/common/ports/AVR/chcore.h **** 
  87:../../../os/common/ports/AVR/chcore.h **** /**
  88:../../../os/common/ports/AVR/chcore.h ****  * @brief   Name of the architecture variant.
  89:../../../os/common/ports/AVR/chcore.h ****  */
  90:../../../os/common/ports/AVR/chcore.h **** #define PORT_CORE_VARIANT_NAME          "MegaAVR"
  91:../../../os/common/ports/AVR/chcore.h **** 
  92:../../../os/common/ports/AVR/chcore.h **** /**
  93:../../../os/common/ports/AVR/chcore.h ****  * @brief   Compiler name and version.
  94:../../../os/common/ports/AVR/chcore.h ****  */
  95:../../../os/common/ports/AVR/chcore.h **** #if defined(__GNUC__) || defined(__DOXYGEN__)
  96:../../../os/common/ports/AVR/chcore.h **** #define PORT_COMPILER_NAME              "GCC " __VERSION__
  97:../../../os/common/ports/AVR/chcore.h **** 
  98:../../../os/common/ports/AVR/chcore.h **** #else
  99:../../../os/common/ports/AVR/chcore.h **** #error "unsupported compiler"
 100:../../../os/common/ports/AVR/chcore.h **** #endif
 101:../../../os/common/ports/AVR/chcore.h **** 
 102:../../../os/common/ports/AVR/chcore.h **** /**
 103:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-specific information string.
 104:../../../os/common/ports/AVR/chcore.h ****  */
 105:../../../os/common/ports/AVR/chcore.h **** #define PORT_INFO                       "None"
 106:../../../os/common/ports/AVR/chcore.h **** /** @} */
 107:../../../os/common/ports/AVR/chcore.h **** 
 108:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 109:../../../os/common/ports/AVR/chcore.h **** /* Module pre-compile time settings.                                         */
 110:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 111:../../../os/common/ports/AVR/chcore.h **** 
 112:../../../os/common/ports/AVR/chcore.h **** /**
 113:../../../os/common/ports/AVR/chcore.h ****  * @brief   Stack size for the system idle thread.
 114:../../../os/common/ports/AVR/chcore.h ****  * @details This size depends on the idle thread implementation, usually
 115:../../../os/common/ports/AVR/chcore.h ****  *          the idle thread should take no more space than those reserved
 116:../../../os/common/ports/AVR/chcore.h ****  *          by @p PORT_INT_REQUIRED_STACK.
 117:../../../os/common/ports/AVR/chcore.h ****  */
 118:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_IDLE_THREAD_STACK_SIZE) || defined(__DOXYGEN__)
 119:../../../os/common/ports/AVR/chcore.h **** #define PORT_IDLE_THREAD_STACK_SIZE     8
 120:../../../os/common/ports/AVR/chcore.h **** #endif
 121:../../../os/common/ports/AVR/chcore.h **** 
 122:../../../os/common/ports/AVR/chcore.h **** /**
 123:../../../os/common/ports/AVR/chcore.h ****  * @brief   Per-thread stack overhead for interrupts servicing.
 124:../../../os/common/ports/AVR/chcore.h ****  * @details This constant is used in the calculation of the correct working
 125:../../../os/common/ports/AVR/chcore.h ****  *          area size.
 126:../../../os/common/ports/AVR/chcore.h ****  */
 127:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_INT_REQUIRED_STACK) || defined(__DOXYGEN__)
 128:../../../os/common/ports/AVR/chcore.h **** #define PORT_INT_REQUIRED_STACK         32
 129:../../../os/common/ports/AVR/chcore.h **** #endif
 130:../../../os/common/ports/AVR/chcore.h **** 
 131:../../../os/common/ports/AVR/chcore.h **** /**
 132:../../../os/common/ports/AVR/chcore.h ****  * @brief   Enables a "wait for interrupt" instruction in the idle loop.
 133:../../../os/common/ports/AVR/chcore.h ****  */
 134:../../../os/common/ports/AVR/chcore.h **** #if !defined(PORT_AVR_WFI_SLEEP_IDLE) || defined(__DOXYGEN__)
 135:../../../os/common/ports/AVR/chcore.h **** #define PORT_AVR_WFI_SLEEP_IDLE      FALSE
 136:../../../os/common/ports/AVR/chcore.h **** #endif
 137:../../../os/common/ports/AVR/chcore.h **** 
 138:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 139:../../../os/common/ports/AVR/chcore.h **** /* Derived constants and error checks.                                       */
 140:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 141:../../../os/common/ports/AVR/chcore.h **** 
 142:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 143:../../../os/common/ports/AVR/chcore.h **** /* Module data structures and types.                                         */
 144:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 145:../../../os/common/ports/AVR/chcore.h **** 
 146:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 147:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 148:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 149:../../../os/common/ports/AVR/chcore.h **** 
 150:../../../os/common/ports/AVR/chcore.h **** /**
 151:../../../os/common/ports/AVR/chcore.h ****  * @brief   Type of stack and memory alignment enforcement.
 152:../../../os/common/ports/AVR/chcore.h ****  * @note    In this architecture the stack alignment is enforced to 8 bits.
 153:../../../os/common/ports/AVR/chcore.h ****  */
 154:../../../os/common/ports/AVR/chcore.h **** typedef uint8_t stkalign_t;
 155:../../../os/common/ports/AVR/chcore.h **** 
 156:../../../os/common/ports/AVR/chcore.h **** /**
 157:../../../os/common/ports/AVR/chcore.h ****  * @brief   Interrupt saved context.
 158:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the stack frame saved during a
 159:../../../os/common/ports/AVR/chcore.h ****  *          preemption-capable interrupt handler.
 160:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 161:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 162:../../../os/common/ports/AVR/chcore.h ****  */
 163:../../../os/common/ports/AVR/chcore.h **** struct port_extctx {
 164:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 165:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r31;
 166:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r30;
 167:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r27;
 168:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r26;
 169:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r25;
 170:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r24;
 171:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r23;
 172:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r22;
 173:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r21;
 174:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r20;
 175:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r19;
 176:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r18;
 177:../../../os/common/ports/AVR/chcore.h ****   uint8_t       sr;
 178:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r1;
 179:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r0;
 180:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 181:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 182:../../../os/common/ports/AVR/chcore.h **** #endif
 183:../../../os/common/ports/AVR/chcore.h ****   uint16_t      pc;
 184:../../../os/common/ports/AVR/chcore.h **** };
 185:../../../os/common/ports/AVR/chcore.h **** 
 186:../../../os/common/ports/AVR/chcore.h **** /**
 187:../../../os/common/ports/AVR/chcore.h ****  * @brief   System saved context.
 188:../../../os/common/ports/AVR/chcore.h ****  * @details This structure represents the inner stack frame during a context
 189:../../../os/common/ports/AVR/chcore.h ****  *          switching.
 190:../../../os/common/ports/AVR/chcore.h ****  * @note    R2 and R13 are not saved because those are assumed to be immutable
 191:../../../os/common/ports/AVR/chcore.h ****  *          during the system life cycle.
 192:../../../os/common/ports/AVR/chcore.h ****  * @note    LR is stored in the caller context so it is not present in this
 193:../../../os/common/ports/AVR/chcore.h ****  *          structure.
 194:../../../os/common/ports/AVR/chcore.h ****  */
 195:../../../os/common/ports/AVR/chcore.h **** struct port_intctx {
 196:../../../os/common/ports/AVR/chcore.h ****   uint8_t       _next;
 197:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r29;
 198:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r28;
 199:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r17;
 200:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r16;
 201:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r15;
 202:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r14;
 203:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r13;
 204:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r12;
 205:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r11;
 206:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r10;
 207:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r9;
 208:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r8;
 209:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r7;
 210:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r6;
 211:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r5;
 212:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r4;
 213:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r3;
 214:../../../os/common/ports/AVR/chcore.h ****   uint8_t       r2;
 215:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__)
 216:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcx;
 217:../../../os/common/ports/AVR/chcore.h **** #endif
 218:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pcl;
 219:../../../os/common/ports/AVR/chcore.h ****   uint8_t       pch;
 220:../../../os/common/ports/AVR/chcore.h **** };
 221:../../../os/common/ports/AVR/chcore.h **** 
 222:../../../os/common/ports/AVR/chcore.h **** /**
 223:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p thread_t structure.
 224:../../../os/common/ports/AVR/chcore.h ****  * @details This structure usually contains just the saved stack pointer
 225:../../../os/common/ports/AVR/chcore.h ****  *          defined as a pointer to a @p port_intctx structure.
 226:../../../os/common/ports/AVR/chcore.h ****  */
 227:../../../os/common/ports/AVR/chcore.h **** struct port_context {
 228:../../../os/common/ports/AVR/chcore.h ****   struct port_intctx *sp;
 229:../../../os/common/ports/AVR/chcore.h **** };
 230:../../../os/common/ports/AVR/chcore.h **** 
 231:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 232:../../../os/common/ports/AVR/chcore.h **** 
 233:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 234:../../../os/common/ports/AVR/chcore.h **** /* Module macros.                                                            */
 235:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 236:../../../os/common/ports/AVR/chcore.h **** 
 237:../../../os/common/ports/AVR/chcore.h **** /**
 238:../../../os/common/ports/AVR/chcore.h ****  * @brief   Platform dependent part of the @p chThdCreateI() API.
 239:../../../os/common/ports/AVR/chcore.h ****  * @details This code usually setup the context switching frame represented
 240:../../../os/common/ports/AVR/chcore.h ****  *          by an @p port_intctx structure.
 241:../../../os/common/ports/AVR/chcore.h ****  */
 242:../../../os/common/ports/AVR/chcore.h **** #if defined(__AVR_3_BYTE_PC__) || defined(__DOXYGEN__)
 243:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 244:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 245:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 246:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 247:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 248:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 249:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 250:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcx = (uint8_t)0;                                             \
 251:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 252:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 253:../../../os/common/ports/AVR/chcore.h **** }
 254:../../../os/common/ports/AVR/chcore.h **** #else /* !__AVR_3_BYTE_PC__ */
 255:../../../os/common/ports/AVR/chcore.h **** #define PORT_SETUP_CONTEXT(tp, wbase, wtop, pf, arg) {                      \
 256:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp = (struct port_intctx *)((uint8_t *)(wtop) -                   \
 257:../../../os/common/ports/AVR/chcore.h ****                                       sizeof(struct port_intctx));          \
 258:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r2  = (uint8_t)(0xff & (uint16_t)pf);                         \
 259:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r3  = (uint8_t)((uint16_t)(pf) >> 8);                         \
 260:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r4  = (uint8_t)(0xff & (uint16_t)arg);                        \
 261:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->r5  = (uint8_t)((uint16_t)(arg) >> 8);                        \
 262:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pcl = (uint16_t)_port_thread_start >> 8;                      \
 263:../../../os/common/ports/AVR/chcore.h ****   tp->ctx.sp->pch = (uint8_t)(0xff & (uint16_t)_port_thread_start);         \
 264:../../../os/common/ports/AVR/chcore.h **** }
 265:../../../os/common/ports/AVR/chcore.h **** #endif /* !__AVR_3_BYTE_PC__ */
 266:../../../os/common/ports/AVR/chcore.h **** 
 267:../../../os/common/ports/AVR/chcore.h **** /**
 268:../../../os/common/ports/AVR/chcore.h ****  * @brief   Computes the thread working area global size.
 269:../../../os/common/ports/AVR/chcore.h ****  * @note    There is no need to perform alignments in this macro.
 270:../../../os/common/ports/AVR/chcore.h ****  */
 271:../../../os/common/ports/AVR/chcore.h **** #define PORT_WA_SIZE(n) ((sizeof(struct port_intctx) - 1) +                \
 272:../../../os/common/ports/AVR/chcore.h ****                          (sizeof(struct port_extctx) - 1) +                \
 273:../../../os/common/ports/AVR/chcore.h ****                          ((size_t)(n)) + ((size_t)(PORT_INT_REQUIRED_STACK)))
 274:../../../os/common/ports/AVR/chcore.h **** 
 275:../../../os/common/ports/AVR/chcore.h **** /**
 276:../../../os/common/ports/AVR/chcore.h ****  * @brief   Static working area allocation.
 277:../../../os/common/ports/AVR/chcore.h ****  * @details This macro is used to allocate a static thread working area
 278:../../../os/common/ports/AVR/chcore.h ****  *          aligned as both position and size.
 279:../../../os/common/ports/AVR/chcore.h ****  *
 280:../../../os/common/ports/AVR/chcore.h ****  * @param[in] s         the name to be assigned to the stack array
 281:../../../os/common/ports/AVR/chcore.h ****  * @param[in] n         the stack size to be assigned to the thread
 282:../../../os/common/ports/AVR/chcore.h ****  */
 283:../../../os/common/ports/AVR/chcore.h **** #define PORT_WORKING_AREA(s, n)                                             \
 284:../../../os/common/ports/AVR/chcore.h ****   stkalign_t s[THD_WORKING_AREA_SIZE(n) / sizeof (stkalign_t)]
 285:../../../os/common/ports/AVR/chcore.h **** 
 286:../../../os/common/ports/AVR/chcore.h **** /**
 287:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 288:../../../os/common/ports/AVR/chcore.h ****  */
 289:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_PRIORITY(n) false
 290:../../../os/common/ports/AVR/chcore.h **** 
 291:../../../os/common/ports/AVR/chcore.h **** /**
 292:../../../os/common/ports/AVR/chcore.h ****  * @brief   Priority level verification macro.
 293:../../../os/common/ports/AVR/chcore.h ****  */
 294:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_IS_VALID_KERNEL_PRIORITY(n) false
 295:../../../os/common/ports/AVR/chcore.h **** 
 296:../../../os/common/ports/AVR/chcore.h **** /**
 297:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ prologue code.
 298:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the start of all IRQ handlers
 299:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 300:../../../os/common/ports/AVR/chcore.h ****  * @note    This code tricks the compiler to save all the specified registers
 301:../../../os/common/ports/AVR/chcore.h ****  *          by "touching" them.
 302:../../../os/common/ports/AVR/chcore.h ****  */
 303:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_PROLOGUE() {                                               \
 304:../../../os/common/ports/AVR/chcore.h ****   asm ("" : : : "r18", "r19", "r20", "r21", "r22", "r23", "r24",            \
 305:../../../os/common/ports/AVR/chcore.h ****                 "r25", "r26", "r27", "r30", "r31");                         \
 306:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 307:../../../os/common/ports/AVR/chcore.h **** }
 308:../../../os/common/ports/AVR/chcore.h **** 
 309:../../../os/common/ports/AVR/chcore.h **** /**
 310:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ epilogue code.
 311:../../../os/common/ports/AVR/chcore.h ****  * @details This macro must be inserted at the end of all IRQ handlers
 312:../../../os/common/ports/AVR/chcore.h ****  *          enabled to invoke system APIs.
 313:../../../os/common/ports/AVR/chcore.h ****  */
 314:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_EPILOGUE() {                                               \
 315:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = false;                                                     \
 316:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_lock();                                                       \
 317:../../../os/common/ports/AVR/chcore.h ****   if (chSchIsPreemptionRequired())                                          \
 318:../../../os/common/ports/AVR/chcore.h ****     chSchDoPreemption();                                                    \
 319:../../../os/common/ports/AVR/chcore.h ****   __dbg_check_unlock();                                                     \
 320:../../../os/common/ports/AVR/chcore.h **** }
 321:../../../os/common/ports/AVR/chcore.h **** 
 322:../../../os/common/ports/AVR/chcore.h **** /**
 323:../../../os/common/ports/AVR/chcore.h ****  * @brief   IRQ handler function declaration.
 324:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 325:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 326:../../../os/common/ports/AVR/chcore.h ****  */
 327:../../../os/common/ports/AVR/chcore.h **** #define PORT_IRQ_HANDLER(id) ISR(id)
 328:../../../os/common/ports/AVR/chcore.h **** 
 329:../../../os/common/ports/AVR/chcore.h **** /**
 330:../../../os/common/ports/AVR/chcore.h ****  * @brief   Fast IRQ handler function declaration.
 331:../../../os/common/ports/AVR/chcore.h ****  * @note    @p id can be a function name or a vector number depending on the
 332:../../../os/common/ports/AVR/chcore.h ****  *          port implementation.
 333:../../../os/common/ports/AVR/chcore.h ****  */
 334:../../../os/common/ports/AVR/chcore.h **** #define PORT_FAST_IRQ_HANDLER(id) ISR(id)
 335:../../../os/common/ports/AVR/chcore.h **** 
 336:../../../os/common/ports/AVR/chcore.h **** /**
 337:../../../os/common/ports/AVR/chcore.h ****  * @brief   Performs a context switch between two threads.
 338:../../../os/common/ports/AVR/chcore.h ****  * @details This is the most critical code in any port, this function
 339:../../../os/common/ports/AVR/chcore.h ****  *          is responsible for the context switch between 2 threads.
 340:../../../os/common/ports/AVR/chcore.h ****  * @note    The implementation of this code affects <b>directly</b> the context
 341:../../../os/common/ports/AVR/chcore.h ****  *          switch performance so optimize here as much as you can.
 342:../../../os/common/ports/AVR/chcore.h ****  *
 343:../../../os/common/ports/AVR/chcore.h ****  * @param[in] ntp       the thread to be switched in
 344:../../../os/common/ports/AVR/chcore.h ****  * @param[in] otp       the thread to be switched out
 345:../../../os/common/ports/AVR/chcore.h ****  */
 346:../../../os/common/ports/AVR/chcore.h **** #define port_switch(ntp, otp) {                                             \
 347:../../../os/common/ports/AVR/chcore.h ****   _port_switch(ntp, otp);                                                   \
 348:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("" : : : "memory");                                         \
 349:../../../os/common/ports/AVR/chcore.h **** }
 350:../../../os/common/ports/AVR/chcore.h **** 
 351:../../../os/common/ports/AVR/chcore.h **** 
 352:../../../os/common/ports/AVR/chcore.h **** /**
 353:../../../os/common/ports/AVR/chcore.h ****  * @brief   Port-related initialization code.
 354:../../../os/common/ports/AVR/chcore.h ****  * @note    This function is empty in this port.
 355:../../../os/common/ports/AVR/chcore.h ****  */
 356:../../../os/common/ports/AVR/chcore.h **** #define port_init(oip) {                                                    \
 357:../../../os/common/ports/AVR/chcore.h ****   __avr_in_isr = true;                                                      \
 358:../../../os/common/ports/AVR/chcore.h **** }
 359:../../../os/common/ports/AVR/chcore.h **** 
 360:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 361:../../../os/common/ports/AVR/chcore.h **** /* External declarations.                                                    */
 362:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 363:../../../os/common/ports/AVR/chcore.h **** 
 364:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 365:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 366:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 367:../../../os/common/ports/AVR/chcore.h **** 
 368:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 369:../../../os/common/ports/AVR/chcore.h **** extern "C" {
 370:../../../os/common/ports/AVR/chcore.h **** #endif
 371:../../../os/common/ports/AVR/chcore.h ****   void _port_switch(thread_t *ntp, thread_t *otp);
 372:../../../os/common/ports/AVR/chcore.h ****   void _port_thread_start(void);
 373:../../../os/common/ports/AVR/chcore.h **** #ifdef __cplusplus
 374:../../../os/common/ports/AVR/chcore.h **** }
 375:../../../os/common/ports/AVR/chcore.h **** #endif
 376:../../../os/common/ports/AVR/chcore.h **** 
 377:../../../os/common/ports/AVR/chcore.h **** #endif /* !defined(_FROM_ASM_) */
 378:../../../os/common/ports/AVR/chcore.h **** 
 379:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 380:../../../os/common/ports/AVR/chcore.h **** /* Module inline functions.                                                  */
 381:../../../os/common/ports/AVR/chcore.h **** /*===========================================================================*/
 382:../../../os/common/ports/AVR/chcore.h **** 
 383:../../../os/common/ports/AVR/chcore.h **** /* The following code is not processed when the file is included from an
 384:../../../os/common/ports/AVR/chcore.h ****    asm module.*/
 385:../../../os/common/ports/AVR/chcore.h **** #if !defined(_FROM_ASM_)
 386:../../../os/common/ports/AVR/chcore.h **** 
 387:../../../os/common/ports/AVR/chcore.h **** /**
 388:../../../os/common/ports/AVR/chcore.h ****  * @brief   Returns a word encoding the current interrupts status.
 389:../../../os/common/ports/AVR/chcore.h ****  *
 390:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupts status.
 391:../../../os/common/ports/AVR/chcore.h ****  */
 392:../../../os/common/ports/AVR/chcore.h **** static inline syssts_t port_get_irq_status(void) {
 393:../../../os/common/ports/AVR/chcore.h **** 
 394:../../../os/common/ports/AVR/chcore.h ****   return SREG;
 395:../../../os/common/ports/AVR/chcore.h **** }
 396:../../../os/common/ports/AVR/chcore.h **** 
 397:../../../os/common/ports/AVR/chcore.h **** /**
 398:../../../os/common/ports/AVR/chcore.h ****  * @brief   Checks the interrupt status.
 399:../../../os/common/ports/AVR/chcore.h ****  *
 400:../../../os/common/ports/AVR/chcore.h ****  * @param[in] sts       the interrupt status word
 401:../../../os/common/ports/AVR/chcore.h ****  *
 402:../../../os/common/ports/AVR/chcore.h ****  * @return              The interrupt status.
 403:../../../os/common/ports/AVR/chcore.h ****  * @retval false        the word specified a disabled interrupts status.
 404:../../../os/common/ports/AVR/chcore.h ****  * @retval true         the word specified an enabled interrupts status.
 405:../../../os/common/ports/AVR/chcore.h ****  */
 406:../../../os/common/ports/AVR/chcore.h **** static inline bool port_irq_enabled(syssts_t sts) {
 407:../../../os/common/ports/AVR/chcore.h **** 
 408:../../../os/common/ports/AVR/chcore.h ****   return (bool)((sts & 0x80) != 0);
 409:../../../os/common/ports/AVR/chcore.h **** }
 410:../../../os/common/ports/AVR/chcore.h **** 
 411:../../../os/common/ports/AVR/chcore.h **** /**
 412:../../../os/common/ports/AVR/chcore.h ****  * @brief   Determines the current execution context.
 413:../../../os/common/ports/AVR/chcore.h ****  *
 414:../../../os/common/ports/AVR/chcore.h ****  * @return              The execution context.
 415:../../../os/common/ports/AVR/chcore.h ****  * @retval false        not running in ISR mode.
 416:../../../os/common/ports/AVR/chcore.h ****  * @retval true         running in ISR mode.
 417:../../../os/common/ports/AVR/chcore.h ****  */
 418:../../../os/common/ports/AVR/chcore.h **** static inline bool port_is_isr_context(void) {
 419:../../../os/common/ports/AVR/chcore.h **** 
 420:../../../os/common/ports/AVR/chcore.h ****   return __avr_in_isr;
 421:../../../os/common/ports/AVR/chcore.h **** }
 422:../../../os/common/ports/AVR/chcore.h **** 
 423:../../../os/common/ports/AVR/chcore.h **** /**
 424:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-lock action.
 425:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just disables interrupts but may perform more
 426:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 427:../../../os/common/ports/AVR/chcore.h ****  */
 428:../../../os/common/ports/AVR/chcore.h **** static inline void port_lock(void) {
 429:../../../os/common/ports/AVR/chcore.h **** 
 430:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("cli" : : : "memory");
 437               		.loc 3 430 0
 438               	/* #APP */
 439               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 440 0000 F894      		cli
 441               	 ;  0 "" 2
 442               	/* #NOAPP */
 443               	.LBE213:
 444               	.LBE212:
 445               	.LBE211:
 446               	.LBE210:
 194:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 447               		.loc 1 194 0
 448 0002 0E94 0000 		call ibqGetFullBufferTimeoutS
 449               	.LVL34:
 450               	.LBB214:
 451               	.LBB215:
 452               	.LBB216:
 453               	.LBB217:
 454               	.LBB218:
 431:../../../os/common/ports/AVR/chcore.h **** }
 432:../../../os/common/ports/AVR/chcore.h **** 
 433:../../../os/common/ports/AVR/chcore.h **** /**
 434:../../../os/common/ports/AVR/chcore.h ****  * @brief   Kernel-unlock action.
 435:../../../os/common/ports/AVR/chcore.h ****  * @details Usually this function just enables interrupts but may perform more
 436:../../../os/common/ports/AVR/chcore.h ****  *          actions.
 437:../../../os/common/ports/AVR/chcore.h ****  */
 438:../../../os/common/ports/AVR/chcore.h **** static inline void port_unlock(void) {
 439:../../../os/common/ports/AVR/chcore.h **** 
 440:../../../os/common/ports/AVR/chcore.h ****   asm volatile ("sei" : : : "memory");
 455               		.loc 3 440 0
 456               	/* #APP */
 457               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 458 0006 7894      		sei
 459               	 ;  0 "" 2
 460               	/* #NOAPP */
 461               	.LBE218:
 462               	.LBE217:
 463               	.LBE216:
 464               	.LBE215:
 465               	.LBE214:
 198:../../../os/hal/src/hal_buffers.c **** 
 466               		.loc 1 198 0
 467 0008 0895      		ret
 468               		.cfi_endproc
 469               	.LFE245:
 471               		.section	.text.ibqReleaseEmptyBuffer,"ax",@progbits
 472               	.global	ibqReleaseEmptyBuffer
 474               	ibqReleaseEmptyBuffer:
 475               	.LFB247:
 243:../../../os/hal/src/hal_buffers.c **** 
 244:../../../os/hal/src/hal_buffers.c **** /**
 245:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the buffer back in the queue.
 246:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 247:../../../os/hal/src/hal_buffers.c ****  *
 248:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 249:../../../os/hal/src/hal_buffers.c ****  *
 250:../../../os/hal/src/hal_buffers.c ****  * @api
 251:../../../os/hal/src/hal_buffers.c ****  */
 252:../../../os/hal/src/hal_buffers.c **** void ibqReleaseEmptyBuffer(input_buffers_queue_t *ibqp) {
 476               		.loc 1 252 0
 477               		.cfi_startproc
 478               	.LVL35:
 479               	/* prologue: function */
 480               	/* frame size = 0 */
 481               	/* stack size = 0 */
 482               	.L__stack_usage = 0
 483 0000 DC01      		movw r26,r24
 484               	.LBB219:
 485               	.LBB220:
 486               	.LBB221:
 487               	.LBB222:
 430:../../../os/common/ports/AVR/chcore.h **** }
 488               		.loc 3 430 0
 489               	/* #APP */
 490               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 491 0002 F894      		cli
 492               	 ;  0 "" 2
 493               	.LVL36:
 494               	/* #NOAPP */
 495               	.LBE222:
 496               	.LBE221:
 497               	.LBE220:
 498               	.LBE219:
 499               	.LBB223:
 500               	.LBB224:
 253:../../../os/hal/src/hal_buffers.c **** 
 254:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 255:../../../os/hal/src/hal_buffers.c ****   ibqReleaseEmptyBufferS(ibqp);
 256:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 257:../../../os/hal/src/hal_buffers.c **** }
 258:../../../os/hal/src/hal_buffers.c **** 
 259:../../../os/hal/src/hal_buffers.c ****   /**
 260:../../../os/hal/src/hal_buffers.c ****    * @brief   Releases the buffer back in the queue.
 261:../../../os/hal/src/hal_buffers.c ****    * @note    The object callback is called after releasing the buffer.
 262:../../../os/hal/src/hal_buffers.c ****    *
 263:../../../os/hal/src/hal_buffers.c ****    * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 264:../../../os/hal/src/hal_buffers.c ****    *
 265:../../../os/hal/src/hal_buffers.c ****    * @sclass
 266:../../../os/hal/src/hal_buffers.c ****    */
 267:../../../os/hal/src/hal_buffers.c ****   void ibqReleaseEmptyBufferS(input_buffers_queue_t *ibqp) {
 268:../../../os/hal/src/hal_buffers.c **** 
 269:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 270:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!ibqIsEmptyI(ibqp), "buffers queue empty");
 271:../../../os/hal/src/hal_buffers.c **** 
 272:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 273:../../../os/hal/src/hal_buffers.c ****   ibqp->bcounter--;
 501               		.loc 1 273 0
 502 0004 1596      		adiw r26,5
 503 0006 8D91      		ld r24,X+
 504 0008 9C91      		ld r25,X
 505 000a 1697      		sbiw r26,5+1
 506               	.LVL37:
 507 000c 0197      		sbiw r24,1
 508 000e 1696      		adiw r26,5+1
 509 0010 9C93      		st X,r25
 510 0012 8E93      		st -X,r24
 511 0014 1597      		sbiw r26,5
 274:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 512               		.loc 1 274 0
 513 0016 1996      		adiw r26,9
 514 0018 2D91      		ld r18,X+
 515 001a 3C91      		ld r19,X
 516 001c 1A97      		sbiw r26,9+1
 517 001e 1D96      		adiw r26,13
 518 0020 8D91      		ld r24,X+
 519 0022 9C91      		ld r25,X
 520 0024 1E97      		sbiw r26,13+1
 521 0026 820F      		add r24,r18
 522 0028 931F      		adc r25,r19
 523 002a 1A96      		adiw r26,9+1
 524 002c 9C93      		st X,r25
 525 002e 8E93      		st -X,r24
 526 0030 1997      		sbiw r26,9
 275:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 527               		.loc 1 275 0
 528 0032 1B96      		adiw r26,11
 529 0034 2D91      		ld r18,X+
 530 0036 3C91      		ld r19,X
 531 0038 1C97      		sbiw r26,11+1
 532 003a 8217      		cp r24,r18
 533 003c 9307      		cpc r25,r19
 534 003e 00F0      		brlo .L21
 276:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 535               		.loc 1 276 0
 536 0040 5196      		adiw r26,17
 537 0042 8D91      		ld r24,X+
 538 0044 9C91      		ld r25,X
 539 0046 5297      		sbiw r26,17+1
 540 0048 1A96      		adiw r26,9+1
 541 004a 9C93      		st X,r25
 542 004c 8E93      		st -X,r24
 543 004e 1997      		sbiw r26,9
 544               	.L21:
 277:../../../os/hal/src/hal_buffers.c ****   }
 278:../../../os/hal/src/hal_buffers.c **** 
 279:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 280:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr = NULL;
 545               		.loc 1 280 0
 546 0050 5496      		adiw r26,19+1
 547 0052 1C92      		st X,__zero_reg__
 548 0054 1E92      		st -X,__zero_reg__
 549 0056 5397      		sbiw r26,19
 281:../../../os/hal/src/hal_buffers.c **** 
 282:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 283:../../../os/hal/src/hal_buffers.c ****   if (ibqp->notify != NULL) {
 550               		.loc 1 283 0
 551 0058 5796      		adiw r26,23
 552 005a ED91      		ld r30,X+
 553 005c FC91      		ld r31,X
 554 005e 5897      		sbiw r26,23+1
 555 0060 3097      		sbiw r30,0
 556 0062 01F0      		breq .L22
 557 0064 CD01      		movw r24,r26
 284:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 558               		.loc 1 284 0
 559 0066 0995      		icall
 560               	.LVL38:
 561               	.L22:
 562               	.LBE224:
 563               	.LBE223:
 564               	.LBB225:
 565               	.LBB226:
 566               	.LBB227:
 567               	.LBB228:
 568               	.LBB229:
 569               		.loc 3 440 0
 570               	/* #APP */
 571               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 572 0068 7894      		sei
 573               	 ;  0 "" 2
 574               	/* #NOAPP */
 575 006a 0895      		ret
 576               	.LBE229:
 577               	.LBE228:
 578               	.LBE227:
 579               	.LBE226:
 580               	.LBE225:
 581               		.cfi_endproc
 582               	.LFE247:
 584               		.section	.text.ibqReleaseEmptyBufferS,"ax",@progbits
 585               	.global	ibqReleaseEmptyBufferS
 587               	ibqReleaseEmptyBufferS:
 588               	.LFB248:
 267:../../../os/hal/src/hal_buffers.c **** 
 589               		.loc 1 267 0
 590               		.cfi_startproc
 591               	.LVL39:
 592               	/* prologue: function */
 593               	/* frame size = 0 */
 594               	/* stack size = 0 */
 595               	.L__stack_usage = 0
 596 0000 DC01      		movw r26,r24
 273:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 597               		.loc 1 273 0
 598 0002 1596      		adiw r26,5
 599 0004 8D91      		ld r24,X+
 600 0006 9C91      		ld r25,X
 601 0008 1697      		sbiw r26,5+1
 602               	.LVL40:
 603 000a 0197      		sbiw r24,1
 604 000c 1696      		adiw r26,5+1
 605 000e 9C93      		st X,r25
 606 0010 8E93      		st -X,r24
 607 0012 1597      		sbiw r26,5
 274:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 608               		.loc 1 274 0
 609 0014 1996      		adiw r26,9
 610 0016 2D91      		ld r18,X+
 611 0018 3C91      		ld r19,X
 612 001a 1A97      		sbiw r26,9+1
 613 001c 1D96      		adiw r26,13
 614 001e 8D91      		ld r24,X+
 615 0020 9C91      		ld r25,X
 616 0022 1E97      		sbiw r26,13+1
 617 0024 820F      		add r24,r18
 618 0026 931F      		adc r25,r19
 619 0028 1A96      		adiw r26,9+1
 620 002a 9C93      		st X,r25
 621 002c 8E93      		st -X,r24
 622 002e 1997      		sbiw r26,9
 275:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 623               		.loc 1 275 0
 624 0030 1B96      		adiw r26,11
 625 0032 2D91      		ld r18,X+
 626 0034 3C91      		ld r19,X
 627 0036 1C97      		sbiw r26,11+1
 628 0038 8217      		cp r24,r18
 629 003a 9307      		cpc r25,r19
 630 003c 00F0      		brlo .L27
 276:../../../os/hal/src/hal_buffers.c ****   }
 631               		.loc 1 276 0
 632 003e 5196      		adiw r26,17
 633 0040 8D91      		ld r24,X+
 634 0042 9C91      		ld r25,X
 635 0044 5297      		sbiw r26,17+1
 636 0046 1A96      		adiw r26,9+1
 637 0048 9C93      		st X,r25
 638 004a 8E93      		st -X,r24
 639 004c 1997      		sbiw r26,9
 640               	.L27:
 280:../../../os/hal/src/hal_buffers.c **** 
 641               		.loc 1 280 0
 642 004e 5496      		adiw r26,19+1
 643 0050 1C92      		st X,__zero_reg__
 644 0052 1E92      		st -X,__zero_reg__
 645 0054 5397      		sbiw r26,19
 283:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 646               		.loc 1 283 0
 647 0056 5796      		adiw r26,23
 648 0058 ED91      		ld r30,X+
 649 005a FC91      		ld r31,X
 650 005c 5897      		sbiw r26,23+1
 651 005e 3097      		sbiw r30,0
 652 0060 01F0      		breq .L26
 653               		.loc 1 284 0
 654 0062 CD01      		movw r24,r26
 655 0064 0994      		ijmp
 656               	.LVL41:
 657               	.L26:
 658 0066 0895      		ret
 659               		.cfi_endproc
 660               	.LFE248:
 662               		.section	.text.ibqGetTimeout,"ax",@progbits
 663               	.global	ibqGetTimeout
 665               	ibqGetTimeout:
 666               	.LFB249:
 285:../../../os/hal/src/hal_buffers.c ****   }
 286:../../../os/hal/src/hal_buffers.c **** }
 287:../../../os/hal/src/hal_buffers.c **** 
 288:../../../os/hal/src/hal_buffers.c **** /**
 289:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 290:../../../os/hal/src/hal_buffers.c ****  * @details This function reads a byte value from an input queue. If
 291:../../../os/hal/src/hal_buffers.c ****  *          the queue is empty then the calling thread is suspended until a
 292:../../../os/hal/src/hal_buffers.c ****  *          new buffer arrives in the queue or a timeout occurs.
 293:../../../os/hal/src/hal_buffers.c ****  *
 294:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 295:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 296:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 297:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 298:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 299:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 300:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 301:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 302:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 303:../../../os/hal/src/hal_buffers.c ****  *
 304:../../../os/hal/src/hal_buffers.c ****  * @api
 305:../../../os/hal/src/hal_buffers.c ****  */
 306:../../../os/hal/src/hal_buffers.c **** msg_t ibqGetTimeout(input_buffers_queue_t *ibqp, sysinterval_t timeout) {
 667               		.loc 1 306 0
 668               		.cfi_startproc
 669               	.LVL42:
 670 0000 0F93      		push r16
 671               	.LCFI17:
 672               		.cfi_def_cfa_offset 3
 673               		.cfi_offset 16, -2
 674 0002 1F93      		push r17
 675               	.LCFI18:
 676               		.cfi_def_cfa_offset 4
 677               		.cfi_offset 17, -3
 678 0004 CF93      		push r28
 679               	.LCFI19:
 680               		.cfi_def_cfa_offset 5
 681               		.cfi_offset 28, -4
 682 0006 DF93      		push r29
 683               	.LCFI20:
 684               		.cfi_def_cfa_offset 6
 685               		.cfi_offset 29, -5
 686               	/* prologue: function */
 687               	/* frame size = 0 */
 688               	/* stack size = 4 */
 689               	.L__stack_usage = 4
 690 0008 EC01      		movw r28,r24
 691               	.LBB230:
 692               	.LBB231:
 693               	.LBB232:
 694               	.LBB233:
 430:../../../os/common/ports/AVR/chcore.h **** }
 695               		.loc 3 430 0
 696               	/* #APP */
 697               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 698 000a F894      		cli
 699               	 ;  0 "" 2
 700               	/* #NOAPP */
 701               	.LBE233:
 702               	.LBE232:
 703               	.LBE231:
 704               	.LBE230:
 307:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 308:../../../os/hal/src/hal_buffers.c **** 
 309:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 310:../../../os/hal/src/hal_buffers.c **** 
 311:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 312:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr == NULL) {
 705               		.loc 1 312 0
 706 000c EB89      		ldd r30,Y+19
 707 000e FC89      		ldd r31,Y+20
 708 0010 3097      		sbiw r30,0
 709 0012 01F0      		breq .L40
 710               	.LVL43:
 711               	.L30:
 313:../../../os/hal/src/hal_buffers.c ****     msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 314:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 315:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 316:../../../os/hal/src/hal_buffers.c ****       return msg;
 317:../../../os/hal/src/hal_buffers.c ****     }
 318:../../../os/hal/src/hal_buffers.c ****   }
 319:../../../os/hal/src/hal_buffers.c **** 
 320:../../../os/hal/src/hal_buffers.c ****   /* Next byte from the buffer.*/
 321:../../../os/hal/src/hal_buffers.c ****   msg = (msg_t)*ibqp->ptr;
 712               		.loc 1 321 0
 713 0014 0191      		ld r16,Z+
 714 0016 10E0      		ldi r17,0
 715               	.LVL44:
 322:../../../os/hal/src/hal_buffers.c ****   ibqp->ptr++;
 716               		.loc 1 322 0
 717 0018 FC8B      		std Y+20,r31
 718 001a EB8B      		std Y+19,r30
 323:../../../os/hal/src/hal_buffers.c **** 
 324:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully read then it is returned as
 325:../../../os/hal/src/hal_buffers.c ****      empty in the queue.*/
 326:../../../os/hal/src/hal_buffers.c ****   if (ibqp->ptr >= ibqp->top) {
 719               		.loc 1 326 0
 720 001c 8D89      		ldd r24,Y+21
 721 001e 9E89      		ldd r25,Y+22
 722 0020 E817      		cp r30,r24
 723 0022 F907      		cpc r31,r25
 724 0024 00F0      		brlo .L34
 725               	.LVL45:
 726               	.LBB234:
 727               	.LBB235:
 273:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 728               		.loc 1 273 0
 729 0026 8D81      		ldd r24,Y+5
 730 0028 9E81      		ldd r25,Y+6
 731 002a 0197      		sbiw r24,1
 732 002c 9E83      		std Y+6,r25
 733 002e 8D83      		std Y+5,r24
 274:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 734               		.loc 1 274 0
 735 0030 2985      		ldd r18,Y+9
 736 0032 3A85      		ldd r19,Y+10
 737 0034 8D85      		ldd r24,Y+13
 738 0036 9E85      		ldd r25,Y+14
 739 0038 820F      		add r24,r18
 740 003a 931F      		adc r25,r19
 741 003c 9A87      		std Y+10,r25
 742 003e 8987      		std Y+9,r24
 275:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 743               		.loc 1 275 0
 744 0040 2B85      		ldd r18,Y+11
 745 0042 3C85      		ldd r19,Y+12
 746 0044 8217      		cp r24,r18
 747 0046 9307      		cpc r25,r19
 748 0048 00F0      		brlo .L35
 276:../../../os/hal/src/hal_buffers.c ****   }
 749               		.loc 1 276 0
 750 004a 8989      		ldd r24,Y+17
 751 004c 9A89      		ldd r25,Y+18
 752 004e 9A87      		std Y+10,r25
 753 0050 8987      		std Y+9,r24
 754               	.L35:
 280:../../../os/hal/src/hal_buffers.c **** 
 755               		.loc 1 280 0
 756 0052 1C8A      		std Y+20,__zero_reg__
 757 0054 1B8A      		std Y+19,__zero_reg__
 283:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 758               		.loc 1 283 0
 759 0056 EF89      		ldd r30,Y+23
 760 0058 F88D      		ldd r31,Y+24
 761 005a 3097      		sbiw r30,0
 762 005c 01F0      		breq .L34
 284:../../../os/hal/src/hal_buffers.c ****   }
 763               		.loc 1 284 0
 764 005e CE01      		movw r24,r28
 765 0060 0995      		icall
 766               	.LVL46:
 767               	.L34:
 768               	.LBE235:
 769               	.LBE234:
 770               	.LBB236:
 771               	.LBB237:
 772               	.LBB238:
 773               	.LBB239:
 774               	.LBB240:
 775               		.loc 3 440 0
 776               	/* #APP */
 777               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 778 0062 7894      		sei
 779               	 ;  0 "" 2
 780               	/* #NOAPP */
 781               	.LBE240:
 782               	.LBE239:
 783               	.LBE238:
 784               	.LBE237:
 785               	.LBE236:
 327:../../../os/hal/src/hal_buffers.c ****     ibqReleaseEmptyBufferS(ibqp);
 328:../../../os/hal/src/hal_buffers.c ****   }
 329:../../../os/hal/src/hal_buffers.c **** 
 330:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 331:../../../os/hal/src/hal_buffers.c ****   return msg;
 786               		.loc 1 331 0
 787 0064 C801      		movw r24,r16
 788               	.LVL47:
 789               	.L32:
 790               	/* epilogue start */
 332:../../../os/hal/src/hal_buffers.c **** }
 791               		.loc 1 332 0
 792 0066 DF91      		pop r29
 793 0068 CF91      		pop r28
 794               	.LVL48:
 795 006a 1F91      		pop r17
 796 006c 0F91      		pop r16
 797 006e 0895      		ret
 798               	.LVL49:
 799               	.L40:
 313:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 800               		.loc 1 313 0
 801 0070 0E94 0000 		call ibqGetFullBufferTimeoutS
 802               	.LVL50:
 314:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 803               		.loc 1 314 0
 804 0074 0097      		sbiw r24,0
 805 0076 01F4      		brne .L31
 806 0078 EB89      		ldd r30,Y+19
 807 007a FC89      		ldd r31,Y+20
 808 007c 00C0      		rjmp .L30
 809               	.L31:
 810               	.LBB241:
 811               	.LBB242:
 812               	.LBB243:
 813               	.LBB244:
 814               	.LBB245:
 815               		.loc 3 440 0
 816               	/* #APP */
 817               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 818 007e 7894      		sei
 819               	 ;  0 "" 2
 820               	/* #NOAPP */
 821               	.LBE245:
 822               	.LBE244:
 823               	.LBE243:
 824               	.LBE242:
 825               	.LBE241:
 316:../../../os/hal/src/hal_buffers.c ****     }
 826               		.loc 1 316 0
 827 0080 00C0      		rjmp .L32
 828               		.cfi_endproc
 829               	.LFE249:
 831               		.section	.text.ibqReadTimeout,"ax",@progbits
 832               	.global	ibqReadTimeout
 834               	ibqReadTimeout:
 835               	.LFB250:
 333:../../../os/hal/src/hal_buffers.c **** 
 334:../../../os/hal/src/hal_buffers.c **** /**
 335:../../../os/hal/src/hal_buffers.c ****  * @brief   Input queue read with timeout.
 336:../../../os/hal/src/hal_buffers.c ****  * @details The function reads data from an input queue into a buffer.
 337:../../../os/hal/src/hal_buffers.c ****  *          The operation completes when the specified amount of data has been
 338:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 339:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 340:../../../os/hal/src/hal_buffers.c ****  *
 341:../../../os/hal/src/hal_buffers.c ****  * @param[in] ibqp      pointer to the @p input_buffers_queue_t object
 342:../../../os/hal/src/hal_buffers.c ****  * @param[out] bp       pointer to the data buffer
 343:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 344:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 345:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 346:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 347:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 348:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 349:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 350:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 351:../../../os/hal/src/hal_buffers.c ****  *
 352:../../../os/hal/src/hal_buffers.c ****  * @api
 353:../../../os/hal/src/hal_buffers.c ****  */
 354:../../../os/hal/src/hal_buffers.c **** size_t ibqReadTimeout(input_buffers_queue_t *ibqp, uint8_t *bp,
 355:../../../os/hal/src/hal_buffers.c ****                       size_t n, sysinterval_t timeout) {
 836               		.loc 1 355 0
 837               		.cfi_startproc
 838               	.LVL51:
 839 0000 8F92      		push r8
 840               	.LCFI21:
 841               		.cfi_def_cfa_offset 3
 842               		.cfi_offset 8, -2
 843 0002 9F92      		push r9
 844               	.LCFI22:
 845               		.cfi_def_cfa_offset 4
 846               		.cfi_offset 9, -3
 847 0004 AF92      		push r10
 848               	.LCFI23:
 849               		.cfi_def_cfa_offset 5
 850               		.cfi_offset 10, -4
 851 0006 BF92      		push r11
 852               	.LCFI24:
 853               		.cfi_def_cfa_offset 6
 854               		.cfi_offset 11, -5
 855 0008 CF92      		push r12
 856               	.LCFI25:
 857               		.cfi_def_cfa_offset 7
 858               		.cfi_offset 12, -6
 859 000a DF92      		push r13
 860               	.LCFI26:
 861               		.cfi_def_cfa_offset 8
 862               		.cfi_offset 13, -7
 863 000c EF92      		push r14
 864               	.LCFI27:
 865               		.cfi_def_cfa_offset 9
 866               		.cfi_offset 14, -8
 867 000e FF92      		push r15
 868               	.LCFI28:
 869               		.cfi_def_cfa_offset 10
 870               		.cfi_offset 15, -9
 871 0010 0F93      		push r16
 872               	.LCFI29:
 873               		.cfi_def_cfa_offset 11
 874               		.cfi_offset 16, -10
 875 0012 1F93      		push r17
 876               	.LCFI30:
 877               		.cfi_def_cfa_offset 12
 878               		.cfi_offset 17, -11
 879 0014 CF93      		push r28
 880               	.LCFI31:
 881               		.cfi_def_cfa_offset 13
 882               		.cfi_offset 28, -12
 883 0016 DF93      		push r29
 884               	.LCFI32:
 885               		.cfi_def_cfa_offset 14
 886               		.cfi_offset 29, -13
 887               	/* prologue: function */
 888               	/* frame size = 0 */
 889               	/* stack size = 12 */
 890               	.L__stack_usage = 12
 891 0018 EC01      		movw r28,r24
 892 001a 6B01      		movw r12,r22
 893 001c 5A01      		movw r10,r20
 894 001e 4901      		movw r8,r18
 895               	.LVL52:
 896               	.LBB246:
 897               	.LBB247:
 898               	.LBB248:
 899               	.LBB249:
 430:../../../os/common/ports/AVR/chcore.h **** }
 900               		.loc 3 430 0
 901               	/* #APP */
 902               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 903 0020 F894      		cli
 904               	 ;  0 "" 2
 905               	/* #NOAPP */
 906               	.LBE249:
 907               	.LBE248:
 908               	.LBE247:
 909               	.LBE246:
 356:../../../os/hal/src/hal_buffers.c ****   size_t r = 0;
 910               		.loc 1 356 0
 911 0022 E12C      		mov r14,__zero_reg__
 912 0024 F12C      		mov r15,__zero_reg__
 913 0026 00C0      		rjmp .L52
 914               	.LVL53:
 915               	.L57:
 916               	.LBB250:
 357:../../../os/hal/src/hal_buffers.c **** 
 358:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 359:../../../os/hal/src/hal_buffers.c **** 
 360:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 361:../../../os/hal/src/hal_buffers.c **** 
 362:../../../os/hal/src/hal_buffers.c ****   while (true) {
 363:../../../os/hal/src/hal_buffers.c ****     size_t size;
 364:../../../os/hal/src/hal_buffers.c **** 
 365:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 366:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr == NULL) {
 367:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 368:../../../os/hal/src/hal_buffers.c **** 
 369:../../../os/hal/src/hal_buffers.c ****       /* Getting a data buffer using the specified timeout.*/
 370:../../../os/hal/src/hal_buffers.c ****       msg = ibqGetFullBufferTimeoutS(ibqp, timeout);
 371:../../../os/hal/src/hal_buffers.c **** 
 372:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 373:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 374:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 375:../../../os/hal/src/hal_buffers.c ****         return r;
 376:../../../os/hal/src/hal_buffers.c ****       }
 377:../../../os/hal/src/hal_buffers.c ****     }
 378:../../../os/hal/src/hal_buffers.c **** 
 379:../../../os/hal/src/hal_buffers.c ****     /* Size of the data chunk present in the current buffer.*/
 380:../../../os/hal/src/hal_buffers.c ****     size = (size_t)ibqp->top - (size_t)ibqp->ptr;
 381:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 382:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 383:../../../os/hal/src/hal_buffers.c ****     }
 384:../../../os/hal/src/hal_buffers.c **** 
 385:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 386:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 387:../../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 388:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 389:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, BUFFERS_CHUNKS_SIZE);
 917               		.loc 1 389 0
 918 0028 80E4      		ldi r24,lo8(64)
 919 002a FB01      		movw r30,r22
 920 002c D601      		movw r26,r12
 921               		0:
 922 002e 0190      		ld r0,Z+
 923 0030 0D92      		st X+,r0
 924 0032 8A95      		dec r24
 925 0034 01F4      		brne 0b
 390:../../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 926               		.loc 1 390 0
 927 0036 20E4      		ldi r18,64
 928 0038 C20E      		add r12,r18
 929 003a D11C      		adc r13,__zero_reg__
 930               	.LVL54:
 391:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 931               		.loc 1 391 0
 932 003c 8B89      		ldd r24,Y+19
 933 003e 9C89      		ldd r25,Y+20
 934 0040 805C      		subi r24,-64
 935 0042 9F4F      		sbci r25,-1
 936 0044 9C8B      		std Y+20,r25
 937 0046 8B8B      		std Y+19,r24
 392:../../../os/hal/src/hal_buffers.c ****       r         += (size_t)BUFFERS_CHUNKS_SIZE;
 938               		.loc 1 392 0
 939 0048 20E4      		ldi r18,64
 940 004a E20E      		add r14,r18
 941 004c F11C      		adc r15,__zero_reg__
 942               	.LVL55:
 943               	.L47:
 393:../../../os/hal/src/hal_buffers.c ****     }
 394:../../../os/hal/src/hal_buffers.c ****     else {
 395:../../../os/hal/src/hal_buffers.c ****       memcpy(bp, ibqp->ptr, size);
 396:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 397:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 398:../../../os/hal/src/hal_buffers.c ****       r         += size;
 399:../../../os/hal/src/hal_buffers.c ****     }
 400:../../../os/hal/src/hal_buffers.c **** 
 401:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 402:../../../os/hal/src/hal_buffers.c ****     if (ibqp->ptr >= ibqp->top) {
 944               		.loc 1 402 0
 945 004e 2D89      		ldd r18,Y+21
 946 0050 3E89      		ldd r19,Y+22
 947 0052 8217      		cp r24,r18
 948 0054 9307      		cpc r25,r19
 949 0056 00F0      		brlo .L49
 950               	.LVL56:
 951               	.LBB251:
 952               	.LBB252:
 273:../../../os/hal/src/hal_buffers.c ****   ibqp->brdptr += ibqp->bsize;
 953               		.loc 1 273 0
 954 0058 8D81      		ldd r24,Y+5
 955 005a 9E81      		ldd r25,Y+6
 956 005c 0197      		sbiw r24,1
 957 005e 9E83      		std Y+6,r25
 958 0060 8D83      		std Y+5,r24
 274:../../../os/hal/src/hal_buffers.c ****   if (ibqp->brdptr >= ibqp->btop) {
 959               		.loc 1 274 0
 960 0062 2985      		ldd r18,Y+9
 961 0064 3A85      		ldd r19,Y+10
 962 0066 8D85      		ldd r24,Y+13
 963 0068 9E85      		ldd r25,Y+14
 964 006a 820F      		add r24,r18
 965 006c 931F      		adc r25,r19
 966 006e 9A87      		std Y+10,r25
 967 0070 8987      		std Y+9,r24
 275:../../../os/hal/src/hal_buffers.c ****     ibqp->brdptr = ibqp->buffers;
 968               		.loc 1 275 0
 969 0072 2B85      		ldd r18,Y+11
 970 0074 3C85      		ldd r19,Y+12
 971 0076 8217      		cp r24,r18
 972 0078 9307      		cpc r25,r19
 973 007a 00F0      		brlo .L50
 276:../../../os/hal/src/hal_buffers.c ****   }
 974               		.loc 1 276 0
 975 007c 8989      		ldd r24,Y+17
 976 007e 9A89      		ldd r25,Y+18
 977 0080 9A87      		std Y+10,r25
 978 0082 8987      		std Y+9,r24
 979               	.L50:
 280:../../../os/hal/src/hal_buffers.c **** 
 980               		.loc 1 280 0
 981 0084 1C8A      		std Y+20,__zero_reg__
 982 0086 1B8A      		std Y+19,__zero_reg__
 283:../../../os/hal/src/hal_buffers.c ****     ibqp->notify(ibqp);
 983               		.loc 1 283 0
 984 0088 EF89      		ldd r30,Y+23
 985 008a F88D      		ldd r31,Y+24
 986 008c 3097      		sbiw r30,0
 987 008e 01F0      		breq .L49
 284:../../../os/hal/src/hal_buffers.c ****   }
 988               		.loc 1 284 0
 989 0090 CE01      		movw r24,r28
 990 0092 0995      		icall
 991               	.LVL57:
 992               	.L49:
 993               	.LBE252:
 994               	.LBE251:
 995               	.LBB253:
 996               	.LBB254:
 997               	.LBB255:
 998               	.LBB256:
 999               	.LBB257:
 1000               		.loc 3 440 0
 1001               	/* #APP */
 1002               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1003 0094 7894      		sei
 1004               	 ;  0 "" 2
 1005               	/* #NOAPP */
 1006               	.LBE257:
 1007               	.LBE256:
 1008               	.LBE255:
 1009               	.LBE254:
 1010               	.LBE253:
 403:../../../os/hal/src/hal_buffers.c ****       ibqReleaseEmptyBufferS(ibqp);
 404:../../../os/hal/src/hal_buffers.c ****     }
 405:../../../os/hal/src/hal_buffers.c **** 
 406:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 407:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 408:../../../os/hal/src/hal_buffers.c ****     if (r >= n) {
 1011               		.loc 1 408 0
 1012 0096 EA14      		cp r14,r10
 1013 0098 FB04      		cpc r15,r11
 1014 009a 00F4      		brsh .L44
 1015               	.LBB258:
 1016               	.LBB259:
 1017               	.LBB260:
 1018               	.LBB261:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1019               		.loc 3 430 0
 1020               	/* #APP */
 1021               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1022 009c F894      		cli
 1023               	 ;  0 "" 2
 1024               	.LVL58:
 1025               	/* #NOAPP */
 1026               	.L52:
 1027               	.LBE261:
 1028               	.LBE260:
 1029               	.LBE259:
 1030               	.LBE258:
 366:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 1031               		.loc 1 366 0
 1032 009e 6B89      		ldd r22,Y+19
 1033 00a0 7C89      		ldd r23,Y+20
 1034 00a2 6115      		cp r22,__zero_reg__
 1035 00a4 7105      		cpc r23,__zero_reg__
 1036 00a6 01F0      		breq .L56
 1037               	.L42:
 380:../../../os/hal/src/hal_buffers.c ****     if (size > (n - r)) {
 1038               		.loc 1 380 0
 1039 00a8 0D89      		ldd r16,Y+21
 1040 00aa 1E89      		ldd r17,Y+22
 1041               	.LVL59:
 381:../../../os/hal/src/hal_buffers.c ****       size = n - r;
 1042               		.loc 1 381 0
 1043 00ac C501      		movw r24,r10
 1044 00ae 8E19      		sub r24,r14
 1045 00b0 9F09      		sbc r25,r15
 1046 00b2 061B      		sub r16,r22
 1047 00b4 170B      		sbc r17,r23
 1048               	.LVL60:
 1049 00b6 8017      		cp r24,r16
 1050 00b8 9107      		cpc r25,r17
 1051 00ba 00F4      		brsh .L45
 1052 00bc 8C01      		movw r16,r24
 1053               	.LVL61:
 1054               	.L45:
 387:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 1055               		.loc 1 387 0
 1056 00be 0134      		cpi r16,65
 1057 00c0 1105      		cpc r17,__zero_reg__
 1058 00c2 00F0      		brlo .+2
 1059 00c4 00C0      		rjmp .L57
 395:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 1060               		.loc 1 395 0
 1061 00c6 A801      		movw r20,r16
 1062 00c8 C601      		movw r24,r12
 1063 00ca 0E94 0000 		call memcpy
 1064               	.LVL62:
 396:../../../os/hal/src/hal_buffers.c ****       ibqp->ptr += size;
 1065               		.loc 1 396 0
 1066 00ce C00E      		add r12,r16
 1067 00d0 D11E      		adc r13,r17
 1068               	.LVL63:
 397:../../../os/hal/src/hal_buffers.c ****       r         += size;
 1069               		.loc 1 397 0
 1070 00d2 8B89      		ldd r24,Y+19
 1071 00d4 9C89      		ldd r25,Y+20
 1072 00d6 800F      		add r24,r16
 1073 00d8 911F      		adc r25,r17
 1074 00da 9C8B      		std Y+20,r25
 1075 00dc 8B8B      		std Y+19,r24
 398:../../../os/hal/src/hal_buffers.c ****     }
 1076               		.loc 1 398 0
 1077 00de E00E      		add r14,r16
 1078 00e0 F11E      		adc r15,r17
 1079               	.LVL64:
 1080 00e2 00C0      		rjmp .L47
 1081               	.LVL65:
 1082               	.L56:
 1083               	.LBB262:
 370:../../../os/hal/src/hal_buffers.c **** 
 1084               		.loc 1 370 0
 1085 00e4 B401      		movw r22,r8
 1086 00e6 CE01      		movw r24,r28
 1087 00e8 0E94 0000 		call ibqGetFullBufferTimeoutS
 1088               	.LVL66:
 373:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 1089               		.loc 1 373 0
 1090 00ec 892B      		or r24,r25
 1091 00ee 01F4      		brne .L43
 1092 00f0 6B89      		ldd r22,Y+19
 1093 00f2 7C89      		ldd r23,Y+20
 1094 00f4 00C0      		rjmp .L42
 1095               	.L43:
 1096               	.LBB263:
 1097               	.LBB264:
 1098               	.LBB265:
 1099               	.LBB266:
 1100               	.LBB267:
 1101               		.loc 3 440 0
 1102               	/* #APP */
 1103               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1104 00f6 7894      		sei
 1105               	 ;  0 "" 2
 1106               	.LVL67:
 1107               	/* #NOAPP */
 1108               	.L44:
 1109               	.LBE267:
 1110               	.LBE266:
 1111               	.LBE265:
 1112               	.LBE264:
 1113               	.LBE263:
 1114               	.LBE262:
 1115               	.LBE250:
 409:../../../os/hal/src/hal_buffers.c ****       return r;
 410:../../../os/hal/src/hal_buffers.c ****     }
 411:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 412:../../../os/hal/src/hal_buffers.c ****   }
 413:../../../os/hal/src/hal_buffers.c **** }
 1116               		.loc 1 413 0
 1117 00f8 C701      		movw r24,r14
 1118               	/* epilogue start */
 1119 00fa DF91      		pop r29
 1120 00fc CF91      		pop r28
 1121               	.LVL68:
 1122 00fe 1F91      		pop r17
 1123 0100 0F91      		pop r16
 1124 0102 FF90      		pop r15
 1125 0104 EF90      		pop r14
 1126               	.LVL69:
 1127 0106 DF90      		pop r13
 1128 0108 CF90      		pop r12
 1129               	.LVL70:
 1130 010a BF90      		pop r11
 1131 010c AF90      		pop r10
 1132               	.LVL71:
 1133 010e 9F90      		pop r9
 1134 0110 8F90      		pop r8
 1135               	.LVL72:
 1136 0112 0895      		ret
 1137               		.cfi_endproc
 1138               	.LFE250:
 1140               		.section	.text.obqObjectInit,"ax",@progbits
 1141               	.global	obqObjectInit
 1143               	obqObjectInit:
 1144               	.LFB251:
 414:../../../os/hal/src/hal_buffers.c **** 
 415:../../../os/hal/src/hal_buffers.c **** /**
 416:../../../os/hal/src/hal_buffers.c ****  * @brief   Initializes an output buffers queue object.
 417:../../../os/hal/src/hal_buffers.c ****  *
 418:../../../os/hal/src/hal_buffers.c ****  * @param[out] obqp     pointer to the @p output_buffers_queue_t object
 419:../../../os/hal/src/hal_buffers.c ****  * @param[in] suspended initial state of the queue
 420:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to a memory area allocated for buffers
 421:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      buffers size
 422:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         number of buffers
 423:../../../os/hal/src/hal_buffers.c ****  * @param[in] onfy      callback called when a buffer is posted in the queue
 424:../../../os/hal/src/hal_buffers.c ****  * @param[in] link      application defined pointer
 425:../../../os/hal/src/hal_buffers.c ****  *
 426:../../../os/hal/src/hal_buffers.c ****  * @init
 427:../../../os/hal/src/hal_buffers.c ****  */
 428:../../../os/hal/src/hal_buffers.c **** void obqObjectInit(output_buffers_queue_t *obqp, bool suspended, uint8_t *bp,
 429:../../../os/hal/src/hal_buffers.c ****                    size_t size, size_t n, bqnotify_t onfy, void *link) {
 1145               		.loc 1 429 0
 1146               		.cfi_startproc
 1147               	.LVL73:
 1148 0000 7F92      		push r7
 1149               	.LCFI33:
 1150               		.cfi_def_cfa_offset 3
 1151               		.cfi_offset 7, -2
 1152 0002 8F92      		push r8
 1153               	.LCFI34:
 1154               		.cfi_def_cfa_offset 4
 1155               		.cfi_offset 8, -3
 1156 0004 9F92      		push r9
 1157               	.LCFI35:
 1158               		.cfi_def_cfa_offset 5
 1159               		.cfi_offset 9, -4
 1160 0006 AF92      		push r10
 1161               	.LCFI36:
 1162               		.cfi_def_cfa_offset 6
 1163               		.cfi_offset 10, -5
 1164 0008 BF92      		push r11
 1165               	.LCFI37:
 1166               		.cfi_def_cfa_offset 7
 1167               		.cfi_offset 11, -6
 1168 000a CF92      		push r12
 1169               	.LCFI38:
 1170               		.cfi_def_cfa_offset 8
 1171               		.cfi_offset 12, -7
 1172 000c DF92      		push r13
 1173               	.LCFI39:
 1174               		.cfi_def_cfa_offset 9
 1175               		.cfi_offset 13, -8
 1176 000e EF92      		push r14
 1177               	.LCFI40:
 1178               		.cfi_def_cfa_offset 10
 1179               		.cfi_offset 14, -9
 1180 0010 FF92      		push r15
 1181               	.LCFI41:
 1182               		.cfi_def_cfa_offset 11
 1183               		.cfi_offset 15, -10
 1184 0012 0F93      		push r16
 1185               	.LCFI42:
 1186               		.cfi_def_cfa_offset 12
 1187               		.cfi_offset 16, -11
 1188 0014 1F93      		push r17
 1189               	.LCFI43:
 1190               		.cfi_def_cfa_offset 13
 1191               		.cfi_offset 17, -12
 1192 0016 CF93      		push r28
 1193               	.LCFI44:
 1194               		.cfi_def_cfa_offset 14
 1195               		.cfi_offset 28, -13
 1196 0018 DF93      		push r29
 1197               	.LCFI45:
 1198               		.cfi_def_cfa_offset 15
 1199               		.cfi_offset 29, -14
 1200               	/* prologue: function */
 1201               	/* frame size = 0 */
 1202               	/* stack size = 13 */
 1203               	.L__stack_usage = 13
 1204 001a EC01      		movw r28,r24
 1205 001c 762E      		mov r7,r22
 1206 001e 5A01      		movw r10,r20
 1207 0020 4901      		movw r8,r18
 1208               	.LVL74:
 1209               	.LBB268:
 1210               	.LBB269:
 866:../../../os/hal/osal/rt-nil/osal.h **** }
 1211               		.loc 2 866 0
 1212 0022 0E94 0000 		call chThdQueueObjectInit
 1213               	.LVL75:
 1214               	.LBE269:
 1215               	.LBE268:
 430:../../../os/hal/src/hal_buffers.c **** 
 431:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((obqp != NULL) && (bp != NULL) && (size >= 2U));
 432:../../../os/hal/src/hal_buffers.c **** 
 433:../../../os/hal/src/hal_buffers.c ****   osalThreadQueueObjectInit(&obqp->waiting);
 434:../../../os/hal/src/hal_buffers.c ****   obqp->suspended = suspended;
 1216               		.loc 1 434 0
 1217 0026 7C82      		std Y+4,r7
 435:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = n;
 1218               		.loc 1 435 0
 1219 0028 1E83      		std Y+6,r17
 1220 002a 0D83      		std Y+5,r16
 436:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = bp;
 1221               		.loc 1 436 0
 1222 002c BA86      		std Y+10,r11
 1223 002e A986      		std Y+9,r10
 437:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = bp;
 1224               		.loc 1 437 0
 1225 0030 B886      		std Y+8,r11
 1226 0032 AF82      		std Y+7,r10
 438:../../../os/hal/src/hal_buffers.c ****   obqp->btop      = bp + ((size + sizeof (size_t)) * n);
 1227               		.loc 1 438 0
 1228 0034 82E0      		ldi r24,2
 1229 0036 880E      		add r8,r24
 1230 0038 911C      		adc r9,__zero_reg__
 1231               	.LVL76:
 1232 003a 089D      		mul r16,r8
 1233 003c C001      		movw r24,r0
 1234 003e 099D      		mul r16,r9
 1235 0040 900D      		add r25,r0
 1236 0042 189D      		mul r17,r8
 1237 0044 900D      		add r25,r0
 1238 0046 1124      		clr r1
 1239 0048 8A0D      		add r24,r10
 1240 004a 9B1D      		adc r25,r11
 1241 004c 9C87      		std Y+12,r25
 1242 004e 8B87      		std Y+11,r24
 439:../../../os/hal/src/hal_buffers.c ****   obqp->bsize     = size + sizeof (size_t);
 1243               		.loc 1 439 0
 1244 0050 9E86      		std Y+14,r9
 1245 0052 8D86      		std Y+13,r8
 440:../../../os/hal/src/hal_buffers.c ****   obqp->bn        = n;
 1246               		.loc 1 440 0
 1247 0054 188B      		std Y+16,r17
 1248 0056 0F87      		std Y+15,r16
 441:../../../os/hal/src/hal_buffers.c ****   obqp->buffers   = bp;
 1249               		.loc 1 441 0
 1250 0058 BA8A      		std Y+18,r11
 1251 005a A98A      		std Y+17,r10
 442:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1252               		.loc 1 442 0
 1253 005c 1C8A      		std Y+20,__zero_reg__
 1254 005e 1B8A      		std Y+19,__zero_reg__
 443:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1255               		.loc 1 443 0
 1256 0060 1E8A      		std Y+22,__zero_reg__
 1257 0062 1D8A      		std Y+21,__zero_reg__
 444:../../../os/hal/src/hal_buffers.c ****   obqp->notify    = onfy;
 1258               		.loc 1 444 0
 1259 0064 F88E      		std Y+24,r15
 1260 0066 EF8A      		std Y+23,r14
 445:../../../os/hal/src/hal_buffers.c ****   obqp->link      = link;
 1261               		.loc 1 445 0
 1262 0068 DA8E      		std Y+26,r13
 1263 006a C98E      		std Y+25,r12
 1264               	/* epilogue start */
 446:../../../os/hal/src/hal_buffers.c **** }
 1265               		.loc 1 446 0
 1266 006c DF91      		pop r29
 1267 006e CF91      		pop r28
 1268               	.LVL77:
 1269 0070 1F91      		pop r17
 1270 0072 0F91      		pop r16
 1271               	.LVL78:
 1272 0074 FF90      		pop r15
 1273 0076 EF90      		pop r14
 1274               	.LVL79:
 1275 0078 DF90      		pop r13
 1276 007a CF90      		pop r12
 1277               	.LVL80:
 1278 007c BF90      		pop r11
 1279 007e AF90      		pop r10
 1280               	.LVL81:
 1281 0080 9F90      		pop r9
 1282 0082 8F90      		pop r8
 1283               	.LVL82:
 1284 0084 7F90      		pop r7
 1285               	.LVL83:
 1286 0086 0895      		ret
 1287               		.cfi_endproc
 1288               	.LFE251:
 1290               		.section	.text.obqResetI,"ax",@progbits
 1291               	.global	obqResetI
 1293               	obqResetI:
 1294               	.LFB252:
 447:../../../os/hal/src/hal_buffers.c **** 
 448:../../../os/hal/src/hal_buffers.c **** /**
 449:../../../os/hal/src/hal_buffers.c ****  * @brief   Resets an output buffers queue.
 450:../../../os/hal/src/hal_buffers.c ****  * @details All the data in the output buffers queue is erased and lost, any
 451:../../../os/hal/src/hal_buffers.c ****  *          waiting thread is resumed with status @p MSG_RESET.
 452:../../../os/hal/src/hal_buffers.c ****  * @note    A reset operation can be used by a low level driver in order to
 453:../../../os/hal/src/hal_buffers.c ****  *          obtain immediate attention from the high level layers.
 454:../../../os/hal/src/hal_buffers.c ****  *
 455:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 456:../../../os/hal/src/hal_buffers.c ****  *
 457:../../../os/hal/src/hal_buffers.c ****  * @iclass
 458:../../../os/hal/src/hal_buffers.c ****  */
 459:../../../os/hal/src/hal_buffers.c **** void obqResetI(output_buffers_queue_t *obqp) {
 1295               		.loc 1 459 0
 1296               		.cfi_startproc
 1297               	.LVL84:
 1298               	/* prologue: function */
 1299               	/* frame size = 0 */
 1300               	/* stack size = 0 */
 1301               	.L__stack_usage = 0
 1302 0000 FC01      		movw r30,r24
 460:../../../os/hal/src/hal_buffers.c **** 
 461:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 462:../../../os/hal/src/hal_buffers.c **** 
 463:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter  = bqSizeX(obqp);
 1303               		.loc 1 463 0
 1304 0002 8785      		ldd r24,Z+15
 1305 0004 9089      		ldd r25,Z+16
 1306               	.LVL85:
 1307 0006 9683      		std Z+6,r25
 1308 0008 8583      		std Z+5,r24
 464:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr    = obqp->buffers;
 1309               		.loc 1 464 0
 1310 000a 8189      		ldd r24,Z+17
 1311 000c 9289      		ldd r25,Z+18
 1312 000e 9287      		std Z+10,r25
 1313 0010 8187      		std Z+9,r24
 465:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr    = obqp->buffers;
 1314               		.loc 1 465 0
 1315 0012 9087      		std Z+8,r25
 1316 0014 8783      		std Z+7,r24
 466:../../../os/hal/src/hal_buffers.c ****   obqp->ptr       = NULL;
 1317               		.loc 1 466 0
 1318 0016 148A      		std Z+20,__zero_reg__
 1319 0018 138A      		std Z+19,__zero_reg__
 467:../../../os/hal/src/hal_buffers.c ****   obqp->top       = NULL;
 1320               		.loc 1 467 0
 1321 001a 168A      		std Z+22,__zero_reg__
 1322 001c 158A      		std Z+21,__zero_reg__
 1323               	.LVL86:
 1324               	.LBB270:
 1325               	.LBB271:
 1326               		.loc 2 921 0
 1327 001e 6EEF      		ldi r22,lo8(-2)
 1328 0020 7FEF      		ldi r23,lo8(-1)
 1329 0022 CF01      		movw r24,r30
 1330 0024 0C94 0000 		jmp chThdDequeueAllI
 1331               	.LVL87:
 1332               	.LBE271:
 1333               	.LBE270:
 1334               		.cfi_endproc
 1335               	.LFE252:
 1337               		.section	.text.obqGetFullBufferI,"ax",@progbits
 1338               	.global	obqGetFullBufferI
 1340               	obqGetFullBufferI:
 1341               	.LFB253:
 468:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueAllI(&obqp->waiting, MSG_RESET);
 469:../../../os/hal/src/hal_buffers.c **** }
 470:../../../os/hal/src/hal_buffers.c **** 
 471:../../../os/hal/src/hal_buffers.c **** /**
 472:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next filled buffer from the queue.
 473:../../../os/hal/src/hal_buffers.c ****  * @note    The function always returns the same buffer if called repeatedly.
 474:../../../os/hal/src/hal_buffers.c ****  *
 475:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 476:../../../os/hal/src/hal_buffers.c ****  * @param[out] sizep    pointer to the filled buffer size
 477:../../../os/hal/src/hal_buffers.c ****  * @return              A pointer to the filled buffer.
 478:../../../os/hal/src/hal_buffers.c ****  * @retval NULL         if the queue is empty.
 479:../../../os/hal/src/hal_buffers.c ****  *
 480:../../../os/hal/src/hal_buffers.c ****  * @iclass
 481:../../../os/hal/src/hal_buffers.c ****  */
 482:../../../os/hal/src/hal_buffers.c **** uint8_t *obqGetFullBufferI(output_buffers_queue_t *obqp,
 483:../../../os/hal/src/hal_buffers.c ****                            size_t *sizep) {
 1342               		.loc 1 483 0
 1343               		.cfi_startproc
 1344               	.LVL88:
 1345               	/* prologue: function */
 1346               	/* frame size = 0 */
 1347               	/* stack size = 0 */
 1348               	.L__stack_usage = 0
 1349 0000 FC01      		movw r30,r24
 484:../../../os/hal/src/hal_buffers.c **** 
 485:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 486:../../../os/hal/src/hal_buffers.c **** 
 487:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp)) {
 1350               		.loc 1 487 0
 1351 0002 2185      		ldd r18,Z+9
 1352 0004 3285      		ldd r19,Z+10
 1353 0006 8781      		ldd r24,Z+7
 1354 0008 9085      		ldd r25,Z+8
 1355               	.LVL89:
 1356 000a 8217      		cp r24,r18
 1357 000c 9307      		cpc r25,r19
 1358 000e 01F0      		breq .L65
 1359               	.L61:
 488:../../../os/hal/src/hal_buffers.c ****     *sizep = 0U;
 489:../../../os/hal/src/hal_buffers.c ****     return NULL;
 490:../../../os/hal/src/hal_buffers.c ****   }
 491:../../../os/hal/src/hal_buffers.c **** 
 492:../../../os/hal/src/hal_buffers.c ****   /* Buffer size.*/
 493:../../../os/hal/src/hal_buffers.c ****   *sizep = *((size_t *)(void *)obqp->brdptr);
 1360               		.loc 1 493 0
 1361 0010 F901      		movw r30,r18
 1362               	.LVL90:
 1363 0012 2191      		ld r18,Z+
 1364 0014 3191      		ld r19,Z+
 1365 0016 CF01      		movw r24,r30
 1366 0018 FB01      		movw r30,r22
 1367 001a 3183      		std Z+1,r19
 1368 001c 2083      		st Z,r18
 494:../../../os/hal/src/hal_buffers.c **** 
 495:../../../os/hal/src/hal_buffers.c ****   return obqp->brdptr + sizeof (size_t);
 1369               		.loc 1 495 0
 1370 001e 0895      		ret
 1371               	.LVL91:
 1372               	.L65:
 487:../../../os/hal/src/hal_buffers.c ****     *sizep = 0U;
 1373               		.loc 1 487 0 discriminator 1
 1374 0020 8581      		ldd r24,Z+5
 1375 0022 9681      		ldd r25,Z+6
 1376 0024 892B      		or r24,r25
 1377 0026 01F0      		breq .L61
 488:../../../os/hal/src/hal_buffers.c ****     *sizep = 0U;
 1378               		.loc 1 488 0
 1379 0028 FB01      		movw r30,r22
 1380               	.LVL92:
 1381 002a 1182      		std Z+1,__zero_reg__
 1382 002c 1082      		st Z,__zero_reg__
 489:../../../os/hal/src/hal_buffers.c ****   }
 1383               		.loc 1 489 0
 1384 002e 80E0      		ldi r24,0
 1385 0030 90E0      		ldi r25,0
 496:../../../os/hal/src/hal_buffers.c **** }
 1386               		.loc 1 496 0
 1387 0032 0895      		ret
 1388               		.cfi_endproc
 1389               	.LFE253:
 1391               		.section	.text.obqReleaseEmptyBufferI,"ax",@progbits
 1392               	.global	obqReleaseEmptyBufferI
 1394               	obqReleaseEmptyBufferI:
 1395               	.LFB254:
 497:../../../os/hal/src/hal_buffers.c **** 
 498:../../../os/hal/src/hal_buffers.c **** /**
 499:../../../os/hal/src/hal_buffers.c ****  * @brief   Releases the next filled buffer back in the queue.
 500:../../../os/hal/src/hal_buffers.c ****  *
 501:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 502:../../../os/hal/src/hal_buffers.c ****  *
 503:../../../os/hal/src/hal_buffers.c ****  * @iclass
 504:../../../os/hal/src/hal_buffers.c ****  */
 505:../../../os/hal/src/hal_buffers.c **** void obqReleaseEmptyBufferI(output_buffers_queue_t *obqp) {
 1396               		.loc 1 505 0
 1397               		.cfi_startproc
 1398               	.LVL93:
 1399               	/* prologue: function */
 1400               	/* frame size = 0 */
 1401               	/* stack size = 0 */
 1402               	.L__stack_usage = 0
 1403 0000 FC01      		movw r30,r24
 506:../../../os/hal/src/hal_buffers.c **** 
 507:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 508:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsEmptyI(obqp), "buffers queue empty");
 509:../../../os/hal/src/hal_buffers.c **** 
 510:../../../os/hal/src/hal_buffers.c ****   /* Freeing a buffer slot in the queue.*/
 511:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter++;
 1404               		.loc 1 511 0
 1405 0002 8581      		ldd r24,Z+5
 1406 0004 9681      		ldd r25,Z+6
 1407               	.LVL94:
 1408 0006 0196      		adiw r24,1
 1409 0008 9683      		std Z+6,r25
 1410 000a 8583      		std Z+5,r24
 512:../../../os/hal/src/hal_buffers.c ****   obqp->brdptr += obqp->bsize;
 1411               		.loc 1 512 0
 1412 000c 2185      		ldd r18,Z+9
 1413 000e 3285      		ldd r19,Z+10
 1414 0010 8585      		ldd r24,Z+13
 1415 0012 9685      		ldd r25,Z+14
 1416 0014 820F      		add r24,r18
 1417 0016 931F      		adc r25,r19
 1418 0018 9287      		std Z+10,r25
 1419 001a 8187      		std Z+9,r24
 513:../../../os/hal/src/hal_buffers.c ****   if (obqp->brdptr >= obqp->btop) {
 1420               		.loc 1 513 0
 1421 001c 2385      		ldd r18,Z+11
 1422 001e 3485      		ldd r19,Z+12
 1423 0020 8217      		cp r24,r18
 1424 0022 9307      		cpc r25,r19
 1425 0024 00F0      		brlo .L67
 514:../../../os/hal/src/hal_buffers.c ****     obqp->brdptr = obqp->buffers;
 1426               		.loc 1 514 0
 1427 0026 8189      		ldd r24,Z+17
 1428 0028 9289      		ldd r25,Z+18
 1429 002a 9287      		std Z+10,r25
 1430 002c 8187      		std Z+9,r24
 1431               	.L67:
 1432               	.LVL95:
 1433               	.LBB272:
 1434               	.LBB273:
 908:../../../os/hal/osal/rt-nil/osal.h **** }
 1435               		.loc 2 908 0
 1436 002e 60E0      		ldi r22,0
 1437 0030 70E0      		ldi r23,0
 1438 0032 CF01      		movw r24,r30
 1439 0034 0C94 0000 		jmp chThdDequeueNextI
 1440               	.LVL96:
 1441               	.LBE273:
 1442               	.LBE272:
 1443               		.cfi_endproc
 1444               	.LFE254:
 1446               		.section	.text.obqGetEmptyBufferTimeoutS,"ax",@progbits
 1447               	.global	obqGetEmptyBufferTimeoutS
 1449               	obqGetEmptyBufferTimeoutS:
 1450               	.LFB256:
 515:../../../os/hal/src/hal_buffers.c ****   }
 516:../../../os/hal/src/hal_buffers.c **** 
 517:../../../os/hal/src/hal_buffers.c ****   /* Waking up one waiting thread, if any.*/
 518:../../../os/hal/src/hal_buffers.c ****   osalThreadDequeueNextI(&obqp->waiting, MSG_OK);
 519:../../../os/hal/src/hal_buffers.c **** }
 520:../../../os/hal/src/hal_buffers.c **** 
 521:../../../os/hal/src/hal_buffers.c **** /**
 522:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 523:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 524:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 525:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 526:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 527:../../../os/hal/src/hal_buffers.c ****  *
 528:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 529:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 530:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 531:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 532:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 533:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 534:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 535:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 536:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 537:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 538:../../../os/hal/src/hal_buffers.c ****  *
 539:../../../os/hal/src/hal_buffers.c ****  * @api
 540:../../../os/hal/src/hal_buffers.c ****  */
 541:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeout(output_buffers_queue_t *obqp,
 542:../../../os/hal/src/hal_buffers.c ****                                sysinterval_t timeout) {
 543:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 544:../../../os/hal/src/hal_buffers.c **** 
 545:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 546:../../../os/hal/src/hal_buffers.c ****   msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 547:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 548:../../../os/hal/src/hal_buffers.c **** 
 549:../../../os/hal/src/hal_buffers.c ****   return msg;
 550:../../../os/hal/src/hal_buffers.c **** }
 551:../../../os/hal/src/hal_buffers.c **** 
 552:../../../os/hal/src/hal_buffers.c **** /**
 553:../../../os/hal/src/hal_buffers.c ****  * @brief   Gets the next empty buffer from the queue.
 554:../../../os/hal/src/hal_buffers.c ****  * @note    The function always acquires the same buffer if called repeatedly.
 555:../../../os/hal/src/hal_buffers.c ****  * @post    After calling the function the fields @p ptr and @p top are set
 556:../../../os/hal/src/hal_buffers.c ****  *          at beginning and end of the buffer data or @p NULL if the queue
 557:../../../os/hal/src/hal_buffers.c ****  *          is empty.
 558:../../../os/hal/src/hal_buffers.c ****  *
 559:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 560:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 561:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 562:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 563:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 564:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 565:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_OK       if a buffer has been acquired.
 566:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 567:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 568:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 569:../../../os/hal/src/hal_buffers.c ****  *
 570:../../../os/hal/src/hal_buffers.c ****  * @sclass
 571:../../../os/hal/src/hal_buffers.c ****  */
 572:../../../os/hal/src/hal_buffers.c **** msg_t obqGetEmptyBufferTimeoutS(output_buffers_queue_t *obqp,
 573:../../../os/hal/src/hal_buffers.c ****                                 sysinterval_t timeout) {
 1451               		.loc 1 573 0
 1452               		.cfi_startproc
 1453               	.LVL97:
 1454 0000 0F93      		push r16
 1455               	.LCFI46:
 1456               		.cfi_def_cfa_offset 3
 1457               		.cfi_offset 16, -2
 1458 0002 1F93      		push r17
 1459               	.LCFI47:
 1460               		.cfi_def_cfa_offset 4
 1461               		.cfi_offset 17, -3
 1462 0004 CF93      		push r28
 1463               	.LCFI48:
 1464               		.cfi_def_cfa_offset 5
 1465               		.cfi_offset 28, -4
 1466 0006 DF93      		push r29
 1467               	.LCFI49:
 1468               		.cfi_def_cfa_offset 6
 1469               		.cfi_offset 29, -5
 1470               	/* prologue: function */
 1471               	/* frame size = 0 */
 1472               	/* stack size = 4 */
 1473               	.L__stack_usage = 4
 1474 0008 EC01      		movw r28,r24
 1475 000a 8B01      		movw r16,r22
 574:../../../os/hal/src/hal_buffers.c **** 
 575:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 576:../../../os/hal/src/hal_buffers.c **** 
 577:../../../os/hal/src/hal_buffers.c ****   while (obqIsFullI(obqp)) {
 1476               		.loc 1 577 0
 1477 000c 00C0      		rjmp .L69
 1478               	.LVL98:
 1479               	.L71:
 1480               	.LBB282:
 578:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1481               		.loc 1 578 0
 1482 000e 8C81      		ldd r24,Y+4
 1483 0010 8111      		cpse r24,__zero_reg__
 1484 0012 00C0      		rjmp .L72
 1485               	.LVL99:
 1486               	.LBB283:
 1487               	.LBB284:
 895:../../../os/hal/osal/rt-nil/osal.h **** }
 1488               		.loc 2 895 0
 1489 0014 B801      		movw r22,r16
 1490 0016 CE01      		movw r24,r28
 1491 0018 0E94 0000 		call chThdEnqueueTimeoutS
 1492               	.LVL100:
 1493               	.LBE284:
 1494               	.LBE283:
 579:../../../os/hal/src/hal_buffers.c ****       return MSG_RESET;
 580:../../../os/hal/src/hal_buffers.c ****     }
 581:../../../os/hal/src/hal_buffers.c ****     msg_t msg = osalThreadEnqueueTimeoutS(&obqp->waiting, timeout);
 582:../../../os/hal/src/hal_buffers.c ****     if (msg < MSG_OK) {
 1495               		.loc 1 582 0
 1496 001c 97FD      		sbrc r25,7
 1497 001e 00C0      		rjmp .L70
 1498               	.L69:
 1499               	.LBE282:
 577:../../../os/hal/src/hal_buffers.c ****     if (obqp->suspended) {
 1500               		.loc 1 577 0
 1501 0020 8D81      		ldd r24,Y+5
 1502 0022 9E81      		ldd r25,Y+6
 1503 0024 892B      		or r24,r25
 1504 0026 01F0      		breq .L71
 1505               	.LVL101:
 1506               	.LBB285:
 1507               	.LBB286:
 583:../../../os/hal/src/hal_buffers.c ****       return msg;
 584:../../../os/hal/src/hal_buffers.c ****     }
 585:../../../os/hal/src/hal_buffers.c ****   }
 586:../../../os/hal/src/hal_buffers.c **** 
 587:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "still full");
 588:../../../os/hal/src/hal_buffers.c **** 
 589:../../../os/hal/src/hal_buffers.c ****   /* Setting up the "current" buffer and its boundary.*/
 590:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = obqp->bwrptr + sizeof (size_t);
 1508               		.loc 1 590 0
 1509 0028 2F81      		ldd r18,Y+7
 1510 002a 3885      		ldd r19,Y+8
 1511 002c C901      		movw r24,r18
 1512 002e 0296      		adiw r24,2
 1513 0030 9C8B      		std Y+20,r25
 1514 0032 8B8B      		std Y+19,r24
 591:../../../os/hal/src/hal_buffers.c ****   obqp->top = obqp->bwrptr + obqp->bsize;
 1515               		.loc 1 591 0
 1516 0034 8D85      		ldd r24,Y+13
 1517 0036 9E85      		ldd r25,Y+14
 1518 0038 820F      		add r24,r18
 1519 003a 931F      		adc r25,r19
 1520 003c 9E8B      		std Y+22,r25
 1521 003e 8D8B      		std Y+21,r24
 1522               	.LVL102:
 1523 0040 80E0      		ldi r24,0
 1524 0042 90E0      		ldi r25,0
 1525               	.L70:
 1526               	/* epilogue start */
 1527               	.LBE286:
 1528               	.LBE285:
 592:../../../os/hal/src/hal_buffers.c **** 
 593:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 594:../../../os/hal/src/hal_buffers.c **** }
 1529               		.loc 1 594 0
 1530 0044 DF91      		pop r29
 1531 0046 CF91      		pop r28
 1532               	.LVL103:
 1533 0048 1F91      		pop r17
 1534 004a 0F91      		pop r16
 1535               	.LVL104:
 1536 004c 0895      		ret
 1537               	.LVL105:
 1538               	.L72:
 1539               	.LBB287:
 579:../../../os/hal/src/hal_buffers.c ****     }
 1540               		.loc 1 579 0
 1541 004e 8EEF      		ldi r24,lo8(-2)
 1542 0050 9FEF      		ldi r25,lo8(-1)
 1543               	/* epilogue start */
 1544               	.LBE287:
 1545               		.loc 1 594 0
 1546 0052 DF91      		pop r29
 1547 0054 CF91      		pop r28
 1548               	.LVL106:
 1549 0056 1F91      		pop r17
 1550 0058 0F91      		pop r16
 1551               	.LVL107:
 1552 005a 0895      		ret
 1553               		.cfi_endproc
 1554               	.LFE256:
 1556               		.section	.text.obqGetEmptyBufferTimeout,"ax",@progbits
 1557               	.global	obqGetEmptyBufferTimeout
 1559               	obqGetEmptyBufferTimeout:
 1560               	.LFB255:
 542:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 1561               		.loc 1 542 0
 1562               		.cfi_startproc
 1563               	.LVL108:
 1564               	/* prologue: function */
 1565               	/* frame size = 0 */
 1566               	/* stack size = 0 */
 1567               	.L__stack_usage = 0
 1568               	.LBB288:
 1569               	.LBB289:
 1570               	.LBB290:
 1571               	.LBB291:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1572               		.loc 3 430 0
 1573               	/* #APP */
 1574               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1575 0000 F894      		cli
 1576               	 ;  0 "" 2
 1577               	/* #NOAPP */
 1578               	.LBE291:
 1579               	.LBE290:
 1580               	.LBE289:
 1581               	.LBE288:
 546:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 1582               		.loc 1 546 0
 1583 0002 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1584               	.LVL109:
 1585               	.LBB292:
 1586               	.LBB293:
 1587               	.LBB294:
 1588               	.LBB295:
 1589               	.LBB296:
 1590               		.loc 3 440 0
 1591               	/* #APP */
 1592               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1593 0006 7894      		sei
 1594               	 ;  0 "" 2
 1595               	/* #NOAPP */
 1596               	.LBE296:
 1597               	.LBE295:
 1598               	.LBE294:
 1599               	.LBE293:
 1600               	.LBE292:
 550:../../../os/hal/src/hal_buffers.c **** 
 1601               		.loc 1 550 0
 1602 0008 0895      		ret
 1603               		.cfi_endproc
 1604               	.LFE255:
 1606               		.section	.text.obqPostFullBuffer,"ax",@progbits
 1607               	.global	obqPostFullBuffer
 1609               	obqPostFullBuffer:
 1610               	.LFB257:
 595:../../../os/hal/src/hal_buffers.c **** 
 596:../../../os/hal/src/hal_buffers.c **** /**
 597:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 598:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 599:../../../os/hal/src/hal_buffers.c ****  *
 600:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 601:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 602:../../../os/hal/src/hal_buffers.c ****  *
 603:../../../os/hal/src/hal_buffers.c ****  * @api
 604:../../../os/hal/src/hal_buffers.c ****  */
 605:../../../os/hal/src/hal_buffers.c **** void obqPostFullBuffer(output_buffers_queue_t *obqp, size_t size) {
 1611               		.loc 1 605 0
 1612               		.cfi_startproc
 1613               	.LVL110:
 1614               	/* prologue: function */
 1615               	/* frame size = 0 */
 1616               	/* stack size = 0 */
 1617               	.L__stack_usage = 0
 1618 0000 DC01      		movw r26,r24
 1619               	.LBB297:
 1620               	.LBB298:
 1621               	.LBB299:
 1622               	.LBB300:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1623               		.loc 3 430 0
 1624               	/* #APP */
 1625               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1626 0002 F894      		cli
 1627               	 ;  0 "" 2
 1628               	.LVL111:
 1629               	/* #NOAPP */
 1630               	.LBE300:
 1631               	.LBE299:
 1632               	.LBE298:
 1633               	.LBE297:
 1634               	.LBB301:
 1635               	.LBB302:
 606:../../../os/hal/src/hal_buffers.c **** 
 607:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 608:../../../os/hal/src/hal_buffers.c ****   obqPostFullBufferS(obqp, size);
 609:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 610:../../../os/hal/src/hal_buffers.c **** }
 611:../../../os/hal/src/hal_buffers.c **** 
 612:../../../os/hal/src/hal_buffers.c **** /**
 613:../../../os/hal/src/hal_buffers.c ****  * @brief   Posts a new filled buffer to the queue.
 614:../../../os/hal/src/hal_buffers.c ****  * @note    The object callback is called after releasing the buffer.
 615:../../../os/hal/src/hal_buffers.c ****  *
 616:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 617:../../../os/hal/src/hal_buffers.c ****  * @param[in] size      used size of the buffer, cannot be zero
 618:../../../os/hal/src/hal_buffers.c ****  *
 619:../../../os/hal/src/hal_buffers.c ****  * @sclass
 620:../../../os/hal/src/hal_buffers.c ****  */
 621:../../../os/hal/src/hal_buffers.c **** void obqPostFullBufferS(output_buffers_queue_t *obqp, size_t size) {
 622:../../../os/hal/src/hal_buffers.c **** 
 623:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassS();
 624:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck((size > 0U) && (size <= (obqp->bsize - sizeof (size_t))));
 625:../../../os/hal/src/hal_buffers.c ****   osalDbgAssert(!obqIsFullI(obqp), "buffers queue full");
 626:../../../os/hal/src/hal_buffers.c **** 
 627:../../../os/hal/src/hal_buffers.c ****   /* Writing size field in the buffer.*/
 628:../../../os/hal/src/hal_buffers.c ****   *((size_t *)(void *)obqp->bwrptr) = size;
 1636               		.loc 1 628 0
 1637 0004 1796      		adiw r26,7
 1638 0006 ED91      		ld r30,X+
 1639 0008 FC91      		ld r31,X
 1640 000a 1897      		sbiw r26,7+1
 1641 000c 7183      		std Z+1,r23
 1642 000e 6083      		st Z,r22
 629:../../../os/hal/src/hal_buffers.c **** 
 630:../../../os/hal/src/hal_buffers.c ****   /* Posting the buffer in the queue.*/
 631:../../../os/hal/src/hal_buffers.c ****   obqp->bcounter--;
 1643               		.loc 1 631 0
 1644 0010 1596      		adiw r26,5
 1645 0012 2D91      		ld r18,X+
 1646 0014 3C91      		ld r19,X
 1647 0016 1697      		sbiw r26,5+1
 1648 0018 2150      		subi r18,1
 1649 001a 3109      		sbc r19,__zero_reg__
 1650 001c 1696      		adiw r26,5+1
 1651 001e 3C93      		st X,r19
 1652 0020 2E93      		st -X,r18
 1653 0022 1597      		sbiw r26,5
 632:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1654               		.loc 1 632 0
 1655 0024 1D96      		adiw r26,13
 1656 0026 8D91      		ld r24,X+
 1657 0028 9C91      		ld r25,X
 1658 002a 1E97      		sbiw r26,13+1
 1659               	.LVL112:
 1660 002c 8E0F      		add r24,r30
 1661 002e 9F1F      		adc r25,r31
 1662 0030 1896      		adiw r26,7+1
 1663 0032 9C93      		st X,r25
 1664 0034 8E93      		st -X,r24
 1665 0036 1797      		sbiw r26,7
 633:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1666               		.loc 1 633 0
 1667 0038 1B96      		adiw r26,11
 1668 003a 2D91      		ld r18,X+
 1669 003c 3C91      		ld r19,X
 1670 003e 1C97      		sbiw r26,11+1
 1671 0040 8217      		cp r24,r18
 1672 0042 9307      		cpc r25,r19
 1673 0044 00F0      		brlo .L75
 634:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1674               		.loc 1 634 0
 1675 0046 5196      		adiw r26,17
 1676 0048 8D91      		ld r24,X+
 1677 004a 9C91      		ld r25,X
 1678 004c 5297      		sbiw r26,17+1
 1679 004e 1896      		adiw r26,7+1
 1680 0050 9C93      		st X,r25
 1681 0052 8E93      		st -X,r24
 1682 0054 1797      		sbiw r26,7
 1683               	.L75:
 635:../../../os/hal/src/hal_buffers.c ****   }
 636:../../../os/hal/src/hal_buffers.c **** 
 637:../../../os/hal/src/hal_buffers.c ****   /* No "current" buffer.*/
 638:../../../os/hal/src/hal_buffers.c ****   obqp->ptr = NULL;
 1684               		.loc 1 638 0
 1685 0056 5496      		adiw r26,19+1
 1686 0058 1C92      		st X,__zero_reg__
 1687 005a 1E92      		st -X,__zero_reg__
 1688 005c 5397      		sbiw r26,19
 639:../../../os/hal/src/hal_buffers.c **** 
 640:../../../os/hal/src/hal_buffers.c ****   /* Notifying the buffer release.*/
 641:../../../os/hal/src/hal_buffers.c ****   if (obqp->notify != NULL) {
 1689               		.loc 1 641 0
 1690 005e 5796      		adiw r26,23
 1691 0060 ED91      		ld r30,X+
 1692 0062 FC91      		ld r31,X
 1693 0064 5897      		sbiw r26,23+1
 1694 0066 3097      		sbiw r30,0
 1695 0068 01F0      		breq .L76
 1696 006a CD01      		movw r24,r26
 642:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1697               		.loc 1 642 0
 1698 006c 0995      		icall
 1699               	.LVL113:
 1700               	.L76:
 1701               	.LBE302:
 1702               	.LBE301:
 1703               	.LBB303:
 1704               	.LBB304:
 1705               	.LBB305:
 1706               	.LBB306:
 1707               	.LBB307:
 1708               		.loc 3 440 0
 1709               	/* #APP */
 1710               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1711 006e 7894      		sei
 1712               	 ;  0 "" 2
 1713               	/* #NOAPP */
 1714 0070 0895      		ret
 1715               	.LBE307:
 1716               	.LBE306:
 1717               	.LBE305:
 1718               	.LBE304:
 1719               	.LBE303:
 1720               		.cfi_endproc
 1721               	.LFE257:
 1723               		.section	.text.obqPostFullBufferS,"ax",@progbits
 1724               	.global	obqPostFullBufferS
 1726               	obqPostFullBufferS:
 1727               	.LFB258:
 621:../../../os/hal/src/hal_buffers.c **** 
 1728               		.loc 1 621 0
 1729               		.cfi_startproc
 1730               	.LVL114:
 1731               	/* prologue: function */
 1732               	/* frame size = 0 */
 1733               	/* stack size = 0 */
 1734               	.L__stack_usage = 0
 1735 0000 DC01      		movw r26,r24
 628:../../../os/hal/src/hal_buffers.c **** 
 1736               		.loc 1 628 0
 1737 0002 1796      		adiw r26,7
 1738 0004 ED91      		ld r30,X+
 1739 0006 FC91      		ld r31,X
 1740 0008 1897      		sbiw r26,7+1
 1741 000a 7183      		std Z+1,r23
 1742 000c 6083      		st Z,r22
 631:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1743               		.loc 1 631 0
 1744 000e 1596      		adiw r26,5
 1745 0010 2D91      		ld r18,X+
 1746 0012 3C91      		ld r19,X
 1747 0014 1697      		sbiw r26,5+1
 1748 0016 2150      		subi r18,1
 1749 0018 3109      		sbc r19,__zero_reg__
 1750 001a 1696      		adiw r26,5+1
 1751 001c 3C93      		st X,r19
 1752 001e 2E93      		st -X,r18
 1753 0020 1597      		sbiw r26,5
 632:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1754               		.loc 1 632 0
 1755 0022 1D96      		adiw r26,13
 1756 0024 8D91      		ld r24,X+
 1757 0026 9C91      		ld r25,X
 1758 0028 1E97      		sbiw r26,13+1
 1759               	.LVL115:
 1760 002a 8E0F      		add r24,r30
 1761 002c 9F1F      		adc r25,r31
 1762 002e 1896      		adiw r26,7+1
 1763 0030 9C93      		st X,r25
 1764 0032 8E93      		st -X,r24
 1765 0034 1797      		sbiw r26,7
 633:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1766               		.loc 1 633 0
 1767 0036 1B96      		adiw r26,11
 1768 0038 2D91      		ld r18,X+
 1769 003a 3C91      		ld r19,X
 1770 003c 1C97      		sbiw r26,11+1
 1771 003e 8217      		cp r24,r18
 1772 0040 9307      		cpc r25,r19
 1773 0042 00F0      		brlo .L81
 634:../../../os/hal/src/hal_buffers.c ****   }
 1774               		.loc 1 634 0
 1775 0044 5196      		adiw r26,17
 1776 0046 8D91      		ld r24,X+
 1777 0048 9C91      		ld r25,X
 1778 004a 5297      		sbiw r26,17+1
 1779 004c 1896      		adiw r26,7+1
 1780 004e 9C93      		st X,r25
 1781 0050 8E93      		st -X,r24
 1782 0052 1797      		sbiw r26,7
 1783               	.L81:
 638:../../../os/hal/src/hal_buffers.c **** 
 1784               		.loc 1 638 0
 1785 0054 5496      		adiw r26,19+1
 1786 0056 1C92      		st X,__zero_reg__
 1787 0058 1E92      		st -X,__zero_reg__
 1788 005a 5397      		sbiw r26,19
 641:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1789               		.loc 1 641 0
 1790 005c 5796      		adiw r26,23
 1791 005e ED91      		ld r30,X+
 1792 0060 FC91      		ld r31,X
 1793 0062 5897      		sbiw r26,23+1
 1794 0064 3097      		sbiw r30,0
 1795 0066 01F0      		breq .L80
 1796               		.loc 1 642 0
 1797 0068 CD01      		movw r24,r26
 1798 006a 0994      		ijmp
 1799               	.LVL116:
 1800               	.L80:
 1801 006c 0895      		ret
 1802               		.cfi_endproc
 1803               	.LFE258:
 1805               		.section	.text.obqPutTimeout,"ax",@progbits
 1806               	.global	obqPutTimeout
 1808               	obqPutTimeout:
 1809               	.LFB259:
 643:../../../os/hal/src/hal_buffers.c ****   }
 644:../../../os/hal/src/hal_buffers.c **** }
 645:../../../os/hal/src/hal_buffers.c **** 
 646:../../../os/hal/src/hal_buffers.c **** /**
 647:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 648:../../../os/hal/src/hal_buffers.c ****  * @details This function writes a byte value to an output queue. If
 649:../../../os/hal/src/hal_buffers.c ****  *          the queue is full then the calling thread is suspended until a
 650:../../../os/hal/src/hal_buffers.c ****  *          new buffer is freed in the queue or a timeout occurs.
 651:../../../os/hal/src/hal_buffers.c ****  *
 652:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 653:../../../os/hal/src/hal_buffers.c ****  * @param[in] b         byte value to be transferred
 654:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 655:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 656:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 657:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 658:../../../os/hal/src/hal_buffers.c ****  * @return              A byte value from the queue.
 659:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_TIMEOUT  if the specified time expired.
 660:../../../os/hal/src/hal_buffers.c ****  * @retval MSG_RESET    if the queue has been reset or has been put in
 661:../../../os/hal/src/hal_buffers.c ****  *                      suspended state.
 662:../../../os/hal/src/hal_buffers.c ****  *
 663:../../../os/hal/src/hal_buffers.c ****  * @api
 664:../../../os/hal/src/hal_buffers.c ****  */
 665:../../../os/hal/src/hal_buffers.c **** msg_t obqPutTimeout(output_buffers_queue_t *obqp, uint8_t b,
 666:../../../os/hal/src/hal_buffers.c ****                     sysinterval_t timeout) {
 1810               		.loc 1 666 0
 1811               		.cfi_startproc
 1812               	.LVL117:
 1813 0000 1F93      		push r17
 1814               	.LCFI50:
 1815               		.cfi_def_cfa_offset 3
 1816               		.cfi_offset 17, -2
 1817 0002 CF93      		push r28
 1818               	.LCFI51:
 1819               		.cfi_def_cfa_offset 4
 1820               		.cfi_offset 28, -3
 1821 0004 DF93      		push r29
 1822               	.LCFI52:
 1823               		.cfi_def_cfa_offset 5
 1824               		.cfi_offset 29, -4
 1825               	/* prologue: function */
 1826               	/* frame size = 0 */
 1827               	/* stack size = 3 */
 1828               	.L__stack_usage = 3
 1829 0006 EC01      		movw r28,r24
 1830 0008 162F      		mov r17,r22
 1831               	.LBB308:
 1832               	.LBB309:
 1833               	.LBB310:
 1834               	.LBB311:
 430:../../../os/common/ports/AVR/chcore.h **** }
 1835               		.loc 3 430 0
 1836               	/* #APP */
 1837               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 1838 000a F894      		cli
 1839               	 ;  0 "" 2
 1840               	/* #NOAPP */
 1841               	.LBE311:
 1842               	.LBE310:
 1843               	.LBE309:
 1844               	.LBE308:
 667:../../../os/hal/src/hal_buffers.c ****   msg_t msg;
 668:../../../os/hal/src/hal_buffers.c **** 
 669:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 670:../../../os/hal/src/hal_buffers.c **** 
 671:../../../os/hal/src/hal_buffers.c ****   /* This condition indicates that a new buffer must be acquired.*/
 672:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr == NULL) {
 1845               		.loc 1 672 0
 1846 000c EB89      		ldd r30,Y+19
 1847 000e FC89      		ldd r31,Y+20
 1848 0010 3097      		sbiw r30,0
 1849 0012 01F0      		breq .L94
 1850               	.LVL118:
 1851               	.L84:
 673:../../../os/hal/src/hal_buffers.c ****     msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 674:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 675:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 676:../../../os/hal/src/hal_buffers.c ****       return msg;
 677:../../../os/hal/src/hal_buffers.c ****     }
 678:../../../os/hal/src/hal_buffers.c ****   }
 679:../../../os/hal/src/hal_buffers.c **** 
 680:../../../os/hal/src/hal_buffers.c ****   /* Writing the byte to the buffer.*/
 681:../../../os/hal/src/hal_buffers.c ****   *obqp->ptr = b;
 1852               		.loc 1 681 0
 1853 0014 1083      		st Z,r17
 682:../../../os/hal/src/hal_buffers.c ****   obqp->ptr++;
 1854               		.loc 1 682 0
 1855 0016 8B89      		ldd r24,Y+19
 1856 0018 9C89      		ldd r25,Y+20
 1857 001a 0196      		adiw r24,1
 1858 001c 9C8B      		std Y+20,r25
 1859 001e 8B8B      		std Y+19,r24
 683:../../../os/hal/src/hal_buffers.c **** 
 684:../../../os/hal/src/hal_buffers.c ****   /* If the current buffer has been fully written then it is posted as
 685:../../../os/hal/src/hal_buffers.c ****      full in the queue.*/
 686:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr >= obqp->top) {
 1860               		.loc 1 686 0
 1861 0020 2D89      		ldd r18,Y+21
 1862 0022 3E89      		ldd r19,Y+22
 1863 0024 8217      		cp r24,r18
 1864 0026 9307      		cpc r25,r19
 1865 0028 00F0      		brlo .L88
 1866               	.LVL119:
 1867               	.LBB312:
 1868               	.LBB313:
 628:../../../os/hal/src/hal_buffers.c **** 
 1869               		.loc 1 628 0
 1870 002a EF81      		ldd r30,Y+7
 1871 002c F885      		ldd r31,Y+8
 1872 002e 2D85      		ldd r18,Y+13
 1873 0030 3E85      		ldd r19,Y+14
 1874 0032 2250      		subi r18,2
 1875 0034 3109      		sbc r19,__zero_reg__
 1876               	.LVL120:
 1877 0036 3183      		std Z+1,r19
 1878 0038 2083      		st Z,r18
 631:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 1879               		.loc 1 631 0
 1880 003a 2D81      		ldd r18,Y+5
 1881 003c 3E81      		ldd r19,Y+6
 1882               	.LVL121:
 1883 003e 2150      		subi r18,1
 1884 0040 3109      		sbc r19,__zero_reg__
 1885 0042 3E83      		std Y+6,r19
 1886 0044 2D83      		std Y+5,r18
 1887               	.LVL122:
 632:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 1888               		.loc 1 632 0
 1889 0046 8D85      		ldd r24,Y+13
 1890 0048 9E85      		ldd r25,Y+14
 1891 004a 8E0F      		add r24,r30
 1892 004c 9F1F      		adc r25,r31
 1893 004e 9887      		std Y+8,r25
 1894 0050 8F83      		std Y+7,r24
 633:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 1895               		.loc 1 633 0
 1896 0052 2B85      		ldd r18,Y+11
 1897 0054 3C85      		ldd r19,Y+12
 1898 0056 8217      		cp r24,r18
 1899 0058 9307      		cpc r25,r19
 1900 005a 00F0      		brlo .L89
 634:../../../os/hal/src/hal_buffers.c ****   }
 1901               		.loc 1 634 0
 1902 005c 8989      		ldd r24,Y+17
 1903 005e 9A89      		ldd r25,Y+18
 1904 0060 9887      		std Y+8,r25
 1905 0062 8F83      		std Y+7,r24
 1906               	.L89:
 638:../../../os/hal/src/hal_buffers.c **** 
 1907               		.loc 1 638 0
 1908 0064 1C8A      		std Y+20,__zero_reg__
 1909 0066 1B8A      		std Y+19,__zero_reg__
 641:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 1910               		.loc 1 641 0
 1911 0068 EF89      		ldd r30,Y+23
 1912 006a F88D      		ldd r31,Y+24
 1913 006c 3097      		sbiw r30,0
 1914 006e 01F0      		breq .L88
 642:../../../os/hal/src/hal_buffers.c ****   }
 1915               		.loc 1 642 0
 1916 0070 CE01      		movw r24,r28
 1917 0072 0995      		icall
 1918               	.LVL123:
 1919               	.L88:
 1920               	.LBE313:
 1921               	.LBE312:
 1922               	.LBB314:
 1923               	.LBB315:
 1924               	.LBB316:
 1925               	.LBB317:
 1926               	.LBB318:
 1927               		.loc 3 440 0
 1928               	/* #APP */
 1929               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1930 0074 7894      		sei
 1931               	 ;  0 "" 2
 1932               	/* #NOAPP */
 1933               	.LBE318:
 1934               	.LBE317:
 1935               	.LBE316:
 1936               	.LBE315:
 1937               	.LBE314:
 687:../../../os/hal/src/hal_buffers.c ****     obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 688:../../../os/hal/src/hal_buffers.c ****   }
 689:../../../os/hal/src/hal_buffers.c **** 
 690:../../../os/hal/src/hal_buffers.c ****   osalSysUnlock();
 691:../../../os/hal/src/hal_buffers.c ****   return MSG_OK;
 1938               		.loc 1 691 0
 1939 0076 80E0      		ldi r24,0
 1940 0078 90E0      		ldi r25,0
 1941               	.L86:
 1942               	/* epilogue start */
 692:../../../os/hal/src/hal_buffers.c **** }
 1943               		.loc 1 692 0
 1944 007a DF91      		pop r29
 1945 007c CF91      		pop r28
 1946               	.LVL124:
 1947 007e 1F91      		pop r17
 1948               	.LVL125:
 1949 0080 0895      		ret
 1950               	.LVL126:
 1951               	.L94:
 673:../../../os/hal/src/hal_buffers.c ****     if (msg != MSG_OK) {
 1952               		.loc 1 673 0
 1953 0082 BA01      		movw r22,r20
 1954 0084 0E94 0000 		call obqGetEmptyBufferTimeoutS
 1955               	.LVL127:
 674:../../../os/hal/src/hal_buffers.c ****       osalSysUnlock();
 1956               		.loc 1 674 0
 1957 0088 0097      		sbiw r24,0
 1958 008a 01F4      		brne .L85
 1959 008c EB89      		ldd r30,Y+19
 1960 008e FC89      		ldd r31,Y+20
 1961 0090 00C0      		rjmp .L84
 1962               	.L85:
 1963               	.LBB319:
 1964               	.LBB320:
 1965               	.LBB321:
 1966               	.LBB322:
 1967               	.LBB323:
 1968               		.loc 3 440 0
 1969               	/* #APP */
 1970               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 1971 0092 7894      		sei
 1972               	 ;  0 "" 2
 1973               	/* #NOAPP */
 1974               	.LBE323:
 1975               	.LBE322:
 1976               	.LBE321:
 1977               	.LBE320:
 1978               	.LBE319:
 676:../../../os/hal/src/hal_buffers.c ****     }
 1979               		.loc 1 676 0
 1980 0094 00C0      		rjmp .L86
 1981               		.cfi_endproc
 1982               	.LFE259:
 1984               		.section	.text.obqWriteTimeout,"ax",@progbits
 1985               	.global	obqWriteTimeout
 1987               	obqWriteTimeout:
 1988               	.LFB260:
 693:../../../os/hal/src/hal_buffers.c **** 
 694:../../../os/hal/src/hal_buffers.c **** /**
 695:../../../os/hal/src/hal_buffers.c ****  * @brief   Output queue write with timeout.
 696:../../../os/hal/src/hal_buffers.c ****  * @details The function writes data from a buffer to an output queue. The
 697:../../../os/hal/src/hal_buffers.c ****  *          operation completes when the specified amount of data has been
 698:../../../os/hal/src/hal_buffers.c ****  *          transferred or after the specified timeout or if the queue has
 699:../../../os/hal/src/hal_buffers.c ****  *          been reset.
 700:../../../os/hal/src/hal_buffers.c ****  *
 701:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 702:../../../os/hal/src/hal_buffers.c ****  * @param[in] bp        pointer to the data buffer
 703:../../../os/hal/src/hal_buffers.c ****  * @param[in] n         the maximum amount of data to be transferred, the
 704:../../../os/hal/src/hal_buffers.c ****  *                      value 0 is reserved
 705:../../../os/hal/src/hal_buffers.c ****  * @param[in] timeout   the number of ticks before the operation timeouts,
 706:../../../os/hal/src/hal_buffers.c ****  *                      the following special values are allowed:
 707:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_IMMEDIATE immediate timeout.
 708:../../../os/hal/src/hal_buffers.c ****  *                      - @a TIME_INFINITE no timeout.
 709:../../../os/hal/src/hal_buffers.c ****  * @return              The number of bytes effectively transferred.
 710:../../../os/hal/src/hal_buffers.c ****  * @retval 0            if a timeout occurred.
 711:../../../os/hal/src/hal_buffers.c ****  *
 712:../../../os/hal/src/hal_buffers.c ****  * @api
 713:../../../os/hal/src/hal_buffers.c ****  */
 714:../../../os/hal/src/hal_buffers.c **** size_t obqWriteTimeout(output_buffers_queue_t *obqp, const uint8_t *bp,
 715:../../../os/hal/src/hal_buffers.c ****                        size_t n, sysinterval_t timeout) {
 1989               		.loc 1 715 0
 1990               		.cfi_startproc
 1991               	.LVL128:
 1992 0000 8F92      		push r8
 1993               	.LCFI53:
 1994               		.cfi_def_cfa_offset 3
 1995               		.cfi_offset 8, -2
 1996 0002 9F92      		push r9
 1997               	.LCFI54:
 1998               		.cfi_def_cfa_offset 4
 1999               		.cfi_offset 9, -3
 2000 0004 AF92      		push r10
 2001               	.LCFI55:
 2002               		.cfi_def_cfa_offset 5
 2003               		.cfi_offset 10, -4
 2004 0006 BF92      		push r11
 2005               	.LCFI56:
 2006               		.cfi_def_cfa_offset 6
 2007               		.cfi_offset 11, -5
 2008 0008 CF92      		push r12
 2009               	.LCFI57:
 2010               		.cfi_def_cfa_offset 7
 2011               		.cfi_offset 12, -6
 2012 000a DF92      		push r13
 2013               	.LCFI58:
 2014               		.cfi_def_cfa_offset 8
 2015               		.cfi_offset 13, -7
 2016 000c EF92      		push r14
 2017               	.LCFI59:
 2018               		.cfi_def_cfa_offset 9
 2019               		.cfi_offset 14, -8
 2020 000e FF92      		push r15
 2021               	.LCFI60:
 2022               		.cfi_def_cfa_offset 10
 2023               		.cfi_offset 15, -9
 2024 0010 0F93      		push r16
 2025               	.LCFI61:
 2026               		.cfi_def_cfa_offset 11
 2027               		.cfi_offset 16, -10
 2028 0012 1F93      		push r17
 2029               	.LCFI62:
 2030               		.cfi_def_cfa_offset 12
 2031               		.cfi_offset 17, -11
 2032 0014 CF93      		push r28
 2033               	.LCFI63:
 2034               		.cfi_def_cfa_offset 13
 2035               		.cfi_offset 28, -12
 2036 0016 DF93      		push r29
 2037               	.LCFI64:
 2038               		.cfi_def_cfa_offset 14
 2039               		.cfi_offset 29, -13
 2040               	/* prologue: function */
 2041               	/* frame size = 0 */
 2042               	/* stack size = 12 */
 2043               	.L__stack_usage = 12
 2044 0018 EC01      		movw r28,r24
 2045 001a 6B01      		movw r12,r22
 2046 001c 5A01      		movw r10,r20
 2047 001e 4901      		movw r8,r18
 2048               	.LVL129:
 2049               	.LBB324:
 2050               	.LBB325:
 2051               	.LBB326:
 2052               	.LBB327:
 430:../../../os/common/ports/AVR/chcore.h **** }
 2053               		.loc 3 430 0
 2054               	/* #APP */
 2055               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 2056 0020 F894      		cli
 2057               	 ;  0 "" 2
 2058               	/* #NOAPP */
 2059               	.LBE327:
 2060               	.LBE326:
 2061               	.LBE325:
 2062               	.LBE324:
 716:../../../os/hal/src/hal_buffers.c ****   size_t w = 0;
 2063               		.loc 1 716 0
 2064 0022 E12C      		mov r14,__zero_reg__
 2065 0024 F12C      		mov r15,__zero_reg__
 2066 0026 00C0      		rjmp .L106
 2067               	.LVL130:
 2068               	.L111:
 2069               	.LBB328:
 717:../../../os/hal/src/hal_buffers.c **** 
 718:../../../os/hal/src/hal_buffers.c ****   osalDbgCheck(n > 0U);
 719:../../../os/hal/src/hal_buffers.c **** 
 720:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 721:../../../os/hal/src/hal_buffers.c **** 
 722:../../../os/hal/src/hal_buffers.c ****   while (true) {
 723:../../../os/hal/src/hal_buffers.c ****     size_t size;
 724:../../../os/hal/src/hal_buffers.c **** 
 725:../../../os/hal/src/hal_buffers.c ****     /* This condition indicates that a new buffer must be acquired.*/
 726:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr == NULL) {
 727:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 728:../../../os/hal/src/hal_buffers.c **** 
 729:../../../os/hal/src/hal_buffers.c ****       /* Getting an empty buffer using the specified timeout.*/
 730:../../../os/hal/src/hal_buffers.c ****       msg = obqGetEmptyBufferTimeoutS(obqp, timeout);
 731:../../../os/hal/src/hal_buffers.c **** 
 732:../../../os/hal/src/hal_buffers.c ****       /* Anything except MSG_OK interrupts the operation.*/
 733:../../../os/hal/src/hal_buffers.c ****       if (msg != MSG_OK) {
 734:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 735:../../../os/hal/src/hal_buffers.c ****         return w;
 736:../../../os/hal/src/hal_buffers.c ****       }
 737:../../../os/hal/src/hal_buffers.c ****     }
 738:../../../os/hal/src/hal_buffers.c **** 
 739:../../../os/hal/src/hal_buffers.c ****     /* Size of the space available in the current buffer.*/
 740:../../../os/hal/src/hal_buffers.c ****     size = (size_t)obqp->top - (size_t)obqp->ptr;
 741:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 742:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 743:../../../os/hal/src/hal_buffers.c ****     }
 744:../../../os/hal/src/hal_buffers.c **** 
 745:../../../os/hal/src/hal_buffers.c ****     /* Smaller chunks in order to not make the critical zone too long,
 746:../../../os/hal/src/hal_buffers.c ****        this impacts throughput however.*/
 747:../../../os/hal/src/hal_buffers.c ****     if (size > (size_t)BUFFERS_CHUNKS_SIZE) {
 748:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 749:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, (size_t)BUFFERS_CHUNKS_SIZE);
 2070               		.loc 1 749 0
 2071 0028 20E4      		ldi r18,lo8(64)
 2072 002a F601      		movw r30,r12
 2073 002c DC01      		movw r26,r24
 2074               		0:
 2075 002e 0190      		ld r0,Z+
 2076 0030 0D92      		st X+,r0
 2077 0032 2A95      		dec r18
 2078 0034 01F4      		brne 0b
 750:../../../os/hal/src/hal_buffers.c ****       bp        += (size_t)BUFFERS_CHUNKS_SIZE;
 2079               		.loc 1 750 0
 2080 0036 20E4      		ldi r18,64
 2081 0038 C20E      		add r12,r18
 2082 003a D11C      		adc r13,__zero_reg__
 2083               	.LVL131:
 751:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += (size_t)BUFFERS_CHUNKS_SIZE;
 2084               		.loc 1 751 0
 2085 003c 8B89      		ldd r24,Y+19
 2086 003e 9C89      		ldd r25,Y+20
 2087 0040 805C      		subi r24,-64
 2088 0042 9F4F      		sbci r25,-1
 2089 0044 9C8B      		std Y+20,r25
 2090 0046 8B8B      		std Y+19,r24
 752:../../../os/hal/src/hal_buffers.c ****       w         += (size_t)BUFFERS_CHUNKS_SIZE;
 2091               		.loc 1 752 0
 2092 0048 20E4      		ldi r18,64
 2093 004a E20E      		add r14,r18
 2094 004c F11C      		adc r15,__zero_reg__
 2095               	.LVL132:
 2096               	.L101:
 753:../../../os/hal/src/hal_buffers.c ****     }
 754:../../../os/hal/src/hal_buffers.c ****     else {
 755:../../../os/hal/src/hal_buffers.c ****       memcpy(obqp->ptr, bp, size);
 756:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 757:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 758:../../../os/hal/src/hal_buffers.c ****       w         += size;
 759:../../../os/hal/src/hal_buffers.c ****     }
 760:../../../os/hal/src/hal_buffers.c **** 
 761:../../../os/hal/src/hal_buffers.c ****     /* Has the current data buffer been finished? if so then release it.*/
 762:../../../os/hal/src/hal_buffers.c ****     if (obqp->ptr >= obqp->top) {
 2097               		.loc 1 762 0
 2098 004e 2D89      		ldd r18,Y+21
 2099 0050 3E89      		ldd r19,Y+22
 2100 0052 8217      		cp r24,r18
 2101 0054 9307      		cpc r25,r19
 2102 0056 00F0      		brlo .L103
 2103               	.LVL133:
 2104               	.LBB329:
 2105               	.LBB330:
 628:../../../os/hal/src/hal_buffers.c **** 
 2106               		.loc 1 628 0
 2107 0058 EF81      		ldd r30,Y+7
 2108 005a F885      		ldd r31,Y+8
 2109 005c 2D85      		ldd r18,Y+13
 2110 005e 3E85      		ldd r19,Y+14
 2111 0060 2250      		subi r18,2
 2112 0062 3109      		sbc r19,__zero_reg__
 2113               	.LVL134:
 2114 0064 3183      		std Z+1,r19
 2115 0066 2083      		st Z,r18
 631:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2116               		.loc 1 631 0
 2117 0068 2D81      		ldd r18,Y+5
 2118 006a 3E81      		ldd r19,Y+6
 2119               	.LVL135:
 2120 006c 2150      		subi r18,1
 2121 006e 3109      		sbc r19,__zero_reg__
 2122 0070 3E83      		std Y+6,r19
 2123 0072 2D83      		std Y+5,r18
 2124               	.LVL136:
 632:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2125               		.loc 1 632 0
 2126 0074 8D85      		ldd r24,Y+13
 2127 0076 9E85      		ldd r25,Y+14
 2128 0078 8E0F      		add r24,r30
 2129 007a 9F1F      		adc r25,r31
 2130 007c 9887      		std Y+8,r25
 2131 007e 8F83      		std Y+7,r24
 633:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2132               		.loc 1 633 0
 2133 0080 2B85      		ldd r18,Y+11
 2134 0082 3C85      		ldd r19,Y+12
 2135 0084 8217      		cp r24,r18
 2136 0086 9307      		cpc r25,r19
 2137 0088 00F0      		brlo .L104
 634:../../../os/hal/src/hal_buffers.c ****   }
 2138               		.loc 1 634 0
 2139 008a 8989      		ldd r24,Y+17
 2140 008c 9A89      		ldd r25,Y+18
 2141 008e 9887      		std Y+8,r25
 2142 0090 8F83      		std Y+7,r24
 2143               	.L104:
 638:../../../os/hal/src/hal_buffers.c **** 
 2144               		.loc 1 638 0
 2145 0092 1C8A      		std Y+20,__zero_reg__
 2146 0094 1B8A      		std Y+19,__zero_reg__
 641:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2147               		.loc 1 641 0
 2148 0096 EF89      		ldd r30,Y+23
 2149 0098 F88D      		ldd r31,Y+24
 2150 009a 3097      		sbiw r30,0
 2151 009c 01F0      		breq .L103
 642:../../../os/hal/src/hal_buffers.c ****   }
 2152               		.loc 1 642 0
 2153 009e CE01      		movw r24,r28
 2154 00a0 0995      		icall
 2155               	.LVL137:
 2156               	.L103:
 2157               	.LBE330:
 2158               	.LBE329:
 2159               	.LBB331:
 2160               	.LBB332:
 2161               	.LBB333:
 2162               	.LBB334:
 2163               	.LBB335:
 2164               		.loc 3 440 0
 2165               	/* #APP */
 2166               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2167 00a2 7894      		sei
 2168               	 ;  0 "" 2
 2169               	/* #NOAPP */
 2170               	.LBE335:
 2171               	.LBE334:
 2172               	.LBE333:
 2173               	.LBE332:
 2174               	.LBE331:
 763:../../../os/hal/src/hal_buffers.c ****       obqPostFullBufferS(obqp, obqp->bsize - sizeof (size_t));
 764:../../../os/hal/src/hal_buffers.c ****     }
 765:../../../os/hal/src/hal_buffers.c **** 
 766:../../../os/hal/src/hal_buffers.c ****     /* Giving a preemption chance.*/
 767:../../../os/hal/src/hal_buffers.c ****     osalSysUnlock();
 768:../../../os/hal/src/hal_buffers.c ****     if (w >= n) {
 2175               		.loc 1 768 0
 2176 00a4 EA14      		cp r14,r10
 2177 00a6 FB04      		cpc r15,r11
 2178 00a8 00F4      		brsh .L98
 2179               	.LBB336:
 2180               	.LBB337:
 2181               	.LBB338:
 2182               	.LBB339:
 430:../../../os/common/ports/AVR/chcore.h **** }
 2183               		.loc 3 430 0
 2184               	/* #APP */
 2185               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 2186 00aa F894      		cli
 2187               	 ;  0 "" 2
 2188               	.LVL138:
 2189               	/* #NOAPP */
 2190               	.L106:
 2191               	.LBE339:
 2192               	.LBE338:
 2193               	.LBE337:
 2194               	.LBE336:
 726:../../../os/hal/src/hal_buffers.c ****       msg_t msg;
 2195               		.loc 1 726 0
 2196 00ac 8B89      		ldd r24,Y+19
 2197 00ae 9C89      		ldd r25,Y+20
 2198 00b0 0097      		sbiw r24,0
 2199 00b2 01F0      		breq .L110
 2200               	.L96:
 740:../../../os/hal/src/hal_buffers.c ****     if (size > (n - w)) {
 2201               		.loc 1 740 0
 2202 00b4 0D89      		ldd r16,Y+21
 2203 00b6 1E89      		ldd r17,Y+22
 2204               	.LVL139:
 741:../../../os/hal/src/hal_buffers.c ****       size = n - w;
 2205               		.loc 1 741 0
 2206 00b8 9501      		movw r18,r10
 2207 00ba 2E19      		sub r18,r14
 2208 00bc 3F09      		sbc r19,r15
 2209 00be 081B      		sub r16,r24
 2210 00c0 190B      		sbc r17,r25
 2211               	.LVL140:
 2212 00c2 2017      		cp r18,r16
 2213 00c4 3107      		cpc r19,r17
 2214 00c6 00F4      		brsh .L99
 2215 00c8 8901      		movw r16,r18
 2216               	.LVL141:
 2217               	.L99:
 747:../../../os/hal/src/hal_buffers.c ****       /* Giving the compiler a chance to optimize for a fixed size move.*/
 2218               		.loc 1 747 0
 2219 00ca 0134      		cpi r16,65
 2220 00cc 1105      		cpc r17,__zero_reg__
 2221 00ce 00F0      		brlo .+2
 2222 00d0 00C0      		rjmp .L111
 755:../../../os/hal/src/hal_buffers.c ****       bp        += size;
 2223               		.loc 1 755 0
 2224 00d2 A801      		movw r20,r16
 2225 00d4 B601      		movw r22,r12
 2226 00d6 0E94 0000 		call memcpy
 2227               	.LVL142:
 756:../../../os/hal/src/hal_buffers.c ****       obqp->ptr += size;
 2228               		.loc 1 756 0
 2229 00da C00E      		add r12,r16
 2230 00dc D11E      		adc r13,r17
 2231               	.LVL143:
 757:../../../os/hal/src/hal_buffers.c ****       w         += size;
 2232               		.loc 1 757 0
 2233 00de 8B89      		ldd r24,Y+19
 2234 00e0 9C89      		ldd r25,Y+20
 2235 00e2 800F      		add r24,r16
 2236 00e4 911F      		adc r25,r17
 2237 00e6 9C8B      		std Y+20,r25
 2238 00e8 8B8B      		std Y+19,r24
 758:../../../os/hal/src/hal_buffers.c ****     }
 2239               		.loc 1 758 0
 2240 00ea E00E      		add r14,r16
 2241 00ec F11E      		adc r15,r17
 2242               	.LVL144:
 2243 00ee 00C0      		rjmp .L101
 2244               	.LVL145:
 2245               	.L110:
 2246               	.LBB340:
 730:../../../os/hal/src/hal_buffers.c **** 
 2247               		.loc 1 730 0
 2248 00f0 B401      		movw r22,r8
 2249 00f2 CE01      		movw r24,r28
 2250 00f4 0E94 0000 		call obqGetEmptyBufferTimeoutS
 2251               	.LVL146:
 733:../../../os/hal/src/hal_buffers.c ****         osalSysUnlock();
 2252               		.loc 1 733 0
 2253 00f8 892B      		or r24,r25
 2254 00fa 01F4      		brne .L97
 2255 00fc 8B89      		ldd r24,Y+19
 2256 00fe 9C89      		ldd r25,Y+20
 2257               	.LVL147:
 2258 0100 00C0      		rjmp .L96
 2259               	.LVL148:
 2260               	.L97:
 2261               	.LBB341:
 2262               	.LBB342:
 2263               	.LBB343:
 2264               	.LBB344:
 2265               	.LBB345:
 2266               		.loc 3 440 0
 2267               	/* #APP */
 2268               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2269 0102 7894      		sei
 2270               	 ;  0 "" 2
 2271               	.LVL149:
 2272               	/* #NOAPP */
 2273               	.L98:
 2274               	.LBE345:
 2275               	.LBE344:
 2276               	.LBE343:
 2277               	.LBE342:
 2278               	.LBE341:
 2279               	.LBE340:
 2280               	.LBE328:
 769:../../../os/hal/src/hal_buffers.c ****       return w;
 770:../../../os/hal/src/hal_buffers.c ****     }
 771:../../../os/hal/src/hal_buffers.c ****     osalSysLock();
 772:../../../os/hal/src/hal_buffers.c ****   }
 773:../../../os/hal/src/hal_buffers.c **** }
 2281               		.loc 1 773 0
 2282 0104 C701      		movw r24,r14
 2283               	/* epilogue start */
 2284 0106 DF91      		pop r29
 2285 0108 CF91      		pop r28
 2286               	.LVL150:
 2287 010a 1F91      		pop r17
 2288 010c 0F91      		pop r16
 2289 010e FF90      		pop r15
 2290 0110 EF90      		pop r14
 2291               	.LVL151:
 2292 0112 DF90      		pop r13
 2293 0114 CF90      		pop r12
 2294               	.LVL152:
 2295 0116 BF90      		pop r11
 2296 0118 AF90      		pop r10
 2297               	.LVL153:
 2298 011a 9F90      		pop r9
 2299 011c 8F90      		pop r8
 2300               	.LVL154:
 2301 011e 0895      		ret
 2302               		.cfi_endproc
 2303               	.LFE260:
 2305               		.section	.text.obqTryFlushI,"ax",@progbits
 2306               	.global	obqTryFlushI
 2308               	obqTryFlushI:
 2309               	.LFB261:
 774:../../../os/hal/src/hal_buffers.c **** 
 775:../../../os/hal/src/hal_buffers.c **** /**
 776:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 777:../../../os/hal/src/hal_buffers.c ****  * @note    The notification callback is not invoked because the function
 778:../../../os/hal/src/hal_buffers.c ****  *          is meant to be called from ISR context. An operation status is
 779:../../../os/hal/src/hal_buffers.c ****  *          returned instead.
 780:../../../os/hal/src/hal_buffers.c ****  *
 781:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 782:../../../os/hal/src/hal_buffers.c ****  * @return              The operation status.
 783:../../../os/hal/src/hal_buffers.c ****  * @retval false        if no new filled buffer has been posted to the queue.
 784:../../../os/hal/src/hal_buffers.c ****  * @retval true         if a new filled buffer has been posted to the queue.
 785:../../../os/hal/src/hal_buffers.c ****  *
 786:../../../os/hal/src/hal_buffers.c ****  * @iclass
 787:../../../os/hal/src/hal_buffers.c ****  */
 788:../../../os/hal/src/hal_buffers.c **** bool obqTryFlushI(output_buffers_queue_t *obqp) {
 2310               		.loc 1 788 0
 2311               		.cfi_startproc
 2312               	.LVL155:
 2313               	/* prologue: function */
 2314               	/* frame size = 0 */
 2315               	/* stack size = 0 */
 2316               	.L__stack_usage = 0
 2317 0000 FC01      		movw r30,r24
 789:../../../os/hal/src/hal_buffers.c **** 
 790:../../../os/hal/src/hal_buffers.c ****   osalDbgCheckClassI();
 791:../../../os/hal/src/hal_buffers.c **** 
 792:../../../os/hal/src/hal_buffers.c ****   /* If queue is empty and there is a buffer partially filled and
 793:../../../os/hal/src/hal_buffers.c ****      it is not being written.*/
 794:../../../os/hal/src/hal_buffers.c ****   if (obqIsEmptyI(obqp) && (obqp->ptr != NULL)) {
 2318               		.loc 1 794 0
 2319 0002 A781      		ldd r26,Z+7
 2320 0004 B085      		ldd r27,Z+8
 2321 0006 8185      		ldd r24,Z+9
 2322 0008 9285      		ldd r25,Z+10
 2323               	.LVL156:
 2324 000a A817      		cp r26,r24
 2325 000c B907      		cpc r27,r25
 2326 000e 01F0      		breq .L121
 2327               	.L120:
 795:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 796:../../../os/hal/src/hal_buffers.c **** 
 797:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 798:../../../os/hal/src/hal_buffers.c **** 
 799:../../../os/hal/src/hal_buffers.c ****       /* Writing size field in the buffer.*/
 800:../../../os/hal/src/hal_buffers.c ****       *((size_t *)(void *)obqp->bwrptr) = size;
 801:../../../os/hal/src/hal_buffers.c **** 
 802:../../../os/hal/src/hal_buffers.c ****       /* Posting the buffer in the queue.*/
 803:../../../os/hal/src/hal_buffers.c ****       obqp->bcounter--;
 804:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 805:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 806:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 807:../../../os/hal/src/hal_buffers.c ****       }
 808:../../../os/hal/src/hal_buffers.c **** 
 809:../../../os/hal/src/hal_buffers.c ****       /* No "current" buffer.*/
 810:../../../os/hal/src/hal_buffers.c ****       obqp->ptr = NULL;
 811:../../../os/hal/src/hal_buffers.c **** 
 812:../../../os/hal/src/hal_buffers.c ****       return true;
 813:../../../os/hal/src/hal_buffers.c ****     }
 814:../../../os/hal/src/hal_buffers.c ****   }
 815:../../../os/hal/src/hal_buffers.c ****   return false;
 2328               		.loc 1 815 0
 2329 0010 80E0      		ldi r24,0
 816:../../../os/hal/src/hal_buffers.c **** }
 2330               		.loc 1 816 0
 2331 0012 0895      		ret
 2332               	.L121:
 794:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2333               		.loc 1 794 0 discriminator 1
 2334 0014 8581      		ldd r24,Z+5
 2335 0016 9681      		ldd r25,Z+6
 2336 0018 892B      		or r24,r25
 2337 001a 01F0      		breq .L120
 794:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2338               		.loc 1 794 0 is_stmt 0
 2339 001c 8389      		ldd r24,Z+19
 2340 001e 9489      		ldd r25,Z+20
 2341 0020 0097      		sbiw r24,0
 2342 0022 01F0      		breq .L120
 2343               	.LBB346:
 795:../../../os/hal/src/hal_buffers.c ****     size_t size = (size_t)obqp->ptr - ((size_t)obqp->bwrptr + sizeof (size_t));
 2344               		.loc 1 795 0 is_stmt 1
 2345 0024 0297      		sbiw r24,2
 2346 0026 8A1B      		sub r24,r26
 2347 0028 9B0B      		sbc r25,r27
 2348               	.LVL157:
 797:../../../os/hal/src/hal_buffers.c **** 
 2349               		.loc 1 797 0
 2350 002a 01F0      		breq .L120
 800:../../../os/hal/src/hal_buffers.c **** 
 2351               		.loc 1 800 0
 2352 002c 1196      		adiw r26,1
 2353 002e 9C93      		st X,r25
 2354 0030 8E93      		st -X,r24
 803:../../../os/hal/src/hal_buffers.c ****       obqp->bwrptr += obqp->bsize;
 2355               		.loc 1 803 0
 2356 0032 8581      		ldd r24,Z+5
 2357 0034 9681      		ldd r25,Z+6
 2358               	.LVL158:
 2359 0036 0197      		sbiw r24,1
 2360 0038 9683      		std Z+6,r25
 2361 003a 8583      		std Z+5,r24
 2362               	.LVL159:
 804:../../../os/hal/src/hal_buffers.c ****       if (obqp->bwrptr >= obqp->btop) {
 2363               		.loc 1 804 0
 2364 003c 8585      		ldd r24,Z+13
 2365 003e 9685      		ldd r25,Z+14
 2366 0040 A80F      		add r26,r24
 2367 0042 B91F      		adc r27,r25
 2368               	.LVL160:
 2369 0044 B087      		std Z+8,r27
 2370 0046 A783      		std Z+7,r26
 2371               	.LVL161:
 805:../../../os/hal/src/hal_buffers.c ****         obqp->bwrptr = obqp->buffers;
 2372               		.loc 1 805 0
 2373 0048 8385      		ldd r24,Z+11
 2374 004a 9485      		ldd r25,Z+12
 2375 004c A817      		cp r26,r24
 2376 004e B907      		cpc r27,r25
 2377 0050 00F0      		brlo .L115
 806:../../../os/hal/src/hal_buffers.c ****       }
 2378               		.loc 1 806 0
 2379 0052 8189      		ldd r24,Z+17
 2380 0054 9289      		ldd r25,Z+18
 2381 0056 9087      		std Z+8,r25
 2382 0058 8783      		std Z+7,r24
 2383               	.L115:
 810:../../../os/hal/src/hal_buffers.c **** 
 2384               		.loc 1 810 0
 2385 005a 148A      		std Z+20,__zero_reg__
 2386 005c 138A      		std Z+19,__zero_reg__
 812:../../../os/hal/src/hal_buffers.c ****     }
 2387               		.loc 1 812 0
 2388 005e 81E0      		ldi r24,lo8(1)
 2389 0060 0895      		ret
 2390               	.LBE346:
 2391               		.cfi_endproc
 2392               	.LFE261:
 2394               		.section	.text.obqFlush,"ax",@progbits
 2395               	.global	obqFlush
 2397               	obqFlush:
 2398               	.LFB262:
 817:../../../os/hal/src/hal_buffers.c **** 
 818:../../../os/hal/src/hal_buffers.c **** /**
 819:../../../os/hal/src/hal_buffers.c ****  * @brief   Flushes the current, partially filled, buffer to the queue.
 820:../../../os/hal/src/hal_buffers.c ****  *
 821:../../../os/hal/src/hal_buffers.c ****  * @param[in] obqp      pointer to the @p output_buffers_queue_t object
 822:../../../os/hal/src/hal_buffers.c ****  *
 823:../../../os/hal/src/hal_buffers.c ****  * @api
 824:../../../os/hal/src/hal_buffers.c ****  */
 825:../../../os/hal/src/hal_buffers.c **** void obqFlush(output_buffers_queue_t *obqp) {
 2399               		.loc 1 825 0
 2400               		.cfi_startproc
 2401               	.LVL162:
 2402               	/* prologue: function */
 2403               	/* frame size = 0 */
 2404               	/* stack size = 0 */
 2405               	.L__stack_usage = 0
 2406 0000 DC01      		movw r26,r24
 2407               	.LBB347:
 2408               	.LBB348:
 2409               	.LBB349:
 2410               	.LBB350:
 430:../../../os/common/ports/AVR/chcore.h **** }
 2411               		.loc 3 430 0
 2412               	/* #APP */
 2413               	 ;  430 "../../../os/common/ports/AVR/chcore.h" 1
 2414 0002 F894      		cli
 2415               	 ;  0 "" 2
 2416               	/* #NOAPP */
 2417               	.LBE350:
 2418               	.LBE349:
 2419               	.LBE348:
 2420               	.LBE347:
 826:../../../os/hal/src/hal_buffers.c **** 
 827:../../../os/hal/src/hal_buffers.c ****   osalSysLock();
 828:../../../os/hal/src/hal_buffers.c **** 
 829:../../../os/hal/src/hal_buffers.c ****   /* If there is a buffer partially filled and not being written.*/
 830:../../../os/hal/src/hal_buffers.c ****   if (obqp->ptr != NULL) {
 2421               		.loc 1 830 0
 2422 0004 5396      		adiw r26,19
 2423 0006 8D91      		ld r24,X+
 2424 0008 9C91      		ld r25,X
 2425 000a 5497      		sbiw r26,19+1
 2426               	.LVL163:
 2427 000c 0097      		sbiw r24,0
 2428 000e 01F0      		breq .L124
 2429               	.LBB351:
 831:../../../os/hal/src/hal_buffers.c ****     size_t size = ((size_t)obqp->ptr - (size_t)obqp->bwrptr) - sizeof (size_t);
 2430               		.loc 1 831 0
 2431 0010 1796      		adiw r26,7
 2432 0012 ED91      		ld r30,X+
 2433 0014 FC91      		ld r31,X
 2434 0016 1897      		sbiw r26,7+1
 2435 0018 0297      		sbiw r24,2
 2436 001a 8E1B      		sub r24,r30
 2437 001c 9F0B      		sbc r25,r31
 2438               	.LVL164:
 832:../../../os/hal/src/hal_buffers.c **** 
 833:../../../os/hal/src/hal_buffers.c ****     if (size > 0U) {
 2439               		.loc 1 833 0
 2440 001e 01F0      		breq .L124
 2441               	.LVL165:
 2442               	.LBB352:
 2443               	.LBB353:
 628:../../../os/hal/src/hal_buffers.c **** 
 2444               		.loc 1 628 0
 2445 0020 9183      		std Z+1,r25
 2446 0022 8083      		st Z,r24
 631:../../../os/hal/src/hal_buffers.c ****   obqp->bwrptr += obqp->bsize;
 2447               		.loc 1 631 0
 2448 0024 1596      		adiw r26,5
 2449 0026 8D91      		ld r24,X+
 2450 0028 9C91      		ld r25,X
 2451 002a 1697      		sbiw r26,5+1
 2452               	.LVL166:
 2453 002c 0197      		sbiw r24,1
 2454 002e 1696      		adiw r26,5+1
 2455 0030 9C93      		st X,r25
 2456 0032 8E93      		st -X,r24
 2457 0034 1597      		sbiw r26,5
 2458               	.LVL167:
 632:../../../os/hal/src/hal_buffers.c ****   if (obqp->bwrptr >= obqp->btop) {
 2459               		.loc 1 632 0
 2460 0036 1D96      		adiw r26,13
 2461 0038 8D91      		ld r24,X+
 2462 003a 9C91      		ld r25,X
 2463 003c 1E97      		sbiw r26,13+1
 2464 003e E80F      		add r30,r24
 2465 0040 F91F      		adc r31,r25
 2466               	.LVL168:
 2467 0042 1896      		adiw r26,7+1
 2468 0044 FC93      		st X,r31
 2469 0046 EE93      		st -X,r30
 2470 0048 1797      		sbiw r26,7
 2471               	.LVL169:
 633:../../../os/hal/src/hal_buffers.c ****     obqp->bwrptr = obqp->buffers;
 2472               		.loc 1 633 0
 2473 004a 1B96      		adiw r26,11
 2474 004c 8D91      		ld r24,X+
 2475 004e 9C91      		ld r25,X
 2476 0050 1C97      		sbiw r26,11+1
 2477 0052 E817      		cp r30,r24
 2478 0054 F907      		cpc r31,r25
 2479 0056 00F0      		brlo .L126
 634:../../../os/hal/src/hal_buffers.c ****   }
 2480               		.loc 1 634 0
 2481 0058 5196      		adiw r26,17
 2482 005a 8D91      		ld r24,X+
 2483 005c 9C91      		ld r25,X
 2484 005e 5297      		sbiw r26,17+1
 2485 0060 1896      		adiw r26,7+1
 2486 0062 9C93      		st X,r25
 2487 0064 8E93      		st -X,r24
 2488 0066 1797      		sbiw r26,7
 2489               	.L126:
 638:../../../os/hal/src/hal_buffers.c **** 
 2490               		.loc 1 638 0
 2491 0068 5496      		adiw r26,19+1
 2492 006a 1C92      		st X,__zero_reg__
 2493 006c 1E92      		st -X,__zero_reg__
 2494 006e 5397      		sbiw r26,19
 641:../../../os/hal/src/hal_buffers.c ****     obqp->notify(obqp);
 2495               		.loc 1 641 0
 2496 0070 5796      		adiw r26,23
 2497 0072 ED91      		ld r30,X+
 2498 0074 FC91      		ld r31,X
 2499 0076 5897      		sbiw r26,23+1
 2500 0078 3097      		sbiw r30,0
 2501 007a 01F0      		breq .L124
 2502 007c CD01      		movw r24,r26
 642:../../../os/hal/src/hal_buffers.c ****   }
 2503               		.loc 1 642 0
 2504 007e 0995      		icall
 2505               	.LVL170:
 2506               	.L124:
 2507               	.LBE353:
 2508               	.LBE352:
 2509               	.LBE351:
 2510               	.LBB354:
 2511               	.LBB355:
 2512               	.LBB356:
 2513               	.LBB357:
 2514               	.LBB358:
 2515               		.loc 3 440 0
 2516               	/* #APP */
 2517               	 ;  440 "../../../os/common/ports/AVR/chcore.h" 1
 2518 0080 7894      		sei
 2519               	 ;  0 "" 2
 2520               	/* #NOAPP */
 2521 0082 0895      		ret
 2522               	.LBE358:
 2523               	.LBE357:
 2524               	.LBE356:
 2525               	.LBE355:
 2526               	.LBE354:
 2527               		.cfi_endproc
 2528               	.LFE262:
 2530               		.text
 2531               	.Letext0:
 2532               		.file 4 "/usr/lib/gcc/avr/5.4.0/include/stddef.h"
 2533               		.file 5 "/usr/lib/avr/include/stdint.h"
 2534               		.file 6 "../../../os/common/ports/AVR/compilers/GCC/chtypes.h"
 2535               		.file 7 "../../../os/rt/include/chearly.h"
 2536               		.file 8 "../../../os/rt/include/chobjects.h"
 2537               		.file 9 "../../../os/rt/include/chrfcu.h"
 2538               		.file 10 "../../../os/rt/include/chdebug.h"
 2539               		.file 11 "../../../os/rt/include/chtime.h"
 2540               		.file 12 "../../../os/rt/include/chlists.h"
 2541               		.file 13 "../../../os/rt/include/chsem.h"
 2542               		.file 14 "../../../os/rt/include/chmtx.h"
 2543               		.file 15 "../../../os/hal/include/hal_buffers.h"
 2544               		.file 16 "../../../os/rt/include/chsys.h"
 2545               		.file 17 "../../../os/rt/include/chthreads.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hal_buffers.c
     /tmp/cctox46E.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/cctox46E.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/cctox46E.s:4      *ABS*:000000000000003f __SREG__
     /tmp/cctox46E.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/cctox46E.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/cctox46E.s:13     .text.ibqObjectInit:0000000000000000 ibqObjectInit
     /tmp/cctox46E.s:165    .text.ibqResetI:0000000000000000 ibqResetI
     /tmp/cctox46E.s:210    .text.ibqGetEmptyBufferI:0000000000000000 ibqGetEmptyBufferI
     /tmp/cctox46E.s:251    .text.ibqPostFullBufferI:0000000000000000 ibqPostFullBufferI
     /tmp/cctox46E.s:312    .text.ibqGetFullBufferTimeoutS:0000000000000000 ibqGetFullBufferTimeoutS
     /tmp/cctox46E.s:423    .text.ibqGetFullBufferTimeout:0000000000000000 ibqGetFullBufferTimeout
     /tmp/cctox46E.s:474    .text.ibqReleaseEmptyBuffer:0000000000000000 ibqReleaseEmptyBuffer
     /tmp/cctox46E.s:587    .text.ibqReleaseEmptyBufferS:0000000000000000 ibqReleaseEmptyBufferS
     /tmp/cctox46E.s:665    .text.ibqGetTimeout:0000000000000000 ibqGetTimeout
     /tmp/cctox46E.s:834    .text.ibqReadTimeout:0000000000000000 ibqReadTimeout
     /tmp/cctox46E.s:1143   .text.obqObjectInit:0000000000000000 obqObjectInit
     /tmp/cctox46E.s:1293   .text.obqResetI:0000000000000000 obqResetI
     /tmp/cctox46E.s:1340   .text.obqGetFullBufferI:0000000000000000 obqGetFullBufferI
     /tmp/cctox46E.s:1394   .text.obqReleaseEmptyBufferI:0000000000000000 obqReleaseEmptyBufferI
     /tmp/cctox46E.s:1449   .text.obqGetEmptyBufferTimeoutS:0000000000000000 obqGetEmptyBufferTimeoutS
     /tmp/cctox46E.s:1559   .text.obqGetEmptyBufferTimeout:0000000000000000 obqGetEmptyBufferTimeout
     /tmp/cctox46E.s:1609   .text.obqPostFullBuffer:0000000000000000 obqPostFullBuffer
     /tmp/cctox46E.s:1726   .text.obqPostFullBufferS:0000000000000000 obqPostFullBufferS
     /tmp/cctox46E.s:1808   .text.obqPutTimeout:0000000000000000 obqPutTimeout
     /tmp/cctox46E.s:1987   .text.obqWriteTimeout:0000000000000000 obqWriteTimeout
     /tmp/cctox46E.s:2308   .text.obqTryFlushI:0000000000000000 obqTryFlushI
     /tmp/cctox46E.s:2397   .text.obqFlush:0000000000000000 obqFlush

UNDEFINED SYMBOLS
chThdQueueObjectInit
chThdDequeueAllI
chThdDequeueNextI
chThdEnqueueTimeoutS
memcpy
